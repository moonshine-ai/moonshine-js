(function(){"use strict";var _documentCurrentScript="undefined"!=typeof document?document.currentScript:null,__assign=function(){return __assign=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var d in r=arguments[e])Object.prototype.hasOwnProperty.call(r,d)&&(t[d]=r[d]);return t},__assign.apply(this,arguments)};function __awaiter(t,r,e,n){return new(e||(e=Promise))((function(r,d){function o(t){try{l(n.next(t))}catch(t){d(t)}}function a(t){try{l(n.throw(t))}catch(t){d(t)}}function l(t){var n;t.done?r(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,a)}l((n=n.apply(t,[])).next())}))}function __generator(t,r){var e,n,d,o={label:0,sent:function(){if(1&d[0])throw d[1];return d[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=l(0),a.throw=l(1),a.return=l(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(i){return function(l){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(o=0)),o;)try{if(e=1,n&&(d=2&l[0]?n.return:l[0]?n.throw||((d=n.return)&&d.call(n),0):n.next)&&!(d=d.call(n,l[1])).done)return d;switch(n=0,d&&(l=[2&l[0],d.value]),l[0]){case 0:case 1:d=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,n=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!((d=(d=o.trys).length>0&&d[d.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!d||l[1]>d[0]&&l[1]<d[3])){o.label=l[1];break}if(6===l[0]&&o.label<d[1]){o.label=d[1],d=l;break}if(d&&o.label<d[2]){o.label=d[2],o.ops.push(l);break}d[2]&&o.ops.pop(),o.trys.pop();continue}l=r.call(t,o)}catch(t){l=[6,t],n=0}finally{e=d=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,i])}}}"function"==typeof SuppressedError&&SuppressedError;
/*!
   * ONNX Runtime Web v1.20.1
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   */
var Hd=Object.create,an=Object.defineProperty,qd=Object.getOwnPropertyDescriptor,jd=Object.getOwnPropertyNames,Xd=Object.getPrototypeOf,Kd=Object.prototype.hasOwnProperty,Co=(i=function(t){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')},typeof require<"u"?require:typeof Proxy<"u"?new Proxy(i,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):i),i,O=(t,r)=>()=>(t&&(r=t(t=0)),r),mt=(t,r)=>()=>(r||t((r={exports:{}}).exports,r),r.exports),Or=(t,r)=>{for(var e in r)an(t,e,{get:r[e],enumerable:!0})},Qa=(t,r,e,n)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let d of jd(r))!Kd.call(t,d)&&d!==e&&an(t,d,{get:()=>r[d],enumerable:!(n=qd(r,d))||n.enumerable});return t},rr=(t,r,e)=>(e=null!=t?Hd(Xd(t)):{},Qa(t&&t.__esModule?e:an(e,"default",{value:t,enumerable:!0}),t)),sn=t=>Qa(an({},"__esModule",{value:!0}),t),un,ke,nr,Jd,ln,fn=O((()=>{un=new Map,ke=[],nr=(t,r,e)=>{if(!r||"function"!=typeof r.init||"function"!=typeof r.createInferenceSessionHandler)throw new TypeError("not a valid backend");{let n=un.get(t);if(void 0===n)un.set(t,{backend:r,priority:e});else{if(n.priority>e)return;if(n.priority===e&&n.backend!==r)throw new Error(`cannot register backend "${t}" using priority ${e}`)}if(e>=0){let r=ke.indexOf(t);-1!==r&&ke.splice(r,1);for(let r=0;r<ke.length;r++)if(un.get(ke[r]).priority<=e)return void ke.splice(r,0,t);ke.push(t)}}},Jd=async t=>{let r=un.get(t);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{let e=!!r.initPromise;try{return e||(r.initPromise=r.backend.init(t)),await r.initPromise,r.initialized=!0,r.backend}catch(t){return e||(r.error=`${t}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},ln=async t=>{let r,e=t.executionProviders||[],n=e.map((t=>"string"==typeof t?t:t.name)),d=0===n.length?ke:n,o=[],a=new Set;for(let t of d){let e=await Jd(t);"string"==typeof e?o.push({name:t,err:e}):(r||(r=e),r===e&&a.add(t))}if(!r)throw new Error(`no available backend found. ERR: ${o.map((t=>`[${t.name}] ${t.err}`)).join(", ")}`);for(let{name:t,err:r}of o)n.includes(t)&&console.warn(`removing requested execution provider "${t}" from session options because it is not available: ${r}`);let l=e.filter((t=>a.has("string"==typeof t?t:t.name)));return[r,new Proxy(t,{get:(t,r)=>"executionProviders"===r?l:Reflect.get(t,r)})]}})),ts=O((()=>{fn()})),es,rs=O((()=>{es="1.20.1"})),ns,Gt,No=O((()=>{rs(),ns="warning",Gt={wasm:{},webgl:{},webgpu:{},versions:{common:es},set logLevel(t){if(void 0!==t){if("string"!=typeof t||-1===["verbose","info","warning","error","fatal"].indexOf(t))throw new Error(`Unsupported logging level: ${t}`);ns=t}},get logLevel(){return ns}},Object.defineProperty(Gt,"logLevel",{enumerable:!0})})),z,os=O((()=>{No(),z=Gt})),is,as,ss=O((()=>{is=(t,r)=>{let e=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);e.width=t.dims[3],e.height=t.dims[2];let n=e.getContext("2d");if(null!=n){let d,o;void 0!==r?.tensorLayout&&"NHWC"===r.tensorLayout?(d=t.dims[2],o=t.dims[3]):(d=t.dims[3],o=t.dims[2]);let a,l,i=void 0!==r?.format?r.format:"RGB",A=r?.norm;void 0===A||void 0===A.mean?a=[255,255,255,255]:"number"==typeof A.mean?a=[A.mean,A.mean,A.mean,A.mean]:(a=[A.mean[0],A.mean[1],A.mean[2],0],void 0!==A.mean[3]&&(a[3]=A.mean[3])),void 0===A||void 0===A.bias?l=[0,0,0,0]:"number"==typeof A.bias?l=[A.bias,A.bias,A.bias,A.bias]:(l=[A.bias[0],A.bias[1],A.bias[2],0],void 0!==A.bias[3]&&(l[3]=A.bias[3]));let B=o*d,s=0,g=B,p=2*B,C=-1;"RGBA"===i?(s=0,g=B,p=2*B,C=3*B):"RGB"===i?(s=0,g=B,p=2*B):"RBG"===i&&(s=0,p=B,g=2*B);for(let r=0;r<o;r++)for(let e=0;e<d;e++){let d=(t.data[s++]-l[0])*a[0],o=(t.data[g++]-l[1])*a[1],i=(t.data[p++]-l[2])*a[2],A=-1===C?255:(t.data[C++]-l[3])*a[3];n.fillStyle="rgba("+d+","+o+","+i+","+A+")",n.fillRect(e,r,1,1)}if("toDataURL"in e)return e.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},as=(t,r)=>{let e,n=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");if(null==n)throw new Error("Can not access image data");{let d,o,a;void 0!==r?.tensorLayout&&"NHWC"===r.tensorLayout?(d=t.dims[2],o=t.dims[1],a=t.dims[3]):(d=t.dims[3],o=t.dims[2],a=t.dims[1]);let l,i,A=void 0!==r&&void 0!==r.format?r.format:"RGB",B=r?.norm;void 0===B||void 0===B.mean?l=[255,255,255,255]:"number"==typeof B.mean?l=[B.mean,B.mean,B.mean,B.mean]:(l=[B.mean[0],B.mean[1],B.mean[2],255],void 0!==B.mean[3]&&(l[3]=B.mean[3])),void 0===B||void 0===B.bias?i=[0,0,0,0]:"number"==typeof B.bias?i=[B.bias,B.bias,B.bias,B.bias]:(i=[B.bias[0],B.bias[1],B.bias[2],0],void 0!==B.bias[3]&&(i[3]=B.bias[3]));let s=o*d;if(void 0!==r&&(void 0!==r.format&&4===a&&"RGBA"!==r.format||3===a&&"RGB"!==r.format&&"BGR"!==r.format))throw new Error("Tensor format doesn't match input tensor dims");let g=4,p=0,C=1,u=2,K=3,c=0,Q=s,W=2*s,w=-1;"RGBA"===A?(c=0,Q=s,W=2*s,w=3*s):"RGB"===A?(c=0,Q=s,W=2*s):"RBG"===A&&(c=0,W=s,Q=2*s),e=n.createImageData(d,o);for(let r=0;r<o*d;p+=g,C+=g,u+=g,K+=g,r++)e.data[p]=(t.data[c++]-i[0])*l[0],e.data[C]=(t.data[Q++]-i[1])*l[1],e.data[u]=(t.data[W++]-i[2])*l[2],e.data[K]=-1===w?255:(t.data[w++]-i[3])*l[3]}return e}})),Ro,us,ls,fs,cs,ps,ds=O((()=>{cn(),Ro=(t,r)=>{if(void 0===t)throw new Error("Image buffer must be defined");if(void 0===r.height||void 0===r.width)throw new Error("Image height and width must be defined");if("NHWC"===r.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");let e,n,{height:d,width:o}=r,a=r.norm??{mean:255,bias:0};e="number"==typeof a.mean?[a.mean,a.mean,a.mean,a.mean]:[a.mean[0],a.mean[1],a.mean[2],a.mean[3]??255],n="number"==typeof a.bias?[a.bias,a.bias,a.bias,a.bias]:[a.bias[0],a.bias[1],a.bias[2],a.bias[3]??0];let l=void 0!==r.format?r.format:"RGBA",i=void 0!==r.tensorFormat&&void 0!==r.tensorFormat?r.tensorFormat:"RGB",A=d*o,B="RGBA"===i?new Float32Array(4*A):new Float32Array(3*A),s=4,g=0,p=1,C=2,u=3,K=0,c=A,Q=2*A,W=-1;"RGB"===l&&(s=3,g=0,p=1,C=2,u=-1),"RGBA"===i?W=3*A:"RBG"===i?(K=0,Q=A,c=2*A):"BGR"===i&&(Q=0,c=A,K=2*A);for(let r=0;r<A;r++,g+=s,C+=s,p+=s,u+=s)B[K++]=(t[g]+n[0])/e[0],B[c++]=(t[p]+n[1])/e[1],B[Q++]=(t[C]+n[2])/e[2],-1!==W&&-1!==u&&(B[W++]=(t[u]+n[3])/e[3]);return new St("float32",B,"RGBA"===i?[1,4,d,o]:[1,3,d,o])},us=async(t,r)=>{let e,n=typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement,d=typeof ImageData<"u"&&t instanceof ImageData,o=typeof ImageBitmap<"u"&&t instanceof ImageBitmap,a="string"==typeof t,l=r??{},i=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},A=t=>typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||t instanceof OffscreenCanvas?t.getContext("2d"):null;if(n){let n=i();n.width=t.width,n.height=t.height;let d=A(n);if(null==d)throw new Error("Can not access image data");{let n=t.height,o=t.width;if(void 0!==r&&void 0!==r.resizedHeight&&void 0!==r.resizedWidth&&(n=r.resizedHeight,o=r.resizedWidth),void 0!==r){if(l=r,void 0!==r.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=n,l.width=o}else l.tensorFormat="RGBA",l.height=n,l.width=o;d.drawImage(t,0,0),e=d.getImageData(0,0,o,n).data}}else{if(!d){if(o){if(void 0===r)throw new Error("Please provide image config with format for Imagebitmap");let n=i();n.width=t.width,n.height=t.height;let d=A(n);if(null!=d){let r=t.height,n=t.width;return d.drawImage(t,0,0,n,r),e=d.getImageData(0,0,n,r).data,l.height=r,l.width=n,Ro(e,l)}throw new Error("Can not access image data")}if(a)return new Promise(((r,e)=>{let n=i(),d=A(n);if(!t||!d)return e();let o=new Image;o.crossOrigin="Anonymous",o.src=t,o.onload=()=>{n.width=o.width,n.height=o.height,d.drawImage(o,0,0,n.width,n.height);let t=d.getImageData(0,0,n.width,n.height);l.height=n.height,l.width=n.width,r(Ro(t.data,l))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let n,d;if(void 0!==r&&void 0!==r.resizedWidth&&void 0!==r.resizedHeight?(n=r.resizedHeight,d=r.resizedWidth):(n=t.height,d=t.width),void 0!==r&&(l=r),l.format="RGBA",l.height=n,l.width=d,void 0!==r){let r=i();r.width=d,r.height=n;let o=A(r);if(null==o)throw new Error("Can not access image data");o.putImageData(t,0,0),e=o.getImageData(0,0,d,n).data}else e=t.data}}if(void 0!==e)return Ro(e,l);throw new Error("Input data provided is not supported - aborted tensor creation")},ls=(t,r)=>{let{width:e,height:n,download:d,dispose:o}=r;return new St({location:"texture",type:"float32",texture:t,dims:[1,n,e,4],download:d,dispose:o})},fs=(t,r)=>{let{dataType:e,dims:n,download:d,dispose:o}=r;return new St({location:"gpu-buffer",type:e??"float32",gpuBuffer:t,dims:n,download:d,dispose:o})},cs=(t,r)=>{let{dataType:e,dims:n,download:d,dispose:o}=r;return new St({location:"ml-tensor",type:e??"float32",mlTensor:t,dims:n,download:d,dispose:o})},ps=(t,r,e)=>new St({location:"cpu-pinned",type:t,data:r,dims:e??[r.length]})})),Be,Sr,hs,ms,bs=O((()=>{Be=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Sr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),hs=!1,ms=()=>{if(!hs){hs=!0;let t=typeof BigInt64Array<"u"&&BigInt64Array.from,r=typeof BigUint64Array<"u"&&BigUint64Array.from,e=typeof Float16Array<"u"&&Float16Array.from;t&&(Be.set("int64",BigInt64Array),Sr.set(BigInt64Array,"int64")),r&&(Be.set("uint64",BigUint64Array),Sr.set(BigUint64Array,"uint64")),e?(Be.set("float16",Float16Array),Sr.set(Float16Array,"float16")):Be.set("float16",Uint16Array)}}})),gs,ys,xs=O((()=>{cn(),gs=t=>{let r=1;for(let e=0;e<t.length;e++){let n=t[e];if("number"!=typeof n||!Number.isSafeInteger(n))throw new TypeError(`dims[${e}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${e}] must be a non-negative integer, got: ${n}`);r*=n}return r},ys=(t,r)=>{switch(t.location){case"cpu":return new St(t.type,t.data,r);case"cpu-pinned":return new St({location:"cpu-pinned",data:t.data,type:t.type,dims:r});case"texture":return new St({location:"texture",texture:t.texture,type:t.type,dims:r});case"gpu-buffer":return new St({location:"gpu-buffer",gpuBuffer:t.gpuBuffer,type:t.type,dims:r});case"ml-tensor":return new St({location:"ml-tensor",mlTensor:t.mlTensor,type:t.type,dims:r});default:throw new Error(`tensorReshape: tensor location ${t.location} is not supported`)}}})),St,cn=O((()=>{ss(),ds(),bs(),xs(),St=class{constructor(t,r,e){let n,d;if(ms(),"object"==typeof t&&"location"in t)switch(this.dataLocation=t.location,n=t.type,d=t.dims,t.location){case"cpu-pinned":{let r=Be.get(n);if(!r)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof r))throw new TypeError(`buffer should be of type ${r.name}`);this.cpuData=t.data;break}case"texture":if("float32"!==n)throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break;case"gpu-buffer":if("float32"!==n&&"float16"!==n&&"int32"!==n&&"int64"!==n&&"uint32"!==n&&"uint8"!==n&&"bool"!==n&&"uint4"!==n&&"int4"!==n)throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break;case"ml-tensor":if("float32"!==n&&"float16"!==n&&"int32"!==n&&"int64"!==n&&"uint32"!==n&&"uint64"!==n&&"int8"!==n&&"uint8"!==n&&"bool"!==n)throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=t.mlTensor,this.downloader=t.download,this.disposer=t.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let o,a;if("string"==typeof t)if(n=t,a=e,"string"===t){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");o=r}else{let e=Be.get(t);if(void 0===e)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if("float16"===t&&e===Uint16Array||"uint4"===t||"int4"===t)throw new TypeError(`Creating a ${t} tensor from number array is not supported. Please use ${e.name} as data.`);o="uint64"===t||"int64"===t?e.from(r,BigInt):e.from(r)}else if(r instanceof e)o=r;else{if(!(r instanceof Uint8ClampedArray))throw new TypeError(`A ${n} tensor's data must be type of ${e}`);if("uint8"!==t)throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");o=Uint8Array.from(r)}}else if(a=r,Array.isArray(t)){if(0===t.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");let r=typeof t[0];if("string"===r)n="string",o=t;else{if("boolean"!==r)throw new TypeError(`Invalid element type of data array: ${r}.`);n="bool",o=Uint8Array.from(t)}}else if(t instanceof Uint8ClampedArray)n="uint8",o=Uint8Array.from(t);else{let r=Sr.get(t.constructor);if(void 0===r)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=r,o=t}if(void 0===a)a=[o.length];else if(!Array.isArray(a))throw new TypeError("A tensor's dims must be a number array");d=a,this.cpuData=o,this.dataLocation="cpu"}let o=gs(d);if(this.cpuData&&o!==this.cpuData.length&&("uint4"!==n&&"int4"!==n||Math.ceil(o/2)!==this.cpuData.length))throw new Error(`Tensor's size(${o}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=d,this.size=o}static async fromImage(t,r){return us(t,r)}static fromTexture(t,r){return ls(t,r)}static fromGpuBuffer(t,r){return fs(t,r)}static fromMLTensor(t,r){return cs(t,r)}static fromPinnedBuffer(t,r,e){return ps(t,r,e)}toDataURL(t){return is(this,t)}toImageData(t){return as(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return ys(this,t)}}})),yt,pn=O((()=>{cn(),yt=St})),Ts,ws,Fe,Ce,Go=O((()=>{No(),Ts=(t,r)=>{(typeof Gt.trace>"u"?!Gt.wasm.trace:!Gt.trace)||console.timeStamp(`${t}::ORT::${r}`)},ws=(t,r)=>{let e=(new Error).stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let d=0;d<e.length;d++){if(n&&!e[d].includes("TRACE_FUNC")){let n=`FUNC_${t}::${e[d].trim().split(" ")[1]}`;return r&&(n+=`::${r}`),void Ts("CPU",n)}e[d].includes("TRACE_FUNC")&&(n=!0)}},Fe=t=>{(typeof Gt.trace>"u"?!Gt.wasm.trace:!Gt.trace)||ws("BEGIN",t)},Ce=t=>{(typeof Gt.trace>"u"?!Gt.wasm.trace:!Gt.trace)||ws("END",t)}})),dn,vs=O((()=>{fn(),pn(),Go(),dn=class t{constructor(t){this.handler=t}async run(t,r,e){Fe();let n={},d={};if("object"!=typeof t||null===t||t instanceof yt||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let o=!0;if("object"==typeof r){if(null===r)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof yt)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(0===r.length)throw new TypeError("'fetches' cannot be an empty array.");o=!1;for(let t of r){if("string"!=typeof t)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(t))throw new RangeError(`'fetches' contains invalid output name: ${t}.`);n[t]=null}if("object"==typeof e&&null!==e)d=e;else if(typeof e<"u")throw new TypeError("'options' must be an object.")}else{let t=!1,a=Object.getOwnPropertyNames(r);for(let e of this.outputNames)if(-1!==a.indexOf(e)){let d=r[e];(null===d||d instanceof yt)&&(t=!0,o=!1,n[e]=d)}if(t){if("object"==typeof e&&null!==e)d=e;else if(typeof e<"u")throw new TypeError("'options' must be an object.")}else d=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let r of this.inputNames)if(typeof t[r]>"u")throw new Error(`input '${r}' is missing in 'feeds'.`);if(o)for(let t of this.outputNames)n[t]=null;let a=await this.handler.run(t,n,d),l={};for(let t in a)if(Object.hasOwnProperty.call(a,t)){let r=a[t];l[t]=r instanceof yt?r:new yt(r.type,r.data,r.dims)}return Ce(),l}async release(){return this.handler.dispose()}static async create(r,e,n,d){Fe();let o,a={};if("string"==typeof r){if(o=r,"object"==typeof e&&null!==e)a=e;else if(typeof e<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(o=r,"object"==typeof e&&null!==e)a=e;else if(typeof e<"u")throw new TypeError("'options' must be an object.")}else{if(!(r instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&r instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{let t=r,l=0,i=r.byteLength;if("object"==typeof e&&null!==e)a=e;else if("number"==typeof e){if(l=e,!Number.isSafeInteger(l))throw new RangeError("'byteOffset' must be an integer.");if(l<0||l>=t.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${t.byteLength}).`);if(i=r.byteLength-l,"number"==typeof n){if(i=n,!Number.isSafeInteger(i))throw new RangeError("'byteLength' must be an integer.");if(i<=0||l+i>t.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${t.byteLength-l}].`);if("object"==typeof d&&null!==d)a=d;else if(typeof d<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof e<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(t,l,i)}}let[l,i]=await ln(a),A=await l.createInferenceSessionHandler(o,i);return Ce(),new t(A)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}})),Yd,Is=O((()=>{vs(),Yd=dn})),_s=O((()=>{})),Os=O((()=>{})),Ss=O((()=>{})),As=O((()=>{})),Zd,hn,Ps=O((()=>{fn(),pn(),Zd="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",hn=class t{constructor(t,r,e){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=e}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(r,e){let n=r.evalModel||"",d=r.optimizerModel||"",o=e||{},[a,l]=await ln(o);if(a.createTrainingSessionHandler){let e=await a.createTrainingSessionHandler(r.checkpointState,r.trainModel,n,d,l);return new t(e,!!r.optimizerModel,!!r.evalModel)}throw new Error(Zd)}typeNarrowingForRunStep(t,r,e,n,d){let o={},a={};if("object"!=typeof e||null===e||e instanceof yt||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let l=!0;if("object"==typeof n){if(null===n)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof yt)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(0===n.length)throw new TypeError("'fetches' cannot be an empty array.");l=!1;for(let t of n){if("string"!=typeof t)throw new TypeError("'fetches' must be a string array or an object.");if(-1===r.indexOf(t))throw new RangeError(`'fetches' contains invalid output name: ${t}.`);o[t]=null}if("object"==typeof d&&null!==d)a=d;else if(typeof d<"u")throw new TypeError("'options' must be an object.")}else{let t=!1,e=Object.getOwnPropertyNames(n);for(let d of r)if(-1!==e.indexOf(d)){let r=n[d];(null===r||r instanceof yt)&&(t=!0,l=!1,o[d]=r)}if(t){if("object"==typeof d&&null!==d)a=d;else if(typeof d<"u")throw new TypeError("'options' must be an object.")}else a=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let r of t)if(typeof e[r]>"u")throw new Error(`input '${r}' is missing in 'feeds'.`);if(l)for(let t of r)o[t]=null;return[o,a]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let e in t)if(Object.hasOwnProperty.call(t,e)){let n=t[e];r[e]=n instanceof yt?n:new yt(n.type,n.data,n.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,e){let[n,d]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,e),o=await this.handler.runTrainStep(t,n,d);return this.convertHandlerReturnTypeToMapOfTensors(o)}async runOptimizerStep(t){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(t||{})}async runEvalStep(t,r,e){if(this.hasEvalModel){let[n,d]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,e),o=await this.handler.runEvalStep(t,n,d);return this.convertHandlerReturnTypeToMapOfTensors(o)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let e=await this.getParametersSize(r);if(t.length!==4*e)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}})),Qd,Es=O((()=>{Ps(),Qd=hn})),Mo={};Or(Mo,{InferenceSession:()=>Yd,TRACE:()=>Ts,TRACE_FUNC_BEGIN:()=>Fe,TRACE_FUNC_END:()=>Ce,Tensor:()=>yt,TrainingSession:()=>Qd,env:()=>z,registerBackend:()=>nr});var Yt=O((()=>{ts(),os(),Is(),pn(),_s(),Os(),Go(),Ss(),As(),Es()}));function _e(t,r,e,n){if(void 0===r)return eh(t);if(void 0===e)mn(t,r);else if("number"==typeof e&&void 0===n)mn(t,r);else if("string"==typeof e&&void 0===n)mn(t,e,1,r);else{if("string"!=typeof e||"number"!=typeof n)throw new TypeError("input is valid");mn(t,e,n,r)}}function eh(t){return{verbose:_e.verbose.bind(null,t),info:_e.info.bind(null,t),warning:_e.warning.bind(null,t),error:_e.error.bind(null,t),fatal:_e.fatal.bind(null,t)}}function mn(t,r,e,n){let d=Ar[n||""]||Ar[""];Ls[t]<Ls[d.minimalSeverity]||(d.logDateTime&&(r=`${(new Date).toISOString()}|${r}`),d.logSourceLocation,th[d.provider].log(t,r,n))}var Uo,Vo,Ls,th,$s,Ar,tt,gn,yn,xn,bn,Ut=O((()=>{Uo=class{log(t,r,e){}},Vo=class{log(t,r,e){console.log(`${this.color(t)} ${e?"[35m"+e+"[0m ":""}${r}`)}color(t){switch(t){case"verbose":return"[34;40mv[0m";case"info":return"[32mi[0m";case"warning":return"[30;43mw[0m";case"error":return"[31;40me[0m";case"fatal":return"[101mf[0m";default:throw new Error(`unsupported severity: ${t}`)}}},Ls={verbose:1e3,info:2e3,warning:4e3,error:5e3,fatal:6e3},th={none:new Uo,console:new Vo},Ar={"":$s={provider:"console",minimalSeverity:"warning",logDateTime:!0,logSourceLocation:!1}},(t=>{function r(t){Ar={},e("",t||{})}function e(t,e){if("*"===t)r(e);else{let r=Ar[t]||$s;Ar[t]={provider:e.provider||r.provider,minimalSeverity:e.minimalSeverity||r.minimalSeverity,logDateTime:void 0===e.logDateTime?r.logDateTime:e.logDateTime,logSourceLocation:void 0===e.logSourceLocation?r.logSourceLocation:e.logSourceLocation}}}t.verbose=function(r,e){t("verbose",r,e)},t.info=function(r,e){t("info",r,e)},t.warning=function(r,e){t("warning",r,e)},t.error=function(r,e){t("error",r,e)},t.fatal=function(r,e){t("fatal",r,e)},t.reset=r,t.set=e,t.setWithEnv=function(t){let r={};t.logLevel&&(r.minimalSeverity=t.logLevel),e("",r)}})(_e||={}),tt=_e,gn=class{constructor(t,r,e,n,d,o){this.category=t,this.name=r,this.startTime=e,this.endCallback=n,this.timer=d,this.ctx=o}async end(){return this.endCallback(this)}async checkTimer(){if(void 0===this.ctx||void 0===this.timer)throw new Error("No webgl timer found");return this.ctx.endTimer(),this.ctx.waitForQueryAndGetTime(this.timer)}},yn=class{constructor(t,r,e,n){this.category=t,this.name=r,this.startTime=e,this.endTime=n}},xn=class{constructor(t,r,e){this._started=!1,this._flushPointer=0,this._started=!1,this._maxNumberEvents=void 0===t?1e4:t,this._flushBatchSize=void 0===r?10:r,this._flushIntervalInMilliseconds=void 0===e?5e3:e}static create(t){return void 0===t?new this:new this(t.maxNumberEvents,t.flushBatchSize,t.flushIntervalInMilliseconds)}start(){this._started=!0,this._timingEvents=[],this._flushTime=bn(),this._flushPointer=0}stop(){for(this._started=!1;this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer])}event(t,r,e,n){let d=this._started?this.begin(t,r,n):void 0,o=!1,a=e();if(a&&"function"==typeof a.then)return o=!0,new Promise(((t,r)=>{a.then((async r=>{d&&await d.end(),t(r)}),(async t=>{d&&await d.end(),r(t)}))}));if(!o&&d){let t=d.end();if(t&&"function"==typeof t.then)return new Promise(((r,e)=>{t.then((()=>{r(a)}),(t=>{e(t)}))}))}return a}begin(t,r,e){if(!this._started)throw new Error("profiler is not started yet");if(void 0===e){let e=bn();return this.flush(e),new gn(t,r,e,(t=>this.endSync(t)))}{let n=e.beginTimer();return new gn(t,r,0,(async t=>this.end(t)),n,e)}}async end(t){let r=await t.checkTimer();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new yn(t.category,t.name,t.startTime,r)),this.flush(r))}endSync(t){let r=bn();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new yn(t.category,t.name,t.startTime,r)),this.flush(r))}logOneEvent(t){tt.verbose(`Profiler.${t.category}`,`${(t.endTime-t.startTime).toFixed(2)}ms on event '${t.name}' at ${t.endTime.toFixed(2)}`)}flush(t){if(this._timingEvents.length-this._flushPointer>=this._flushBatchSize||t-this._flushTime>=this._flushIntervalInMilliseconds){for(let t=this._flushPointer;this._flushPointer<t+this._flushBatchSize&&this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);this._flushTime=bn()}}get started(){return this._started}},bn=typeof performance<"u"&&performance.now?()=>performance.now():Date.now}));function ks(t,r,e){for(let n of e){let e=n[0],d=n[1],o=n[2],a=n[3],l=n[4];if(t.opType===e)for(let t of r)if((t.domain===d||"ai.onnx"===t.domain&&""===d)&&rh(t.version,o))return{opImpl:a,opInit:l}}throw new TypeError(`cannot resolve operator '${t.opType}' with opsets: ${r.map((t=>`${t.domain||"ai.onnx"} v${t.version}`)).join(", ")}`)}function rh(t,r){if(r.endsWith("+")){let e=Number.parseInt(r.substring(0,r.length-1),10);return!isNaN(e)&&e<=t}if(2===r.split("-").length){let e=r.split("-"),n=Number.parseInt(e[0],10),d=Number.parseInt(e[1],10);return!isNaN(n)&&!isNaN(d)&&n<=t&&t<=d}return Number.parseInt(r,10)===t}var Bs=O((()=>{})),Fs=mt((t=>{t.__esModule=!0;var r=function(){function t(r){if(!r)throw new TypeError("Invalid argument; `value` has no value.");this.value=t.EMPTY,r&&t.isGuid(r)&&(this.value=r)}return t.isGuid=function(r){var e=r.toString();return r&&(r instanceof t||t.validator.test(e))},t.create=function(){return new t([t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-"))},t.createEmpty=function(){return new t("emptyguid")},t.parse=function(r){return new t(r)},t.raw=function(){return[t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-")},t.gen=function(t){for(var r="",e=0;e<t;e++)r+=(65536*(1+Math.random())|0).toString(16).substring(1);return r},t.prototype.equals=function(r){return t.isGuid(r)&&this.value===r.toString()},t.prototype.isEmpty=function(){return this.value===t.EMPTY},t.prototype.toString=function(){return this.value},t.prototype.toJSON=function(){return{value:this.value}},t.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),t.EMPTY="00000000-0000-0000-0000-000000000000",t}();t.Guid=r}));function rt(t,r,e){this.low=0|t,this.high=0|r,this.unsigned=!!e}function Et(t){return!0===(t&&t.__isLong__)}function Cs(t){var r=Math.clz32(t&-t);return t?31-r:r}function Ne(t,r){var e,n,d;return r?(d=0<=(t>>>=0)&&t<256)&&(n=Rs[t])?n:(e=J(t,0,!0),d&&(Rs[t]=e),e):(d=-128<=(t|=0)&&t<128)&&(n=Ns[t])?n:(e=J(t,t<0?-1:0,!1),d&&(Ns[t]=e),e)}function zt(t,r){if(isNaN(t))return r?ye:Zt;if(r){if(t<0)return ye;if(t>=Vs)return Hs}else{if(t<=-Ms)return Ct;if(t+1>=Ms)return Ws}return t<0?zt(-t,r).neg():J(t%ir|0,t/ir|0,r)}function J(t,r,e){return new rt(t,r,e)}function Ho(t,r,e){if(0===t.length)throw Error("empty string");if("number"==typeof r?(e=r,r=!1):r=!!r,"NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return r?ye:Zt;if((e=e||10)<2||36<e)throw RangeError("radix");var n;if((n=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return Ho(t.substring(1),r,e).neg();for(var d=zt(Tn(e,8)),o=Zt,a=0;a<t.length;a+=8){var l=Math.min(8,t.length-a),i=parseInt(t.substring(a,a+l),e);if(l<8){var A=zt(Tn(e,l));o=o.mul(A).add(zt(i))}else o=(o=o.mul(d)).add(zt(i))}return o.unsigned=r,o}function Qt(t,r){return"number"==typeof t?zt(t,r):"string"==typeof t?Ho(t,r):J(t.low,t.high,"boolean"==typeof r?r:t.unsigned)}var Vt,Ns,Rs,Tn,Gs,ir,Vs,Ms,Us,Zt,ye,or,zs,Wo,Ws,Hs,Ct,D,xe,qo=O((()=>{Vt=null;try{Vt=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}rt.prototype.__isLong__,Object.defineProperty(rt.prototype,"__isLong__",{value:!0}),rt.isLong=Et,Ns={},Rs={},rt.fromInt=Ne,rt.fromNumber=zt,rt.fromBits=J,Tn=Math.pow,rt.fromString=Ho,rt.fromValue=Qt,Ms=(Vs=(ir=(Gs=65536)*Gs)*ir)/2,Us=Ne(1<<24),Zt=Ne(0),rt.ZERO=Zt,ye=Ne(0,!0),rt.UZERO=ye,or=Ne(1),rt.ONE=or,zs=Ne(1,!0),rt.UONE=zs,Wo=Ne(-1),rt.NEG_ONE=Wo,Ws=J(-1,2147483647,!1),rt.MAX_VALUE=Ws,Hs=J(-1,-1,!0),rt.MAX_UNSIGNED_VALUE=Hs,Ct=J(0,-2147483648,!1),rt.MIN_VALUE=Ct,(D=rt.prototype).toInt=function(){return this.unsigned?this.low>>>0:this.low},D.toNumber=function(){return this.unsigned?(this.high>>>0)*ir+(this.low>>>0):this.high*ir+(this.low>>>0)},D.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(Ct)){var r=zt(t),e=this.div(r),n=e.mul(r).sub(this);return e.toString(t)+n.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var d=zt(Tn(t,6),this.unsigned),o=this,a="";;){var l=o.div(d),i=(o.sub(l.mul(d)).toInt()>>>0).toString(t);if((o=l).isZero())return i+a;for(;i.length<6;)i="0"+i;a=""+i+a}},D.getHighBits=function(){return this.high},D.getHighBitsUnsigned=function(){return this.high>>>0},D.getLowBits=function(){return this.low},D.getLowBitsUnsigned=function(){return this.low>>>0},D.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Ct)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,r=31;r>0&&!(t&1<<r);r--);return 0!=this.high?r+33:r+1},D.isZero=function(){return 0===this.high&&0===this.low},D.eqz=D.isZero,D.isNegative=function(){return!this.unsigned&&this.high<0},D.isPositive=function(){return this.unsigned||this.high>=0},D.isOdd=function(){return!(1&~this.low)},D.isEven=function(){return!(1&this.low)},D.equals=function(t){return Et(t)||(t=Qt(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},D.eq=D.equals,D.notEquals=function(t){return!this.eq(t)},D.neq=D.notEquals,D.ne=D.notEquals,D.lessThan=function(t){return this.comp(t)<0},D.lt=D.lessThan,D.lessThanOrEqual=function(t){return this.comp(t)<=0},D.lte=D.lessThanOrEqual,D.le=D.lessThanOrEqual,D.greaterThan=function(t){return this.comp(t)>0},D.gt=D.greaterThan,D.greaterThanOrEqual=function(t){return this.comp(t)>=0},D.gte=D.greaterThanOrEqual,D.ge=D.greaterThanOrEqual,D.compare=function(t){if(Et(t)||(t=Qt(t)),this.eq(t))return 0;var r=this.isNegative(),e=t.isNegative();return r&&!e?-1:!r&&e?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},D.comp=D.compare,D.negate=function(){return!this.unsigned&&this.eq(Ct)?Ct:this.not().add(or)},D.neg=D.negate,D.add=function(t){Et(t)||(t=Qt(t));var r=this.high>>>16,e=65535&this.high,n=this.low>>>16,d=65535&this.low,o=t.high>>>16,a=65535&t.high,l=t.low>>>16,i=0,A=0,B=0,s=0;return B+=(s+=d+(65535&t.low))>>>16,A+=(B+=n+l)>>>16,i+=(A+=e+a)>>>16,i+=r+o,J((B&=65535)<<16|(s&=65535),(i&=65535)<<16|(A&=65535),this.unsigned)},D.subtract=function(t){return Et(t)||(t=Qt(t)),this.add(t.neg())},D.sub=D.subtract,D.multiply=function(t){if(this.isZero())return this;if(Et(t)||(t=Qt(t)),Vt)return J(Vt.mul(this.low,this.high,t.low,t.high),Vt.get_high(),this.unsigned);if(t.isZero())return this.unsigned?ye:Zt;if(this.eq(Ct))return t.isOdd()?Ct:Zt;if(t.eq(Ct))return this.isOdd()?Ct:Zt;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(Us)&&t.lt(Us))return zt(this.toNumber()*t.toNumber(),this.unsigned);var r=this.high>>>16,e=65535&this.high,n=this.low>>>16,d=65535&this.low,o=t.high>>>16,a=65535&t.high,l=t.low>>>16,i=65535&t.low,A=0,B=0,s=0,g=0;return s+=(g+=d*i)>>>16,B+=(s+=n*i)>>>16,s&=65535,B+=(s+=d*l)>>>16,A+=(B+=e*i)>>>16,B&=65535,A+=(B+=n*l)>>>16,B&=65535,A+=(B+=d*a)>>>16,A+=r*i+e*l+n*a+d*o,J((s&=65535)<<16|(g&=65535),(A&=65535)<<16|(B&=65535),this.unsigned)},D.mul=D.multiply,D.divide=function(t){if(Et(t)||(t=Qt(t)),t.isZero())throw Error("division by zero");var r,e,n;if(Vt)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?J((this.unsigned?Vt.div_u:Vt.div_s)(this.low,this.high,t.low,t.high),Vt.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?ye:Zt;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return ye;if(t.gt(this.shru(1)))return zs;n=ye}else{if(this.eq(Ct))return t.eq(or)||t.eq(Wo)?Ct:t.eq(Ct)?or:(r=this.shr(1).div(t).shl(1)).eq(Zt)?t.isNegative()?or:Wo:(e=this.sub(t.mul(r)),n=r.add(e.div(t)));if(t.eq(Ct))return this.unsigned?ye:Zt;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();n=Zt}for(e=this;e.gte(t);){r=Math.max(1,Math.floor(e.toNumber()/t.toNumber()));for(var d=Math.ceil(Math.log(r)/Math.LN2),o=d<=48?1:Tn(2,d-48),a=zt(r),l=a.mul(t);l.isNegative()||l.gt(e);)l=(a=zt(r-=o,this.unsigned)).mul(t);a.isZero()&&(a=or),n=n.add(a),e=e.sub(l)}return n},D.div=D.divide,D.modulo=function(t){return Et(t)||(t=Qt(t)),Vt?J((this.unsigned?Vt.rem_u:Vt.rem_s)(this.low,this.high,t.low,t.high),Vt.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},D.mod=D.modulo,D.rem=D.modulo,D.not=function(){return J(~this.low,~this.high,this.unsigned)},D.countLeadingZeros=function(){return this.high?Math.clz32(this.high):Math.clz32(this.low)+32},D.clz=D.countLeadingZeros,D.countTrailingZeros=function(){return this.low?Cs(this.low):Cs(this.high)+32},D.ctz=D.countTrailingZeros,D.and=function(t){return Et(t)||(t=Qt(t)),J(this.low&t.low,this.high&t.high,this.unsigned)},D.or=function(t){return Et(t)||(t=Qt(t)),J(this.low|t.low,this.high|t.high,this.unsigned)},D.xor=function(t){return Et(t)||(t=Qt(t)),J(this.low^t.low,this.high^t.high,this.unsigned)},D.shiftLeft=function(t){return Et(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?J(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):J(0,this.low<<t-32,this.unsigned)},D.shl=D.shiftLeft,D.shiftRight=function(t){return Et(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?J(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):J(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},D.shr=D.shiftRight,D.shiftRightUnsigned=function(t){return Et(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?J(this.low>>>t|this.high<<32-t,this.high>>>t,this.unsigned):J(32===t?this.high:this.high>>>t-32,0,this.unsigned)},D.shru=D.shiftRightUnsigned,D.shr_u=D.shiftRightUnsigned,D.rotateLeft=function(t){var r;return Et(t)&&(t=t.toInt()),0==(t&=63)?this:32===t?J(this.high,this.low,this.unsigned):t<32?(r=32-t,J(this.low<<t|this.high>>>r,this.high<<t|this.low>>>r,this.unsigned)):(r=32-(t-=32),J(this.high<<t|this.low>>>r,this.low<<t|this.high>>>r,this.unsigned))},D.rotl=D.rotateLeft,D.rotateRight=function(t){var r;return Et(t)&&(t=t.toInt()),0==(t&=63)?this:32===t?J(this.high,this.low,this.unsigned):t<32?(r=32-t,J(this.high<<r|this.low>>>t,this.low<<r|this.high>>>t,this.unsigned)):(r=32-(t-=32),J(this.low<<r|this.high>>>t,this.high<<r|this.low>>>t,this.unsigned))},D.rotr=D.rotateRight,D.toSigned=function(){return this.unsigned?J(this.low,this.high,!1):this},D.toUnsigned=function(){return this.unsigned?this:J(this.low,this.high,!0)},D.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},D.toBytesLE=function(){var t=this.high,r=this.low;return[255&r,r>>>8&255,r>>>16&255,r>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},D.toBytesBE=function(){var t=this.high,r=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,r>>>24,r>>>16&255,r>>>8&255,255&r]},rt.fromBytes=function(t,r,e){return e?rt.fromBytesLE(t,r):rt.fromBytesBE(t,r)},rt.fromBytesLE=function(t,r){return new rt(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,r)},rt.fromBytesBE=function(t,r){return new rt(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],r)},xe=rt})),w,wn=O((()=>{(w={}).Table,w.SIZEOF_SHORT=2,w.SIZEOF_INT=4,w.FILE_IDENTIFIER_LENGTH=4,w.SIZE_PREFIX_LENGTH=4,w.Encoding={UTF8_BYTES:1,UTF16_STRING:2},w.int32=new Int32Array(2),w.float32=new Float32Array(w.int32.buffer),w.float64=new Float64Array(w.int32.buffer),w.isLittleEndian=1===new Uint16Array(new Uint8Array([1,0]).buffer)[0],w.Long=function(t,r){this.low=0|t,this.high=0|r},w.Long.create=function(t,r){return 0==t&&0==r?w.Long.ZERO:new w.Long(t,r)},w.Long.prototype.toFloat64=function(){return(this.low>>>0)+4294967296*this.high},w.Long.prototype.equals=function(t){return this.low==t.low&&this.high==t.high},w.Long.ZERO=new w.Long(0,0),w.Builder=function(t){if(t)var r=t;else r=1024;this.bb=w.ByteBuffer.allocate(r),this.space=r,this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},w.Builder.prototype.clear=function(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},w.Builder.prototype.forceDefaults=function(t){this.force_defaults=t},w.Builder.prototype.dataBuffer=function(){return this.bb},w.Builder.prototype.asUint8Array=function(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())},w.Builder.prototype.prep=function(t,r){t>this.minalign&&(this.minalign=t);for(var e=1+~(this.bb.capacity()-this.space+r)&t-1;this.space<e+t+r;){var n=this.bb.capacity();this.bb=w.Builder.growByteBuffer(this.bb),this.space+=this.bb.capacity()-n}this.pad(e)},w.Builder.prototype.pad=function(t){for(var r=0;r<t;r++)this.bb.writeInt8(--this.space,0)},w.Builder.prototype.writeInt8=function(t){this.bb.writeInt8(this.space-=1,t)},w.Builder.prototype.writeInt16=function(t){this.bb.writeInt16(this.space-=2,t)},w.Builder.prototype.writeInt32=function(t){this.bb.writeInt32(this.space-=4,t)},w.Builder.prototype.writeInt64=function(t){this.bb.writeInt64(this.space-=8,t)},w.Builder.prototype.writeFloat32=function(t){this.bb.writeFloat32(this.space-=4,t)},w.Builder.prototype.writeFloat64=function(t){this.bb.writeFloat64(this.space-=8,t)},w.Builder.prototype.addInt8=function(t){this.prep(1,0),this.writeInt8(t)},w.Builder.prototype.addInt16=function(t){this.prep(2,0),this.writeInt16(t)},w.Builder.prototype.addInt32=function(t){this.prep(4,0),this.writeInt32(t)},w.Builder.prototype.addInt64=function(t){this.prep(8,0),this.writeInt64(t)},w.Builder.prototype.addFloat32=function(t){this.prep(4,0),this.writeFloat32(t)},w.Builder.prototype.addFloat64=function(t){this.prep(8,0),this.writeFloat64(t)},w.Builder.prototype.addFieldInt8=function(t,r,e){(this.force_defaults||r!=e)&&(this.addInt8(r),this.slot(t))},w.Builder.prototype.addFieldInt16=function(t,r,e){(this.force_defaults||r!=e)&&(this.addInt16(r),this.slot(t))},w.Builder.prototype.addFieldInt32=function(t,r,e){(this.force_defaults||r!=e)&&(this.addInt32(r),this.slot(t))},w.Builder.prototype.addFieldInt64=function(t,r,e){(this.force_defaults||!r.equals(e))&&(this.addInt64(r),this.slot(t))},w.Builder.prototype.addFieldFloat32=function(t,r,e){(this.force_defaults||r!=e)&&(this.addFloat32(r),this.slot(t))},w.Builder.prototype.addFieldFloat64=function(t,r,e){(this.force_defaults||r!=e)&&(this.addFloat64(r),this.slot(t))},w.Builder.prototype.addFieldOffset=function(t,r,e){(this.force_defaults||r!=e)&&(this.addOffset(r),this.slot(t))},w.Builder.prototype.addFieldStruct=function(t,r,e){r!=e&&(this.nested(r),this.slot(t))},w.Builder.prototype.nested=function(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")},w.Builder.prototype.notNested=function(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")},w.Builder.prototype.slot=function(t){this.vtable[t]=this.offset()},w.Builder.prototype.offset=function(){return this.bb.capacity()-this.space},w.Builder.growByteBuffer=function(t){var r=t.capacity();if(3221225472&r)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");var e=r<<1,n=w.ByteBuffer.allocate(e);return n.setPosition(e-r),n.bytes().set(t.bytes(),e-r),n},w.Builder.prototype.addOffset=function(t){this.prep(w.SIZEOF_INT,0),this.writeInt32(this.offset()-t+w.SIZEOF_INT)},w.Builder.prototype.startObject=function(t){this.notNested(),null==this.vtable&&(this.vtable=[]),this.vtable_in_use=t;for(var r=0;r<t;r++)this.vtable[r]=0;this.isNested=!0,this.object_start=this.offset()},w.Builder.prototype.endObject=function(){if(null==this.vtable||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);for(var t=this.offset(),r=this.vtable_in_use-1;r>=0&&0==this.vtable[r];r--);for(var e=r+1;r>=0;r--)this.addInt16(0!=this.vtable[r]?t-this.vtable[r]:0);this.addInt16(t-this.object_start);var n=(e+2)*w.SIZEOF_SHORT;this.addInt16(n);var d=0,o=this.space;t:for(r=0;r<this.vtables.length;r++){var a=this.bb.capacity()-this.vtables[r];if(n==this.bb.readInt16(a)){for(var l=w.SIZEOF_SHORT;l<n;l+=w.SIZEOF_SHORT)if(this.bb.readInt16(o+l)!=this.bb.readInt16(a+l))continue t;d=this.vtables[r];break}}return d?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,d-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t},w.Builder.prototype.finish=function(t,r,e){var n=e?w.SIZE_PREFIX_LENGTH:0;if(r){var d=r;if(this.prep(this.minalign,w.SIZEOF_INT+w.FILE_IDENTIFIER_LENGTH+n),d.length!=w.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: file identifier must be length "+w.FILE_IDENTIFIER_LENGTH);for(var o=w.FILE_IDENTIFIER_LENGTH-1;o>=0;o--)this.writeInt8(d.charCodeAt(o))}this.prep(this.minalign,w.SIZEOF_INT+n),this.addOffset(t),n&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)},w.Builder.prototype.finishSizePrefixed=function(t,r){this.finish(t,r,!0)},w.Builder.prototype.requiredField=function(t,r){var e=this.bb.capacity()-t,n=e-this.bb.readInt32(e);if(0==this.bb.readInt16(n+r))throw new Error("FlatBuffers: field "+r+" must be set")},w.Builder.prototype.startVector=function(t,r,e){this.notNested(),this.vector_num_elems=r,this.prep(w.SIZEOF_INT,t*r),this.prep(e,t*r)},w.Builder.prototype.endVector=function(){return this.writeInt32(this.vector_num_elems),this.offset()},w.Builder.prototype.createString=function(t){if(t instanceof Uint8Array)var r=t;else{r=[];for(var e=0;e<t.length;){var n,d=t.charCodeAt(e++);(n=d<55296||d>=56320?d:(d<<10)+t.charCodeAt(e++)+-56613888)<128?r.push(n):(n<2048?r.push(n>>6&31|192):(n<65536?r.push(n>>12&15|224):r.push(n>>18&7|240,n>>12&63|128),r.push(n>>6&63|128)),r.push(63&n|128))}}this.addInt8(0),this.startVector(1,r.length,1),this.bb.setPosition(this.space-=r.length),e=0;for(var o=this.space,a=this.bb.bytes();e<r.length;e++)a[o++]=r[e];return this.endVector()},w.Builder.prototype.createLong=function(t,r){return w.Long.create(t,r)},w.ByteBuffer=function(t){this.bytes_=t,this.position_=0},w.ByteBuffer.allocate=function(t){return new w.ByteBuffer(new Uint8Array(t))},w.ByteBuffer.prototype.clear=function(){this.position_=0},w.ByteBuffer.prototype.bytes=function(){return this.bytes_},w.ByteBuffer.prototype.position=function(){return this.position_},w.ByteBuffer.prototype.setPosition=function(t){this.position_=t},w.ByteBuffer.prototype.capacity=function(){return this.bytes_.length},w.ByteBuffer.prototype.readInt8=function(t){return this.readUint8(t)<<24>>24},w.ByteBuffer.prototype.readUint8=function(t){return this.bytes_[t]},w.ByteBuffer.prototype.readInt16=function(t){return this.readUint16(t)<<16>>16},w.ByteBuffer.prototype.readUint16=function(t){return this.bytes_[t]|this.bytes_[t+1]<<8},w.ByteBuffer.prototype.readInt32=function(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24},w.ByteBuffer.prototype.readUint32=function(t){return this.readInt32(t)>>>0},w.ByteBuffer.prototype.readInt64=function(t){return new w.Long(this.readInt32(t),this.readInt32(t+4))},w.ByteBuffer.prototype.readUint64=function(t){return new w.Long(this.readUint32(t),this.readUint32(t+4))},w.ByteBuffer.prototype.readFloat32=function(t){return w.int32[0]=this.readInt32(t),w.float32[0]},w.ByteBuffer.prototype.readFloat64=function(t){return w.int32[w.isLittleEndian?0:1]=this.readInt32(t),w.int32[w.isLittleEndian?1:0]=this.readInt32(t+4),w.float64[0]},w.ByteBuffer.prototype.writeInt8=function(t,r){this.bytes_[t]=r},w.ByteBuffer.prototype.writeUint8=function(t,r){this.bytes_[t]=r},w.ByteBuffer.prototype.writeInt16=function(t,r){this.bytes_[t]=r,this.bytes_[t+1]=r>>8},w.ByteBuffer.prototype.writeUint16=function(t,r){this.bytes_[t]=r,this.bytes_[t+1]=r>>8},w.ByteBuffer.prototype.writeInt32=function(t,r){this.bytes_[t]=r,this.bytes_[t+1]=r>>8,this.bytes_[t+2]=r>>16,this.bytes_[t+3]=r>>24},w.ByteBuffer.prototype.writeUint32=function(t,r){this.bytes_[t]=r,this.bytes_[t+1]=r>>8,this.bytes_[t+2]=r>>16,this.bytes_[t+3]=r>>24},w.ByteBuffer.prototype.writeInt64=function(t,r){this.writeInt32(t,r.low),this.writeInt32(t+4,r.high)},w.ByteBuffer.prototype.writeUint64=function(t,r){this.writeUint32(t,r.low),this.writeUint32(t+4,r.high)},w.ByteBuffer.prototype.writeFloat32=function(t,r){w.float32[0]=r,this.writeInt32(t,w.int32[0])},w.ByteBuffer.prototype.writeFloat64=function(t,r){w.float64[0]=r,this.writeInt32(t,w.int32[w.isLittleEndian?0:1]),this.writeInt32(t+4,w.int32[w.isLittleEndian?1:0])},w.ByteBuffer.prototype.getBufferIdentifier=function(){if(this.bytes_.length<this.position_+w.SIZEOF_INT+w.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");for(var t="",r=0;r<w.FILE_IDENTIFIER_LENGTH;r++)t+=String.fromCharCode(this.readInt8(this.position_+w.SIZEOF_INT+r));return t},w.ByteBuffer.prototype.__offset=function(t,r){var e=t-this.readInt32(t);return r<this.readInt16(e)?this.readInt16(e+r):0},w.ByteBuffer.prototype.__union=function(t,r){return t.bb_pos=r+this.readInt32(r),t.bb=this,t},w.ByteBuffer.prototype.__string=function(t,r){t+=this.readInt32(t);var e=this.readInt32(t),n="",d=0;if(t+=w.SIZEOF_INT,r===w.Encoding.UTF8_BYTES)return this.bytes_.subarray(t,t+e);for(;d<e;){var o,a=this.readUint8(t+d++);if(a<192)o=a;else{var l=this.readUint8(t+d++);if(a<224)o=(31&a)<<6|63&l;else{var i=this.readUint8(t+d++);o=a<240?(15&a)<<12|(63&l)<<6|63&i:(7&a)<<18|(63&l)<<12|(63&i)<<6|63&this.readUint8(t+d++)}}o<65536?n+=String.fromCharCode(o):(o-=65536,n+=String.fromCharCode(55296+(o>>10),56320+(1023&o)))}return n},w.ByteBuffer.prototype.__indirect=function(t){return t+this.readInt32(t)},w.ByteBuffer.prototype.__vector=function(t){return t+this.readInt32(t)+w.SIZEOF_INT},w.ByteBuffer.prototype.__vector_len=function(t){return this.readInt32(t+this.readInt32(t))},w.ByteBuffer.prototype.__has_identifier=function(t){if(t.length!=w.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: file identifier must be length "+w.FILE_IDENTIFIER_LENGTH);for(var r=0;r<w.FILE_IDENTIFIER_LENGTH;r++)if(t.charCodeAt(r)!=this.readInt8(this.position_+w.SIZEOF_INT+r))return!1;return!0},w.ByteBuffer.prototype.createLong=function(t,r){return w.Long.create(t,r)}})),F,Pr=O((()=>{var t,r,e,n;wn(),t=F||={},r=t.experimental||={},e=r.fbs||={},(n=e.AttributeType||={})[n.UNDEFINED=0]="UNDEFINED",n[n.FLOAT=1]="FLOAT",n[n.INT=2]="INT",n[n.STRING=3]="STRING",n[n.TENSOR=4]="TENSOR",n[n.GRAPH=5]="GRAPH",n[n.FLOATS=6]="FLOATS",n[n.INTS=7]="INTS",n[n.STRINGS=8]="STRINGS",n[n.TENSORS=9]="TENSORS",n[n.GRAPHS=10]="GRAPHS",n[n.SPARSE_TENSOR=11]="SPARSE_TENSOR",n[n.SPARSE_TENSORS=12]="SPARSE_TENSORS",(t=>{(t=>{(t=>{var r;(r=t.DimensionValueType||={})[r.UNKNOWN=0]="UNKNOWN",r[r.VALUE=1]="VALUE",r[r.PARAM=2]="PARAM"})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{var r;(r=t.TensorDataType||={})[r.UNDEFINED=0]="UNDEFINED",r[r.FLOAT=1]="FLOAT",r[r.UINT8=2]="UINT8",r[r.INT8=3]="INT8",r[r.UINT16=4]="UINT16",r[r.INT16=5]="INT16",r[r.INT32=6]="INT32",r[r.INT64=7]="INT64",r[r.STRING=8]="STRING",r[r.BOOL=9]="BOOL",r[r.FLOAT16=10]="FLOAT16",r[r.DOUBLE=11]="DOUBLE",r[r.UINT32=12]="UINT32",r[r.UINT64=13]="UINT64",r[r.COMPLEX64=14]="COMPLEX64",r[r.COMPLEX128=15]="COMPLEX128",r[r.BFLOAT16=16]="BFLOAT16",r[r.FLOAT8E4M3FN=17]="FLOAT8E4M3FN",r[r.FLOAT8E4M3FNUZ=18]="FLOAT8E4M3FNUZ",r[r.FLOAT8E5M2=19]="FLOAT8E5M2",r[r.FLOAT8E5M2FNUZ=20]="FLOAT8E5M2FNUZ"})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{var r;(r=t.NodeType||={})[r.Primitive=0]="Primitive",r[r.Fused=1]="Fused"})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{var r;(r=t.TypeInfoValue||={})[r.NONE=0]="NONE",r[r.tensor_type=1]="tensor_type",r[r.sequence_type=2]="sequence_type",r[r.map_type=3]="map_type"})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsShape(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsShape(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}dim(r,e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.Dimension).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}dimLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}static startShape(t){t.startObject(1)}static addDim(t,r){t.addFieldOffset(0,r,0)}static createDimVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startDimVector(t,r){t.startVector(4,r,4)}static endShape(t){return t.endObject()}static createShape(t,r){return e.startShape(t),e.addDim(t,r),e.endShape(t)}}r.Shape=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsDimension(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDimension(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}value(r){let e=this.bb.__offset(this.bb_pos,4);return e?(r||new t.experimental.fbs.DimensionValue).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}denotation(t){let r=this.bb.__offset(this.bb_pos,6);return r?this.bb.__string(this.bb_pos+r,t):null}static startDimension(t){t.startObject(2)}static addValue(t,r){t.addFieldOffset(0,r,0)}static addDenotation(t,r){t.addFieldOffset(1,r,0)}static endDimension(t){return t.endObject()}static createDimension(t,r,n){return e.startDimension(t),e.addValue(t,r),e.addDenotation(t,n),e.endDimension(t)}}r.Dimension=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsDimensionValue(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDimensionValue(t,e){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}dimType(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):0}dimValue(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}dimParam(t){let r=this.bb.__offset(this.bb_pos,8);return r?this.bb.__string(this.bb_pos+r,t):null}static startDimensionValue(t){t.startObject(3)}static addDimType(t,r){t.addFieldInt8(0,r,0)}static addDimValue(t,r){t.addFieldInt64(1,r,t.createLong(0,0))}static addDimParam(t,r){t.addFieldOffset(2,r,0)}static endDimensionValue(t){return t.endObject()}static createDimensionValue(t,e,n,d){return r.startDimensionValue(t),r.addDimType(t,e),r.addDimValue(t,n),r.addDimParam(t,d),r.endDimensionValue(t)}}t.DimensionValue=r})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsTensorTypeAndShape(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTensorTypeAndShape(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}elemType(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}shape(r){let e=this.bb.__offset(this.bb_pos,6);return e?(r||new t.experimental.fbs.Shape).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startTensorTypeAndShape(t){t.startObject(2)}static addElemType(t,r){t.addFieldInt32(0,r,0)}static addShape(t,r){t.addFieldOffset(1,r,0)}static endTensorTypeAndShape(t){return t.endObject()}static createTensorTypeAndShape(t,r,n){return e.startTensorTypeAndShape(t),e.addElemType(t,r),e.addShape(t,n),e.endTensorTypeAndShape(t)}}r.TensorTypeAndShape=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsMapType(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMapType(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}keyType(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}valueType(r){let e=this.bb.__offset(this.bb_pos,6);return e?(r||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startMapType(t){t.startObject(2)}static addKeyType(t,r){t.addFieldInt32(0,r,0)}static addValueType(t,r){t.addFieldOffset(1,r,0)}static endMapType(t){return t.endObject()}static createMapType(t,r,n){return e.startMapType(t),e.addKeyType(t,r),e.addValueType(t,n),e.endMapType(t)}}r.MapType=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsSequenceType(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSequenceType(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}elemType(r){let e=this.bb.__offset(this.bb_pos,4);return e?(r||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startSequenceType(t){t.startObject(1)}static addElemType(t,r){t.addFieldOffset(0,r,0)}static endSequenceType(t){return t.endObject()}static createSequenceType(t,r){return e.startSequenceType(t),e.addElemType(t,r),e.endSequenceType(t)}}r.SequenceType=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{t.EdgeEnd=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}nodeIndex(){return this.bb.readUint32(this.bb_pos)}srcArgIndex(){return this.bb.readInt32(this.bb_pos+4)}dstArgIndex(){return this.bb.readInt32(this.bb_pos+8)}static createEdgeEnd(t,r,e,n){return t.prep(4,12),t.writeInt32(n),t.writeInt32(e),t.writeInt32(r),t.offset()}}})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsNodeEdge(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNodeEdge(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}nodeIndex(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readUint32(this.bb_pos+t):0}inputEdges(r,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+n)+12*r,this.bb):null}inputEdgesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}outputEdges(r,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new t.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+n)+12*r,this.bb):null}outputEdgesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startNodeEdge(t){t.startObject(3)}static addNodeIndex(t,r){t.addFieldInt32(0,r,0)}static addInputEdges(t,r){t.addFieldOffset(1,r,0)}static startInputEdgesVector(t,r){t.startVector(12,r,4)}static addOutputEdges(t,r){t.addFieldOffset(2,r,0)}static startOutputEdgesVector(t,r){t.startVector(12,r,4)}static endNodeEdge(t){return t.endObject()}static createNodeEdge(t,r,n,d){return e.startNodeEdge(t),e.addNodeIndex(t,r),e.addInputEdges(t,n),e.addOutputEdges(t,d),e.endNodeEdge(t)}}r.NodeEdge=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsNode(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNode(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}name(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}docString(t){let r=this.bb.__offset(this.bb_pos,6);return r?this.bb.__string(this.bb_pos+r,t):null}domain(t){let r=this.bb.__offset(this.bb_pos,8);return r?this.bb.__string(this.bb_pos+r,t):null}sinceVersion(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt32(this.bb_pos+t):0}index(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.readUint32(this.bb_pos+t):0}opType(t){let r=this.bb.__offset(this.bb_pos,14);return r?this.bb.__string(this.bb_pos+r,t):null}type(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.readInt32(this.bb_pos+t):0}executionProviderType(t){let r=this.bb.__offset(this.bb_pos,18);return r?this.bb.__string(this.bb_pos+r,t):null}inputs(t,r){let e=this.bb.__offset(this.bb_pos,20);return e?this.bb.__string(this.bb.__vector(this.bb_pos+e)+4*t,r):null}inputsLength(){let t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}outputs(t,r){let e=this.bb.__offset(this.bb_pos,22);return e?this.bb.__string(this.bb.__vector(this.bb_pos+e)+4*t,r):null}outputsLength(){let t=this.bb.__offset(this.bb_pos,22);return t?this.bb.__vector_len(this.bb_pos+t):0}attributes(r,e){let n=this.bb.__offset(this.bb_pos,24);return n?(e||new t.experimental.fbs.Attribute).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}attributesLength(){let t=this.bb.__offset(this.bb_pos,24);return t?this.bb.__vector_len(this.bb_pos+t):0}inputArgCounts(t){let r=this.bb.__offset(this.bb_pos,26);return r?this.bb.readInt32(this.bb.__vector(this.bb_pos+r)+4*t):0}inputArgCountsLength(){let t=this.bb.__offset(this.bb_pos,26);return t?this.bb.__vector_len(this.bb_pos+t):0}inputArgCountsArray(){let t=this.bb.__offset(this.bb_pos,26);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}implicitInputs(t,r){let e=this.bb.__offset(this.bb_pos,28);return e?this.bb.__string(this.bb.__vector(this.bb_pos+e)+4*t,r):null}implicitInputsLength(){let t=this.bb.__offset(this.bb_pos,28);return t?this.bb.__vector_len(this.bb_pos+t):0}static startNode(t){t.startObject(13)}static addName(t,r){t.addFieldOffset(0,r,0)}static addDocString(t,r){t.addFieldOffset(1,r,0)}static addDomain(t,r){t.addFieldOffset(2,r,0)}static addSinceVersion(t,r){t.addFieldInt32(3,r,0)}static addIndex(t,r){t.addFieldInt32(4,r,0)}static addOpType(t,r){t.addFieldOffset(5,r,0)}static addType(t,r){t.addFieldInt32(6,r,0)}static addExecutionProviderType(t,r){t.addFieldOffset(7,r,0)}static addInputs(t,r){t.addFieldOffset(8,r,0)}static createInputsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startInputsVector(t,r){t.startVector(4,r,4)}static addOutputs(t,r){t.addFieldOffset(9,r,0)}static createOutputsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startOutputsVector(t,r){t.startVector(4,r,4)}static addAttributes(t,r){t.addFieldOffset(10,r,0)}static createAttributesVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startAttributesVector(t,r){t.startVector(4,r,4)}static addInputArgCounts(t,r){t.addFieldOffset(11,r,0)}static createInputArgCountsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addInt32(r[e]);return t.endVector()}static startInputArgCountsVector(t,r){t.startVector(4,r,4)}static addImplicitInputs(t,r){t.addFieldOffset(12,r,0)}static createImplicitInputsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startImplicitInputsVector(t,r){t.startVector(4,r,4)}static endNode(t){return t.endObject()}static createNode(t,r,n,d,o,a,l,i,A,B,s,g,p,C){return e.startNode(t),e.addName(t,r),e.addDocString(t,n),e.addDomain(t,d),e.addSinceVersion(t,o),e.addIndex(t,a),e.addOpType(t,l),e.addType(t,i),e.addExecutionProviderType(t,A),e.addInputs(t,B),e.addOutputs(t,s),e.addAttributes(t,g),e.addInputArgCounts(t,p),e.addImplicitInputs(t,C),e.endNode(t)}}r.Node=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsValueInfo(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsValueInfo(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}name(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}docString(t){let r=this.bb.__offset(this.bb_pos,6);return r?this.bb.__string(this.bb_pos+r,t):null}type(r){let e=this.bb.__offset(this.bb_pos,8);return e?(r||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startValueInfo(t){t.startObject(3)}static addName(t,r){t.addFieldOffset(0,r,0)}static addDocString(t,r){t.addFieldOffset(1,r,0)}static addType(t,r){t.addFieldOffset(2,r,0)}static endValueInfo(t){return t.endObject()}static createValueInfo(t,r,n,d){return e.startValueInfo(t),e.addName(t,r),e.addDocString(t,n),e.addType(t,d),e.endValueInfo(t)}}r.ValueInfo=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsTypeInfo(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTypeInfo(t,e){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}denotation(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}valueType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):0}value(t){let r=this.bb.__offset(this.bb_pos,8);return r?this.bb.__union(t,this.bb_pos+r):null}static startTypeInfo(t){t.startObject(3)}static addDenotation(t,r){t.addFieldOffset(0,r,0)}static addValueType(t,r){t.addFieldInt8(1,r,0)}static addValue(t,r){t.addFieldOffset(2,r,0)}static endTypeInfo(t){return t.endObject()}static createTypeInfo(t,e,n,d){return r.startTypeInfo(t),r.addDenotation(t,e),r.addValueType(t,n),r.addValue(t,d),r.endTypeInfo(t)}}t.TypeInfo=r})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsOperatorSetId(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsOperatorSetId(t,e){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}domain(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}version(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}static startOperatorSetId(t){t.startObject(2)}static addDomain(t,r){t.addFieldOffset(0,r,0)}static addVersion(t,r){t.addFieldInt64(1,r,t.createLong(0,0))}static endOperatorSetId(t){return t.endObject()}static createOperatorSetId(t,e,n){return r.startOperatorSetId(t),r.addDomain(t,e),r.addVersion(t,n),r.endOperatorSetId(t)}}t.OperatorSetId=r})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsTensor(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTensor(t,e){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}name(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}docString(t){let r=this.bb.__offset(this.bb_pos,6);return r?this.bb.__string(this.bb_pos+r,t):null}dims(t){let r=this.bb.__offset(this.bb_pos,8);return r?this.bb.readInt64(this.bb.__vector(this.bb_pos+r)+8*t):this.bb.createLong(0,0)}dimsLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}dataType(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt32(this.bb_pos+t):0}rawData(t){let r=this.bb.__offset(this.bb_pos,12);return r?this.bb.readUint8(this.bb.__vector(this.bb_pos+r)+t):0}rawDataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}rawDataArray(){let t=this.bb.__offset(this.bb_pos,12);return t?new Uint8Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}stringData(t,r){let e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__string(this.bb.__vector(this.bb_pos+e)+4*t,r):null}stringDataLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}static startTensor(t){t.startObject(6)}static addName(t,r){t.addFieldOffset(0,r,0)}static addDocString(t,r){t.addFieldOffset(1,r,0)}static addDims(t,r){t.addFieldOffset(2,r,0)}static createDimsVector(t,r){t.startVector(8,r.length,8);for(let e=r.length-1;e>=0;e--)t.addInt64(r[e]);return t.endVector()}static startDimsVector(t,r){t.startVector(8,r,8)}static addDataType(t,r){t.addFieldInt32(3,r,0)}static addRawData(t,r){t.addFieldOffset(4,r,0)}static createRawDataVector(t,r){t.startVector(1,r.length,1);for(let e=r.length-1;e>=0;e--)t.addInt8(r[e]);return t.endVector()}static startRawDataVector(t,r){t.startVector(1,r,1)}static addStringData(t,r){t.addFieldOffset(5,r,0)}static createStringDataVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startStringDataVector(t,r){t.startVector(4,r,4)}static endTensor(t){return t.endObject()}static createTensor(t,e,n,d,o,a,l){return r.startTensor(t),r.addName(t,e),r.addDocString(t,n),r.addDims(t,d),r.addDataType(t,o),r.addRawData(t,a),r.addStringData(t,l),r.endTensor(t)}}t.Tensor=r})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsSparseTensor(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSparseTensor(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}values(r){let e=this.bb.__offset(this.bb_pos,4);return e?(r||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}indices(r){let e=this.bb.__offset(this.bb_pos,6);return e?(r||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dims(t){let r=this.bb.__offset(this.bb_pos,8);return r?this.bb.readInt64(this.bb.__vector(this.bb_pos+r)+8*t):this.bb.createLong(0,0)}dimsLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSparseTensor(t){t.startObject(3)}static addValues(t,r){t.addFieldOffset(0,r,0)}static addIndices(t,r){t.addFieldOffset(1,r,0)}static addDims(t,r){t.addFieldOffset(2,r,0)}static createDimsVector(t,r){t.startVector(8,r.length,8);for(let e=r.length-1;e>=0;e--)t.addInt64(r[e]);return t.endVector()}static startDimsVector(t,r){t.startVector(8,r,8)}static endSparseTensor(t){return t.endObject()}static createSparseTensor(t,r,n,d){return e.startSparseTensor(t),e.addValues(t,r),e.addIndices(t,n),e.addDims(t,d),e.endSparseTensor(t)}}r.SparseTensor=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsAttribute(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsAttribute(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}name(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}docString(t){let r=this.bb.__offset(this.bb_pos,6);return r?this.bb.__string(this.bb_pos+r,t):null}type(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):0}f(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readFloat32(this.bb_pos+t):0}i(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}s(t){let r=this.bb.__offset(this.bb_pos,14);return r?this.bb.__string(this.bb_pos+r,t):null}t(r){let e=this.bb.__offset(this.bb_pos,16);return e?(r||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}g(r){let e=this.bb.__offset(this.bb_pos,18);return e?(r||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}floats(t){let r=this.bb.__offset(this.bb_pos,20);return r?this.bb.readFloat32(this.bb.__vector(this.bb_pos+r)+4*t):0}floatsLength(){let t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}floatsArray(){let t=this.bb.__offset(this.bb_pos,20);return t?new Float32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}ints(t){let r=this.bb.__offset(this.bb_pos,22);return r?this.bb.readInt64(this.bb.__vector(this.bb_pos+r)+8*t):this.bb.createLong(0,0)}intsLength(){let t=this.bb.__offset(this.bb_pos,22);return t?this.bb.__vector_len(this.bb_pos+t):0}strings(t,r){let e=this.bb.__offset(this.bb_pos,24);return e?this.bb.__string(this.bb.__vector(this.bb_pos+e)+4*t,r):null}stringsLength(){let t=this.bb.__offset(this.bb_pos,24);return t?this.bb.__vector_len(this.bb_pos+t):0}tensors(r,e){let n=this.bb.__offset(this.bb_pos,26);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}tensorsLength(){let t=this.bb.__offset(this.bb_pos,26);return t?this.bb.__vector_len(this.bb_pos+t):0}graphs(r,e){let n=this.bb.__offset(this.bb_pos,28);return n?(e||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}graphsLength(){let t=this.bb.__offset(this.bb_pos,28);return t?this.bb.__vector_len(this.bb_pos+t):0}static startAttribute(t){t.startObject(13)}static addName(t,r){t.addFieldOffset(0,r,0)}static addDocString(t,r){t.addFieldOffset(1,r,0)}static addType(t,r){t.addFieldInt32(2,r,0)}static addF(t,r){t.addFieldFloat32(3,r,0)}static addI(t,r){t.addFieldInt64(4,r,t.createLong(0,0))}static addS(t,r){t.addFieldOffset(5,r,0)}static addT(t,r){t.addFieldOffset(6,r,0)}static addG(t,r){t.addFieldOffset(7,r,0)}static addFloats(t,r){t.addFieldOffset(8,r,0)}static createFloatsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addFloat32(r[e]);return t.endVector()}static startFloatsVector(t,r){t.startVector(4,r,4)}static addInts(t,r){t.addFieldOffset(9,r,0)}static createIntsVector(t,r){t.startVector(8,r.length,8);for(let e=r.length-1;e>=0;e--)t.addInt64(r[e]);return t.endVector()}static startIntsVector(t,r){t.startVector(8,r,8)}static addStrings(t,r){t.addFieldOffset(10,r,0)}static createStringsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startStringsVector(t,r){t.startVector(4,r,4)}static addTensors(t,r){t.addFieldOffset(11,r,0)}static createTensorsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startTensorsVector(t,r){t.startVector(4,r,4)}static addGraphs(t,r){t.addFieldOffset(12,r,0)}static createGraphsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startGraphsVector(t,r){t.startVector(4,r,4)}static endAttribute(t){return t.endObject()}static createAttribute(t,r,n,d,o,a,l,i,A,B,s,g,p,C){return e.startAttribute(t),e.addName(t,r),e.addDocString(t,n),e.addType(t,d),e.addF(t,o),e.addI(t,a),e.addS(t,l),e.addT(t,i),e.addG(t,A),e.addFloats(t,B),e.addInts(t,s),e.addStrings(t,g),e.addTensors(t,p),e.addGraphs(t,C),e.endAttribute(t)}}r.Attribute=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsGraph(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsGraph(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}initializers(r,e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}initializersLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}nodeArgs(r,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.ValueInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}nodeArgsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}nodes(r,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new t.experimental.fbs.Node).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}maxNodeIndex(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readUint32(this.bb_pos+t):0}nodeEdges(r,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new t.experimental.fbs.NodeEdge).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}nodeEdgesLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}inputs(t,r){let e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__string(this.bb.__vector(this.bb_pos+e)+4*t,r):null}inputsLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}outputs(t,r){let e=this.bb.__offset(this.bb_pos,16);return e?this.bb.__string(this.bb.__vector(this.bb_pos+e)+4*t,r):null}outputsLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}sparseInitializers(r,e){let n=this.bb.__offset(this.bb_pos,18);return n?(e||new t.experimental.fbs.SparseTensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}sparseInitializersLength(){let t=this.bb.__offset(this.bb_pos,18);return t?this.bb.__vector_len(this.bb_pos+t):0}static startGraph(t){t.startObject(8)}static addInitializers(t,r){t.addFieldOffset(0,r,0)}static createInitializersVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startInitializersVector(t,r){t.startVector(4,r,4)}static addNodeArgs(t,r){t.addFieldOffset(1,r,0)}static createNodeArgsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startNodeArgsVector(t,r){t.startVector(4,r,4)}static addNodes(t,r){t.addFieldOffset(2,r,0)}static createNodesVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startNodesVector(t,r){t.startVector(4,r,4)}static addMaxNodeIndex(t,r){t.addFieldInt32(3,r,0)}static addNodeEdges(t,r){t.addFieldOffset(4,r,0)}static createNodeEdgesVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startNodeEdgesVector(t,r){t.startVector(4,r,4)}static addInputs(t,r){t.addFieldOffset(5,r,0)}static createInputsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startInputsVector(t,r){t.startVector(4,r,4)}static addOutputs(t,r){t.addFieldOffset(6,r,0)}static createOutputsVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startOutputsVector(t,r){t.startVector(4,r,4)}static addSparseInitializers(t,r){t.addFieldOffset(7,r,0)}static createSparseInitializersVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startSparseInitializersVector(t,r){t.startVector(4,r,4)}static endGraph(t){return t.endObject()}static createGraph(t,r,n,d,o,a,l,i,A){return e.startGraph(t),e.addInitializers(t,r),e.addNodeArgs(t,n),e.addNodes(t,d),e.addMaxNodeIndex(t,o),e.addNodeEdges(t,a),e.addInputs(t,l),e.addOutputs(t,i),e.addSparseInitializers(t,A),e.endGraph(t)}}r.Graph=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsModel(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsModel(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}irVersion(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}opsetImport(r,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.OperatorSetId).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}opsetImportLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}producerName(t){let r=this.bb.__offset(this.bb_pos,8);return r?this.bb.__string(this.bb_pos+r,t):null}producerVersion(t){let r=this.bb.__offset(this.bb_pos,10);return r?this.bb.__string(this.bb_pos+r,t):null}domain(t){let r=this.bb.__offset(this.bb_pos,12);return r?this.bb.__string(this.bb_pos+r,t):null}modelVersion(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}docString(t){let r=this.bb.__offset(this.bb_pos,16);return r?this.bb.__string(this.bb_pos+r,t):null}graph(r){let e=this.bb.__offset(this.bb_pos,18);return e?(r||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}graphDocString(t){let r=this.bb.__offset(this.bb_pos,20);return r?this.bb.__string(this.bb_pos+r,t):null}static startModel(t){t.startObject(9)}static addIrVersion(t,r){t.addFieldInt64(0,r,t.createLong(0,0))}static addOpsetImport(t,r){t.addFieldOffset(1,r,0)}static createOpsetImportVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startOpsetImportVector(t,r){t.startVector(4,r,4)}static addProducerName(t,r){t.addFieldOffset(2,r,0)}static addProducerVersion(t,r){t.addFieldOffset(3,r,0)}static addDomain(t,r){t.addFieldOffset(4,r,0)}static addModelVersion(t,r){t.addFieldInt64(5,r,t.createLong(0,0))}static addDocString(t,r){t.addFieldOffset(6,r,0)}static addGraph(t,r){t.addFieldOffset(7,r,0)}static addGraphDocString(t,r){t.addFieldOffset(8,r,0)}static endModel(t){return t.endObject()}static createModel(t,r,n,d,o,a,l,i,A,B){return e.startModel(t),e.addIrVersion(t,r),e.addOpsetImport(t,n),e.addProducerName(t,d),e.addProducerVersion(t,o),e.addDomain(t,a),e.addModelVersion(t,l),e.addDocString(t,i),e.addGraph(t,A),e.addGraphDocString(t,B),e.endModel(t)}}r.Model=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(t=>{(t=>{class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsKernelCreateInfos(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKernelCreateInfos(t,e){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}nodeIndices(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.readUint32(this.bb.__vector(this.bb_pos+r)+4*t):0}nodeIndicesLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}nodeIndicesArray(){let t=this.bb.__offset(this.bb_pos,4);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}kernelDefHashes(t){let r=this.bb.__offset(this.bb_pos,6);return r?this.bb.readUint64(this.bb.__vector(this.bb_pos+r)+8*t):this.bb.createLong(0,0)}kernelDefHashesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}static startKernelCreateInfos(t){t.startObject(2)}static addNodeIndices(t,r){t.addFieldOffset(0,r,0)}static createNodeIndicesVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addInt32(r[e]);return t.endVector()}static startNodeIndicesVector(t,r){t.startVector(4,r,4)}static addKernelDefHashes(t,r){t.addFieldOffset(1,r,0)}static createKernelDefHashesVector(t,r){t.startVector(8,r.length,8);for(let e=r.length-1;e>=0;e--)t.addInt64(r[e]);return t.endVector()}static startKernelDefHashesVector(t,r){t.startVector(8,r,8)}static endKernelCreateInfos(t){return t.endObject()}static createKernelCreateInfos(t,e,n){return r.startKernelCreateInfos(t),r.addNodeIndices(t,e),r.addKernelDefHashes(t,n),r.endKernelCreateInfos(t)}}t.KernelCreateInfos=r})(t.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsSubGraphSessionState(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSubGraphSessionState(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}graphId(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}sessionState(r){let e=this.bb.__offset(this.bb_pos,6);return e?(r||new t.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startSubGraphSessionState(t){t.startObject(2)}static addGraphId(t,r){t.addFieldOffset(0,r,0)}static addSessionState(t,r){t.addFieldOffset(1,r,0)}static endSubGraphSessionState(t){let r=t.endObject();return t.requiredField(r,4),r}static createSubGraphSessionState(t,r,n){return e.startSubGraphSessionState(t),e.addGraphId(t,r),e.addSessionState(t,n),e.endSubGraphSessionState(t)}}r.SubGraphSessionState=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsSessionState(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSessionState(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}kernels(r){let e=this.bb.__offset(this.bb_pos,4);return e?(r||new t.experimental.fbs.KernelCreateInfos).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}subGraphSessionStates(r,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.SubGraphSessionState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+4*r),this.bb):null}subGraphSessionStatesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSessionState(t){t.startObject(2)}static addKernels(t,r){t.addFieldOffset(0,r,0)}static addSubGraphSessionStates(t,r){t.addFieldOffset(1,r,0)}static createSubGraphSessionStatesVector(t,r){t.startVector(4,r.length,4);for(let e=r.length-1;e>=0;e--)t.addOffset(r[e]);return t.endVector()}static startSubGraphSessionStatesVector(t,r){t.startVector(4,r,4)}static endSessionState(t){return t.endObject()}static createSessionState(t,r,n){return e.startSessionState(t),e.addKernels(t,r),e.addSubGraphSessionStates(t,n),e.endSessionState(t)}}r.SessionState=e})(r.fbs||={})})(t.experimental||={})})(F||={}),(t=>{(r=>{(r=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,r){return this.bb_pos=t,this.bb=r,this}static getRootAsInferenceSession(t,r){return(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInferenceSession(t,r){return t.setPosition(t.position()+w.SIZE_PREFIX_LENGTH),(r||new e).__init(t.readInt32(t.position())+t.position(),t)}static bufferHasIdentifier(t){return t.__has_identifier("ORTM")}ortVersion(t){let r=this.bb.__offset(this.bb_pos,4);return r?this.bb.__string(this.bb_pos+r,t):null}model(r){let e=this.bb.__offset(this.bb_pos,6);return e?(r||new t.experimental.fbs.Model).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}sessionState(r){let e=this.bb.__offset(this.bb_pos,8);return e?(r||new t.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startInferenceSession(t){t.startObject(3)}static addOrtVersion(t,r){t.addFieldOffset(0,r,0)}static addModel(t,r){t.addFieldOffset(1,r,0)}static addSessionState(t,r){t.addFieldOffset(2,r,0)}static endInferenceSession(t){return t.endObject()}static finishInferenceSessionBuffer(t,r){t.finish(r,"ORTM")}static finishSizePrefixedInferenceSessionBuffer(t,r){t.finish(r,"ORTM",!0)}static createInferenceSession(t,r,n,d){return e.startInferenceSession(t),e.addOrtVersion(t,r),e.addModel(t,n),e.addSessionState(t,d),e.endInferenceSession(t)}}r.InferenceSession=e})(r.fbs||={})})(t.experimental||={})})(F||={})})),js=mt(((t,r)=>{r.exports=function(t,r){for(var e=new Array(arguments.length-1),n=0,d=2,o=!0;d<arguments.length;)e[n++]=arguments[d++];return new Promise((function(d,a){e[n]=function(t){if(o)if(o=!1,t)a(t);else{for(var r=new Array(arguments.length-1),e=0;e<r.length;)r[e++]=arguments[e];d.apply(null,r)}};try{t.apply(r||null,e)}catch(t){o&&(o=!1,a(t))}}))}})),Ys=mt((t=>{var r=t;r.length=function(t){var r=t.length;if(!r)return 0;for(var e=0;--r%4>1&&"="===t.charAt(r);)++e;return Math.ceil(3*t.length)/4-e};var e,n=new Array(64),d=new Array(123);for(e=0;e<64;)d[n[e]=e<26?e+65:e<52?e+71:e<62?e-4:e-59|43]=e++;r.encode=function(t,r,e){for(var d,o=null,a=[],l=0,i=0;r<e;){var A=t[r++];switch(i){case 0:a[l++]=n[A>>2],d=(3&A)<<4,i=1;break;case 1:a[l++]=n[d|A>>4],d=(15&A)<<2,i=2;break;case 2:a[l++]=n[d|A>>6],a[l++]=n[63&A],i=0}l>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,a)),l=0)}return i&&(a[l++]=n[d],a[l++]=61,1===i&&(a[l++]=61)),o?(l&&o.push(String.fromCharCode.apply(String,a.slice(0,l))),o.join("")):String.fromCharCode.apply(String,a.slice(0,l))};var o="invalid encoding";r.decode=function(t,r,e){for(var n,a=e,l=0,i=0;i<t.length;){var A=t.charCodeAt(i++);if(61===A&&l>1)break;if(void 0===(A=d[A]))throw Error(o);switch(l){case 0:n=A,l=1;break;case 1:r[e++]=n<<2|(48&A)>>4,n=A,l=2;break;case 2:r[e++]=(15&n)<<4|(60&A)>>2,n=A,l=3;break;case 3:r[e++]=(3&n)<<6|A,l=0}}if(1===l)throw Error(o);return e-a},r.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}})),Qs=mt(((t,r)=>{function e(){this._listeners={}}r.exports=e,e.prototype.on=function(t,r,e){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:r,ctx:e||this}),this},e.prototype.off=function(t,r){if(void 0===t)this._listeners={};else if(void 0===r)this._listeners[t]=[];else for(var e=this._listeners[t],n=0;n<e.length;)e[n].fn===r?e.splice(n,1):++n;return this},e.prototype.emit=function(t){var r=this._listeners[t];if(r){for(var e=[],n=1;n<arguments.length;)e.push(arguments[n++]);for(n=0;n<r.length;)r[n].fn.apply(r[n++].ctx,e)}return this}})),au=mt(((t,r)=>{function e(t){return typeof Float32Array<"u"?function(){var r=new Float32Array([-0]),e=new Uint8Array(r.buffer),n=128===e[3];function d(t,n,d){r[0]=t,n[d]=e[0],n[d+1]=e[1],n[d+2]=e[2],n[d+3]=e[3]}function o(t,n,d){r[0]=t,n[d]=e[3],n[d+1]=e[2],n[d+2]=e[1],n[d+3]=e[0]}function a(t,n){return e[0]=t[n],e[1]=t[n+1],e[2]=t[n+2],e[3]=t[n+3],r[0]}function l(t,n){return e[3]=t[n],e[2]=t[n+1],e[1]=t[n+2],e[0]=t[n+3],r[0]}t.writeFloatLE=n?d:o,t.writeFloatBE=n?o:d,t.readFloatLE=n?a:l,t.readFloatBE=n?l:a}():function(){function r(t,r,e,n){var d=r<0?1:0;if(d&&(r=-r),0===r)t(1/r>0?0:2147483648,e,n);else if(isNaN(r))t(2143289344,e,n);else if(r>34028234663852886e22)t((d<<31|2139095040)>>>0,e,n);else if(r<11754943508222875e-54)t((d<<31|Math.round(r/1401298464324817e-60))>>>0,e,n);else{var o=Math.floor(Math.log(r)/Math.LN2);t((d<<31|o+127<<23|8388607&Math.round(r*Math.pow(2,-o)*8388608))>>>0,e,n)}}function e(t,r,e){var n=t(r,e),d=2*(n>>31)+1,o=n>>>23&255,a=8388607&n;return 255===o?a?NaN:d*(1/0):0===o?1401298464324817e-60*d*a:d*Math.pow(2,o-150)*(a+8388608)}t.writeFloatLE=r.bind(null,n),t.writeFloatBE=r.bind(null,d),t.readFloatLE=e.bind(null,o),t.readFloatBE=e.bind(null,a)}(),typeof Float64Array<"u"?function(){var r=new Float64Array([-0]),e=new Uint8Array(r.buffer),n=128===e[7];function d(t,n,d){r[0]=t,n[d]=e[0],n[d+1]=e[1],n[d+2]=e[2],n[d+3]=e[3],n[d+4]=e[4],n[d+5]=e[5],n[d+6]=e[6],n[d+7]=e[7]}function o(t,n,d){r[0]=t,n[d]=e[7],n[d+1]=e[6],n[d+2]=e[5],n[d+3]=e[4],n[d+4]=e[3],n[d+5]=e[2],n[d+6]=e[1],n[d+7]=e[0]}function a(t,n){return e[0]=t[n],e[1]=t[n+1],e[2]=t[n+2],e[3]=t[n+3],e[4]=t[n+4],e[5]=t[n+5],e[6]=t[n+6],e[7]=t[n+7],r[0]}function l(t,n){return e[7]=t[n],e[6]=t[n+1],e[5]=t[n+2],e[4]=t[n+3],e[3]=t[n+4],e[2]=t[n+5],e[1]=t[n+6],e[0]=t[n+7],r[0]}t.writeDoubleLE=n?d:o,t.writeDoubleBE=n?o:d,t.readDoubleLE=n?a:l,t.readDoubleBE=n?l:a}():function(){function r(t,r,e,n,d,o){var a=n<0?1:0;if(a&&(n=-n),0===n)t(0,d,o+r),t(1/n>0?0:2147483648,d,o+e);else if(isNaN(n))t(0,d,o+r),t(2146959360,d,o+e);else if(n>17976931348623157e292)t(0,d,o+r),t((a<<31|2146435072)>>>0,d,o+e);else{var l;if(n<22250738585072014e-324)t((l=n/5e-324)>>>0,d,o+r),t((a<<31|l/4294967296)>>>0,d,o+e);else{var i=Math.floor(Math.log(n)/Math.LN2);1024===i&&(i=1023),t(4503599627370496*(l=n*Math.pow(2,-i))>>>0,d,o+r),t((a<<31|i+1023<<20|1048576*l&1048575)>>>0,d,o+e)}}}function e(t,r,e,n,d){var o=t(n,d+r),a=t(n,d+e),l=2*(a>>31)+1,i=a>>>20&2047,A=4294967296*(1048575&a)+o;return 2047===i?A?NaN:l*(1/0):0===i?5e-324*l*A:l*Math.pow(2,i-1075)*(A+4503599627370496)}t.writeDoubleLE=r.bind(null,n,0,4),t.writeDoubleBE=r.bind(null,d,4,0),t.readDoubleLE=e.bind(null,o,0,4),t.readDoubleBE=e.bind(null,a,4,0)}(),t}function n(t,r,e){r[e]=255&t,r[e+1]=t>>>8&255,r[e+2]=t>>>16&255,r[e+3]=t>>>24}function d(t,r,e){r[e]=t>>>24,r[e+1]=t>>>16&255,r[e+2]=t>>>8&255,r[e+3]=255&t}function o(t,r){return(t[r]|t[r+1]<<8|t[r+2]<<16|t[r+3]<<24)>>>0}function a(t,r){return(t[r]<<24|t[r+1]<<16|t[r+2]<<8|t[r+3])>>>0}r.exports=e(e)})),su=mt(((exports,module)=>{function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(t){}return null}module.exports=inquire})),lu=mt((t=>{var r=t;r.length=function(t){for(var r=0,e=0,n=0;n<t.length;++n)(e=t.charCodeAt(n))<128?r+=1:e<2048?r+=2:55296==(64512&e)&&56320==(64512&t.charCodeAt(n+1))?(++n,r+=4):r+=3;return r},r.read=function(t,r,e){if(e-r<1)return"";for(var n,d=null,o=[],a=0;r<e;)(n=t[r++])<128?o[a++]=n:n>191&&n<224?o[a++]=(31&n)<<6|63&t[r++]:n>239&&n<365?(n=((7&n)<<18|(63&t[r++])<<12|(63&t[r++])<<6|63&t[r++])-65536,o[a++]=55296+(n>>10),o[a++]=56320+(1023&n)):o[a++]=(15&n)<<12|(63&t[r++])<<6|63&t[r++],a>8191&&((d||(d=[])).push(String.fromCharCode.apply(String,o)),a=0);return d?(a&&d.push(String.fromCharCode.apply(String,o.slice(0,a))),d.join("")):String.fromCharCode.apply(String,o.slice(0,a))},r.write=function(t,r,e){for(var n,d,o=e,a=0;a<t.length;++a)(n=t.charCodeAt(a))<128?r[e++]=n:n<2048?(r[e++]=n>>6|192,r[e++]=63&n|128):55296==(64512&n)&&56320==(64512&(d=t.charCodeAt(a+1)))?(n=65536+((1023&n)<<10)+(1023&d),++a,r[e++]=n>>18|240,r[e++]=n>>12&63|128,r[e++]=n>>6&63|128,r[e++]=63&n|128):(r[e++]=n>>12|224,r[e++]=n>>6&63|128,r[e++]=63&n|128);return e-o}})),cu=mt(((t,r)=>{r.exports=function(t,r,e){var n=e||8192,d=n>>>1,o=null,a=n;return function(e){if(e<1||e>d)return t(e);a+e>n&&(o=t(n),a=0);var l=r.call(o,a,a+=e);return 7&a&&(a=1+(7|a)),l}}})),du=mt(((t,r)=>{r.exports=n;var e=Se();function n(t,r){this.lo=t>>>0,this.hi=r>>>0}var d=n.zero=new n(0,0);d.toNumber=function(){return 0},d.zzEncode=d.zzDecode=function(){return this},d.length=function(){return 1};var o=n.zeroHash="\0\0\0\0\0\0\0\0";n.fromNumber=function(t){if(0===t)return d;var r=t<0;r&&(t=-t);var e=t>>>0,o=(t-e)/4294967296>>>0;return r&&(o=~o>>>0,e=~e>>>0,++e>4294967295&&(e=0,++o>4294967295&&(o=0))),new n(e,o)},n.from=function(t){if("number"==typeof t)return n.fromNumber(t);if(e.isString(t)){if(!e.Long)return n.fromNumber(parseInt(t,10));t=e.Long.fromString(t)}return t.low||t.high?new n(t.low>>>0,t.high>>>0):d},n.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var r=1+~this.lo>>>0,e=~this.hi>>>0;return r||(e=e+1>>>0),-(r+4294967296*e)}return this.lo+4294967296*this.hi},n.prototype.toLong=function(t){return e.Long?new e.Long(0|this.lo,0|this.hi,!!t):{low:0|this.lo,high:0|this.hi,unsigned:!!t}};var a=String.prototype.charCodeAt;n.fromHash=function(t){return t===o?d:new n((a.call(t,0)|a.call(t,1)<<8|a.call(t,2)<<16|a.call(t,3)<<24)>>>0,(a.call(t,4)|a.call(t,5)<<8|a.call(t,6)<<16|a.call(t,7)<<24)>>>0)},n.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},n.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this},n.prototype.zzDecode=function(){var t=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this},n.prototype.length=function(){var t=this.lo,r=(this.lo>>>28|this.hi<<4)>>>0,e=this.hi>>>24;return 0===e?0===r?t<16384?t<128?1:2:t<2097152?3:4:r<16384?r<128?5:6:r<2097152?7:8:e<128?9:10}})),Se=mt((t=>{var r=t;function e(t,r,e){for(var n=Object.keys(r),d=0;d<n.length;++d)(void 0===t[n[d]]||!e)&&(t[n[d]]=r[n[d]]);return t}function n(t){function r(t,n){if(!(this instanceof r))return new r(t,n);Object.defineProperty(this,"message",{get:function(){return t}}),Error.captureStackTrace?Error.captureStackTrace(this,r):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),n&&e(this,n)}return r.prototype=Object.create(Error.prototype,{constructor:{value:r,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return t},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),r}r.asPromise=js(),r.base64=Ys(),r.EventEmitter=Qs(),r.float=au(),r.inquire=su(),r.utf8=lu(),r.pool=cu(),r.LongBits=du(),r.isNode=!!(typeof global<"u"&&global&&global.process&&global.process.versions&&global.process.versions.node),r.global=r.isNode&&global||typeof window<"u"&&window||typeof self<"u"&&self||t,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},r.isString=function(t){return"string"==typeof t||t instanceof String},r.isObject=function(t){return t&&"object"==typeof t},r.isset=r.isSet=function(t,r){var e=t[r];return!(null==e||!t.hasOwnProperty(r))&&("object"!=typeof e||(Array.isArray(e)?e.length:Object.keys(e).length)>0)},r.Buffer=function(){try{var t=r.inquire("buffer").Buffer;return t.prototype.utf8Write?t:null}catch{return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(t){return"number"==typeof t?r.Buffer?r._Buffer_allocUnsafe(t):new r.Array(t):r.Buffer?r._Buffer_from(t):typeof Uint8Array>"u"?t:new Uint8Array(t)},r.Array=typeof Uint8Array<"u"?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire("long"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(t){return t?r.LongBits.from(t).toHash():r.LongBits.zeroHash},r.longFromHash=function(t,e){var n=r.LongBits.fromHash(t);return r.Long?r.Long.fromBits(n.lo,n.hi,e):n.toNumber(!!e)},r.merge=e,r.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)},r.newError=n,r.ProtocolError=n("ProtocolError"),r.oneOfGetter=function(t){for(var r={},e=0;e<t.length;++e)r[t[e]]=1;return function(){for(var t=Object.keys(this),e=t.length-1;e>-1;--e)if(1===r[t[e]]&&void 0!==this[t[e]]&&null!==this[t[e]])return t[e]}},r.oneOfSetter=function(t){return function(r){for(var e=0;e<t.length;++e)t[e]!==r&&delete this[t[e]]}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var t=r.Buffer;t?(r._Buffer_from=t.from!==Uint8Array.from&&t.from||function(r,e){return new t(r,e)},r._Buffer_allocUnsafe=t.allocUnsafe||function(r){return new t(r)}):r._Buffer_from=r._Buffer_allocUnsafe=null}})),ei=mt(((t,r)=>{r.exports=B;var e,n=Se(),d=n.LongBits,o=n.base64,a=n.utf8;function l(t,r,e){this.fn=t,this.len=r,this.next=void 0,this.val=e}function i(){}function A(t){this.head=t.head,this.tail=t.tail,this.len=t.len,this.next=t.states}function B(){this.len=0,this.head=new l(i,0,0),this.tail=this.head,this.states=null}var s=function(){return n.Buffer?function(){return(B.create=function(){return new e})()}:function(){return new B}};function g(t,r,e){r[e]=255&t}function p(t,r){this.len=t,this.next=void 0,this.val=r}function C(t,r,e){for(;t.hi;)r[e++]=127&t.lo|128,t.lo=(t.lo>>>7|t.hi<<25)>>>0,t.hi>>>=7;for(;t.lo>127;)r[e++]=127&t.lo|128,t.lo=t.lo>>>7;r[e++]=t.lo}function u(t,r,e){r[e]=255&t,r[e+1]=t>>>8&255,r[e+2]=t>>>16&255,r[e+3]=t>>>24}B.create=s(),B.alloc=function(t){return new n.Array(t)},n.Array!==Array&&(B.alloc=n.pool(B.alloc,n.Array.prototype.subarray)),B.prototype._push=function(t,r,e){return this.tail=this.tail.next=new l(t,r,e),this.len+=r,this},p.prototype=Object.create(l.prototype),p.prototype.fn=function(t,r,e){for(;t>127;)r[e++]=127&t|128,t>>>=7;r[e]=t},B.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new p((t>>>=0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this},B.prototype.int32=function(t){return t<0?this._push(C,10,d.fromNumber(t)):this.uint32(t)},B.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)},B.prototype.uint64=function(t){var r=d.from(t);return this._push(C,r.length(),r)},B.prototype.int64=B.prototype.uint64,B.prototype.sint64=function(t){var r=d.from(t).zzEncode();return this._push(C,r.length(),r)},B.prototype.bool=function(t){return this._push(g,1,t?1:0)},B.prototype.fixed32=function(t){return this._push(u,4,t>>>0)},B.prototype.sfixed32=B.prototype.fixed32,B.prototype.fixed64=function(t){var r=d.from(t);return this._push(u,4,r.lo)._push(u,4,r.hi)},B.prototype.sfixed64=B.prototype.fixed64,B.prototype.float=function(t){return this._push(n.float.writeFloatLE,4,t)},B.prototype.double=function(t){return this._push(n.float.writeDoubleLE,8,t)};var K=n.Array.prototype.set?function(t,r,e){r.set(t,e)}:function(t,r,e){for(var n=0;n<t.length;++n)r[e+n]=t[n]};B.prototype.bytes=function(t){var r=t.length>>>0;if(!r)return this._push(g,1,0);if(n.isString(t)){var e=B.alloc(r=o.length(t));o.decode(t,e,0),t=e}return this.uint32(r)._push(K,r,t)},B.prototype.string=function(t){var r=a.length(t);return r?this.uint32(r)._push(a.write,r,t):this._push(g,1,0)},B.prototype.fork=function(){return this.states=new A(this),this.head=this.tail=new l(i,0,0),this.len=0,this},B.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new l(i,0,0),this.len=0),this},B.prototype.ldelim=function(){var t=this.head,r=this.tail,e=this.len;return this.reset().uint32(e),e&&(this.tail.next=t.next,this.tail=r,this.len+=e),this},B.prototype.finish=function(){for(var t=this.head.next,r=this.constructor.alloc(this.len),e=0;t;)t.fn(t.val,r,e),e+=t.len,t=t.next;return r},B._configure=function(t){e=t,B.create=s(),e._configure()}})),vu=mt(((t,r)=>{r.exports=d;var e=ei();(d.prototype=Object.create(e.prototype)).constructor=d;var n=Se();function d(){e.call(this)}function o(t,r,e){t.length<40?n.utf8.write(t,r,e):r.utf8Write?r.utf8Write(t,e):r.write(t,e)}d._configure=function(){d.alloc=n._Buffer_allocUnsafe,d.writeBytesBuffer=n.Buffer&&n.Buffer.prototype instanceof Uint8Array&&"set"===n.Buffer.prototype.set.name?function(t,r,e){r.set(t,e)}:function(t,r,e){if(t.copy)t.copy(r,e,0,t.length);else for(var n=0;n<t.length;)r[e++]=t[n++]}},d.prototype.bytes=function(t){n.isString(t)&&(t=n._Buffer_from(t,"base64"));var r=t.length>>>0;return this.uint32(r),r&&this._push(d.writeBytesBuffer,r,t),this},d.prototype.string=function(t){var r=n.Buffer.byteLength(t);return this.uint32(r),r&&this._push(o,r,t),this},d._configure()})),oi=mt(((t,r)=>{r.exports=l;var e,n=Se(),d=n.LongBits,o=n.utf8;function a(t,r){return RangeError("index out of range: "+t.pos+" + "+(r||1)+" > "+t.len)}function l(t){this.buf=t,this.pos=0,this.len=t.length}var i,A=typeof Uint8Array<"u"?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new l(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new l(t);throw Error("illegal buffer")},B=function(){return n.Buffer?function(t){return(l.create=function(t){return n.Buffer.isBuffer(t)?new e(t):A(t)})(t)}:A};function s(){var t=new d(0,0),r=0;if(!(this.len-this.pos>4)){for(;r<3;++r){if(this.pos>=this.len)throw a(this);if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*r)>>>0,this.buf[this.pos++]<128)return t}return t.lo=(t.lo|(127&this.buf[this.pos++])<<7*r)>>>0,t}for(;r<4;++r)if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*r)>>>0,this.buf[this.pos++]<128)return t;if(t.lo=(t.lo|(127&this.buf[this.pos])<<28)>>>0,t.hi=(t.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return t;if(r=0,this.len-this.pos>4){for(;r<5;++r)if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*r+3)>>>0,this.buf[this.pos++]<128)return t}else for(;r<5;++r){if(this.pos>=this.len)throw a(this);if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*r+3)>>>0,this.buf[this.pos++]<128)return t}throw Error("invalid varint encoding")}function g(t,r){return(t[r-4]|t[r-3]<<8|t[r-2]<<16|t[r-1]<<24)>>>0}function p(){if(this.pos+8>this.len)throw a(this,8);return new d(g(this.buf,this.pos+=4),g(this.buf,this.pos+=4))}l.create=B(),l.prototype._slice=n.Array.prototype.subarray||n.Array.prototype.slice,l.prototype.uint32=(i=4294967295,function(){if(i=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128||(i=(i|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)||(i=(i|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)||(i=(i|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)||(i=(i|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128))return i;if((this.pos+=5)>this.len)throw this.pos=this.len,a(this,10);return i}),l.prototype.int32=function(){return 0|this.uint32()},l.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(1&t)},l.prototype.bool=function(){return 0!==this.uint32()},l.prototype.fixed32=function(){if(this.pos+4>this.len)throw a(this,4);return g(this.buf,this.pos+=4)},l.prototype.sfixed32=function(){if(this.pos+4>this.len)throw a(this,4);return 0|g(this.buf,this.pos+=4)},l.prototype.float=function(){if(this.pos+4>this.len)throw a(this,4);var t=n.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t},l.prototype.double=function(){if(this.pos+8>this.len)throw a(this,4);var t=n.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t},l.prototype.bytes=function(){var t=this.uint32(),r=this.pos,e=this.pos+t;if(e>this.len)throw a(this,t);if(this.pos+=t,Array.isArray(this.buf))return this.buf.slice(r,e);if(r===e){var d=n.Buffer;return d?d.alloc(0):new this.buf.constructor(0)}return this._slice.call(this.buf,r,e)},l.prototype.string=function(){var t=this.bytes();return o.read(t,0,t.length)},l.prototype.skip=function(t){if("number"==typeof t){if(this.pos+t>this.len)throw a(this,t);this.pos+=t}else do{if(this.pos>=this.len)throw a(this)}while(128&this.buf[this.pos++]);return this},l.prototype.skipType=function(t){switch(t){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(t=7&this.uint32());)this.skipType(t);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+t+" at offset "+this.pos)}return this},l._configure=function(t){e=t,l.create=B(),e._configure();var r=n.Long?"toLong":"toNumber";n.merge(l.prototype,{int64:function(){return s.call(this)[r](!1)},uint64:function(){return s.call(this)[r](!0)},sint64:function(){return s.call(this).zzDecode()[r](!1)},fixed64:function(){return p.call(this)[r](!0)},sfixed64:function(){return p.call(this)[r](!1)}})}})),Lu=mt(((t,r)=>{r.exports=d;var e=oi();(d.prototype=Object.create(e.prototype)).constructor=d;var n=Se();function d(t){e.call(this,t)}d._configure=function(){n.Buffer&&(d.prototype._slice=n.Buffer.prototype.slice)},d.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+t,this.len))},d._configure()})),ku=mt(((t,r)=>{r.exports=n;var e=Se();function n(t,r,n){if("function"!=typeof t)throw TypeError("rpcImpl must be a function");e.EventEmitter.call(this),this.rpcImpl=t,this.requestDelimited=!!r,this.responseDelimited=!!n}(n.prototype=Object.create(e.EventEmitter.prototype)).constructor=n,n.prototype.rpcCall=function t(r,n,d,o,a){if(!o)throw TypeError("request must be specified");var l=this;if(!a)return e.asPromise(t,l,r,n,d,o);if(l.rpcImpl)try{return l.rpcImpl(r,n[l.requestDelimited?"encodeDelimited":"encode"](o).finish(),(function(t,e){if(t)return l.emit("error",t,r),a(t);if(null!==e){if(!(e instanceof d))try{e=d[l.responseDelimited?"decodeDelimited":"decode"](e)}catch(t){return l.emit("error",t,r),a(t)}return l.emit("data",e,r),a(null,e)}l.end(!0)}))}catch(t){return l.emit("error",t,r),void setTimeout((function(){a(t)}),0)}else setTimeout((function(){a(Error("already ended"))}),0)},n.prototype.end=function(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}})),Fu=mt((t=>{t.Service=ku()})),Nu=mt(((t,r)=>{r.exports={}})),Mu=mt((t=>{var r=t;function e(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader)}r.build="minimal",r.Writer=ei(),r.BufferWriter=vu(),r.Reader=oi(),r.BufferReader=Lu(),r.util=Se(),r.rpc=Fu(),r.roots=Nu(),r.configure=e,e()})),Vu=mt(((t,r)=>{r.exports=Mu()})),sr=mt(((t,r)=>{var e=Vu(),n=e.Reader,d=e.Writer,o=e.util,a=e.roots.default||(e.roots.default={});a.onnx=function(){var t,r,l={};return l.Version=(t={},(r=Object.create(t))[t[0]="_START_VERSION"]=0,r[t[1]="IR_VERSION_2017_10_10"]=1,r[t[2]="IR_VERSION_2017_10_30"]=2,r[t[3]="IR_VERSION_2017_11_3"]=3,r[t[4]="IR_VERSION_2019_1_22"]=4,r[t[5]="IR_VERSION_2019_3_18"]=5,r[t[6]="IR_VERSION_2019_9_19"]=6,r[t[7]="IR_VERSION_2020_5_8"]=7,r[t[8]="IR_VERSION_2021_7_30"]=8,r[t[9]="IR_VERSION"]=9,r),l.AttributeProto=function(){function t(t){if(this.floats=[],this.ints=[],this.strings=[],this.tensors=[],this.graphs=[],this.sparseTensors=[],this.typeProtos=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.name="",t.prototype.refAttrName="",t.prototype.docString="",t.prototype.type=0,t.prototype.f=0,t.prototype.i=o.Long?o.Long.fromBits(0,0,!1):0,t.prototype.s=o.newBuffer([]),t.prototype.t=null,t.prototype.g=null,t.prototype.sparseTensor=null,t.prototype.tp=null,t.prototype.floats=o.emptyArray,t.prototype.ints=o.emptyArray,t.prototype.strings=o.emptyArray,t.prototype.tensors=o.emptyArray,t.prototype.graphs=o.emptyArray,t.prototype.sparseTensors=o.emptyArray,t.prototype.typeProtos=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.name&&Object.hasOwnProperty.call(t,"name")&&r.uint32(10).string(t.name),null!=t.f&&Object.hasOwnProperty.call(t,"f")&&r.uint32(21).float(t.f),null!=t.i&&Object.hasOwnProperty.call(t,"i")&&r.uint32(24).int64(t.i),null!=t.s&&Object.hasOwnProperty.call(t,"s")&&r.uint32(34).bytes(t.s),null!=t.t&&Object.hasOwnProperty.call(t,"t")&&a.onnx.TensorProto.encode(t.t,r.uint32(42).fork()).ldelim(),null!=t.g&&Object.hasOwnProperty.call(t,"g")&&a.onnx.GraphProto.encode(t.g,r.uint32(50).fork()).ldelim(),null!=t.floats&&t.floats.length){r.uint32(58).fork();for(var e=0;e<t.floats.length;++e)r.float(t.floats[e]);r.ldelim()}if(null!=t.ints&&t.ints.length){for(r.uint32(66).fork(),e=0;e<t.ints.length;++e)r.int64(t.ints[e]);r.ldelim()}if(null!=t.strings&&t.strings.length)for(e=0;e<t.strings.length;++e)r.uint32(74).bytes(t.strings[e]);if(null!=t.tensors&&t.tensors.length)for(e=0;e<t.tensors.length;++e)a.onnx.TensorProto.encode(t.tensors[e],r.uint32(82).fork()).ldelim();if(null!=t.graphs&&t.graphs.length)for(e=0;e<t.graphs.length;++e)a.onnx.GraphProto.encode(t.graphs[e],r.uint32(90).fork()).ldelim();if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&r.uint32(106).string(t.docString),null!=t.tp&&Object.hasOwnProperty.call(t,"tp")&&a.onnx.TypeProto.encode(t.tp,r.uint32(114).fork()).ldelim(),null!=t.typeProtos&&t.typeProtos.length)for(e=0;e<t.typeProtos.length;++e)a.onnx.TypeProto.encode(t.typeProtos[e],r.uint32(122).fork()).ldelim();if(null!=t.type&&Object.hasOwnProperty.call(t,"type")&&r.uint32(160).int32(t.type),null!=t.refAttrName&&Object.hasOwnProperty.call(t,"refAttrName")&&r.uint32(170).string(t.refAttrName),null!=t.sparseTensor&&Object.hasOwnProperty.call(t,"sparseTensor")&&a.onnx.SparseTensorProto.encode(t.sparseTensor,r.uint32(178).fork()).ldelim(),null!=t.sparseTensors&&t.sparseTensors.length)for(e=0;e<t.sparseTensors.length;++e)a.onnx.SparseTensorProto.encode(t.sparseTensors[e],r.uint32(186).fork()).ldelim();return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.AttributeProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.name=t.string();break;case 21:d.refAttrName=t.string();break;case 13:d.docString=t.string();break;case 20:d.type=t.int32();break;case 2:d.f=t.float();break;case 3:d.i=t.int64();break;case 4:d.s=t.bytes();break;case 5:d.t=a.onnx.TensorProto.decode(t,t.uint32());break;case 6:d.g=a.onnx.GraphProto.decode(t,t.uint32());break;case 22:d.sparseTensor=a.onnx.SparseTensorProto.decode(t,t.uint32());break;case 14:d.tp=a.onnx.TypeProto.decode(t,t.uint32());break;case 7:if(d.floats&&d.floats.length||(d.floats=[]),2==(7&o))for(var l=t.uint32()+t.pos;t.pos<l;)d.floats.push(t.float());else d.floats.push(t.float());break;case 8:if(d.ints&&d.ints.length||(d.ints=[]),2==(7&o))for(l=t.uint32()+t.pos;t.pos<l;)d.ints.push(t.int64());else d.ints.push(t.int64());break;case 9:d.strings&&d.strings.length||(d.strings=[]),d.strings.push(t.bytes());break;case 10:d.tensors&&d.tensors.length||(d.tensors=[]),d.tensors.push(a.onnx.TensorProto.decode(t,t.uint32()));break;case 11:d.graphs&&d.graphs.length||(d.graphs=[]),d.graphs.push(a.onnx.GraphProto.decode(t,t.uint32()));break;case 23:d.sparseTensors&&d.sparseTensors.length||(d.sparseTensors=[]),d.sparseTensors.push(a.onnx.SparseTensorProto.decode(t,t.uint32()));break;case 15:d.typeProtos&&d.typeProtos.length||(d.typeProtos=[]),d.typeProtos.push(a.onnx.TypeProto.decode(t,t.uint32()));break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.name&&t.hasOwnProperty("name")&&!o.isString(t.name))return"name: string expected";if(null!=t.refAttrName&&t.hasOwnProperty("refAttrName")&&!o.isString(t.refAttrName))return"refAttrName: string expected";if(null!=t.docString&&t.hasOwnProperty("docString")&&!o.isString(t.docString))return"docString: string expected";if(null!=t.type&&t.hasOwnProperty("type"))switch(t.type){default:return"type: enum value expected";case 0:case 1:case 2:case 3:case 4:case 5:case 11:case 13:case 6:case 7:case 8:case 9:case 10:case 12:case 14:}if(null!=t.f&&t.hasOwnProperty("f")&&"number"!=typeof t.f)return"f: number expected";if(null!=t.i&&t.hasOwnProperty("i")&&!o.isInteger(t.i)&&!(t.i&&o.isInteger(t.i.low)&&o.isInteger(t.i.high)))return"i: integer|Long expected";if(null!=t.s&&t.hasOwnProperty("s")&&!(t.s&&"number"==typeof t.s.length||o.isString(t.s)))return"s: buffer expected";if(null!=t.t&&t.hasOwnProperty("t")&&(e=a.onnx.TensorProto.verify(t.t)))return"t."+e;if(null!=t.g&&t.hasOwnProperty("g")&&(e=a.onnx.GraphProto.verify(t.g)))return"g."+e;if(null!=t.sparseTensor&&t.hasOwnProperty("sparseTensor")&&(e=a.onnx.SparseTensorProto.verify(t.sparseTensor)))return"sparseTensor."+e;if(null!=t.tp&&t.hasOwnProperty("tp")&&(e=a.onnx.TypeProto.verify(t.tp)))return"tp."+e;if(null!=t.floats&&t.hasOwnProperty("floats")){if(!Array.isArray(t.floats))return"floats: array expected";for(var r=0;r<t.floats.length;++r)if("number"!=typeof t.floats[r])return"floats: number[] expected"}if(null!=t.ints&&t.hasOwnProperty("ints")){if(!Array.isArray(t.ints))return"ints: array expected";for(r=0;r<t.ints.length;++r)if(!(o.isInteger(t.ints[r])||t.ints[r]&&o.isInteger(t.ints[r].low)&&o.isInteger(t.ints[r].high)))return"ints: integer|Long[] expected"}if(null!=t.strings&&t.hasOwnProperty("strings")){if(!Array.isArray(t.strings))return"strings: array expected";for(r=0;r<t.strings.length;++r)if(!(t.strings[r]&&"number"==typeof t.strings[r].length||o.isString(t.strings[r])))return"strings: buffer[] expected"}if(null!=t.tensors&&t.hasOwnProperty("tensors")){if(!Array.isArray(t.tensors))return"tensors: array expected";for(r=0;r<t.tensors.length;++r)if(e=a.onnx.TensorProto.verify(t.tensors[r]))return"tensors."+e}if(null!=t.graphs&&t.hasOwnProperty("graphs")){if(!Array.isArray(t.graphs))return"graphs: array expected";for(r=0;r<t.graphs.length;++r)if(e=a.onnx.GraphProto.verify(t.graphs[r]))return"graphs."+e}if(null!=t.sparseTensors&&t.hasOwnProperty("sparseTensors")){if(!Array.isArray(t.sparseTensors))return"sparseTensors: array expected";for(r=0;r<t.sparseTensors.length;++r)if(e=a.onnx.SparseTensorProto.verify(t.sparseTensors[r]))return"sparseTensors."+e}if(null!=t.typeProtos&&t.hasOwnProperty("typeProtos")){if(!Array.isArray(t.typeProtos))return"typeProtos: array expected";for(r=0;r<t.typeProtos.length;++r){var e;if(e=a.onnx.TypeProto.verify(t.typeProtos[r]))return"typeProtos."+e}}return null},t.fromObject=function(t){if(t instanceof a.onnx.AttributeProto)return t;var r=new a.onnx.AttributeProto;switch(null!=t.name&&(r.name=String(t.name)),null!=t.refAttrName&&(r.refAttrName=String(t.refAttrName)),null!=t.docString&&(r.docString=String(t.docString)),t.type){default:if("number"==typeof t.type){r.type=t.type;break}break;case"UNDEFINED":case 0:r.type=0;break;case"FLOAT":case 1:r.type=1;break;case"INT":case 2:r.type=2;break;case"STRING":case 3:r.type=3;break;case"TENSOR":case 4:r.type=4;break;case"GRAPH":case 5:r.type=5;break;case"SPARSE_TENSOR":case 11:r.type=11;break;case"TYPE_PROTO":case 13:r.type=13;break;case"FLOATS":case 6:r.type=6;break;case"INTS":case 7:r.type=7;break;case"STRINGS":case 8:r.type=8;break;case"TENSORS":case 9:r.type=9;break;case"GRAPHS":case 10:r.type=10;break;case"SPARSE_TENSORS":case 12:r.type=12;break;case"TYPE_PROTOS":case 14:r.type=14}if(null!=t.f&&(r.f=Number(t.f)),null!=t.i&&(o.Long?(r.i=o.Long.fromValue(t.i)).unsigned=!1:"string"==typeof t.i?r.i=parseInt(t.i,10):"number"==typeof t.i?r.i=t.i:"object"==typeof t.i&&(r.i=new o.LongBits(t.i.low>>>0,t.i.high>>>0).toNumber())),null!=t.s&&("string"==typeof t.s?o.base64.decode(t.s,r.s=o.newBuffer(o.base64.length(t.s)),0):t.s.length>=0&&(r.s=t.s)),null!=t.t){if("object"!=typeof t.t)throw TypeError(".onnx.AttributeProto.t: object expected");r.t=a.onnx.TensorProto.fromObject(t.t)}if(null!=t.g){if("object"!=typeof t.g)throw TypeError(".onnx.AttributeProto.g: object expected");r.g=a.onnx.GraphProto.fromObject(t.g)}if(null!=t.sparseTensor){if("object"!=typeof t.sparseTensor)throw TypeError(".onnx.AttributeProto.sparseTensor: object expected");r.sparseTensor=a.onnx.SparseTensorProto.fromObject(t.sparseTensor)}if(null!=t.tp){if("object"!=typeof t.tp)throw TypeError(".onnx.AttributeProto.tp: object expected");r.tp=a.onnx.TypeProto.fromObject(t.tp)}if(t.floats){if(!Array.isArray(t.floats))throw TypeError(".onnx.AttributeProto.floats: array expected");r.floats=[];for(var e=0;e<t.floats.length;++e)r.floats[e]=Number(t.floats[e])}if(t.ints){if(!Array.isArray(t.ints))throw TypeError(".onnx.AttributeProto.ints: array expected");for(r.ints=[],e=0;e<t.ints.length;++e)o.Long?(r.ints[e]=o.Long.fromValue(t.ints[e])).unsigned=!1:"string"==typeof t.ints[e]?r.ints[e]=parseInt(t.ints[e],10):"number"==typeof t.ints[e]?r.ints[e]=t.ints[e]:"object"==typeof t.ints[e]&&(r.ints[e]=new o.LongBits(t.ints[e].low>>>0,t.ints[e].high>>>0).toNumber())}if(t.strings){if(!Array.isArray(t.strings))throw TypeError(".onnx.AttributeProto.strings: array expected");for(r.strings=[],e=0;e<t.strings.length;++e)"string"==typeof t.strings[e]?o.base64.decode(t.strings[e],r.strings[e]=o.newBuffer(o.base64.length(t.strings[e])),0):t.strings[e].length>=0&&(r.strings[e]=t.strings[e])}if(t.tensors){if(!Array.isArray(t.tensors))throw TypeError(".onnx.AttributeProto.tensors: array expected");for(r.tensors=[],e=0;e<t.tensors.length;++e){if("object"!=typeof t.tensors[e])throw TypeError(".onnx.AttributeProto.tensors: object expected");r.tensors[e]=a.onnx.TensorProto.fromObject(t.tensors[e])}}if(t.graphs){if(!Array.isArray(t.graphs))throw TypeError(".onnx.AttributeProto.graphs: array expected");for(r.graphs=[],e=0;e<t.graphs.length;++e){if("object"!=typeof t.graphs[e])throw TypeError(".onnx.AttributeProto.graphs: object expected");r.graphs[e]=a.onnx.GraphProto.fromObject(t.graphs[e])}}if(t.sparseTensors){if(!Array.isArray(t.sparseTensors))throw TypeError(".onnx.AttributeProto.sparseTensors: array expected");for(r.sparseTensors=[],e=0;e<t.sparseTensors.length;++e){if("object"!=typeof t.sparseTensors[e])throw TypeError(".onnx.AttributeProto.sparseTensors: object expected");r.sparseTensors[e]=a.onnx.SparseTensorProto.fromObject(t.sparseTensors[e])}}if(t.typeProtos){if(!Array.isArray(t.typeProtos))throw TypeError(".onnx.AttributeProto.typeProtos: array expected");for(r.typeProtos=[],e=0;e<t.typeProtos.length;++e){if("object"!=typeof t.typeProtos[e])throw TypeError(".onnx.AttributeProto.typeProtos: object expected");r.typeProtos[e]=a.onnx.TypeProto.fromObject(t.typeProtos[e])}}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.floats=[],e.ints=[],e.strings=[],e.tensors=[],e.graphs=[],e.typeProtos=[],e.sparseTensors=[]),r.defaults){if(e.name="",e.f=0,o.Long){var n=new o.Long(0,0,!1);e.i=r.longs===String?n.toString():r.longs===Number?n.toNumber():n}else e.i=r.longs===String?"0":0;r.bytes===String?e.s="":(e.s=[],r.bytes!==Array&&(e.s=o.newBuffer(e.s))),e.t=null,e.g=null,e.docString="",e.tp=null,e.type=r.enums===String?"UNDEFINED":0,e.refAttrName="",e.sparseTensor=null}if(null!=t.name&&t.hasOwnProperty("name")&&(e.name=t.name),null!=t.f&&t.hasOwnProperty("f")&&(e.f=r.json&&!isFinite(t.f)?String(t.f):t.f),null!=t.i&&t.hasOwnProperty("i")&&("number"==typeof t.i?e.i=r.longs===String?String(t.i):t.i:e.i=r.longs===String?o.Long.prototype.toString.call(t.i):r.longs===Number?new o.LongBits(t.i.low>>>0,t.i.high>>>0).toNumber():t.i),null!=t.s&&t.hasOwnProperty("s")&&(e.s=r.bytes===String?o.base64.encode(t.s,0,t.s.length):r.bytes===Array?Array.prototype.slice.call(t.s):t.s),null!=t.t&&t.hasOwnProperty("t")&&(e.t=a.onnx.TensorProto.toObject(t.t,r)),null!=t.g&&t.hasOwnProperty("g")&&(e.g=a.onnx.GraphProto.toObject(t.g,r)),t.floats&&t.floats.length){e.floats=[];for(var d=0;d<t.floats.length;++d)e.floats[d]=r.json&&!isFinite(t.floats[d])?String(t.floats[d]):t.floats[d]}if(t.ints&&t.ints.length)for(e.ints=[],d=0;d<t.ints.length;++d)"number"==typeof t.ints[d]?e.ints[d]=r.longs===String?String(t.ints[d]):t.ints[d]:e.ints[d]=r.longs===String?o.Long.prototype.toString.call(t.ints[d]):r.longs===Number?new o.LongBits(t.ints[d].low>>>0,t.ints[d].high>>>0).toNumber():t.ints[d];if(t.strings&&t.strings.length)for(e.strings=[],d=0;d<t.strings.length;++d)e.strings[d]=r.bytes===String?o.base64.encode(t.strings[d],0,t.strings[d].length):r.bytes===Array?Array.prototype.slice.call(t.strings[d]):t.strings[d];if(t.tensors&&t.tensors.length)for(e.tensors=[],d=0;d<t.tensors.length;++d)e.tensors[d]=a.onnx.TensorProto.toObject(t.tensors[d],r);if(t.graphs&&t.graphs.length)for(e.graphs=[],d=0;d<t.graphs.length;++d)e.graphs[d]=a.onnx.GraphProto.toObject(t.graphs[d],r);if(null!=t.docString&&t.hasOwnProperty("docString")&&(e.docString=t.docString),null!=t.tp&&t.hasOwnProperty("tp")&&(e.tp=a.onnx.TypeProto.toObject(t.tp,r)),t.typeProtos&&t.typeProtos.length)for(e.typeProtos=[],d=0;d<t.typeProtos.length;++d)e.typeProtos[d]=a.onnx.TypeProto.toObject(t.typeProtos[d],r);if(null!=t.type&&t.hasOwnProperty("type")&&(e.type=r.enums===String?void 0===a.onnx.AttributeProto.AttributeType[t.type]?t.type:a.onnx.AttributeProto.AttributeType[t.type]:t.type),null!=t.refAttrName&&t.hasOwnProperty("refAttrName")&&(e.refAttrName=t.refAttrName),null!=t.sparseTensor&&t.hasOwnProperty("sparseTensor")&&(e.sparseTensor=a.onnx.SparseTensorProto.toObject(t.sparseTensor,r)),t.sparseTensors&&t.sparseTensors.length)for(e.sparseTensors=[],d=0;d<t.sparseTensors.length;++d)e.sparseTensors[d]=a.onnx.SparseTensorProto.toObject(t.sparseTensors[d],r);return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.AttributeProto"},t.AttributeType=function(){var t={},r=Object.create(t);return r[t[0]="UNDEFINED"]=0,r[t[1]="FLOAT"]=1,r[t[2]="INT"]=2,r[t[3]="STRING"]=3,r[t[4]="TENSOR"]=4,r[t[5]="GRAPH"]=5,r[t[11]="SPARSE_TENSOR"]=11,r[t[13]="TYPE_PROTO"]=13,r[t[6]="FLOATS"]=6,r[t[7]="INTS"]=7,r[t[8]="STRINGS"]=8,r[t[9]="TENSORS"]=9,r[t[10]="GRAPHS"]=10,r[t[12]="SPARSE_TENSORS"]=12,r[t[14]="TYPE_PROTOS"]=14,r}(),t}(),l.ValueInfoProto=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.name="",t.prototype.type=null,t.prototype.docString="",t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.name&&Object.hasOwnProperty.call(t,"name")&&r.uint32(10).string(t.name),null!=t.type&&Object.hasOwnProperty.call(t,"type")&&a.onnx.TypeProto.encode(t.type,r.uint32(18).fork()).ldelim(),null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&r.uint32(26).string(t.docString),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.ValueInfoProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.name=t.string();break;case 2:d.type=a.onnx.TypeProto.decode(t,t.uint32());break;case 3:d.docString=t.string();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.name&&t.hasOwnProperty("name")&&!o.isString(t.name))return"name: string expected";if(null!=t.type&&t.hasOwnProperty("type")){var r=a.onnx.TypeProto.verify(t.type);if(r)return"type."+r}return null!=t.docString&&t.hasOwnProperty("docString")&&!o.isString(t.docString)?"docString: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.ValueInfoProto)return t;var r=new a.onnx.ValueInfoProto;if(null!=t.name&&(r.name=String(t.name)),null!=t.type){if("object"!=typeof t.type)throw TypeError(".onnx.ValueInfoProto.type: object expected");r.type=a.onnx.TypeProto.fromObject(t.type)}return null!=t.docString&&(r.docString=String(t.docString)),r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.name="",e.type=null,e.docString=""),null!=t.name&&t.hasOwnProperty("name")&&(e.name=t.name),null!=t.type&&t.hasOwnProperty("type")&&(e.type=a.onnx.TypeProto.toObject(t.type,r)),null!=t.docString&&t.hasOwnProperty("docString")&&(e.docString=t.docString),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.ValueInfoProto"},t}(),l.NodeProto=function(){function t(t){if(this.input=[],this.output=[],this.attribute=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.input=o.emptyArray,t.prototype.output=o.emptyArray,t.prototype.name="",t.prototype.opType="",t.prototype.domain="",t.prototype.attribute=o.emptyArray,t.prototype.docString="",t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.input&&t.input.length)for(var e=0;e<t.input.length;++e)r.uint32(10).string(t.input[e]);if(null!=t.output&&t.output.length)for(e=0;e<t.output.length;++e)r.uint32(18).string(t.output[e]);if(null!=t.name&&Object.hasOwnProperty.call(t,"name")&&r.uint32(26).string(t.name),null!=t.opType&&Object.hasOwnProperty.call(t,"opType")&&r.uint32(34).string(t.opType),null!=t.attribute&&t.attribute.length)for(e=0;e<t.attribute.length;++e)a.onnx.AttributeProto.encode(t.attribute[e],r.uint32(42).fork()).ldelim();return null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&r.uint32(50).string(t.docString),null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&r.uint32(58).string(t.domain),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.NodeProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.input&&d.input.length||(d.input=[]),d.input.push(t.string());break;case 2:d.output&&d.output.length||(d.output=[]),d.output.push(t.string());break;case 3:d.name=t.string();break;case 4:d.opType=t.string();break;case 7:d.domain=t.string();break;case 5:d.attribute&&d.attribute.length||(d.attribute=[]),d.attribute.push(a.onnx.AttributeProto.decode(t,t.uint32()));break;case 6:d.docString=t.string();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.input&&t.hasOwnProperty("input")){if(!Array.isArray(t.input))return"input: array expected";for(var r=0;r<t.input.length;++r)if(!o.isString(t.input[r]))return"input: string[] expected"}if(null!=t.output&&t.hasOwnProperty("output")){if(!Array.isArray(t.output))return"output: array expected";for(r=0;r<t.output.length;++r)if(!o.isString(t.output[r]))return"output: string[] expected"}if(null!=t.name&&t.hasOwnProperty("name")&&!o.isString(t.name))return"name: string expected";if(null!=t.opType&&t.hasOwnProperty("opType")&&!o.isString(t.opType))return"opType: string expected";if(null!=t.domain&&t.hasOwnProperty("domain")&&!o.isString(t.domain))return"domain: string expected";if(null!=t.attribute&&t.hasOwnProperty("attribute")){if(!Array.isArray(t.attribute))return"attribute: array expected";for(r=0;r<t.attribute.length;++r){var e=a.onnx.AttributeProto.verify(t.attribute[r]);if(e)return"attribute."+e}}return null!=t.docString&&t.hasOwnProperty("docString")&&!o.isString(t.docString)?"docString: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.NodeProto)return t;var r=new a.onnx.NodeProto;if(t.input){if(!Array.isArray(t.input))throw TypeError(".onnx.NodeProto.input: array expected");r.input=[];for(var e=0;e<t.input.length;++e)r.input[e]=String(t.input[e])}if(t.output){if(!Array.isArray(t.output))throw TypeError(".onnx.NodeProto.output: array expected");for(r.output=[],e=0;e<t.output.length;++e)r.output[e]=String(t.output[e])}if(null!=t.name&&(r.name=String(t.name)),null!=t.opType&&(r.opType=String(t.opType)),null!=t.domain&&(r.domain=String(t.domain)),t.attribute){if(!Array.isArray(t.attribute))throw TypeError(".onnx.NodeProto.attribute: array expected");for(r.attribute=[],e=0;e<t.attribute.length;++e){if("object"!=typeof t.attribute[e])throw TypeError(".onnx.NodeProto.attribute: object expected");r.attribute[e]=a.onnx.AttributeProto.fromObject(t.attribute[e])}}return null!=t.docString&&(r.docString=String(t.docString)),r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.input=[],e.output=[],e.attribute=[]),r.defaults&&(e.name="",e.opType="",e.docString="",e.domain=""),t.input&&t.input.length){e.input=[];for(var n=0;n<t.input.length;++n)e.input[n]=t.input[n]}if(t.output&&t.output.length)for(e.output=[],n=0;n<t.output.length;++n)e.output[n]=t.output[n];if(null!=t.name&&t.hasOwnProperty("name")&&(e.name=t.name),null!=t.opType&&t.hasOwnProperty("opType")&&(e.opType=t.opType),t.attribute&&t.attribute.length)for(e.attribute=[],n=0;n<t.attribute.length;++n)e.attribute[n]=a.onnx.AttributeProto.toObject(t.attribute[n],r);return null!=t.docString&&t.hasOwnProperty("docString")&&(e.docString=t.docString),null!=t.domain&&t.hasOwnProperty("domain")&&(e.domain=t.domain),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.NodeProto"},t}(),l.TrainingInfoProto=function(){function t(t){if(this.initializationBinding=[],this.updateBinding=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.initialization=null,t.prototype.algorithm=null,t.prototype.initializationBinding=o.emptyArray,t.prototype.updateBinding=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.initialization&&Object.hasOwnProperty.call(t,"initialization")&&a.onnx.GraphProto.encode(t.initialization,r.uint32(10).fork()).ldelim(),null!=t.algorithm&&Object.hasOwnProperty.call(t,"algorithm")&&a.onnx.GraphProto.encode(t.algorithm,r.uint32(18).fork()).ldelim(),null!=t.initializationBinding&&t.initializationBinding.length)for(var e=0;e<t.initializationBinding.length;++e)a.onnx.StringStringEntryProto.encode(t.initializationBinding[e],r.uint32(26).fork()).ldelim();if(null!=t.updateBinding&&t.updateBinding.length)for(e=0;e<t.updateBinding.length;++e)a.onnx.StringStringEntryProto.encode(t.updateBinding[e],r.uint32(34).fork()).ldelim();return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TrainingInfoProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.initialization=a.onnx.GraphProto.decode(t,t.uint32());break;case 2:d.algorithm=a.onnx.GraphProto.decode(t,t.uint32());break;case 3:d.initializationBinding&&d.initializationBinding.length||(d.initializationBinding=[]),d.initializationBinding.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;case 4:d.updateBinding&&d.updateBinding.length||(d.updateBinding=[]),d.updateBinding.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.initialization&&t.hasOwnProperty("initialization")&&(e=a.onnx.GraphProto.verify(t.initialization)))return"initialization."+e;if(null!=t.algorithm&&t.hasOwnProperty("algorithm")&&(e=a.onnx.GraphProto.verify(t.algorithm)))return"algorithm."+e;if(null!=t.initializationBinding&&t.hasOwnProperty("initializationBinding")){if(!Array.isArray(t.initializationBinding))return"initializationBinding: array expected";for(var r=0;r<t.initializationBinding.length;++r)if(e=a.onnx.StringStringEntryProto.verify(t.initializationBinding[r]))return"initializationBinding."+e}if(null!=t.updateBinding&&t.hasOwnProperty("updateBinding")){if(!Array.isArray(t.updateBinding))return"updateBinding: array expected";for(r=0;r<t.updateBinding.length;++r){var e;if(e=a.onnx.StringStringEntryProto.verify(t.updateBinding[r]))return"updateBinding."+e}}return null},t.fromObject=function(t){if(t instanceof a.onnx.TrainingInfoProto)return t;var r=new a.onnx.TrainingInfoProto;if(null!=t.initialization){if("object"!=typeof t.initialization)throw TypeError(".onnx.TrainingInfoProto.initialization: object expected");r.initialization=a.onnx.GraphProto.fromObject(t.initialization)}if(null!=t.algorithm){if("object"!=typeof t.algorithm)throw TypeError(".onnx.TrainingInfoProto.algorithm: object expected");r.algorithm=a.onnx.GraphProto.fromObject(t.algorithm)}if(t.initializationBinding){if(!Array.isArray(t.initializationBinding))throw TypeError(".onnx.TrainingInfoProto.initializationBinding: array expected");r.initializationBinding=[];for(var e=0;e<t.initializationBinding.length;++e){if("object"!=typeof t.initializationBinding[e])throw TypeError(".onnx.TrainingInfoProto.initializationBinding: object expected");r.initializationBinding[e]=a.onnx.StringStringEntryProto.fromObject(t.initializationBinding[e])}}if(t.updateBinding){if(!Array.isArray(t.updateBinding))throw TypeError(".onnx.TrainingInfoProto.updateBinding: array expected");for(r.updateBinding=[],e=0;e<t.updateBinding.length;++e){if("object"!=typeof t.updateBinding[e])throw TypeError(".onnx.TrainingInfoProto.updateBinding: object expected");r.updateBinding[e]=a.onnx.StringStringEntryProto.fromObject(t.updateBinding[e])}}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.initializationBinding=[],e.updateBinding=[]),r.defaults&&(e.initialization=null,e.algorithm=null),null!=t.initialization&&t.hasOwnProperty("initialization")&&(e.initialization=a.onnx.GraphProto.toObject(t.initialization,r)),null!=t.algorithm&&t.hasOwnProperty("algorithm")&&(e.algorithm=a.onnx.GraphProto.toObject(t.algorithm,r)),t.initializationBinding&&t.initializationBinding.length){e.initializationBinding=[];for(var n=0;n<t.initializationBinding.length;++n)e.initializationBinding[n]=a.onnx.StringStringEntryProto.toObject(t.initializationBinding[n],r)}if(t.updateBinding&&t.updateBinding.length)for(e.updateBinding=[],n=0;n<t.updateBinding.length;++n)e.updateBinding[n]=a.onnx.StringStringEntryProto.toObject(t.updateBinding[n],r);return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TrainingInfoProto"},t}(),l.ModelProto=function(){function t(t){if(this.opsetImport=[],this.metadataProps=[],this.trainingInfo=[],this.functions=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.irVersion=o.Long?o.Long.fromBits(0,0,!1):0,t.prototype.opsetImport=o.emptyArray,t.prototype.producerName="",t.prototype.producerVersion="",t.prototype.domain="",t.prototype.modelVersion=o.Long?o.Long.fromBits(0,0,!1):0,t.prototype.docString="",t.prototype.graph=null,t.prototype.metadataProps=o.emptyArray,t.prototype.trainingInfo=o.emptyArray,t.prototype.functions=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.irVersion&&Object.hasOwnProperty.call(t,"irVersion")&&r.uint32(8).int64(t.irVersion),null!=t.producerName&&Object.hasOwnProperty.call(t,"producerName")&&r.uint32(18).string(t.producerName),null!=t.producerVersion&&Object.hasOwnProperty.call(t,"producerVersion")&&r.uint32(26).string(t.producerVersion),null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&r.uint32(34).string(t.domain),null!=t.modelVersion&&Object.hasOwnProperty.call(t,"modelVersion")&&r.uint32(40).int64(t.modelVersion),null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&r.uint32(50).string(t.docString),null!=t.graph&&Object.hasOwnProperty.call(t,"graph")&&a.onnx.GraphProto.encode(t.graph,r.uint32(58).fork()).ldelim(),null!=t.opsetImport&&t.opsetImport.length)for(var e=0;e<t.opsetImport.length;++e)a.onnx.OperatorSetIdProto.encode(t.opsetImport[e],r.uint32(66).fork()).ldelim();if(null!=t.metadataProps&&t.metadataProps.length)for(e=0;e<t.metadataProps.length;++e)a.onnx.StringStringEntryProto.encode(t.metadataProps[e],r.uint32(114).fork()).ldelim();if(null!=t.trainingInfo&&t.trainingInfo.length)for(e=0;e<t.trainingInfo.length;++e)a.onnx.TrainingInfoProto.encode(t.trainingInfo[e],r.uint32(162).fork()).ldelim();if(null!=t.functions&&t.functions.length)for(e=0;e<t.functions.length;++e)a.onnx.FunctionProto.encode(t.functions[e],r.uint32(202).fork()).ldelim();return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.ModelProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.irVersion=t.int64();break;case 8:d.opsetImport&&d.opsetImport.length||(d.opsetImport=[]),d.opsetImport.push(a.onnx.OperatorSetIdProto.decode(t,t.uint32()));break;case 2:d.producerName=t.string();break;case 3:d.producerVersion=t.string();break;case 4:d.domain=t.string();break;case 5:d.modelVersion=t.int64();break;case 6:d.docString=t.string();break;case 7:d.graph=a.onnx.GraphProto.decode(t,t.uint32());break;case 14:d.metadataProps&&d.metadataProps.length||(d.metadataProps=[]),d.metadataProps.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;case 20:d.trainingInfo&&d.trainingInfo.length||(d.trainingInfo=[]),d.trainingInfo.push(a.onnx.TrainingInfoProto.decode(t,t.uint32()));break;case 25:d.functions&&d.functions.length||(d.functions=[]),d.functions.push(a.onnx.FunctionProto.decode(t,t.uint32()));break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.irVersion&&t.hasOwnProperty("irVersion")&&!o.isInteger(t.irVersion)&&!(t.irVersion&&o.isInteger(t.irVersion.low)&&o.isInteger(t.irVersion.high)))return"irVersion: integer|Long expected";if(null!=t.opsetImport&&t.hasOwnProperty("opsetImport")){if(!Array.isArray(t.opsetImport))return"opsetImport: array expected";for(var r=0;r<t.opsetImport.length;++r)if(e=a.onnx.OperatorSetIdProto.verify(t.opsetImport[r]))return"opsetImport."+e}if(null!=t.producerName&&t.hasOwnProperty("producerName")&&!o.isString(t.producerName))return"producerName: string expected";if(null!=t.producerVersion&&t.hasOwnProperty("producerVersion")&&!o.isString(t.producerVersion))return"producerVersion: string expected";if(null!=t.domain&&t.hasOwnProperty("domain")&&!o.isString(t.domain))return"domain: string expected";if(null!=t.modelVersion&&t.hasOwnProperty("modelVersion")&&!o.isInteger(t.modelVersion)&&!(t.modelVersion&&o.isInteger(t.modelVersion.low)&&o.isInteger(t.modelVersion.high)))return"modelVersion: integer|Long expected";if(null!=t.docString&&t.hasOwnProperty("docString")&&!o.isString(t.docString))return"docString: string expected";if(null!=t.graph&&t.hasOwnProperty("graph")&&(e=a.onnx.GraphProto.verify(t.graph)))return"graph."+e;if(null!=t.metadataProps&&t.hasOwnProperty("metadataProps")){if(!Array.isArray(t.metadataProps))return"metadataProps: array expected";for(r=0;r<t.metadataProps.length;++r)if(e=a.onnx.StringStringEntryProto.verify(t.metadataProps[r]))return"metadataProps."+e}if(null!=t.trainingInfo&&t.hasOwnProperty("trainingInfo")){if(!Array.isArray(t.trainingInfo))return"trainingInfo: array expected";for(r=0;r<t.trainingInfo.length;++r)if(e=a.onnx.TrainingInfoProto.verify(t.trainingInfo[r]))return"trainingInfo."+e}if(null!=t.functions&&t.hasOwnProperty("functions")){if(!Array.isArray(t.functions))return"functions: array expected";for(r=0;r<t.functions.length;++r){var e;if(e=a.onnx.FunctionProto.verify(t.functions[r]))return"functions."+e}}return null},t.fromObject=function(t){if(t instanceof a.onnx.ModelProto)return t;var r=new a.onnx.ModelProto;if(null!=t.irVersion&&(o.Long?(r.irVersion=o.Long.fromValue(t.irVersion)).unsigned=!1:"string"==typeof t.irVersion?r.irVersion=parseInt(t.irVersion,10):"number"==typeof t.irVersion?r.irVersion=t.irVersion:"object"==typeof t.irVersion&&(r.irVersion=new o.LongBits(t.irVersion.low>>>0,t.irVersion.high>>>0).toNumber())),t.opsetImport){if(!Array.isArray(t.opsetImport))throw TypeError(".onnx.ModelProto.opsetImport: array expected");r.opsetImport=[];for(var e=0;e<t.opsetImport.length;++e){if("object"!=typeof t.opsetImport[e])throw TypeError(".onnx.ModelProto.opsetImport: object expected");r.opsetImport[e]=a.onnx.OperatorSetIdProto.fromObject(t.opsetImport[e])}}if(null!=t.producerName&&(r.producerName=String(t.producerName)),null!=t.producerVersion&&(r.producerVersion=String(t.producerVersion)),null!=t.domain&&(r.domain=String(t.domain)),null!=t.modelVersion&&(o.Long?(r.modelVersion=o.Long.fromValue(t.modelVersion)).unsigned=!1:"string"==typeof t.modelVersion?r.modelVersion=parseInt(t.modelVersion,10):"number"==typeof t.modelVersion?r.modelVersion=t.modelVersion:"object"==typeof t.modelVersion&&(r.modelVersion=new o.LongBits(t.modelVersion.low>>>0,t.modelVersion.high>>>0).toNumber())),null!=t.docString&&(r.docString=String(t.docString)),null!=t.graph){if("object"!=typeof t.graph)throw TypeError(".onnx.ModelProto.graph: object expected");r.graph=a.onnx.GraphProto.fromObject(t.graph)}if(t.metadataProps){if(!Array.isArray(t.metadataProps))throw TypeError(".onnx.ModelProto.metadataProps: array expected");for(r.metadataProps=[],e=0;e<t.metadataProps.length;++e){if("object"!=typeof t.metadataProps[e])throw TypeError(".onnx.ModelProto.metadataProps: object expected");r.metadataProps[e]=a.onnx.StringStringEntryProto.fromObject(t.metadataProps[e])}}if(t.trainingInfo){if(!Array.isArray(t.trainingInfo))throw TypeError(".onnx.ModelProto.trainingInfo: array expected");for(r.trainingInfo=[],e=0;e<t.trainingInfo.length;++e){if("object"!=typeof t.trainingInfo[e])throw TypeError(".onnx.ModelProto.trainingInfo: object expected");r.trainingInfo[e]=a.onnx.TrainingInfoProto.fromObject(t.trainingInfo[e])}}if(t.functions){if(!Array.isArray(t.functions))throw TypeError(".onnx.ModelProto.functions: array expected");for(r.functions=[],e=0;e<t.functions.length;++e){if("object"!=typeof t.functions[e])throw TypeError(".onnx.ModelProto.functions: object expected");r.functions[e]=a.onnx.FunctionProto.fromObject(t.functions[e])}}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.opsetImport=[],e.metadataProps=[],e.trainingInfo=[],e.functions=[]),r.defaults){if(o.Long){var n=new o.Long(0,0,!1);e.irVersion=r.longs===String?n.toString():r.longs===Number?n.toNumber():n}else e.irVersion=r.longs===String?"0":0;e.producerName="",e.producerVersion="",e.domain="",o.Long?(n=new o.Long(0,0,!1),e.modelVersion=r.longs===String?n.toString():r.longs===Number?n.toNumber():n):e.modelVersion=r.longs===String?"0":0,e.docString="",e.graph=null}if(null!=t.irVersion&&t.hasOwnProperty("irVersion")&&("number"==typeof t.irVersion?e.irVersion=r.longs===String?String(t.irVersion):t.irVersion:e.irVersion=r.longs===String?o.Long.prototype.toString.call(t.irVersion):r.longs===Number?new o.LongBits(t.irVersion.low>>>0,t.irVersion.high>>>0).toNumber():t.irVersion),null!=t.producerName&&t.hasOwnProperty("producerName")&&(e.producerName=t.producerName),null!=t.producerVersion&&t.hasOwnProperty("producerVersion")&&(e.producerVersion=t.producerVersion),null!=t.domain&&t.hasOwnProperty("domain")&&(e.domain=t.domain),null!=t.modelVersion&&t.hasOwnProperty("modelVersion")&&("number"==typeof t.modelVersion?e.modelVersion=r.longs===String?String(t.modelVersion):t.modelVersion:e.modelVersion=r.longs===String?o.Long.prototype.toString.call(t.modelVersion):r.longs===Number?new o.LongBits(t.modelVersion.low>>>0,t.modelVersion.high>>>0).toNumber():t.modelVersion),null!=t.docString&&t.hasOwnProperty("docString")&&(e.docString=t.docString),null!=t.graph&&t.hasOwnProperty("graph")&&(e.graph=a.onnx.GraphProto.toObject(t.graph,r)),t.opsetImport&&t.opsetImport.length){e.opsetImport=[];for(var d=0;d<t.opsetImport.length;++d)e.opsetImport[d]=a.onnx.OperatorSetIdProto.toObject(t.opsetImport[d],r)}if(t.metadataProps&&t.metadataProps.length)for(e.metadataProps=[],d=0;d<t.metadataProps.length;++d)e.metadataProps[d]=a.onnx.StringStringEntryProto.toObject(t.metadataProps[d],r);if(t.trainingInfo&&t.trainingInfo.length)for(e.trainingInfo=[],d=0;d<t.trainingInfo.length;++d)e.trainingInfo[d]=a.onnx.TrainingInfoProto.toObject(t.trainingInfo[d],r);if(t.functions&&t.functions.length)for(e.functions=[],d=0;d<t.functions.length;++d)e.functions[d]=a.onnx.FunctionProto.toObject(t.functions[d],r);return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.ModelProto"},t}(),l.StringStringEntryProto=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.key="",t.prototype.value="",t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.key&&Object.hasOwnProperty.call(t,"key")&&r.uint32(10).string(t.key),null!=t.value&&Object.hasOwnProperty.call(t,"value")&&r.uint32(18).string(t.value),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.StringStringEntryProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.key=t.string();break;case 2:d.value=t.string();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){return"object"!=typeof t||null===t?"object expected":null!=t.key&&t.hasOwnProperty("key")&&!o.isString(t.key)?"key: string expected":null!=t.value&&t.hasOwnProperty("value")&&!o.isString(t.value)?"value: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.StringStringEntryProto)return t;var r=new a.onnx.StringStringEntryProto;return null!=t.key&&(r.key=String(t.key)),null!=t.value&&(r.value=String(t.value)),r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.key="",e.value=""),null!=t.key&&t.hasOwnProperty("key")&&(e.key=t.key),null!=t.value&&t.hasOwnProperty("value")&&(e.value=t.value),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.StringStringEntryProto"},t}(),l.TensorAnnotation=function(){function t(t){if(this.quantParameterTensorNames=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.tensorName="",t.prototype.quantParameterTensorNames=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.tensorName&&Object.hasOwnProperty.call(t,"tensorName")&&r.uint32(10).string(t.tensorName),null!=t.quantParameterTensorNames&&t.quantParameterTensorNames.length)for(var e=0;e<t.quantParameterTensorNames.length;++e)a.onnx.StringStringEntryProto.encode(t.quantParameterTensorNames[e],r.uint32(18).fork()).ldelim();return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TensorAnnotation;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.tensorName=t.string();break;case 2:d.quantParameterTensorNames&&d.quantParameterTensorNames.length||(d.quantParameterTensorNames=[]),d.quantParameterTensorNames.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.tensorName&&t.hasOwnProperty("tensorName")&&!o.isString(t.tensorName))return"tensorName: string expected";if(null!=t.quantParameterTensorNames&&t.hasOwnProperty("quantParameterTensorNames")){if(!Array.isArray(t.quantParameterTensorNames))return"quantParameterTensorNames: array expected";for(var r=0;r<t.quantParameterTensorNames.length;++r){var e=a.onnx.StringStringEntryProto.verify(t.quantParameterTensorNames[r]);if(e)return"quantParameterTensorNames."+e}}return null},t.fromObject=function(t){if(t instanceof a.onnx.TensorAnnotation)return t;var r=new a.onnx.TensorAnnotation;if(null!=t.tensorName&&(r.tensorName=String(t.tensorName)),t.quantParameterTensorNames){if(!Array.isArray(t.quantParameterTensorNames))throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");r.quantParameterTensorNames=[];for(var e=0;e<t.quantParameterTensorNames.length;++e){if("object"!=typeof t.quantParameterTensorNames[e])throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");r.quantParameterTensorNames[e]=a.onnx.StringStringEntryProto.fromObject(t.quantParameterTensorNames[e])}}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.quantParameterTensorNames=[]),r.defaults&&(e.tensorName=""),null!=t.tensorName&&t.hasOwnProperty("tensorName")&&(e.tensorName=t.tensorName),t.quantParameterTensorNames&&t.quantParameterTensorNames.length){e.quantParameterTensorNames=[];for(var n=0;n<t.quantParameterTensorNames.length;++n)e.quantParameterTensorNames[n]=a.onnx.StringStringEntryProto.toObject(t.quantParameterTensorNames[n],r)}return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorAnnotation"},t}(),l.GraphProto=function(){function t(t){if(this.node=[],this.initializer=[],this.sparseInitializer=[],this.input=[],this.output=[],this.valueInfo=[],this.quantizationAnnotation=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.node=o.emptyArray,t.prototype.name="",t.prototype.initializer=o.emptyArray,t.prototype.sparseInitializer=o.emptyArray,t.prototype.docString="",t.prototype.input=o.emptyArray,t.prototype.output=o.emptyArray,t.prototype.valueInfo=o.emptyArray,t.prototype.quantizationAnnotation=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.node&&t.node.length)for(var e=0;e<t.node.length;++e)a.onnx.NodeProto.encode(t.node[e],r.uint32(10).fork()).ldelim();if(null!=t.name&&Object.hasOwnProperty.call(t,"name")&&r.uint32(18).string(t.name),null!=t.initializer&&t.initializer.length)for(e=0;e<t.initializer.length;++e)a.onnx.TensorProto.encode(t.initializer[e],r.uint32(42).fork()).ldelim();if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&r.uint32(82).string(t.docString),null!=t.input&&t.input.length)for(e=0;e<t.input.length;++e)a.onnx.ValueInfoProto.encode(t.input[e],r.uint32(90).fork()).ldelim();if(null!=t.output&&t.output.length)for(e=0;e<t.output.length;++e)a.onnx.ValueInfoProto.encode(t.output[e],r.uint32(98).fork()).ldelim();if(null!=t.valueInfo&&t.valueInfo.length)for(e=0;e<t.valueInfo.length;++e)a.onnx.ValueInfoProto.encode(t.valueInfo[e],r.uint32(106).fork()).ldelim();if(null!=t.quantizationAnnotation&&t.quantizationAnnotation.length)for(e=0;e<t.quantizationAnnotation.length;++e)a.onnx.TensorAnnotation.encode(t.quantizationAnnotation[e],r.uint32(114).fork()).ldelim();if(null!=t.sparseInitializer&&t.sparseInitializer.length)for(e=0;e<t.sparseInitializer.length;++e)a.onnx.SparseTensorProto.encode(t.sparseInitializer[e],r.uint32(122).fork()).ldelim();return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.GraphProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.node&&d.node.length||(d.node=[]),d.node.push(a.onnx.NodeProto.decode(t,t.uint32()));break;case 2:d.name=t.string();break;case 5:d.initializer&&d.initializer.length||(d.initializer=[]),d.initializer.push(a.onnx.TensorProto.decode(t,t.uint32()));break;case 15:d.sparseInitializer&&d.sparseInitializer.length||(d.sparseInitializer=[]),d.sparseInitializer.push(a.onnx.SparseTensorProto.decode(t,t.uint32()));break;case 10:d.docString=t.string();break;case 11:d.input&&d.input.length||(d.input=[]),d.input.push(a.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 12:d.output&&d.output.length||(d.output=[]),d.output.push(a.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 13:d.valueInfo&&d.valueInfo.length||(d.valueInfo=[]),d.valueInfo.push(a.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 14:d.quantizationAnnotation&&d.quantizationAnnotation.length||(d.quantizationAnnotation=[]),d.quantizationAnnotation.push(a.onnx.TensorAnnotation.decode(t,t.uint32()));break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.node&&t.hasOwnProperty("node")){if(!Array.isArray(t.node))return"node: array expected";for(var r=0;r<t.node.length;++r)if(e=a.onnx.NodeProto.verify(t.node[r]))return"node."+e}if(null!=t.name&&t.hasOwnProperty("name")&&!o.isString(t.name))return"name: string expected";if(null!=t.initializer&&t.hasOwnProperty("initializer")){if(!Array.isArray(t.initializer))return"initializer: array expected";for(r=0;r<t.initializer.length;++r)if(e=a.onnx.TensorProto.verify(t.initializer[r]))return"initializer."+e}if(null!=t.sparseInitializer&&t.hasOwnProperty("sparseInitializer")){if(!Array.isArray(t.sparseInitializer))return"sparseInitializer: array expected";for(r=0;r<t.sparseInitializer.length;++r)if(e=a.onnx.SparseTensorProto.verify(t.sparseInitializer[r]))return"sparseInitializer."+e}if(null!=t.docString&&t.hasOwnProperty("docString")&&!o.isString(t.docString))return"docString: string expected";if(null!=t.input&&t.hasOwnProperty("input")){if(!Array.isArray(t.input))return"input: array expected";for(r=0;r<t.input.length;++r)if(e=a.onnx.ValueInfoProto.verify(t.input[r]))return"input."+e}if(null!=t.output&&t.hasOwnProperty("output")){if(!Array.isArray(t.output))return"output: array expected";for(r=0;r<t.output.length;++r)if(e=a.onnx.ValueInfoProto.verify(t.output[r]))return"output."+e}if(null!=t.valueInfo&&t.hasOwnProperty("valueInfo")){if(!Array.isArray(t.valueInfo))return"valueInfo: array expected";for(r=0;r<t.valueInfo.length;++r)if(e=a.onnx.ValueInfoProto.verify(t.valueInfo[r]))return"valueInfo."+e}if(null!=t.quantizationAnnotation&&t.hasOwnProperty("quantizationAnnotation")){if(!Array.isArray(t.quantizationAnnotation))return"quantizationAnnotation: array expected";for(r=0;r<t.quantizationAnnotation.length;++r){var e;if(e=a.onnx.TensorAnnotation.verify(t.quantizationAnnotation[r]))return"quantizationAnnotation."+e}}return null},t.fromObject=function(t){if(t instanceof a.onnx.GraphProto)return t;var r=new a.onnx.GraphProto;if(t.node){if(!Array.isArray(t.node))throw TypeError(".onnx.GraphProto.node: array expected");r.node=[];for(var e=0;e<t.node.length;++e){if("object"!=typeof t.node[e])throw TypeError(".onnx.GraphProto.node: object expected");r.node[e]=a.onnx.NodeProto.fromObject(t.node[e])}}if(null!=t.name&&(r.name=String(t.name)),t.initializer){if(!Array.isArray(t.initializer))throw TypeError(".onnx.GraphProto.initializer: array expected");for(r.initializer=[],e=0;e<t.initializer.length;++e){if("object"!=typeof t.initializer[e])throw TypeError(".onnx.GraphProto.initializer: object expected");r.initializer[e]=a.onnx.TensorProto.fromObject(t.initializer[e])}}if(t.sparseInitializer){if(!Array.isArray(t.sparseInitializer))throw TypeError(".onnx.GraphProto.sparseInitializer: array expected");for(r.sparseInitializer=[],e=0;e<t.sparseInitializer.length;++e){if("object"!=typeof t.sparseInitializer[e])throw TypeError(".onnx.GraphProto.sparseInitializer: object expected");r.sparseInitializer[e]=a.onnx.SparseTensorProto.fromObject(t.sparseInitializer[e])}}if(null!=t.docString&&(r.docString=String(t.docString)),t.input){if(!Array.isArray(t.input))throw TypeError(".onnx.GraphProto.input: array expected");for(r.input=[],e=0;e<t.input.length;++e){if("object"!=typeof t.input[e])throw TypeError(".onnx.GraphProto.input: object expected");r.input[e]=a.onnx.ValueInfoProto.fromObject(t.input[e])}}if(t.output){if(!Array.isArray(t.output))throw TypeError(".onnx.GraphProto.output: array expected");for(r.output=[],e=0;e<t.output.length;++e){if("object"!=typeof t.output[e])throw TypeError(".onnx.GraphProto.output: object expected");r.output[e]=a.onnx.ValueInfoProto.fromObject(t.output[e])}}if(t.valueInfo){if(!Array.isArray(t.valueInfo))throw TypeError(".onnx.GraphProto.valueInfo: array expected");for(r.valueInfo=[],e=0;e<t.valueInfo.length;++e){if("object"!=typeof t.valueInfo[e])throw TypeError(".onnx.GraphProto.valueInfo: object expected");r.valueInfo[e]=a.onnx.ValueInfoProto.fromObject(t.valueInfo[e])}}if(t.quantizationAnnotation){if(!Array.isArray(t.quantizationAnnotation))throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");for(r.quantizationAnnotation=[],e=0;e<t.quantizationAnnotation.length;++e){if("object"!=typeof t.quantizationAnnotation[e])throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");r.quantizationAnnotation[e]=a.onnx.TensorAnnotation.fromObject(t.quantizationAnnotation[e])}}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.node=[],e.initializer=[],e.input=[],e.output=[],e.valueInfo=[],e.quantizationAnnotation=[],e.sparseInitializer=[]),r.defaults&&(e.name="",e.docString=""),t.node&&t.node.length){e.node=[];for(var n=0;n<t.node.length;++n)e.node[n]=a.onnx.NodeProto.toObject(t.node[n],r)}if(null!=t.name&&t.hasOwnProperty("name")&&(e.name=t.name),t.initializer&&t.initializer.length)for(e.initializer=[],n=0;n<t.initializer.length;++n)e.initializer[n]=a.onnx.TensorProto.toObject(t.initializer[n],r);if(null!=t.docString&&t.hasOwnProperty("docString")&&(e.docString=t.docString),t.input&&t.input.length)for(e.input=[],n=0;n<t.input.length;++n)e.input[n]=a.onnx.ValueInfoProto.toObject(t.input[n],r);if(t.output&&t.output.length)for(e.output=[],n=0;n<t.output.length;++n)e.output[n]=a.onnx.ValueInfoProto.toObject(t.output[n],r);if(t.valueInfo&&t.valueInfo.length)for(e.valueInfo=[],n=0;n<t.valueInfo.length;++n)e.valueInfo[n]=a.onnx.ValueInfoProto.toObject(t.valueInfo[n],r);if(t.quantizationAnnotation&&t.quantizationAnnotation.length)for(e.quantizationAnnotation=[],n=0;n<t.quantizationAnnotation.length;++n)e.quantizationAnnotation[n]=a.onnx.TensorAnnotation.toObject(t.quantizationAnnotation[n],r);if(t.sparseInitializer&&t.sparseInitializer.length)for(e.sparseInitializer=[],n=0;n<t.sparseInitializer.length;++n)e.sparseInitializer[n]=a.onnx.SparseTensorProto.toObject(t.sparseInitializer[n],r);return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.GraphProto"},t}(),l.TensorProto=function(){function t(t){if(this.dims=[],this.floatData=[],this.int32Data=[],this.stringData=[],this.int64Data=[],this.externalData=[],this.doubleData=[],this.uint64Data=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.dims=o.emptyArray,t.prototype.dataType=0,t.prototype.segment=null,t.prototype.floatData=o.emptyArray,t.prototype.int32Data=o.emptyArray,t.prototype.stringData=o.emptyArray,t.prototype.int64Data=o.emptyArray,t.prototype.name="",t.prototype.docString="",t.prototype.rawData=o.newBuffer([]),t.prototype.externalData=o.emptyArray,t.prototype.dataLocation=0,t.prototype.doubleData=o.emptyArray,t.prototype.uint64Data=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.dims&&t.dims.length){r.uint32(10).fork();for(var e=0;e<t.dims.length;++e)r.int64(t.dims[e]);r.ldelim()}if(null!=t.dataType&&Object.hasOwnProperty.call(t,"dataType")&&r.uint32(16).int32(t.dataType),null!=t.segment&&Object.hasOwnProperty.call(t,"segment")&&a.onnx.TensorProto.Segment.encode(t.segment,r.uint32(26).fork()).ldelim(),null!=t.floatData&&t.floatData.length){for(r.uint32(34).fork(),e=0;e<t.floatData.length;++e)r.float(t.floatData[e]);r.ldelim()}if(null!=t.int32Data&&t.int32Data.length){for(r.uint32(42).fork(),e=0;e<t.int32Data.length;++e)r.int32(t.int32Data[e]);r.ldelim()}if(null!=t.stringData&&t.stringData.length)for(e=0;e<t.stringData.length;++e)r.uint32(50).bytes(t.stringData[e]);if(null!=t.int64Data&&t.int64Data.length){for(r.uint32(58).fork(),e=0;e<t.int64Data.length;++e)r.int64(t.int64Data[e]);r.ldelim()}if(null!=t.name&&Object.hasOwnProperty.call(t,"name")&&r.uint32(66).string(t.name),null!=t.rawData&&Object.hasOwnProperty.call(t,"rawData")&&r.uint32(74).bytes(t.rawData),null!=t.doubleData&&t.doubleData.length){for(r.uint32(82).fork(),e=0;e<t.doubleData.length;++e)r.double(t.doubleData[e]);r.ldelim()}if(null!=t.uint64Data&&t.uint64Data.length){for(r.uint32(90).fork(),e=0;e<t.uint64Data.length;++e)r.uint64(t.uint64Data[e]);r.ldelim()}if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&r.uint32(98).string(t.docString),null!=t.externalData&&t.externalData.length)for(e=0;e<t.externalData.length;++e)a.onnx.StringStringEntryProto.encode(t.externalData[e],r.uint32(106).fork()).ldelim();return null!=t.dataLocation&&Object.hasOwnProperty.call(t,"dataLocation")&&r.uint32(112).int32(t.dataLocation),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TensorProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:if(d.dims&&d.dims.length||(d.dims=[]),2==(7&o))for(var l=t.uint32()+t.pos;t.pos<l;)d.dims.push(t.int64());else d.dims.push(t.int64());break;case 2:d.dataType=t.int32();break;case 3:d.segment=a.onnx.TensorProto.Segment.decode(t,t.uint32());break;case 4:if(d.floatData&&d.floatData.length||(d.floatData=[]),2==(7&o))for(l=t.uint32()+t.pos;t.pos<l;)d.floatData.push(t.float());else d.floatData.push(t.float());break;case 5:if(d.int32Data&&d.int32Data.length||(d.int32Data=[]),2==(7&o))for(l=t.uint32()+t.pos;t.pos<l;)d.int32Data.push(t.int32());else d.int32Data.push(t.int32());break;case 6:d.stringData&&d.stringData.length||(d.stringData=[]),d.stringData.push(t.bytes());break;case 7:if(d.int64Data&&d.int64Data.length||(d.int64Data=[]),2==(7&o))for(l=t.uint32()+t.pos;t.pos<l;)d.int64Data.push(t.int64());else d.int64Data.push(t.int64());break;case 8:d.name=t.string();break;case 12:d.docString=t.string();break;case 9:d.rawData=t.bytes();break;case 13:d.externalData&&d.externalData.length||(d.externalData=[]),d.externalData.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;case 14:d.dataLocation=t.int32();break;case 10:if(d.doubleData&&d.doubleData.length||(d.doubleData=[]),2==(7&o))for(l=t.uint32()+t.pos;t.pos<l;)d.doubleData.push(t.double());else d.doubleData.push(t.double());break;case 11:if(d.uint64Data&&d.uint64Data.length||(d.uint64Data=[]),2==(7&o))for(l=t.uint32()+t.pos;t.pos<l;)d.uint64Data.push(t.uint64());else d.uint64Data.push(t.uint64());break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.dims&&t.hasOwnProperty("dims")){if(!Array.isArray(t.dims))return"dims: array expected";for(var r=0;r<t.dims.length;++r)if(!(o.isInteger(t.dims[r])||t.dims[r]&&o.isInteger(t.dims[r].low)&&o.isInteger(t.dims[r].high)))return"dims: integer|Long[] expected"}if(null!=t.dataType&&t.hasOwnProperty("dataType")&&!o.isInteger(t.dataType))return"dataType: integer expected";if(null!=t.segment&&t.hasOwnProperty("segment")&&(e=a.onnx.TensorProto.Segment.verify(t.segment)))return"segment."+e;if(null!=t.floatData&&t.hasOwnProperty("floatData")){if(!Array.isArray(t.floatData))return"floatData: array expected";for(r=0;r<t.floatData.length;++r)if("number"!=typeof t.floatData[r])return"floatData: number[] expected"}if(null!=t.int32Data&&t.hasOwnProperty("int32Data")){if(!Array.isArray(t.int32Data))return"int32Data: array expected";for(r=0;r<t.int32Data.length;++r)if(!o.isInteger(t.int32Data[r]))return"int32Data: integer[] expected"}if(null!=t.stringData&&t.hasOwnProperty("stringData")){if(!Array.isArray(t.stringData))return"stringData: array expected";for(r=0;r<t.stringData.length;++r)if(!(t.stringData[r]&&"number"==typeof t.stringData[r].length||o.isString(t.stringData[r])))return"stringData: buffer[] expected"}if(null!=t.int64Data&&t.hasOwnProperty("int64Data")){if(!Array.isArray(t.int64Data))return"int64Data: array expected";for(r=0;r<t.int64Data.length;++r)if(!(o.isInteger(t.int64Data[r])||t.int64Data[r]&&o.isInteger(t.int64Data[r].low)&&o.isInteger(t.int64Data[r].high)))return"int64Data: integer|Long[] expected"}if(null!=t.name&&t.hasOwnProperty("name")&&!o.isString(t.name))return"name: string expected";if(null!=t.docString&&t.hasOwnProperty("docString")&&!o.isString(t.docString))return"docString: string expected";if(null!=t.rawData&&t.hasOwnProperty("rawData")&&!(t.rawData&&"number"==typeof t.rawData.length||o.isString(t.rawData)))return"rawData: buffer expected";if(null!=t.externalData&&t.hasOwnProperty("externalData")){if(!Array.isArray(t.externalData))return"externalData: array expected";for(r=0;r<t.externalData.length;++r){var e;if(e=a.onnx.StringStringEntryProto.verify(t.externalData[r]))return"externalData."+e}}if(null!=t.dataLocation&&t.hasOwnProperty("dataLocation"))switch(t.dataLocation){default:return"dataLocation: enum value expected";case 0:case 1:}if(null!=t.doubleData&&t.hasOwnProperty("doubleData")){if(!Array.isArray(t.doubleData))return"doubleData: array expected";for(r=0;r<t.doubleData.length;++r)if("number"!=typeof t.doubleData[r])return"doubleData: number[] expected"}if(null!=t.uint64Data&&t.hasOwnProperty("uint64Data")){if(!Array.isArray(t.uint64Data))return"uint64Data: array expected";for(r=0;r<t.uint64Data.length;++r)if(!(o.isInteger(t.uint64Data[r])||t.uint64Data[r]&&o.isInteger(t.uint64Data[r].low)&&o.isInteger(t.uint64Data[r].high)))return"uint64Data: integer|Long[] expected"}return null},t.fromObject=function(t){if(t instanceof a.onnx.TensorProto)return t;var r=new a.onnx.TensorProto;if(t.dims){if(!Array.isArray(t.dims))throw TypeError(".onnx.TensorProto.dims: array expected");r.dims=[];for(var e=0;e<t.dims.length;++e)o.Long?(r.dims[e]=o.Long.fromValue(t.dims[e])).unsigned=!1:"string"==typeof t.dims[e]?r.dims[e]=parseInt(t.dims[e],10):"number"==typeof t.dims[e]?r.dims[e]=t.dims[e]:"object"==typeof t.dims[e]&&(r.dims[e]=new o.LongBits(t.dims[e].low>>>0,t.dims[e].high>>>0).toNumber())}if(null!=t.dataType&&(r.dataType=0|t.dataType),null!=t.segment){if("object"!=typeof t.segment)throw TypeError(".onnx.TensorProto.segment: object expected");r.segment=a.onnx.TensorProto.Segment.fromObject(t.segment)}if(t.floatData){if(!Array.isArray(t.floatData))throw TypeError(".onnx.TensorProto.floatData: array expected");for(r.floatData=[],e=0;e<t.floatData.length;++e)r.floatData[e]=Number(t.floatData[e])}if(t.int32Data){if(!Array.isArray(t.int32Data))throw TypeError(".onnx.TensorProto.int32Data: array expected");for(r.int32Data=[],e=0;e<t.int32Data.length;++e)r.int32Data[e]=0|t.int32Data[e]}if(t.stringData){if(!Array.isArray(t.stringData))throw TypeError(".onnx.TensorProto.stringData: array expected");for(r.stringData=[],e=0;e<t.stringData.length;++e)"string"==typeof t.stringData[e]?o.base64.decode(t.stringData[e],r.stringData[e]=o.newBuffer(o.base64.length(t.stringData[e])),0):t.stringData[e].length>=0&&(r.stringData[e]=t.stringData[e])}if(t.int64Data){if(!Array.isArray(t.int64Data))throw TypeError(".onnx.TensorProto.int64Data: array expected");for(r.int64Data=[],e=0;e<t.int64Data.length;++e)o.Long?(r.int64Data[e]=o.Long.fromValue(t.int64Data[e])).unsigned=!1:"string"==typeof t.int64Data[e]?r.int64Data[e]=parseInt(t.int64Data[e],10):"number"==typeof t.int64Data[e]?r.int64Data[e]=t.int64Data[e]:"object"==typeof t.int64Data[e]&&(r.int64Data[e]=new o.LongBits(t.int64Data[e].low>>>0,t.int64Data[e].high>>>0).toNumber())}if(null!=t.name&&(r.name=String(t.name)),null!=t.docString&&(r.docString=String(t.docString)),null!=t.rawData&&("string"==typeof t.rawData?o.base64.decode(t.rawData,r.rawData=o.newBuffer(o.base64.length(t.rawData)),0):t.rawData.length>=0&&(r.rawData=t.rawData)),t.externalData){if(!Array.isArray(t.externalData))throw TypeError(".onnx.TensorProto.externalData: array expected");for(r.externalData=[],e=0;e<t.externalData.length;++e){if("object"!=typeof t.externalData[e])throw TypeError(".onnx.TensorProto.externalData: object expected");r.externalData[e]=a.onnx.StringStringEntryProto.fromObject(t.externalData[e])}}switch(t.dataLocation){default:if("number"==typeof t.dataLocation){r.dataLocation=t.dataLocation;break}break;case"DEFAULT":case 0:r.dataLocation=0;break;case"EXTERNAL":case 1:r.dataLocation=1}if(t.doubleData){if(!Array.isArray(t.doubleData))throw TypeError(".onnx.TensorProto.doubleData: array expected");for(r.doubleData=[],e=0;e<t.doubleData.length;++e)r.doubleData[e]=Number(t.doubleData[e])}if(t.uint64Data){if(!Array.isArray(t.uint64Data))throw TypeError(".onnx.TensorProto.uint64Data: array expected");for(r.uint64Data=[],e=0;e<t.uint64Data.length;++e)o.Long?(r.uint64Data[e]=o.Long.fromValue(t.uint64Data[e])).unsigned=!0:"string"==typeof t.uint64Data[e]?r.uint64Data[e]=parseInt(t.uint64Data[e],10):"number"==typeof t.uint64Data[e]?r.uint64Data[e]=t.uint64Data[e]:"object"==typeof t.uint64Data[e]&&(r.uint64Data[e]=new o.LongBits(t.uint64Data[e].low>>>0,t.uint64Data[e].high>>>0).toNumber(!0))}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.dims=[],e.floatData=[],e.int32Data=[],e.stringData=[],e.int64Data=[],e.doubleData=[],e.uint64Data=[],e.externalData=[]),r.defaults&&(e.dataType=0,e.segment=null,e.name="",r.bytes===String?e.rawData="":(e.rawData=[],r.bytes!==Array&&(e.rawData=o.newBuffer(e.rawData))),e.docString="",e.dataLocation=r.enums===String?"DEFAULT":0),t.dims&&t.dims.length){e.dims=[];for(var n=0;n<t.dims.length;++n)"number"==typeof t.dims[n]?e.dims[n]=r.longs===String?String(t.dims[n]):t.dims[n]:e.dims[n]=r.longs===String?o.Long.prototype.toString.call(t.dims[n]):r.longs===Number?new o.LongBits(t.dims[n].low>>>0,t.dims[n].high>>>0).toNumber():t.dims[n]}if(null!=t.dataType&&t.hasOwnProperty("dataType")&&(e.dataType=t.dataType),null!=t.segment&&t.hasOwnProperty("segment")&&(e.segment=a.onnx.TensorProto.Segment.toObject(t.segment,r)),t.floatData&&t.floatData.length)for(e.floatData=[],n=0;n<t.floatData.length;++n)e.floatData[n]=r.json&&!isFinite(t.floatData[n])?String(t.floatData[n]):t.floatData[n];if(t.int32Data&&t.int32Data.length)for(e.int32Data=[],n=0;n<t.int32Data.length;++n)e.int32Data[n]=t.int32Data[n];if(t.stringData&&t.stringData.length)for(e.stringData=[],n=0;n<t.stringData.length;++n)e.stringData[n]=r.bytes===String?o.base64.encode(t.stringData[n],0,t.stringData[n].length):r.bytes===Array?Array.prototype.slice.call(t.stringData[n]):t.stringData[n];if(t.int64Data&&t.int64Data.length)for(e.int64Data=[],n=0;n<t.int64Data.length;++n)"number"==typeof t.int64Data[n]?e.int64Data[n]=r.longs===String?String(t.int64Data[n]):t.int64Data[n]:e.int64Data[n]=r.longs===String?o.Long.prototype.toString.call(t.int64Data[n]):r.longs===Number?new o.LongBits(t.int64Data[n].low>>>0,t.int64Data[n].high>>>0).toNumber():t.int64Data[n];if(null!=t.name&&t.hasOwnProperty("name")&&(e.name=t.name),null!=t.rawData&&t.hasOwnProperty("rawData")&&(e.rawData=r.bytes===String?o.base64.encode(t.rawData,0,t.rawData.length):r.bytes===Array?Array.prototype.slice.call(t.rawData):t.rawData),t.doubleData&&t.doubleData.length)for(e.doubleData=[],n=0;n<t.doubleData.length;++n)e.doubleData[n]=r.json&&!isFinite(t.doubleData[n])?String(t.doubleData[n]):t.doubleData[n];if(t.uint64Data&&t.uint64Data.length)for(e.uint64Data=[],n=0;n<t.uint64Data.length;++n)"number"==typeof t.uint64Data[n]?e.uint64Data[n]=r.longs===String?String(t.uint64Data[n]):t.uint64Data[n]:e.uint64Data[n]=r.longs===String?o.Long.prototype.toString.call(t.uint64Data[n]):r.longs===Number?new o.LongBits(t.uint64Data[n].low>>>0,t.uint64Data[n].high>>>0).toNumber(!0):t.uint64Data[n];if(null!=t.docString&&t.hasOwnProperty("docString")&&(e.docString=t.docString),t.externalData&&t.externalData.length)for(e.externalData=[],n=0;n<t.externalData.length;++n)e.externalData[n]=a.onnx.StringStringEntryProto.toObject(t.externalData[n],r);return null!=t.dataLocation&&t.hasOwnProperty("dataLocation")&&(e.dataLocation=r.enums===String?void 0===a.onnx.TensorProto.DataLocation[t.dataLocation]?t.dataLocation:a.onnx.TensorProto.DataLocation[t.dataLocation]:t.dataLocation),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorProto"},t.DataType=function(){var t={},r=Object.create(t);return r[t[0]="UNDEFINED"]=0,r[t[1]="FLOAT"]=1,r[t[2]="UINT8"]=2,r[t[3]="INT8"]=3,r[t[4]="UINT16"]=4,r[t[5]="INT16"]=5,r[t[6]="INT32"]=6,r[t[7]="INT64"]=7,r[t[8]="STRING"]=8,r[t[9]="BOOL"]=9,r[t[10]="FLOAT16"]=10,r[t[11]="DOUBLE"]=11,r[t[12]="UINT32"]=12,r[t[13]="UINT64"]=13,r[t[14]="COMPLEX64"]=14,r[t[15]="COMPLEX128"]=15,r[t[16]="BFLOAT16"]=16,r[t[17]="FLOAT8E4M3FN"]=17,r[t[18]="FLOAT8E4M3FNUZ"]=18,r[t[19]="FLOAT8E5M2"]=19,r[t[20]="FLOAT8E5M2FNUZ"]=20,r}(),t.Segment=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.begin=o.Long?o.Long.fromBits(0,0,!1):0,t.prototype.end=o.Long?o.Long.fromBits(0,0,!1):0,t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.begin&&Object.hasOwnProperty.call(t,"begin")&&r.uint32(8).int64(t.begin),null!=t.end&&Object.hasOwnProperty.call(t,"end")&&r.uint32(16).int64(t.end),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TensorProto.Segment;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.begin=t.int64();break;case 2:d.end=t.int64();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){return"object"!=typeof t||null===t?"object expected":null==t.begin||!t.hasOwnProperty("begin")||o.isInteger(t.begin)||t.begin&&o.isInteger(t.begin.low)&&o.isInteger(t.begin.high)?null==t.end||!t.hasOwnProperty("end")||o.isInteger(t.end)||t.end&&o.isInteger(t.end.low)&&o.isInteger(t.end.high)?null:"end: integer|Long expected":"begin: integer|Long expected"},t.fromObject=function(t){if(t instanceof a.onnx.TensorProto.Segment)return t;var r=new a.onnx.TensorProto.Segment;return null!=t.begin&&(o.Long?(r.begin=o.Long.fromValue(t.begin)).unsigned=!1:"string"==typeof t.begin?r.begin=parseInt(t.begin,10):"number"==typeof t.begin?r.begin=t.begin:"object"==typeof t.begin&&(r.begin=new o.LongBits(t.begin.low>>>0,t.begin.high>>>0).toNumber())),null!=t.end&&(o.Long?(r.end=o.Long.fromValue(t.end)).unsigned=!1:"string"==typeof t.end?r.end=parseInt(t.end,10):"number"==typeof t.end?r.end=t.end:"object"==typeof t.end&&(r.end=new o.LongBits(t.end.low>>>0,t.end.high>>>0).toNumber())),r},t.toObject=function(t,r){r||(r={});var e={};if(r.defaults){if(o.Long){var n=new o.Long(0,0,!1);e.begin=r.longs===String?n.toString():r.longs===Number?n.toNumber():n}else e.begin=r.longs===String?"0":0;o.Long?(n=new o.Long(0,0,!1),e.end=r.longs===String?n.toString():r.longs===Number?n.toNumber():n):e.end=r.longs===String?"0":0}return null!=t.begin&&t.hasOwnProperty("begin")&&("number"==typeof t.begin?e.begin=r.longs===String?String(t.begin):t.begin:e.begin=r.longs===String?o.Long.prototype.toString.call(t.begin):r.longs===Number?new o.LongBits(t.begin.low>>>0,t.begin.high>>>0).toNumber():t.begin),null!=t.end&&t.hasOwnProperty("end")&&("number"==typeof t.end?e.end=r.longs===String?String(t.end):t.end:e.end=r.longs===String?o.Long.prototype.toString.call(t.end):r.longs===Number?new o.LongBits(t.end.low>>>0,t.end.high>>>0).toNumber():t.end),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorProto.Segment"},t}(),t.DataLocation=function(){var t={},r=Object.create(t);return r[t[0]="DEFAULT"]=0,r[t[1]="EXTERNAL"]=1,r}(),t}(),l.SparseTensorProto=function(){function t(t){if(this.dims=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.values=null,t.prototype.indices=null,t.prototype.dims=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.values&&Object.hasOwnProperty.call(t,"values")&&a.onnx.TensorProto.encode(t.values,r.uint32(10).fork()).ldelim(),null!=t.indices&&Object.hasOwnProperty.call(t,"indices")&&a.onnx.TensorProto.encode(t.indices,r.uint32(18).fork()).ldelim(),null!=t.dims&&t.dims.length){r.uint32(26).fork();for(var e=0;e<t.dims.length;++e)r.int64(t.dims[e]);r.ldelim()}return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.SparseTensorProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.values=a.onnx.TensorProto.decode(t,t.uint32());break;case 2:d.indices=a.onnx.TensorProto.decode(t,t.uint32());break;case 3:if(d.dims&&d.dims.length||(d.dims=[]),2==(7&o))for(var l=t.uint32()+t.pos;t.pos<l;)d.dims.push(t.int64());else d.dims.push(t.int64());break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";var r;if(null!=t.values&&t.hasOwnProperty("values")&&(r=a.onnx.TensorProto.verify(t.values)))return"values."+r;if(null!=t.indices&&t.hasOwnProperty("indices")&&(r=a.onnx.TensorProto.verify(t.indices)))return"indices."+r;if(null!=t.dims&&t.hasOwnProperty("dims")){if(!Array.isArray(t.dims))return"dims: array expected";for(var e=0;e<t.dims.length;++e)if(!(o.isInteger(t.dims[e])||t.dims[e]&&o.isInteger(t.dims[e].low)&&o.isInteger(t.dims[e].high)))return"dims: integer|Long[] expected"}return null},t.fromObject=function(t){if(t instanceof a.onnx.SparseTensorProto)return t;var r=new a.onnx.SparseTensorProto;if(null!=t.values){if("object"!=typeof t.values)throw TypeError(".onnx.SparseTensorProto.values: object expected");r.values=a.onnx.TensorProto.fromObject(t.values)}if(null!=t.indices){if("object"!=typeof t.indices)throw TypeError(".onnx.SparseTensorProto.indices: object expected");r.indices=a.onnx.TensorProto.fromObject(t.indices)}if(t.dims){if(!Array.isArray(t.dims))throw TypeError(".onnx.SparseTensorProto.dims: array expected");r.dims=[];for(var e=0;e<t.dims.length;++e)o.Long?(r.dims[e]=o.Long.fromValue(t.dims[e])).unsigned=!1:"string"==typeof t.dims[e]?r.dims[e]=parseInt(t.dims[e],10):"number"==typeof t.dims[e]?r.dims[e]=t.dims[e]:"object"==typeof t.dims[e]&&(r.dims[e]=new o.LongBits(t.dims[e].low>>>0,t.dims[e].high>>>0).toNumber())}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.dims=[]),r.defaults&&(e.values=null,e.indices=null),null!=t.values&&t.hasOwnProperty("values")&&(e.values=a.onnx.TensorProto.toObject(t.values,r)),null!=t.indices&&t.hasOwnProperty("indices")&&(e.indices=a.onnx.TensorProto.toObject(t.indices,r)),t.dims&&t.dims.length){e.dims=[];for(var n=0;n<t.dims.length;++n)"number"==typeof t.dims[n]?e.dims[n]=r.longs===String?String(t.dims[n]):t.dims[n]:e.dims[n]=r.longs===String?o.Long.prototype.toString.call(t.dims[n]):r.longs===Number?new o.LongBits(t.dims[n].low>>>0,t.dims[n].high>>>0).toNumber():t.dims[n]}return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.SparseTensorProto"},t}(),l.TensorShapeProto=function(){function t(t){if(this.dim=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.dim=o.emptyArray,t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.dim&&t.dim.length)for(var e=0;e<t.dim.length;++e)a.onnx.TensorShapeProto.Dimension.encode(t.dim[e],r.uint32(10).fork()).ldelim();return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TensorShapeProto;t.pos<e;){var o=t.uint32();o>>>3==1?(d.dim&&d.dim.length||(d.dim=[]),d.dim.push(a.onnx.TensorShapeProto.Dimension.decode(t,t.uint32()))):t.skipType(7&o)}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.dim&&t.hasOwnProperty("dim")){if(!Array.isArray(t.dim))return"dim: array expected";for(var r=0;r<t.dim.length;++r){var e=a.onnx.TensorShapeProto.Dimension.verify(t.dim[r]);if(e)return"dim."+e}}return null},t.fromObject=function(t){if(t instanceof a.onnx.TensorShapeProto)return t;var r=new a.onnx.TensorShapeProto;if(t.dim){if(!Array.isArray(t.dim))throw TypeError(".onnx.TensorShapeProto.dim: array expected");r.dim=[];for(var e=0;e<t.dim.length;++e){if("object"!=typeof t.dim[e])throw TypeError(".onnx.TensorShapeProto.dim: object expected");r.dim[e]=a.onnx.TensorShapeProto.Dimension.fromObject(t.dim[e])}}return r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.dim=[]),t.dim&&t.dim.length){e.dim=[];for(var n=0;n<t.dim.length;++n)e.dim[n]=a.onnx.TensorShapeProto.Dimension.toObject(t.dim[n],r)}return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorShapeProto"},t.Dimension=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}var r;return t.prototype.dimValue=null,t.prototype.dimParam=null,t.prototype.denotation="",Object.defineProperty(t.prototype,"value",{get:o.oneOfGetter(r=["dimValue","dimParam"]),set:o.oneOfSetter(r)}),t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.dimValue&&Object.hasOwnProperty.call(t,"dimValue")&&r.uint32(8).int64(t.dimValue),null!=t.dimParam&&Object.hasOwnProperty.call(t,"dimParam")&&r.uint32(18).string(t.dimParam),null!=t.denotation&&Object.hasOwnProperty.call(t,"denotation")&&r.uint32(26).string(t.denotation),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TensorShapeProto.Dimension;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.dimValue=t.int64();break;case 2:d.dimParam=t.string();break;case 3:d.denotation=t.string();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";var r={};if(null!=t.dimValue&&t.hasOwnProperty("dimValue")&&(r.value=1,!(o.isInteger(t.dimValue)||t.dimValue&&o.isInteger(t.dimValue.low)&&o.isInteger(t.dimValue.high))))return"dimValue: integer|Long expected";if(null!=t.dimParam&&t.hasOwnProperty("dimParam")){if(1===r.value)return"value: multiple values";if(r.value=1,!o.isString(t.dimParam))return"dimParam: string expected"}return null!=t.denotation&&t.hasOwnProperty("denotation")&&!o.isString(t.denotation)?"denotation: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.TensorShapeProto.Dimension)return t;var r=new a.onnx.TensorShapeProto.Dimension;return null!=t.dimValue&&(o.Long?(r.dimValue=o.Long.fromValue(t.dimValue)).unsigned=!1:"string"==typeof t.dimValue?r.dimValue=parseInt(t.dimValue,10):"number"==typeof t.dimValue?r.dimValue=t.dimValue:"object"==typeof t.dimValue&&(r.dimValue=new o.LongBits(t.dimValue.low>>>0,t.dimValue.high>>>0).toNumber())),null!=t.dimParam&&(r.dimParam=String(t.dimParam)),null!=t.denotation&&(r.denotation=String(t.denotation)),r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.denotation=""),null!=t.dimValue&&t.hasOwnProperty("dimValue")&&("number"==typeof t.dimValue?e.dimValue=r.longs===String?String(t.dimValue):t.dimValue:e.dimValue=r.longs===String?o.Long.prototype.toString.call(t.dimValue):r.longs===Number?new o.LongBits(t.dimValue.low>>>0,t.dimValue.high>>>0).toNumber():t.dimValue,r.oneofs&&(e.value="dimValue")),null!=t.dimParam&&t.hasOwnProperty("dimParam")&&(e.dimParam=t.dimParam,r.oneofs&&(e.value="dimParam")),null!=t.denotation&&t.hasOwnProperty("denotation")&&(e.denotation=t.denotation),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorShapeProto.Dimension"},t}(),t}(),l.TypeProto=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}var r;return t.prototype.tensorType=null,t.prototype.sequenceType=null,t.prototype.mapType=null,t.prototype.optionalType=null,t.prototype.sparseTensorType=null,t.prototype.denotation="",Object.defineProperty(t.prototype,"value",{get:o.oneOfGetter(r=["tensorType","sequenceType","mapType","optionalType","sparseTensorType"]),set:o.oneOfSetter(r)}),t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.tensorType&&Object.hasOwnProperty.call(t,"tensorType")&&a.onnx.TypeProto.Tensor.encode(t.tensorType,r.uint32(10).fork()).ldelim(),null!=t.sequenceType&&Object.hasOwnProperty.call(t,"sequenceType")&&a.onnx.TypeProto.Sequence.encode(t.sequenceType,r.uint32(34).fork()).ldelim(),null!=t.mapType&&Object.hasOwnProperty.call(t,"mapType")&&a.onnx.TypeProto.Map.encode(t.mapType,r.uint32(42).fork()).ldelim(),null!=t.denotation&&Object.hasOwnProperty.call(t,"denotation")&&r.uint32(50).string(t.denotation),null!=t.sparseTensorType&&Object.hasOwnProperty.call(t,"sparseTensorType")&&a.onnx.TypeProto.SparseTensor.encode(t.sparseTensorType,r.uint32(66).fork()).ldelim(),null!=t.optionalType&&Object.hasOwnProperty.call(t,"optionalType")&&a.onnx.TypeProto.Optional.encode(t.optionalType,r.uint32(74).fork()).ldelim(),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TypeProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.tensorType=a.onnx.TypeProto.Tensor.decode(t,t.uint32());break;case 4:d.sequenceType=a.onnx.TypeProto.Sequence.decode(t,t.uint32());break;case 5:d.mapType=a.onnx.TypeProto.Map.decode(t,t.uint32());break;case 9:d.optionalType=a.onnx.TypeProto.Optional.decode(t,t.uint32());break;case 8:d.sparseTensorType=a.onnx.TypeProto.SparseTensor.decode(t,t.uint32());break;case 6:d.denotation=t.string();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";var r={};if(null!=t.tensorType&&t.hasOwnProperty("tensorType")&&(r.value=1,e=a.onnx.TypeProto.Tensor.verify(t.tensorType)))return"tensorType."+e;if(null!=t.sequenceType&&t.hasOwnProperty("sequenceType")){if(1===r.value)return"value: multiple values";if(r.value=1,e=a.onnx.TypeProto.Sequence.verify(t.sequenceType))return"sequenceType."+e}if(null!=t.mapType&&t.hasOwnProperty("mapType")){if(1===r.value)return"value: multiple values";if(r.value=1,e=a.onnx.TypeProto.Map.verify(t.mapType))return"mapType."+e}if(null!=t.optionalType&&t.hasOwnProperty("optionalType")){if(1===r.value)return"value: multiple values";if(r.value=1,e=a.onnx.TypeProto.Optional.verify(t.optionalType))return"optionalType."+e}if(null!=t.sparseTensorType&&t.hasOwnProperty("sparseTensorType")){if(1===r.value)return"value: multiple values";var e;if(r.value=1,e=a.onnx.TypeProto.SparseTensor.verify(t.sparseTensorType))return"sparseTensorType."+e}return null!=t.denotation&&t.hasOwnProperty("denotation")&&!o.isString(t.denotation)?"denotation: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto)return t;var r=new a.onnx.TypeProto;if(null!=t.tensorType){if("object"!=typeof t.tensorType)throw TypeError(".onnx.TypeProto.tensorType: object expected");r.tensorType=a.onnx.TypeProto.Tensor.fromObject(t.tensorType)}if(null!=t.sequenceType){if("object"!=typeof t.sequenceType)throw TypeError(".onnx.TypeProto.sequenceType: object expected");r.sequenceType=a.onnx.TypeProto.Sequence.fromObject(t.sequenceType)}if(null!=t.mapType){if("object"!=typeof t.mapType)throw TypeError(".onnx.TypeProto.mapType: object expected");r.mapType=a.onnx.TypeProto.Map.fromObject(t.mapType)}if(null!=t.optionalType){if("object"!=typeof t.optionalType)throw TypeError(".onnx.TypeProto.optionalType: object expected");r.optionalType=a.onnx.TypeProto.Optional.fromObject(t.optionalType)}if(null!=t.sparseTensorType){if("object"!=typeof t.sparseTensorType)throw TypeError(".onnx.TypeProto.sparseTensorType: object expected");r.sparseTensorType=a.onnx.TypeProto.SparseTensor.fromObject(t.sparseTensorType)}return null!=t.denotation&&(r.denotation=String(t.denotation)),r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.denotation=""),null!=t.tensorType&&t.hasOwnProperty("tensorType")&&(e.tensorType=a.onnx.TypeProto.Tensor.toObject(t.tensorType,r),r.oneofs&&(e.value="tensorType")),null!=t.sequenceType&&t.hasOwnProperty("sequenceType")&&(e.sequenceType=a.onnx.TypeProto.Sequence.toObject(t.sequenceType,r),r.oneofs&&(e.value="sequenceType")),null!=t.mapType&&t.hasOwnProperty("mapType")&&(e.mapType=a.onnx.TypeProto.Map.toObject(t.mapType,r),r.oneofs&&(e.value="mapType")),null!=t.denotation&&t.hasOwnProperty("denotation")&&(e.denotation=t.denotation),null!=t.sparseTensorType&&t.hasOwnProperty("sparseTensorType")&&(e.sparseTensorType=a.onnx.TypeProto.SparseTensor.toObject(t.sparseTensorType,r),r.oneofs&&(e.value="sparseTensorType")),null!=t.optionalType&&t.hasOwnProperty("optionalType")&&(e.optionalType=a.onnx.TypeProto.Optional.toObject(t.optionalType,r),r.oneofs&&(e.value="optionalType")),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto"},t.Tensor=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.elemType=0,t.prototype.shape=null,t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&r.uint32(8).int32(t.elemType),null!=t.shape&&Object.hasOwnProperty.call(t,"shape")&&a.onnx.TensorShapeProto.encode(t.shape,r.uint32(18).fork()).ldelim(),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TypeProto.Tensor;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.elemType=t.int32();break;case 2:d.shape=a.onnx.TensorShapeProto.decode(t,t.uint32());break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")&&!o.isInteger(t.elemType))return"elemType: integer expected";if(null!=t.shape&&t.hasOwnProperty("shape")){var r=a.onnx.TensorShapeProto.verify(t.shape);if(r)return"shape."+r}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Tensor)return t;var r=new a.onnx.TypeProto.Tensor;if(null!=t.elemType&&(r.elemType=0|t.elemType),null!=t.shape){if("object"!=typeof t.shape)throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");r.shape=a.onnx.TensorShapeProto.fromObject(t.shape)}return r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.elemType=0,e.shape=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(e.elemType=t.elemType),null!=t.shape&&t.hasOwnProperty("shape")&&(e.shape=a.onnx.TensorShapeProto.toObject(t.shape,r)),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Tensor"},t}(),t.Sequence=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.elemType=null,t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&a.onnx.TypeProto.encode(t.elemType,r.uint32(10).fork()).ldelim(),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TypeProto.Sequence;t.pos<e;){var o=t.uint32();o>>>3==1?d.elemType=a.onnx.TypeProto.decode(t,t.uint32()):t.skipType(7&o)}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")){var r=a.onnx.TypeProto.verify(t.elemType);if(r)return"elemType."+r}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Sequence)return t;var r=new a.onnx.TypeProto.Sequence;if(null!=t.elemType){if("object"!=typeof t.elemType)throw TypeError(".onnx.TypeProto.Sequence.elemType: object expected");r.elemType=a.onnx.TypeProto.fromObject(t.elemType)}return r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.elemType=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(e.elemType=a.onnx.TypeProto.toObject(t.elemType,r)),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Sequence"},t}(),t.Map=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.keyType=0,t.prototype.valueType=null,t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.keyType&&Object.hasOwnProperty.call(t,"keyType")&&r.uint32(8).int32(t.keyType),null!=t.valueType&&Object.hasOwnProperty.call(t,"valueType")&&a.onnx.TypeProto.encode(t.valueType,r.uint32(18).fork()).ldelim(),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TypeProto.Map;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.keyType=t.int32();break;case 2:d.valueType=a.onnx.TypeProto.decode(t,t.uint32());break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.keyType&&t.hasOwnProperty("keyType")&&!o.isInteger(t.keyType))return"keyType: integer expected";if(null!=t.valueType&&t.hasOwnProperty("valueType")){var r=a.onnx.TypeProto.verify(t.valueType);if(r)return"valueType."+r}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Map)return t;var r=new a.onnx.TypeProto.Map;if(null!=t.keyType&&(r.keyType=0|t.keyType),null!=t.valueType){if("object"!=typeof t.valueType)throw TypeError(".onnx.TypeProto.Map.valueType: object expected");r.valueType=a.onnx.TypeProto.fromObject(t.valueType)}return r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.keyType=0,e.valueType=null),null!=t.keyType&&t.hasOwnProperty("keyType")&&(e.keyType=t.keyType),null!=t.valueType&&t.hasOwnProperty("valueType")&&(e.valueType=a.onnx.TypeProto.toObject(t.valueType,r)),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Map"},t}(),t.Optional=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.elemType=null,t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&a.onnx.TypeProto.encode(t.elemType,r.uint32(10).fork()).ldelim(),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TypeProto.Optional;t.pos<e;){var o=t.uint32();o>>>3==1?d.elemType=a.onnx.TypeProto.decode(t,t.uint32()):t.skipType(7&o)}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")){var r=a.onnx.TypeProto.verify(t.elemType);if(r)return"elemType."+r}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Optional)return t;var r=new a.onnx.TypeProto.Optional;if(null!=t.elemType){if("object"!=typeof t.elemType)throw TypeError(".onnx.TypeProto.Optional.elemType: object expected");r.elemType=a.onnx.TypeProto.fromObject(t.elemType)}return r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.elemType=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(e.elemType=a.onnx.TypeProto.toObject(t.elemType,r)),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Optional"},t}(),t.SparseTensor=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.elemType=0,t.prototype.shape=null,t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&r.uint32(8).int32(t.elemType),null!=t.shape&&Object.hasOwnProperty.call(t,"shape")&&a.onnx.TensorShapeProto.encode(t.shape,r.uint32(18).fork()).ldelim(),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.TypeProto.SparseTensor;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.elemType=t.int32();break;case 2:d.shape=a.onnx.TensorShapeProto.decode(t,t.uint32());break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")&&!o.isInteger(t.elemType))return"elemType: integer expected";if(null!=t.shape&&t.hasOwnProperty("shape")){var r=a.onnx.TensorShapeProto.verify(t.shape);if(r)return"shape."+r}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.SparseTensor)return t;var r=new a.onnx.TypeProto.SparseTensor;if(null!=t.elemType&&(r.elemType=0|t.elemType),null!=t.shape){if("object"!=typeof t.shape)throw TypeError(".onnx.TypeProto.SparseTensor.shape: object expected");r.shape=a.onnx.TensorShapeProto.fromObject(t.shape)}return r},t.toObject=function(t,r){r||(r={});var e={};return r.defaults&&(e.elemType=0,e.shape=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(e.elemType=t.elemType),null!=t.shape&&t.hasOwnProperty("shape")&&(e.shape=a.onnx.TensorShapeProto.toObject(t.shape,r)),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.SparseTensor"},t}(),t}(),l.OperatorSetIdProto=function(){function t(t){if(t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.domain="",t.prototype.version=o.Long?o.Long.fromBits(0,0,!1):0,t.create=function(r){return new t(r)},t.encode=function(t,r){return r||(r=d.create()),null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&r.uint32(10).string(t.domain),null!=t.version&&Object.hasOwnProperty.call(t,"version")&&r.uint32(16).int64(t.version),r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.OperatorSetIdProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.domain=t.string();break;case 2:d.version=t.int64();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){return"object"!=typeof t||null===t?"object expected":null!=t.domain&&t.hasOwnProperty("domain")&&!o.isString(t.domain)?"domain: string expected":null==t.version||!t.hasOwnProperty("version")||o.isInteger(t.version)||t.version&&o.isInteger(t.version.low)&&o.isInteger(t.version.high)?null:"version: integer|Long expected"},t.fromObject=function(t){if(t instanceof a.onnx.OperatorSetIdProto)return t;var r=new a.onnx.OperatorSetIdProto;return null!=t.domain&&(r.domain=String(t.domain)),null!=t.version&&(o.Long?(r.version=o.Long.fromValue(t.version)).unsigned=!1:"string"==typeof t.version?r.version=parseInt(t.version,10):"number"==typeof t.version?r.version=t.version:"object"==typeof t.version&&(r.version=new o.LongBits(t.version.low>>>0,t.version.high>>>0).toNumber())),r},t.toObject=function(t,r){r||(r={});var e={};if(r.defaults)if(e.domain="",o.Long){var n=new o.Long(0,0,!1);e.version=r.longs===String?n.toString():r.longs===Number?n.toNumber():n}else e.version=r.longs===String?"0":0;return null!=t.domain&&t.hasOwnProperty("domain")&&(e.domain=t.domain),null!=t.version&&t.hasOwnProperty("version")&&("number"==typeof t.version?e.version=r.longs===String?String(t.version):t.version:e.version=r.longs===String?o.Long.prototype.toString.call(t.version):r.longs===Number?new o.LongBits(t.version.low>>>0,t.version.high>>>0).toNumber():t.version),e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.OperatorSetIdProto"},t}(),l.OperatorStatus=function(){var t={},r=Object.create(t);return r[t[0]="EXPERIMENTAL"]=0,r[t[1]="STABLE"]=1,r}(),l.FunctionProto=function(){function t(t){if(this.input=[],this.output=[],this.attribute=[],this.attributeProto=[],this.node=[],this.opsetImport=[],t)for(var r=Object.keys(t),e=0;e<r.length;++e)null!=t[r[e]]&&(this[r[e]]=t[r[e]])}return t.prototype.name="",t.prototype.input=o.emptyArray,t.prototype.output=o.emptyArray,t.prototype.attribute=o.emptyArray,t.prototype.attributeProto=o.emptyArray,t.prototype.node=o.emptyArray,t.prototype.docString="",t.prototype.opsetImport=o.emptyArray,t.prototype.domain="",t.create=function(r){return new t(r)},t.encode=function(t,r){if(r||(r=d.create()),null!=t.name&&Object.hasOwnProperty.call(t,"name")&&r.uint32(10).string(t.name),null!=t.input&&t.input.length)for(var e=0;e<t.input.length;++e)r.uint32(34).string(t.input[e]);if(null!=t.output&&t.output.length)for(e=0;e<t.output.length;++e)r.uint32(42).string(t.output[e]);if(null!=t.attribute&&t.attribute.length)for(e=0;e<t.attribute.length;++e)r.uint32(50).string(t.attribute[e]);if(null!=t.node&&t.node.length)for(e=0;e<t.node.length;++e)a.onnx.NodeProto.encode(t.node[e],r.uint32(58).fork()).ldelim();if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&r.uint32(66).string(t.docString),null!=t.opsetImport&&t.opsetImport.length)for(e=0;e<t.opsetImport.length;++e)a.onnx.OperatorSetIdProto.encode(t.opsetImport[e],r.uint32(74).fork()).ldelim();if(null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&r.uint32(82).string(t.domain),null!=t.attributeProto&&t.attributeProto.length)for(e=0;e<t.attributeProto.length;++e)a.onnx.AttributeProto.encode(t.attributeProto[e],r.uint32(90).fork()).ldelim();return r},t.encodeDelimited=function(t,r){return this.encode(t,r).ldelim()},t.decode=function(t,r){t instanceof n||(t=n.create(t));for(var e=void 0===r?t.len:t.pos+r,d=new a.onnx.FunctionProto;t.pos<e;){var o=t.uint32();switch(o>>>3){case 1:d.name=t.string();break;case 4:d.input&&d.input.length||(d.input=[]),d.input.push(t.string());break;case 5:d.output&&d.output.length||(d.output=[]),d.output.push(t.string());break;case 6:d.attribute&&d.attribute.length||(d.attribute=[]),d.attribute.push(t.string());break;case 11:d.attributeProto&&d.attributeProto.length||(d.attributeProto=[]),d.attributeProto.push(a.onnx.AttributeProto.decode(t,t.uint32()));break;case 7:d.node&&d.node.length||(d.node=[]),d.node.push(a.onnx.NodeProto.decode(t,t.uint32()));break;case 8:d.docString=t.string();break;case 9:d.opsetImport&&d.opsetImport.length||(d.opsetImport=[]),d.opsetImport.push(a.onnx.OperatorSetIdProto.decode(t,t.uint32()));break;case 10:d.domain=t.string();break;default:t.skipType(7&o)}}return d},t.decodeDelimited=function(t){return t instanceof n||(t=new n(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.name&&t.hasOwnProperty("name")&&!o.isString(t.name))return"name: string expected";if(null!=t.input&&t.hasOwnProperty("input")){if(!Array.isArray(t.input))return"input: array expected";for(var r=0;r<t.input.length;++r)if(!o.isString(t.input[r]))return"input: string[] expected"}if(null!=t.output&&t.hasOwnProperty("output")){if(!Array.isArray(t.output))return"output: array expected";for(r=0;r<t.output.length;++r)if(!o.isString(t.output[r]))return"output: string[] expected"}if(null!=t.attribute&&t.hasOwnProperty("attribute")){if(!Array.isArray(t.attribute))return"attribute: array expected";for(r=0;r<t.attribute.length;++r)if(!o.isString(t.attribute[r]))return"attribute: string[] expected"}if(null!=t.attributeProto&&t.hasOwnProperty("attributeProto")){if(!Array.isArray(t.attributeProto))return"attributeProto: array expected";for(r=0;r<t.attributeProto.length;++r)if(e=a.onnx.AttributeProto.verify(t.attributeProto[r]))return"attributeProto."+e}if(null!=t.node&&t.hasOwnProperty("node")){if(!Array.isArray(t.node))return"node: array expected";for(r=0;r<t.node.length;++r)if(e=a.onnx.NodeProto.verify(t.node[r]))return"node."+e}if(null!=t.docString&&t.hasOwnProperty("docString")&&!o.isString(t.docString))return"docString: string expected";if(null!=t.opsetImport&&t.hasOwnProperty("opsetImport")){if(!Array.isArray(t.opsetImport))return"opsetImport: array expected";for(r=0;r<t.opsetImport.length;++r){var e;if(e=a.onnx.OperatorSetIdProto.verify(t.opsetImport[r]))return"opsetImport."+e}}return null!=t.domain&&t.hasOwnProperty("domain")&&!o.isString(t.domain)?"domain: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.FunctionProto)return t;var r=new a.onnx.FunctionProto;if(null!=t.name&&(r.name=String(t.name)),t.input){if(!Array.isArray(t.input))throw TypeError(".onnx.FunctionProto.input: array expected");r.input=[];for(var e=0;e<t.input.length;++e)r.input[e]=String(t.input[e])}if(t.output){if(!Array.isArray(t.output))throw TypeError(".onnx.FunctionProto.output: array expected");for(r.output=[],e=0;e<t.output.length;++e)r.output[e]=String(t.output[e])}if(t.attribute){if(!Array.isArray(t.attribute))throw TypeError(".onnx.FunctionProto.attribute: array expected");for(r.attribute=[],e=0;e<t.attribute.length;++e)r.attribute[e]=String(t.attribute[e])}if(t.attributeProto){if(!Array.isArray(t.attributeProto))throw TypeError(".onnx.FunctionProto.attributeProto: array expected");for(r.attributeProto=[],e=0;e<t.attributeProto.length;++e){if("object"!=typeof t.attributeProto[e])throw TypeError(".onnx.FunctionProto.attributeProto: object expected");r.attributeProto[e]=a.onnx.AttributeProto.fromObject(t.attributeProto[e])}}if(t.node){if(!Array.isArray(t.node))throw TypeError(".onnx.FunctionProto.node: array expected");for(r.node=[],e=0;e<t.node.length;++e){if("object"!=typeof t.node[e])throw TypeError(".onnx.FunctionProto.node: object expected");r.node[e]=a.onnx.NodeProto.fromObject(t.node[e])}}if(null!=t.docString&&(r.docString=String(t.docString)),t.opsetImport){if(!Array.isArray(t.opsetImport))throw TypeError(".onnx.FunctionProto.opsetImport: array expected");for(r.opsetImport=[],e=0;e<t.opsetImport.length;++e){if("object"!=typeof t.opsetImport[e])throw TypeError(".onnx.FunctionProto.opsetImport: object expected");r.opsetImport[e]=a.onnx.OperatorSetIdProto.fromObject(t.opsetImport[e])}}return null!=t.domain&&(r.domain=String(t.domain)),r},t.toObject=function(t,r){r||(r={});var e={};if((r.arrays||r.defaults)&&(e.input=[],e.output=[],e.attribute=[],e.node=[],e.opsetImport=[],e.attributeProto=[]),r.defaults&&(e.name="",e.docString="",e.domain=""),null!=t.name&&t.hasOwnProperty("name")&&(e.name=t.name),t.input&&t.input.length){e.input=[];for(var n=0;n<t.input.length;++n)e.input[n]=t.input[n]}if(t.output&&t.output.length)for(e.output=[],n=0;n<t.output.length;++n)e.output[n]=t.output[n];if(t.attribute&&t.attribute.length)for(e.attribute=[],n=0;n<t.attribute.length;++n)e.attribute[n]=t.attribute[n];if(t.node&&t.node.length)for(e.node=[],n=0;n<t.node.length;++n)e.node[n]=a.onnx.NodeProto.toObject(t.node[n],r);if(null!=t.docString&&t.hasOwnProperty("docString")&&(e.docString=t.docString),t.opsetImport&&t.opsetImport.length)for(e.opsetImport=[],n=0;n<t.opsetImport.length;++n)e.opsetImport[n]=a.onnx.OperatorSetIdProto.toObject(t.opsetImport[n],r);if(null!=t.domain&&t.hasOwnProperty("domain")&&(e.domain=t.domain),t.attributeProto&&t.attributeProto.length)for(e.attributeProto=[],n=0;n<t.attributeProto.length;++n)e.attributeProto[n]=a.onnx.AttributeProto.toObject(t.attributeProto[n],r);return e},t.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.FunctionProto"},t}(),l}(),r.exports=a}));function ur(t,r){if(!t)throw new Error("string"==typeof r?r:r())}function kr(t){return(new TextDecoder).decode(t)}var ot,Me,ai,kt,Sn,At,Rt,B,$r,Ue,Ve,ze,Y=O((()=>{wn(),qo(),ot=rr(sr()),We(),Me=class{static arraysEqual(t,r){if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0}},ai=class{static preprocessInputShapes(t,r){return[1===t.length?[1,t[0]]:t,1===r.length?[r[0],1]:r]}static postprocessOutputShape(t,r,e){1===r&&t.splice(t.length-2,1),1===e&&t.pop()}static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},kt=class t{static calcShape(t,r,e=!1){let n=t.length,d=r.length;if(0===n)return r;if(0===d)return t;let o=Math.max(t.length,r.length),a=new Array(o);if(e){if(n<2||d<2)return;let e=ai.calcMatMulShape([t[n-2],t[n-1]],[r[d-2],r[d-1]]);if(void 0===e)return;[a[o-2],a[o-1]]=e}for(let l=e?3:1;l<=o;l++){let e=n-l<0?1:t[n-l],i=d-l<0?1:r[d-l];if(e!==i&&e>1&&i>1)return;a[o-l]=Math.max(e,i)}return a}static index(r,e){let n=new Array(e.length);return t.fillIndex(r,e,n),n}static fillIndex(t,r,e){let n=t.length-r.length;for(let d=0;d<r.length;d++)e[d]=t[n+d]%r[d]}static calc(r,e,n,d,o){let a=t.calcShape(r.dims,e.dims);if(a){if(d&&!B.areEqual(a,r.dims))return;let l=B.size(a),i=d?r:new bt(a,o||r.type);if(0===a.length)i.set([],n(r.get([]),e.get([])));else{let d,o=new Array(a.length),A=new Array(r.dims.length),B=new Array(e.dims.length),s=0,g=0,p=!1,C=!1;0===r.dims.length&&(s=r.get([]),p=!0),0===e.dims.length&&(g=e.get([]),C=!0);for(let u=0;u<l;u++){d=u;for(let t=a.length-1;t>=0;t--)o[t]=d%a[t],d=Math.floor(d/a[t]);p||(t.fillIndex(o,r.dims,A),s=r.get(A)),C||(t.fillIndex(o,e.dims,B),g=e.get(B)),i.set(o,n(s,g))}}return i}}static isValidBroadcast(t,r){let e=t.length,n=r.length;if(e>n)return!1;for(let d=1;d<=e;d++)if(1!==t[e-d]&&t[e-d]!==r[n-d])return!1;return!0}static getBroadcastDims(t,r){let e=t.length,n=[];for(let d=0;d<e;d++){let o=e-1-d,a=t[o]||1;(r[r.length-1-d]||1)>1&&1===a&&n.unshift(o)}return n}},Sn=class{static getShapeOfGemmResult(t,r,e,n,d){if(2!==t.length||2!==e.length)throw new Error("shape need to be of size 2");let o,a,l;r?(o=t[1],a=t[0]):(o=t[0],a=t[1]);let i=-1;if(n?(l=e[0],i=1):(l=e[1],i=0),e[i]!==a)throw new Error("dimension mismatch");if(o<=0||l<=0||a<=0)throw new Error("invalid shape specified");if(d&&!kt.isValidBroadcast(d,[o,l]))throw new Error("gemm: invalid bias shape for broadcast");return[o,l,a]}},At=class t{static tensorDataTypeFromProto(t){switch(t){case ot.onnx.TensorProto.DataType.INT8:return"int8";case ot.onnx.TensorProto.DataType.UINT8:return"uint8";case ot.onnx.TensorProto.DataType.BOOL:return"bool";case ot.onnx.TensorProto.DataType.INT16:return"int16";case ot.onnx.TensorProto.DataType.UINT16:return"uint16";case ot.onnx.TensorProto.DataType.INT32:return"int32";case ot.onnx.TensorProto.DataType.UINT32:return"uint32";case ot.onnx.TensorProto.DataType.FLOAT:return"float32";case ot.onnx.TensorProto.DataType.DOUBLE:return"float64";case ot.onnx.TensorProto.DataType.STRING:return"string";case ot.onnx.TensorProto.DataType.INT64:return"int32";case ot.onnx.TensorProto.DataType.UINT64:return"uint32";default:throw new Error(`unsupported data type: ${ot.onnx.TensorProto.DataType[t]}`)}}static tensorDataTypeStringToEnum(t){switch(t){case"int8":return ot.onnx.TensorProto.DataType.INT8;case"uint8":return ot.onnx.TensorProto.DataType.UINT8;case"bool":return ot.onnx.TensorProto.DataType.BOOL;case"int16":return ot.onnx.TensorProto.DataType.INT16;case"uint16":return ot.onnx.TensorProto.DataType.UINT16;case"int32":return ot.onnx.TensorProto.DataType.INT32;case"uint32":return ot.onnx.TensorProto.DataType.UINT32;case"float32":return ot.onnx.TensorProto.DataType.FLOAT;case"float64":return ot.onnx.TensorProto.DataType.DOUBLE;case"string":return ot.onnx.TensorProto.DataType.STRING;case"int64":return ot.onnx.TensorProto.DataType.INT64;case"uint64":return ot.onnx.TensorProto.DataType.UINT64;default:throw new Error(`unsupported data type: ${t}`)}}static tensorDimsFromProto(t){return t.map((t=>xe.isLong(t)?t.toNumber():t))}static tensorValueTypeFromProto(r){return{tensorType:t.tensorDataTypeFromProto(r.elemType),shape:{dims:t.tensorDimsFromProto(r.shape.dim.map((t=>t.dimValue)))}}}static tensorDimsFromORTFormat(t){let r=[];for(let e=0;e<t.dimsLength();e++)r.push(Rt.longToNumber(t.dims(e)));return r}static tensorAttributesFromORTFormat(t){let r=[];for(let e=0;e<t.attributesLength();e++)r.push(t.attributes(e));return r}},Rt=class{static longToNumber(t,r){return xe.isLong(t)?t.toNumber():t instanceof w.Long?xe.fromValue({low:t.low,high:t.high,unsigned:r??!1}).toNumber():t}static isLong(t){return xe.isLong(t)||t instanceof w.Long}},B=class t{static size(r){return t.getSizeFromDimensionRange(r,0,r.length)}static sizeFromDimension(r,e){if(e<0||e>r.length)throw new Error(`invalid dimension of ${e} for sizeFromDimension as Tensor has ${r.length} dimensions.`);return t.getSizeFromDimensionRange(r,e,r.length)}static sizeToDimension(r,e){if(e<0||e>r.length)throw new Error(`invalid dimension of ${e} for sizeToDimension as Tensor has ${r.length} dimensions.`);return t.getSizeFromDimensionRange(r,0,e)}static getSizeFromDimensionRange(t,r,e){let n=1;for(let d=r;d<e;d++){if(t[d]<=0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.");n*=t[d]}return n}static computeStrides(t){let r=t.length;if(0===r)return[];if(1===r)return[1];let e=new Array(r);e[r-1]=1,e[r-2]=t[r-1];for(let n=r-3;n>=0;--n)e[n]=e[n+1]*t[n+1];return e}static transpose(t){return t.slice().reverse()}static indicesToOffset(t,r,e){void 0===e&&(e=t.length);let n=0;for(let d=0;d<e;++d)n+=r[d]*t[d];return n}static offsetToIndices(t,r){let e=r.length;if(0===e)return[];if(1===e)return[t*r[0]];let n=new Array(r.length);for(let e=0;e<n.length-1;++e)n[e]=Math.floor(t/r[e]),t-=n[e]*r[e];return n[n.length-1]=t,n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map((t=>this.normalizeAxis(t,r)))}static incrementIndex(t,r,e){if(0===r.length||0===t.length)throw new Error("Index incrementing unsupported for scalar Tensor");if(void 0===e)e=r.length;else if(e<=0||e>r.length)throw new Error("Incorrect axis to increment on");for(let n=e-1;n>=0&&(t[n]++,!(t[n]<r[n]));--n)t[n]=0}static calculateReshapedDims(r,e){if(0===e.length){if(0===r.length||1===t.size(r))return[];throw new Error("cannot reshape to a scalar Tensor")}let n=e.length,d=new Array(n),o=-1,a=1;for(let t=0;t<n;t++){if(e[t]<-1)throw new Error("a dimension in shape hints cannot be less than -1");if(-1===e[t]){if(-1!==o)throw new Error("at most one dimension in shape hints can be -1");o=t}else{if(0===e[t]){if(t>=r.length)throw new Error("the dimension with value zero exceeds the dimension size of the input tensor");d[t]=r[t]}else d[t]=e[t];a*=d[t]}}let l=t.size(r);if(-1!==o){if(l%a!=0)throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${r}] Output shape: [${e}]`);d[o]=l/a}else if(a!==l)throw new Error("reshapedDims and originalDims don't have matching sizes");return d}static sortBasedOnPerm(t,r){return r?r.map((r=>t[r])):t.slice().reverse()}static padShape(t,r){let e=t.length;return t.map(((t,n)=>t+r[n]+r[n+e]))}static areEqual(t,r){return t.length===r.length&&t.every(((t,e)=>t===r[e]))}static validateDimsAndCalcSize(t){if(t.length>6)throw new TypeError("Only rank 0 to 6 is supported for tensor shape.");let r=1;for(let e of t){if(!Number.isInteger(e))throw new TypeError(`Invalid shape: ${e} is not an integer`);if(e<0||e>2147483647)throw new TypeError(`Invalid shape: length ${e} is not allowed`);r*=e}return r}static flattenShape(t,r){r<0&&(r+=t.length);let e=t.reduce(((t,r)=>t*r),1),n=t.slice(r).reduce(((t,r)=>t*r),1);return[e/n,n]}static squeezeShape(r,e){let n=new Array;e=t.normalizeAxes(e,r.length);for(let t=0;t<r.length;t++){let d=e.indexOf(t)>=0;if(d&&1!==r[t])throw new Error("squeeze an axis of size different than 1");(0===e.length&&r[t]>1||e.length>0&&!d)&&n.push(r[t])}return n}static unsqueezeShape(r,e){let n=new Array(r.length+e.length);n.fill(0);for(let r=0;r<e.length;r++){let d=t.normalizeAxis(e[r],n.length);if(d>=n.length)throw new Error("'axes' has an out of range axis");if(0!==n[d])throw new Error("'axes' has a duplicate axis");n[d]=1}let d=0;for(let t=0;t<n.length;t++)0===n[t]&&(n[t]=r[d++]);if(d!==r.length)throw new Error("the unsqueezed dimension could not be established");return n}},$r=class t{static splitShape(r,e,n,d){if(0===n.length){if(!d)throw new Error("need to know number of outputs when the 'split' attribute is not specified");t.determineSplit(r[e],d,n)}let o=[],a=[0];for(let t=0;t<n.length;++t){0!==t&&a.push(a[t-1]+n[t-1]);let d=r.slice();d[e]=n[t],o.push(d)}return[o,a]}static determineSplit(t,r,e){if(t%r!=0)throw new Error("cannot split tensor to equal sized parts");for(let n=0;n<r;++n)e.push(t/r)}},Ue=class t{static adjustPoolAttributes(t,r,e,n,d,o){if(!t&&e.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let t=0;t<r.length-2;t++)t>=e.length?e.push(r[t+2]):e[t]=r[t+2];for(let t=0;t<e.length;t++)if(t<n.length){if(n[t]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let t=0;t<e.length;t++)if(t<d.length){if(d[t]<0)throw new Error("dilations should be greater than or equal to 1")}else d.push(1);for(let t=0;t<2*e.length;t++)if(t<o.length){if(o[t]<0)throw new Error("pad should be greater than or equal to 1")}else o.push(0);for(let t=0;t<e.length;t++){if(e[t]<=0)throw new Error("kernel shapes need to be greater than 0");if(o[t]>=e[t]||o[t+e.length]>=e[t])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(r,e,n,d,o,a){if(a){if(o.length!==2*(r.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(e.length!==r.length-2)throw new Error("length of strides should be the length of data dimensions");if(d.length!==r.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<r.length-2;l++)t.adjustPadAndReturnShape(r[l+2],e[l],n[l],d[l],o,l,l+r.length-2,a)}}static computePoolOutputShape(r,e,n,d,o,a,l){if(e.length<=0)throw new Error("input shape must be of size greater than 0");let i=[e[0],e[1]];return t.computeShapeHelper(r,e,i,n,d,o,a,l),i}static computeConvOutputShape(r,e,n,d,o,a,l){if(r.length<=0||e.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let i=[r[0],e[0]];return t.computeShapeHelper(!1,r,i,n,d,o,a,l),i}static computeShapeHelper(r,e,n,d,o,a,l,i){if(r)for(let t=0;t<e.length-2;t++)n.push(1);else for(let r=0;r<e.length-2;r++)n.push(t.adjustPadAndReturnShape(e[r+2],d[r],o[r],a[r],l,r,r+e.length-2,i))}static adjustPadAndReturnShape(t,r,e,n,d,o,a,l){let i=e*(n-1)+1;if(!l||"NOTSET"===l)return Math.floor((t+d[o]+d[a]-i)/r+1);switch(l){case"VALID":return d[o]=0,d[a]=0,Math.floor((t-i)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==e)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let e=((t+r-1)/r-1)*r+n-t;return d[o]=Math.floor("SAME_LOWER"===l?(e+1)/2:e/2),d[a]=e-d[o],Math.floor((t+e-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}}},Ve=-34028234663852886e22,ze=34028234663852886e22}));function hh(t){switch(t){case"bool":case"int8":case"uint8":return 1;case"int16":case"uint16":return 2;case"int32":case"uint32":case"float32":return 4;case"float64":return 8;default:throw new Error(`cannot calculate sizeof() on type ${t}`)}}function Wu(t){switch(t){case H.onnx.TensorProto.DataType.UINT8:case H.onnx.TensorProto.DataType.INT8:case H.onnx.TensorProto.DataType.BOOL:return 1;case H.onnx.TensorProto.DataType.UINT16:case H.onnx.TensorProto.DataType.INT16:return 2;case H.onnx.TensorProto.DataType.FLOAT:case H.onnx.TensorProto.DataType.INT32:case H.onnx.TensorProto.DataType.UINT32:return 4;case H.onnx.TensorProto.DataType.INT64:case H.onnx.TensorProto.DataType.DOUBLE:case H.onnx.TensorProto.DataType.UINT64:return 8;default:throw new Error(`cannot calculate sizeof() on type ${H.onnx.TensorProto.DataType[t]}`)}}function mh(t,r){return new(ju(r))(t)}function ju(t){switch(t){case"bool":case"uint8":return Uint8Array;case"int8":return Int8Array;case"int16":return Int16Array;case"uint16":return Uint16Array;case"int32":return Int32Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"float32":return Float32Array;case"float64":return Float64Array;default:throw new Error("unspecified error")}}function ui(t,r){if(r===H.onnx.TensorProto.DataType.INT64||r===si.TensorDataType.INT64){if(t.greaterThanOrEqual(2147483648)||t.lessThan(-2147483648))throw new TypeError("int64 is not supported")}else{if(r!==H.onnx.TensorProto.DataType.UINT32&&r!==si.TensorDataType.UINT32&&r!==H.onnx.TensorProto.DataType.UINT64&&r!==si.TensorDataType.UINT64)throw new TypeError(`not a LONG type: ${H.onnx.TensorProto.DataType[r]}`);if(t.greaterThanOrEqual(4294967296)||t.lessThan(0))throw new TypeError("uint64 is not supported")}return t.toNumber()}function Hu(t,r,e){switch(r){case H.onnx.TensorProto.DataType.BOOL:case H.onnx.TensorProto.DataType.UINT8:return t.getUint8(e);case H.onnx.TensorProto.DataType.INT8:return t.getInt8(e);case H.onnx.TensorProto.DataType.UINT16:return t.getUint16(e,!0);case H.onnx.TensorProto.DataType.INT16:return t.getInt16(e,!0);case H.onnx.TensorProto.DataType.FLOAT:return t.getFloat32(e,!0);case H.onnx.TensorProto.DataType.INT32:return t.getInt32(e,!0);case H.onnx.TensorProto.DataType.UINT32:return t.getUint32(e,!0);case H.onnx.TensorProto.DataType.INT64:return ui(xe.fromBits(t.getUint32(e,!0),t.getUint32(e+4,!0),!1),r);case H.onnx.TensorProto.DataType.DOUBLE:return t.getFloat64(e,!0);case H.onnx.TensorProto.DataType.UINT64:return ui(xe.fromBits(t.getUint32(e,!0),t.getUint32(e+4,!0),!0),r);default:throw new Error(`cannot read from DataView for type ${H.onnx.TensorProto.DataType[r]}`)}}var qu,H,si,bt,We=O((()=>{qu=rr(Fs()),qo(),Pr(),H=rr(sr()),Y(),si=F.experimental.fbs,bt=class t{constructor(t,r,e,n,d,o=qu.Guid.create()){this.dims=t,this.type=r,this.dataProvider=e,this.asyncDataProvider=n,this.cache=d,this.dataId=o,this.size=B.validateDimsAndCalcSize(t);let a=this.size,l=void 0===e&&void 0===n&&void 0===d;if(void 0!==d&&d.length!==a)throw new RangeError("Input dims doesn't match data length.");if("string"===r){if(!(void 0===d||Array.isArray(d)&&d.every((t=>"string"==typeof t))))throw new TypeError("cache should be a string array");l&&(this.cache=new Array(a))}else{if(void 0!==d){let t=ju(r);if(!(d instanceof t))throw new TypeError(`cache should be type ${t.name}`)}if(l){let t=new ArrayBuffer(a*hh(r));this.cache=mh(t,r)}}}get data(){if(void 0===this.cache){let t=this.dataProvider(this.dataId);if(t.length!==this.size)throw new Error("Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.");this.cache=t}return this.cache}get stringData(){if("string"!==this.type)throw new TypeError("data type is not string");return this.data}get integerData(){switch(this.type){case"uint8":case"int8":case"uint16":case"int16":case"int32":case"uint32":case"bool":return this.data;default:throw new TypeError("data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)")}}get floatData(){switch(this.type){case"float32":case"float64":return this.data;default:throw new TypeError("data type is not float (float32, float64)")}}get numberData(){if("string"!==this.type)return this.data;throw new TypeError("type cannot be non-number (string)")}get(t){return this.data[B.indicesToOffset(t,this.strides)]}set(t,r){this.data[B.indicesToOffset(t,this.strides)]=r}async getData(){return void 0===this.cache&&(this.cache=await this.asyncDataProvider(this.dataId)),this.cache}get strides(){return this._strides||(this._strides=B.computeStrides(this.dims)),this._strides}static fromProto(r){if(!r)throw new Error("cannot construct Value from an empty tensor");let e=At.tensorDataTypeFromProto(r.dataType),n=At.tensorDimsFromProto(r.dims),d=new t(n,e);if("string"===e)r.stringData.forEach(((t,r)=>{d.data[r]=kr(t)}));else if(r.rawData&&"number"==typeof r.rawData.byteLength&&r.rawData.byteLength>0){let t=d.data,e=new DataView(r.rawData.buffer,r.rawData.byteOffset,r.rawData.byteLength),n=Wu(r.dataType),o=r.rawData.byteLength/n;if(r.rawData.byteLength%n!=0)throw new Error("invalid buffer length");if(t.length!==o)throw new Error("buffer length mismatch");for(let d=0;d<o;d++){let o=Hu(e,r.dataType,d*n);t[d]=o}}else{let t;switch(r.dataType){case H.onnx.TensorProto.DataType.FLOAT:t=r.floatData;break;case H.onnx.TensorProto.DataType.INT32:case H.onnx.TensorProto.DataType.INT16:case H.onnx.TensorProto.DataType.UINT16:case H.onnx.TensorProto.DataType.INT8:case H.onnx.TensorProto.DataType.UINT8:case H.onnx.TensorProto.DataType.BOOL:t=r.int32Data;break;case H.onnx.TensorProto.DataType.INT64:t=r.int64Data;break;case H.onnx.TensorProto.DataType.DOUBLE:t=r.doubleData;break;case H.onnx.TensorProto.DataType.UINT32:case H.onnx.TensorProto.DataType.UINT64:t=r.uint64Data;break;default:throw new Error("unspecific error")}if(null==t)throw new Error("failed to populate data from a tensorproto value");let e=d.data;if(e.length!==t.length)throw new Error("array length mismatch");for(let n=0;n<t.length;n++){let d=t[n];xe.isLong(d)?e[n]=ui(d,r.dataType):e[n]=d}}return d}static fromData(r,e,n){return new t(e,n,void 0,void 0,r)}static fromOrtTensor(r){if(!r)throw new Error("cannot construct Value from an empty tensor");let e=At.tensorDimsFromORTFormat(r),n=At.tensorDataTypeFromProto(r.dataType()),d=new t(e,n);if("string"===n)for(let t=0;t<r.stringDataLength();t++)d.data[t]=r.stringData(t);else if(r.rawDataArray()&&"number"==typeof r.rawDataLength()&&r.rawDataLength()>0){let t=d.data,e=new DataView(r.rawDataArray().buffer,r.rawDataArray().byteOffset,r.rawDataLength()),n=Wu(r.dataType()),o=r.rawDataLength()/n;if(r.rawDataLength()%n!=0)throw new Error("invalid buffer length");if(t.length!==o)throw new Error("buffer length mismatch");for(let d=0;d<o;d++){let o=Hu(e,r.dataType(),d*n);t[d]=o}}return d}}}));function G(t){return 1===t?bh:gh}function Xu(t){let r=G(t);return`${r.version}\n      precision highp float;\n      ${r.attribute} vec3 position;\n      ${r.attribute} vec2 textureCoord;\n\n      ${r.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`}function Ku(t){let r=G(t);return`${r.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${r.varyingFrag} vec2 TexCoords;\n    ${r.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `}function Ju(t,r){return`\n  void main() {\n    int indices[${r}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${G(t).output} = result;\n  }\n  `}var bh,gh,ut=O((()=>{bh={version:"",attribute:"attribute",varyingVertex:"varying",varyingFrag:"varying",texture2D:"texture2D",output:"gl_FragColor",outputDeclaration:""},gh={version:"#version 300 es",attribute:"in",varyingVertex:"out",varyingFrag:"in",texture2D:"texture",output:"outputColor",outputDeclaration:"out vec4 outputColor;"}})),j=O((()=>{}));async function li(t,r=t=>0,e){return new Promise(((e,n)=>{let d=0,o=()=>{if(t())return void e();d++;let n=r(d);setTimeout(o,n)};o()}))}function An(t){return ur(typeof t<"u"&&0!==t.length,(()=>"empty string found for sampler name")),"get"+t.charAt(0).toUpperCase()+t.slice(1)}function Yu(t){return ur(typeof t<"u"&&0!==t.length,(()=>"empty string found for sampler name")),"get"+t.charAt(0).toUpperCase()+t.slice(1)+"AtOutCoords"}function lr(t,r){let e=JSON.parse(JSON.stringify(t));return e=r,e}function fr(t,r){return r.map((r=>t[r])).join(", ")}function Bt(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function ne(t=6){return["x","y","z","w","u","v"].slice(0,t)}var pe=O((()=>{Y()}));function yh(t,r){return ne(r).map((r=>`${t}.${r}`))}function cr(t,r){return 1===r?[t]:yh(t,r)}function de(){return"\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  "}var He=O((()=>{pe()}));function Th(t,r,e){if(0===t)return"false";if(1===t)return`rc > ${r[0]}`;let n="";for(let d=t-2;d<t;d++)n+=`${e[d]} >= ${r[d-t+2]}`,d<t-1&&(n+="||");return n}function wh(t,r){let e=t.length;if(0===e)return"getA(), 0, 0, 0";if(1===e)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;let n="";if(e>2)for(let t=0;t<e-2;++t)n+=`${r[t]},`;return`getA(${n}r, c),\n          rEdge ? 0. : getA(${n}rp1, c),\n          cEdge ? 0. : getA(${n}r, cp1),\n          rEdge || cEdge ? 0. : getA(${n}rp1, cp1)`}function vh(t,r,e,n){return 0===t||1===t?"":`\n    int r = ${r[t-2]};\n    int c = ${r[t-1]};\n    int rp1 = ${r[t-2]} + 1;\n    int cp1 = ${r[t-1]} + 1;\n    bool rEdge = rp1 >= ${n};\n    bool cEdge = cp1 >= ${e};\n    `}var Zu,xh,Qu,tl=O((()=>{ut(),j(),pe(),He(),Zu={name:"pack",inputNames:["A"],inputTypes:[1]},xh=(t,r)=>{let e,n=G(t.session.backend.glContext.version),d=r.dims,o=d.length,a=r.dims.length,l=Bt(a),i=cr("rc",a),A=vh(a,i,d[d.length-2],d[d.length-1]);e=0===o?[1,1]:1===o?[d[0],1]:[d[a-1],d[a-2]];let B=Th(a,e,i),s=wh(d,i),g=`\n        void main() {\n          ${l} rc = getOutputCoords();\n\n          if(${B}) {\n            ${n.output} = vec4(0);\n          } else {\n            ${A}\n\n            ${n.output} = vec4(${s});\n          }\n        }\n      `;return{...Zu,hasMain:!0,output:{dims:r.dims,type:r.type,textureType:2},shaderSource:g}},Qu=(t,r)=>({...Zu,get:()=>xh(t,r)})}));function fi(t){if(0===t.length)return[1,1,1];let r=1;for(let e=0;e<t.length-2;++e)r*=t[e];return[r,t.length>1?t[t.length-2]:1,t[t.length-1]]}function rl(t,r){let e=!1;return e=0===t.length||0===r.length||(t.length<2||r.length<2?t[t.length-1]===r[r.length-1]:t[t.length-1]===r[r.length-1]&&t[t.length-2]===r[r.length-2]),e}function Oh(t){let r=B.computeStrides(t),e=["b","r","c"],n="index";return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r.map(((t,d)=>`int ${e[d]} = ${n} / ${t}; ${d===r.length-1?`int ${e[d+1]} = ${n} - ${e[d]} * ${t}`:`index -= ${e[d]} * ${t}`};`)).join("")}\n      return ivec3(b, r, c);\n    }\n  `}function Sh(t){let r=B.computeStrides(t);return`\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${r[0]} + coords.z * ${r[1]} + coords.y;\n  }\n`}var Ih,_h,el,nl=O((()=>{Y(),ut(),j(),He(),Ih=t=>({name:"Reshape (packed)",inputTypes:[2],inputNames:["A"],cacheHint:`${t}`}),_h=(t,r,e,n)=>{let d=r.dims,o=n,a="";for(let t=0;t<4;t++){let r="";switch(t){case 0:r="outputCoords = rc;";break;case 1:r="outputCoords = ivec3(rc.x, rc.y+1, rc.z);";break;case 2:r="outputCoords = ivec3(rc.x, rc.y, rc.z+1);";break;case 3:r="outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);";break;default:throw new Error}a+=`\n        ${r}\n        ${t>0?"if(outputCoords.y < rows && outputCoords.z < cols){":""}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${t>0?"}":""}\n      `}let l=G(t.session.backend.glContext.version),i=`\n      ${Oh(d)}\n      ${Sh(o)}\n      ${de()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${o[2]};\n        int cols = ${o[1]};\n\n        ${a}\n        ${l.output} = result;\n      }\n    `;return{...e,output:{dims:o,type:r.type,textureType:2},shaderSource:i,hasMain:!0}},el=(t,r,e)=>{let n=Ih(e);return{...n,get:()=>_h(t,r,n,e)}}})),ci,ol=O((()=>{ut(),j(),ci=(t,r)=>{let e=r.shape,n=G(t.session.backend.glContext.version),d=`\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${n.texture2D}(X,TexCoords).r;\n      ${n.output} = encodeAsUint8(value);\n    }`,o={name:"Uint8Encode",inputTypes:[0],inputNames:["X"],output:{dims:e,type:r.tensor.type,textureType:3},shaderSource:d,hasMain:!0};return t.executeProgram(o,[r.tensor])}}));function Ph(t,r){if(1===t)return"rc";let e="";for(let n=0;n<t;n++)e+=r[n],n<t-1&&(e+=",");return e}var il,Ah,al,sl=O((()=>{ut(),j(),pe(),He(),il={name:"unpack",inputNames:["A"],inputTypes:[2]},Ah=(t,r)=>{let e=r.dims.length,n=cr("rc",e),d=n.slice(-2),o=Bt(e),a=de(),l=0===r.dims.length?"":Ph(e,n),i=e<=1?"rc":`vec2(${d.join(",")})`,A=`\n    ${a}\n    void main() {\n      ${o} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${l});\n\n       ${G(t.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${i}), 0, 0, 0);\n     }\n   `;return{...il,hasMain:!0,output:{dims:r.dims,type:r.type,textureType:0},shaderSource:A}},al=(t,r)=>({...il,get:()=>Ah(t,r)})})),Pn,Br,En,Fr=O((()=>{Ut(),Pn=class{constructor(t,r=1){if(1===r)this.internalFormat=t.R32F,this.format=t.RED,this.textureType=t.FLOAT,this.channelSize=r;else{if(4!==r)throw new Error(`Invalid number of channels: ${r}`);this.internalFormat=t.RGBA32F,this.format=t.RGBA,this.textureType=t.FLOAT,this.channelSize=r}}encode(t,r){let e,n;return t.constructor!==Float32Array&&(tt.warning("Encoder","data was not of type Float32; creating new Float32Array"),n=new Float32Array(t)),r*this.channelSize>t.length?(tt.warning("Encoder","Source data too small. Allocating larger array"),n=t,e=this.allocate(r*this.channelSize),n.forEach(((t,r)=>e[r]=t))):(n=t,e=n),e}allocate(t){return new Float32Array(4*t)}decode(t,r){return 1===this.channelSize?t.filter(((t,r)=>r%4==0)).subarray(0,r):t.subarray(0,r)}},Br=class{constructor(t,r=1,e){if(1!==r&&4!==r)throw new Error(`Invalid number of channels: ${r}`);this.internalFormat=t.RGBA,this.format=t.RGBA,this.channelSize=r,this.textureType=e||t.FLOAT}encode(t,r){let e=t;return 1===this.channelSize&&(tt.verbose("Encoder","Exploding into a larger array"),e=this.allocate(r),t.forEach(((t,r)=>e[4*r]=t))),e}allocate(t){return new Float32Array(4*t)}decode(t,r){return 1===this.channelSize?t.filter(((t,r)=>r%4==0)).subarray(0,r):t.subarray(0,r)}},En=class{constructor(t,r=1){if(this.channelSize=4,1===r)this.internalFormat=t.ALPHA,this.format=t.ALPHA,this.textureType=t.UNSIGNED_BYTE,this.channelSize=r;else{if(4!==r)throw new Error(`Invalid number of channels: ${r}`);this.internalFormat=t.RGBA,this.format=t.RGBA,this.textureType=t.UNSIGNED_BYTE,this.channelSize=r}}encode(t,r){return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}allocate(t){return new Uint8Array(t*this.channelSize)}decode(t,r){if(t instanceof Uint8Array)return t.subarray(0,r);throw new Error(`Invalid array type: ${t.constructor}`)}}})),Cr,ul,pi,ll=O((()=>{Y(),j(),Cr=(t,r,e)=>{let n=0===e||1===e?1:4,d=2===e,o=1===e||2===e,a=4===e?r.length-1:void 0,l=4===e?r.map(((t,e)=>e===r.length-1?4*t:t)):void 0;return pi(t,r,n,l,{isPacked:d,reverseWH:o,breakAxis:a})},ul=(t,r,e)=>{let n=Cr(t,r,e);return[n.width,n.height]},pi=(t,r,e=1,n,d)=>{let o=!(!d||!d.isPacked),[a,l]=t.computeTextureWH(o&&n||r,d),i=r.length,A=r.slice(0);if(0===i&&(A=[1]),1===e)n=r;else if(o){if(4!==e)throw new Error("a packed texture must be 4-channel");n=r,i>0&&(A[i-1]=Math.ceil(A[i-1]/2)),i>1&&(A[i-2]=Math.ceil(A[i-2]/2))}else if(!n)throw new Error("Unpacked shape is needed when using channels > 1");return{width:a,height:l,channels:e,isPacked:o,shape:A,strides:B.computeStrides(A),unpackedShape:n,reversedWH:d&&d.reverseWH}}})),Dh,Dn,cl=O((()=>{Ut(),We(),Y(),tl(),nl(),ol(),sl(),Fr(),ll(),j(),Dh=(t,r)=>{let e=r.map((t=>`${t.unpackedShape.join(",")};${t.width}x${t.height}`)).join("_"),n=t.name;return t.cacheHint&&(n+="["+t.cacheHint+"]"),n+=":"+e,n},Dn=class{constructor(t){this.session=t,this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map}calculateTextureWidthAndHeight(t,r){return ul(this.session.layoutStrategy,t,r)}executeProgram(t,r){if(r.length<t.inputNames.length)throw new Error(`Input size mustn't be less than ${t.inputNames.length}.`);if(t.inputNames.length!==t.inputTypes.length)throw new Error("input names size does not match input types");let e=[];for(let n=0;n<t.inputNames.length;++n)e[n]=this.getOrCreateTextureData(r[n],t.inputTypes[n]);let n=Dh(t,e),d=this.session.programManager.getArtifact(n),o=d?d.programInfo:"function"==typeof t.get?t.get():t,a=Cr(this.session.layoutStrategy,o.output.dims,o.output.textureType),l=this.createTextureData(a,o.output.type);return d||(d=this.session.programManager.build(o,e,l),this.session.programManager.setArtifact(n,d)),this.runProgram(d,e,l),l}run(t,r){return this.executeProgram(t,r).tensor}runProgram(t,r,e){for(let e=0;e<r.length;++e)if(!!r[e].isPacked!=(2===t.programInfo.inputTypes[e]))throw new Error(`input[${e}] property packed inconsistent`);if(!!e.isPacked!=(2===t.programInfo.output.textureType))throw new Error("output property packed inconsistent");this.session.programManager.run(t,r,e)}getOrCreateTextureData(t,r){let e=this.getTextureData(t.dataId,2===r);if(!e&&(e=this.getTextureData(t.dataId,2!==r),e))return 2===r?this.pack(e):this.unpack(e);if(!e){let n=Cr(this.session.layoutStrategy,t.dims,r);if(4===r){let e=t.dims;if(4===e.length){let n=[e[0],Math.ceil(e[1]*e[2]*e[3]/4)],d=Cr(this.session.layoutStrategy,n,r),o=t.numberData;if(e[1]*e[2]*e[3]%4!=0){let r=e[0],n=e[1]*e[2]*e[3],d=4*Math.ceil(1*n/4);o=new Float32Array(r*d);for(let e=0;e<r;++e){let r=e*n,a=e*d+e%1*n;o.set(t.numberData.subarray(r,r+n),a)}}return this.createTextureData(d,t.type,o,t,1)}}if(2===r){let r=pi(this.session.layoutStrategy,t.dims,1,[],{reverseWH:!0}),n=this.createTextureData(r,t.type,t.numberData,t,1);e=this.pack(n)}else e=this.createTextureData(n,t.type,t.numberData,t,1)}return e}createTextureDataFromLayoutBindTensor(t,r,e,n){return this.createTextureData(t,r,e,n,1)}createTextureData(t,r,e,n,d){tt.verbose("InferenceHandler",`Creating TextureData: layout:[${JSON.stringify(t)}]`);let o=this.session.textureManager.createTextureFromLayout(r,t,e,d);return this.createTextureDataFromTexture(t,r,o,n)}reshapeUnpacked(t,r){let e=this.getOrCreateTextureData(t,0),n={channels:e.channels,height:e.height,width:e.width,shape:0!==r.length?r:[1],strides:B.computeStrides(r),unpackedShape:r};return this.createTextureDataFromTexture(n,t.type,e.texture).tensor}reshapePacked(t,r){let e=this.getOrCreateTextureData(t,2);if(rl(t.dims,r)){let n={channels:e.channels,height:e.height,width:e.width,shape:0!==r.length?r:[1],strides:B.computeStrides(r),unpackedShape:r,isPacked:!0};return this.createTextureDataFromTexture(n,t.type,e.texture).tensor}let n=fi(t.dims),d=fi(r),o=this.reshapePacked(t,n),a=this.run(el(this,o,d),[o]);return this.reshapePacked(a,r)}cast(t,r){let e=this.getOrCreateTextureData(t,0);return this.createTextureDataFromTexture(e,r,e.texture).tensor}createTextureDataFromTexture(t,r,e,n,d){let o={...t,tensor:n||new bt(t.unpackedShape,r,(t=>this.readTexture(o)),(async t=>this.readTextureAsync(o)),void 0,d),texture:e};return this.setTextureData(o.tensor.dataId,o,t.isPacked),o}getTextureData(t,r=!1){return this.session.isInitializer(t)?this.session.getTextureData(t,r):r?this.packedTextureDataCache.get(t):this.unpackedTextureDataCache.get(t)}setTextureData(t,r,e=!1){this.session.isInitializer(t)?this.session.setTextureData(t,r,e):(e?this.packedTextureDataCache:this.unpackedTextureDataCache).set(t,r)}isTextureLayoutCached(t,r=!1){return!!this.getTextureData(t.dataId,r)}dispose(){this.session.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach((t=>this.session.textureManager.releaseTexture(t))),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach((t=>this.session.textureManager.releaseTexture(t))),this.unpackedTextureDataCache=new Map}readTexture(t){return t.isPacked?this.readTexture(this.unpack(t)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTexture(t,t.tensor.type,t.channels):this.session.textureManager.readUint8TextureAsFloat(ci(this,t))}async readTextureAsync(t){return t.isPacked?this.readTextureAsync(this.unpack(t)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTextureAsync(t,t.tensor.type,t.channels):this.session.textureManager.readUint8TextureAsFloat(ci(this,t))}pack(t){return this.executeProgram(Qu(this,t.tensor),[t.tensor])}unpack(t){return this.executeProgram(al(this,t.tensor),[t.tensor])}}})),di,W,It=O((()=>{di=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map((t=>`${this[t]}`)).join(";")),this.key}},W=t=>new di(t)})),pl,dl,hl,Lh,$h,ml=O((()=>{It(),ut(),j(),pl={name:"BatchNormalization",inputNames:["A","Scale","B","Mean","Variance"],inputTypes:[0,0,0,0,0]},dl=(t,r,e)=>($h(r),[t.run({...pl,cacheHint:e.cacheKey,get:()=>Lh(t,r,e)},r)]),hl=t=>{let r=t.attributes.getFloat("epsilon",1e-5),e=t.attributes.getFloat("momentum",.9),n=t.attributes.getInt("spatial",1);return W({epsilon:r,momentum:e,spatial:n})},Lh=(t,r,e)=>{let n=G(t.session.backend.glContext.version),d=r[0].dims.length,[o,a]=t.calculateTextureWidthAndHeight(r[1].dims,0),l=`\n  float process(int[${d}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${o}, ${a});\n    float scale = getColorAsFloat(${n.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${n.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${n.texture2D}(Variance, position));\n    float b = getColorAsFloat(${n.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${e.epsilon})) ) + b;\n  }`;return{...pl,output:{dims:r[0].dims,type:r[0].type,textureType:0},shaderSource:l}},$h=t=>{if(!t||5!==t.length)throw new Error("BatchNormalization requires 5 inputs.");let r=t[0],e=t[1],n=t[2],d=t[3],o=t[4];if(r.dims.length<3||1!==e.dims.length||1!==n.dims.length||1!==d.dims.length||1!==o.dims.length)throw new Error("invalid input shape.");if(e.dims[0]!==r.dims[1]||n.dims[0]!==r.dims[1]||d.dims[0]!==r.dims[1]||o.dims[0]!==r.dims[1])throw new Error("invalid input shape.");if("float32"!==r.type&&"float64"!==r.type||"float32"!==e.type&&"float64"!==e.type||"float32"!==n.type&&"float64"!==n.type||"float32"!==d.type&&"float64"!==d.type||"float32"!==o.type&&"float64"!==o.type)throw new Error("invalid input tensor types.")}})),Ln,Ht,k,Nr,$n,Te=O((()=>{Ln=class{constructor(t,r,e,n){this.glContext=t,this.programInfo=r,this.inputTextureLayouts=e,this.outputTextureLayout=n}},Ht=class{constructor(t){this.context=t}},k=class{constructor(t,r){this.routineBody=t,this.dependencies=r}},Nr=class{constructor(t,r,e){this.name=t,this.dependencies=e||[],r&&(this.routineBody=r)}addDependency(t){t&&this.dependencies.push(t)}},$n=class{static returnOrderedNodes(t){if(!t||0===t.length)return[];if(1===t.length)return t;let r=new Set,e=new Set,n=new Array;return this.createOrderedNodes(t,r,e,n),n}static createOrderedNodes(t,r,e,n){for(let d=0;d<t.length;++d)this.dfsTraverse(t[d],r,e,n)}static dfsTraverse(t,r,e,n){if(!t||e.has(t.name))return;if(r.has(t.name))throw new Error("Cyclic dependency detected. Can't topologically sort routines needed for shader.");r.add(t.name);let d=t.dependencies;if(d&&d.length>0)for(let t=0;t<d.length;++t)this.dfsTraverse(d[t],r,e,n);n.push(t),e.add(t.name),r.delete(t.name)}}}));function Bh(){let t="add_";return{body:`\n  float ${t}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `,name:t,type:0}}function Fh(){let t="div_";return{body:`\n  float ${t}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `,name:t,type:0}}function Ch(){let t="mul_";return{body:`\n  float ${t}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `,name:t,type:0}}function Nh(){let t="sub_";return{body:`\n  float ${t}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `,name:t,type:0}}function Rh(){let t="equal_";return{body:`\n  float ${t}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `,name:t,type:0}}function Gh(){let t="greater_";return{body:`\n  float ${t}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `,name:t,type:0}}function Mh(){let t="less_";return{body:`\n  float ${t}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `,name:t,type:0}}function Uh(){let t="and_";return{body:`\n  float ${t}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `,name:t,type:0}}function Vh(){let t="or_";return{body:`\n  float ${t}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `,name:t,type:0}}function zh(){let t="xor_";return{body:`\n  float ${t}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `,name:t,type:0}}function Wh(){return qh("pow")}function Hh(){let t="prelu_";return{body:`\n  float ${t}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `,name:t,type:0}}function qh(t){let r=`${t}_`;return{body:`\n  float ${r}(float a, float b) {\n    return ${t}(a, b);\n  }\n  vec4 ${r}(vec4 v1, vec4 v2) {\n    return ${t}(v1, v2);\n  }\n  `,name:r,type:0}}var qt,jh,bl,gl,yl,xl,Tl,wl,vl,Il,_l,Ol,Sl,Al,Pl=O((()=>{Y(),Te(),ut(),j(),qt=(t,r,e,n=r[0].type,d)=>{let o=t.session.pack?2:0;return{name:e.name,inputNames:["A","B"],inputTypes:[o,o],cacheHint:d,get:()=>jh(t,r,e,n)}},jh=(t,r,e,n=r[0].type)=>{let d=t.session.pack?2:0,o=!B.areEqual(r[0].dims,r[1].dims),a=r[0].dims,l=t.session.pack;if(o){let o=kt.calcShape(r[0].dims,r[1].dims,!1);if(!o)throw new Error("Can't perform binary op on the given tensors");a=o;let i=a.length,A=0!==r[0].dims.length?r[0].dims.length:1,B=0!==r[1].dims.length?r[1].dims.length:1,s=0!==r[0].dims.length?"bcastIndices_A(indices, aindices);":"aindices[0] = 0;",g=0!==r[1].dims.length?"bcastIndices_B(indices, bindices);":"bindices[0] = 0;",p=G(t.session.backend.glContext.version),C=l?`\n      ${e.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${e.name}(a, b);\n        ${p.output} = result;\n      }`:`\n      ${e.body}\n      float process(int indices[${i}]) {\n        int aindices[${A}];\n        int bindices[${B}];\n        ${s}\n        ${g}\n        return ${e.name}(_A(aindices), _B(bindices));\n      }`;return{name:e.name,inputNames:["A","B"],inputTypes:[d,d],output:{dims:a,type:n,textureType:d},shaderSource:C,hasMain:l}}let i=G(t.session.backend.glContext.version),A=`\n    ${e.body}\n    void main() {\n      vec4 v1 = ${i.texture2D}(A, TexCoords);\n      vec4 v2 = ${i.texture2D}(B, TexCoords);\n      vec4 result = ${e.name}(v1, v2);\n      ${i.output} = result;\n    }\n    `;return{name:e.name,inputNames:["A","B"],inputTypes:[d,d],output:{dims:r[0].dims,type:n,textureType:d},shaderSource:A,hasMain:!0}},bl=(t,r)=>[t.run(qt(t,r,Bh()),r)],gl=(t,r)=>[t.run(qt(t,r,Uh(),"bool"),r)],yl=(t,r)=>[t.run(qt(t,r,Fh()),r)],xl=(t,r)=>[t.run(qt(t,r,Rh(),"bool"),r)],Tl=(t,r)=>[t.run(qt(t,r,Gh(),"bool"),r)],wl=(t,r)=>[t.run(qt(t,r,Mh(),"bool"),r)],vl=(t,r)=>[t.run(qt(t,r,Ch()),r)],Il=(t,r)=>[t.run(qt(t,r,Vh(),"bool"),r)],_l=(t,r)=>[t.run(qt(t,r,Wh()),r)],Ol=(t,r)=>[t.run(qt(t,r,Hh()),r)],Sl=(t,r)=>[t.run(qt(t,r,Nh()),r)],Al=(t,r)=>[t.run(qt(t,r,zh(),"bool"),r)]})),El,Dl,Kh,Ll=O((()=>{Y(),El=(t,r,e)=>(Kh(r),[t.cast(r[0],e)]),Dl=t=>At.tensorDataTypeFromProto(t.attributes.getInt("to")),Kh=t=>{if(!t||1!==t.length)throw new Error("Cast requires 1 input.");if("string"===t[0].type)throw new Error("Invalid input type.")}})),Jh,Yh,$l,kn,kl=O((()=>{ut(),j(),pe(),He(),Jh=(t,r)=>({name:"Concat (packed)",inputNames:Array.from({length:t},((t,r)=>`X${r}`)),inputTypes:Array(t).fill(2),cacheHint:r}),Yh=(t,r,e,n)=>{let d=e[0].dims.slice();if(n>=d.length||n<-1*d.length)throw new Error("axis specified for concat doesn't match input dimensionality");n<0&&(n=d.length+n);let o=d.slice(0);for(let t=1;t<e.length;t++){let r=e[t].dims.slice();for(let t=0;t<d.length;t++)if(t===n)o[n]+=r[t];else if(d[t]!==r[t])throw new Error("non concat dimensions must match")}let a=o.length,l=cr("coords",a),i=Bt(a),A=de(),B=e.map((t=>t.dims)),s=ne(a),g=new Array(B.length-1);g[0]=B[0][n];for(let t=1;t<g.length;t++)g[t]=g[t-1]+B[t][n];let p=s[n],C=s.slice(-2),u=s.join(),K=`if (${p} < ${g[0]}) {\n        return getChannel(\n            getX0(${u}), vec2(${C.join()}));\n        }`;for(let t=1;t<g.length;t++){let r=g[t-1];K+=`\n            if (${p} < ${g[t]}  && ${p} >= ${g[t-1]}) {\n              return getChannel(\n                getX${t}(${kn(s,p,r)}),\n                vec2(${kn(C,p,r)}));\n            }`}let c=g.length,Q=g[g.length-1];K+=`\n            return getChannel(\n              getX${c}(${kn(s,p,Q)}),\n              vec2(${kn(C,p,Q)}));`;let W=G(t.session.backend.glContext.version),w=`\n          ${A}\n          float getValue(${s.map((t=>"int "+t))}) {\n            ${K}\n          }\n\n          void main() {\n            ${i} coords = getOutputCoords();\n            int lastDim = coords.${s[a-1]};\n            coords.${s[a-1]} = coords.${s[a-2]};\n            coords.${s[a-2]} = lastDim;\n\n            vec4 result = vec4(getValue(${l}), 0., 0., 0.);\n\n            ${l[a-1]} = ${l[a-1]} + 1;\n            if (${l[a-1]} < ${o[a-1]}) {\n              result.g = getValue(${l});\n            }\n\n            ${l[a-2]} = ${l[a-2]} + 1;\n            if (${l[a-2]} < ${o[a-2]}) {\n              result.a = getValue(${l});\n            }\n\n            ${l[a-1]} = ${l[a-1]} - 1;\n            if (${l[a-2]} < ${o[a-2]} &&\n                ${l[a-1]} < ${o[a-1]}) {\n              result.b = getValue(${l});\n            }\n            ${W.output} = result;\n          }\n        `;return{...r,output:{dims:o,type:e[0].type,textureType:2},shaderSource:w,hasMain:!0}},$l=(t,r,e)=>{let n=Jh(r.length,e.cacheKey);return{...n,get:()=>Yh(t,n,r,e.axis)}},kn=(t,r,e)=>{let n=t.indexOf(r);return t.map(((t,r)=>r===n?`${t} - ${e}`:t)).join()}})),Bl,Zh,Qh,tm,Fl,em,rm,nm,Cl,om,Nl=O((()=>{It(),j(),kl(),Bl=(t,r,e)=>(om(r),t.session.pack&&r[0].dims.length>1?[t.run($l(t,r,e),r)]:[t.run(tm(t,r,e),r)]),Zh=(t,r)=>({name:"Concat",inputNames:Array.from({length:t},((t,r)=>`X${r}`)),inputTypes:Array(t).fill(0),cacheHint:r}),Qh=(t,r,e,n)=>{let d=e[0].dims.slice();if(n>=d.length||n<-1*d.length)throw new Error("axis specified for concat doesn't match input dimensionality");n<0&&(n=d.length+n);let o=d.slice(0);for(let t=1;t<e.length;t++){let r=e[t].dims.slice();for(let t=0;t<d.length;t++)if(t===n)o[n]+=r[t];else if(d[t]!==r[t])throw new Error("non concat dimensions must match")}let a=o.length,l=new Array(e.length),i=0;for(let t=0;t<l.length;++t)i+=e[t].dims[n],l[t]=i;let A="";A=e.length<5?Fl(l):em(l);let B=`\n        ${rm(e.length,a)}\n        ${nm(l)}\n        ${A}\n        float process(int indices[${a}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${n}]);\n\n          if(textureIndex != 0) {\n            indices[${n}] = indices[${n}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;return{...r,output:{dims:o,type:e[0].type,textureType:0},shaderSource:B}},tm=(t,r,e)=>{let n=Zh(r.length,e.cacheKey);return{...n,get:()=>Qh(t,n,r,e.axis)}},Fl=t=>`int getTextureWhereDataResides(int index) {\n      ${t.map(((t,r)=>`if(index<${t}) {return ${r};}\n`)).join("")}\n    }`,em=t=>Fl(t),rm=(t,r)=>{let e=[`float fetchDataFromCorrectTexture(int textureIndex, int indices[${r}]) {`];for(let r=0;r<t;++r)0===r?e.push(`\tif (textureIndex == ${r}) { return _X${r}(indices); }`):r===t-1?e.push(`\telse { return _X${r}(indices); }`):e.push(`\telse if (textureIndex == ${r}) { return _X${r}(indices); }`);return e.push("\t}"),e.join("\n")},nm=t=>{let r=["int getSizeInConcatAxisValueFromIndex(int index) {"];for(let e=0;e<t.length;++e)0===e?r.push(`\tif (index == ${e}) { return ${t[e]}; }`):e===t.length-1?r.push(`\telse { return ${t[e]}; }`):r.push(`\telse if (index == ${e}) { return ${t[e]}; }`);return r.push("\t}"),r.join("\n")},Cl=t=>W({axis:t.attributes.getInt("axis")}),om=t=>{if(!t||t.length<1)throw new Error("too few inputs");let r=t[0].type,e=t[0].dims.length;if("string"===r)throw new Error("string tensor is not supported yet");for(let n of t){if(n.type!==r)throw new Error("input tensors should be one type");if(n.dims.length!==e)throw new Error("input tensors should have the same shape")}}}));function im(){return jt("abs")}function am(){return jt("acos")}function sm(){return jt("asin")}function um(){return jt("atan")}function lm(){return jt("ceil")}function fm(){return jt("cos")}function cm(t){let r="elu";return{body:`\n  const float alpha = float(${t});\n\n  float ${r}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${r}_(vec4 v) {\n    return vec4(${r}_(v.x), ${r}_(v.y), ${r}_(v.z), ${r}_(v.w));\n  }\n  `,name:r,type:0}}function pm(){return jt("exp")}function dm(){return jt("floor")}function hi(t,r){let e="clip";return{body:`\n  const float min = float(${t});\n  const float max = float(${r});\n\n  float ${e}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${e}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `,name:e,type:0}}function hm(){let t="indentity";return{body:`\n  float ${t}_(float a) {\n    return a;\n  }\n  vec4 ${t}_(vec4 v) {\n    return v;\n  }\n  `,name:t,type:0}}function mm(t){let r="leakyRelu";return{body:`\n  const float alpha = float(${t});\n\n  float ${r}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${r}_(vec4 v) {\n    return vec4(${r}_(v.x), ${r}_(v.y), ${r}_(v.z), ${r}_(v.w));\n  }\n  `,name:r,type:0}}function bm(){return jt("log")}function gm(){let t="neg";return{body:`\n  float ${t}_(float a) {\n    return -a;\n  }\n  vec4 ${t}_(vec4 v) {\n    return -v;\n  }\n  `,name:t,type:0}}function ym(){let t="not";return{body:`\n  float ${t}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${t}_(bool a) {\n    return !a;\n  }\n  vec4 ${t}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${t}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `,name:t,type:0}}function xm(){return jt("sin")}function mi(){let t="relu";return{body:`\n  float ${t}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${t}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `,name:t,type:0}}function bi(){let t="sigmoid";return{body:`\n  float ${t}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${t}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `,name:t,type:0}}function Tm(){return jt("sqrt")}function wm(){return jt("tan")}function vm(){let t="tanh";return{body:`\n  float ${t}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${t}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `,name:t,type:0}}function jt(t){return{body:`\n  float ${t}_(float a) {\n    return ${t}(a);\n  }\n  vec4 ${t}_(vec4 v) {\n    return ${t}(v);\n  }\n  `,name:t,type:0}}var Im,dt,Rl,Gl,Ml,Ul,gi,Vl,zl,_m,Wl,Hl,ql,jl,Xl,Kl,yi,Jl,Yl,Zl,Ql,tf,ef,rf,nf,of,af,sf,xi=O((()=>{It(),Y(),Te(),ut(),j(),Im=(t,r,e,n)=>{let d=t.session.pack?2:0,o=G(t.session.backend.glContext.version);return{...r,output:{dims:e.dims,type:e.type,textureType:d},shaderSource:`\n     ${n.body}\n     void main() {\n       vec4 v = ${o.texture2D}(A, TexCoords);\n       v = ${n.name}_(v);\n       ${o.output} = v;\n     }\n     `,hasMain:!0}},dt=(t,r,e,n)=>{let d=t.session.pack?2:0,o={name:e.name,inputTypes:[d],inputNames:["A"],cacheHint:n};return{...o,get:()=>Im(t,o,r,e)}},Rl=(t,r)=>[t.run(dt(t,r[0],im()),r)],Gl=(t,r)=>[t.run(dt(t,r[0],am()),r)],Ml=(t,r)=>[t.run(dt(t,r[0],sm()),r)],Ul=(t,r)=>[t.run(dt(t,r[0],um()),r)],gi=(t,r,e)=>[t.run(dt(t,r[0],hi(e.min,e.max),e.cacheKey),r)],Vl=t=>W({min:t.attributes.getFloat("min",Ve),max:t.attributes.getFloat("max",ze)}),zl=(t,r)=>{let e=_m(t,r);return gi(t,[r[0]],e)},_m=(t,r)=>{if(r.length>=3&&(!t.session.isInitializer(r[1].dataId)||!t.session.isInitializer(r[2].dataId)))throw new Error("dynamic clip attributes are not allowed");let e=r.length>=3?r[1].numberData[0]:Ve,n=r.length>=3?r[2].numberData[0]:ze;return W({min:e,max:n})},Wl=(t,r)=>[t.run(dt(t,r[0],lm()),r)],Hl=(t,r)=>[t.run(dt(t,r[0],fm()),r)],ql=(t,r,e)=>[t.run(dt(t,r[0],cm(e.alpha),e.cacheKey),r)],jl=t=>W({alpha:t.attributes.getFloat("alpha",1)}),Xl=(t,r)=>[t.run(dt(t,r[0],pm()),r)],Kl=(t,r)=>[t.run(dt(t,r[0],dm()),r)],yi=(t,r)=>[t.run(dt(t,r[0],hm()),r)],Jl=(t,r,e)=>[t.run(dt(t,r[0],mm(e.alpha),e.cacheKey),r)],Yl=t=>W({alpha:t.attributes.getFloat("alpha",.01)}),Zl=(t,r)=>[t.run(dt(t,r[0],bm()),r)],Ql=(t,r)=>[t.run(dt(t,r[0],gm()),r)],tf=(t,r)=>[t.run(dt(t,r[0],ym()),r)],ef=(t,r)=>[t.run(dt(t,r[0],mi()),r)],rf=(t,r)=>[t.run(dt(t,r[0],bi()),r)],nf=(t,r)=>[t.run(dt(t,r[0],xm()),r)],of=(t,r)=>[t.run(dt(t,r[0],Tm()),r)],af=(t,r)=>[t.run(dt(t,r[0],wm()),r)],sf=(t,r)=>[t.run(dt(t,r[0],vm()),r)]}));function he(t){let r;switch(t.activation){case"Relu":r=mi();break;case"Sigmoid":r=bi();break;case"Clip":r=hi(t.clipMin,t.clipMax);break;default:return{activationFunction:"",applyActivation:""}}let e=r.name;return{activationFunction:r.body,applyActivation:`value = ${e}_(value);`}}var pr,qe=O((()=>{Y(),xi(),pr=t=>{let r=t.getString("activation","");if("Clip"===r){let[e,n]=t.getFloats("activation_params",[Ve,ze]);return{activation:r,clipMax:n,clipMin:e,activationCacheKey:`${r}:${e},${n}`}}return{activation:r,activationCacheKey:r}}})),Sm,Am,uf,lf=O((()=>{Ut(),ut(),j(),Bn(),qe(),Sm=(t,r)=>({name:"GroupedConv",inputNames:t?["X","W","Bias"]:["X","W"],inputTypes:t?[0,0,0]:[0,0],cacheHint:r}),Am=(t,r,e,n)=>{let d=r.length>2?"value += getBias(output_channel);":"",o=r[0].dims.slice(),a=r[1].dims.slice(),l=a[0]/n.group;tt.verbose("GroupedConv",`autpPad:${n.autoPad}, dilations:${n.dilations}, group:${n.group}, kernelShape:${n.kernelShape}, pads:${n.pads}, strides:${n.strides}`);let i=dr(o,a,n.dilations,n.pads,n.strides),A=G(t.session.backend.glContext.version),{activationFunction:B,applyActivation:s}=he(n),g=`\n  const ivec2 strides = ivec2(${n.strides[0]}, ${n.strides[1]});\n  const ivec2 pads = ivec2(${n.pads[0]}, ${n.pads[1]});\n  ${B}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${l};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${a[1]}; wInChannel++) {\n      int input_channel = group_id * ${a[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${a[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${n.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${o[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${a[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${n.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${o[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${d}\n    ${s}\n    ${A.output} = vec4(value, .0, .0, .0);\n  }\n`;return{...e,output:{dims:i,type:r[0].type,textureType:0},shaderSource:g,hasMain:!0}},uf=(t,r,e)=>{let n=Sm(r.length>2,e.cacheKey);return{...n,get:()=>Am(t,r,n,e)}}})),Pm,Em,ff,cf=O((()=>{ut(),j(),He(),Pm=t=>({name:"Im2Col (packed)",inputNames:["A"],inputTypes:[2],cacheHint:t}),Em=(t,r,e,n,d,o)=>{let a=e.dims,l=n.dims,i=d.length,A=[l[1]*l[2]*l[3],d[2]*d[3]],B=l[2]*l[3],s=de(),g=G(t.session.backend.glContext.version),p="";for(let t=0;t<=1;t++)for(let r=0;r<=1;r++)p+=`\n            blockIndex = rc.x + ${r};\n            pos = rc.y + ${t};\n\n            if(blockIndex < ${A[1]} && pos < ${A[0]}) {\n              offsetY = int(blockIndex / (${d[i-1]})) * ${o.strides[0]} -\n                ${o.pads[0]};\n              d0 = offsetY + ${o.dilations[0]} * (imod(pos, ${B}) / ${l[2]});\n\n              if(d0 < ${a[2]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${d[i-1]}) * ${o.strides[1]} -\n                  ${o.pads[1]};\n                d1 = offsetX + ${o.dilations[1]} * imod(imod(pos, ${B}), ${l[2]});\n\n                if(d1 < ${a[3]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${B}.);\n                    innerDims = vec2(d0, d1);\n                    result[${2*t+r}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;let C=`\n      ${s}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${p}\n          ${g.output} = result;\n      }\n            `;return{...r,output:{dims:A,type:e.type,textureType:2},shaderSource:C,hasMain:!0}},ff=(t,r,e,n,d)=>{let o=Pm(d.cacheKey);return{...o,get:()=>Em(t,o,r,e,n,d)}}}));function Lm(t,r,e){let n=r[0].dims,d=r[1].dims,o=kt.calcShape(n,d,!0);if(!o)throw new Error("Can't use matmul on the given tensors");let a=Bt(o.length),l=ne(),{activationFunction:i,applyActivation:A}=he(e),B=r.length>2,s=B?"value += getBiasForMatmul();":"",g=B?`${wi(a,l,r[2].dims,o,!1)}`:"",p=o.length,C=n.length,u=d.length,K=`\n    ${i}\n    ${g}\n    float process(int indices[${p}]) {\n        int a[${C}];\n        int b[${u}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${n[n.length-1]}; ++k) {\n            a[${C-1}] = k;\n            b[${u-2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${s}\n        ${A}\n        return value;\n    }`;return{...t,output:{dims:o,type:r[0].type,textureType:0},shaderSource:K}}function Ti(t,r){let e=Dm(t.length>2,r.activationCacheKey);return{...e,get:()=>Lm(e,t,r)}}function wi(t,r,e,n,d){let o="",a=e.length,l=n.length,i=l-a;o=l<2&&a>0?"coords":e.map(((t,e)=>`coords.${r[e+i]}`)).join(", ");let A=kt.getBroadcastDims(e,n).map((t=>`coords.${r[t+i]} = 0;`)).join("\n"),s="vec4(outputValue.xx, outputValue.yy)";return 1===B.size(e)&&(s="vec4(outputValue.x)"),d?`\nvec4 getBiasForMatmul() {\n  ${t} coords = getOutputCoords();\n  ${A}\n  vec4 outputValue = getBias(${o});\n  return ${s};\n}`:`\nfloat getBiasForMatmul() {\n  ${t} coords = getOutputCoords();\n  ${A}\n  return getBias(coords.x);\n}`}var pf,df,Dm,$m,Fn=O((()=>{Y(),j(),pe(),qe(),vi(),pf=(t,r,e)=>($m(r),t.session.pack?[t.run(Cn(t,r,e),r)]:[t.run(Ti(r,e),r)]),df=t=>pr(t.attributes),Dm=(t,r)=>({name:"MatMul",inputNames:t?["A","B","Bias"]:["A","B"],inputTypes:t?[0,0,0]:[0,0],cacheHint:r}),$m=t=>{if(!t||2!==t.length)throw new Error("MatMul requires 2 inputs.");if(t[0].dims[t[0].dims.length-1]!==t[1].dims[t[1].dims.length-2])throw new Error("shared dimension does not match.");if("float32"!==t[0].type&&"float64"!==t[0].type||"float32"!==t[1].type&&"float64"!==t[1].type)throw new Error("inputs should be float type");if(t[0].type!==t[1].type)throw new Error("inputs types should match")}}));function Fm(t,r,e,n){let d=[],o=[],a=e[0].dims,l=e[1].dims,i=a.length,A=l.length,B=n.length,s=B-i,g=B-A;d=a.map(((t,e)=>`coords.${r[e+s]}`)),d[i-1]="i*2",d.join(", "),o=l.map(((t,e)=>`coords.${r[e+g]}`)),o[A-2]="i*2",o.join(", ");let p=kt.getBroadcastDims(a,n),C=kt.getBroadcastDims(l,n),u=p.map((t=>`coords.${r[t+s]} = 0;`)).join("\n"),K=C.map((t=>`coords.${r[t+g]} = 0;`)).join("\n"),c=`int lastDim = coords.${r[B-1]};\n  coords.${r[B-1]} = coords.${r[B-2]};\n  coords.${r[B-2]} = lastDim;`;return`\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${t} coords = getOutputCoords();\n  ${c}\n  ${u}\n  vec4 outputValue = getA(${d});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${t} coords = getOutputCoords();\n  ${c}\n  ${K}\n  vec4 outputValue = getB(${o});\n  return outputValue;\n}`}function Cm(t,r){let e="";for(let n=0;n<r-2;n++)e+=`rc.${t[n]}, `;return e+=`rc.${t[r-2]}, i*2`,e}function Nm(t,r){let e="";for(let n=0;n<r-2;n++)e+=`rc.${t[n]}, `;return e+=`i*2, rc.${t[r-1]}`,e}var km,Bm,Cn,vi=O((()=>{Y(),ut(),j(),pe(),qe(),Fn(),km=(t,r)=>({name:"MatMul (packed)",inputNames:t?["A","B","Bias"]:["A","B"],inputTypes:t?[2,2,2]:[2,2],cacheHint:r}),Bm=(t,r,e,n)=>{let d=e.length>2,o=d?"value += getBiasForMatmul();":"",a=e[0].dims,l=e[1].dims,i=kt.calcShape(a,l,!0),A=!B.areEqual(e[0].dims,e[1].dims);if(!i)throw new Error("Can't use matmul on the given tensors");let s=a[a.length-1],g=Math.ceil(s/2),p=a.length,C=l.length,u=G(t.session.backend.glContext.version),K=Bt(i.length),c=i.length,Q=ne(),{activationFunction:W,applyActivation:w}=he(n),b=d?`${wi(K,Q,e[2].dims,i,!0)}`:"",F=A?`${Fm(K,Q,e,i)}`:"",h=A?"getAAtOutCoordsMatmul(i)":`getA(${Cm(Q,p)})`,m=A?"getBAtOutCoordsMatmul(i)":`getB(${Nm(Q,C)})`,R=`\n            ${F}\n            ${b}\n            ${W}\n            void main() {\n              ${A?"":`${K} rc =\n          getOutputCoords(); int lastDim = rc.${Q[c-1]}; rc.${Q[c-1]} =\n          rc.${Q[c-2]}; rc.${Q[c-2]} = lastDim;\n      `}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${g}; i++) {\n                vec4 a = ${h};\n                vec4 b = ${m};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${o}\n              ${w}\n              ${u.output} = value;\n            }`;return{...r,output:{dims:i,type:e[0].type,textureType:2},shaderSource:R,hasMain:!0}},Cn=(t,r,e)=>{let n=km(r.length>2,e.activationCacheKey);return{...n,get:()=>Bm(t,n,r,e)}}})),hf,mf=O((()=>{Bn(),cf(),vi(),hf=(t,r,e)=>{let n=r[0].dims,d=r[1].dims,o=dr(n,d,e.dilations,e.pads,e.strides),a=t.run(ff(t,r[0],r[1],o,e),[r[0]]),l=t.reshapePacked(r[1],[d[0],d[1]*d[2]*d[3]]),i=3===r.length?[l,a,r[2]]:[l,a],A=t.run(Cn(t,i,e),i);return t.reshapePacked(A,o)}})),Rm,Gm,bf,Ii,_i=O((()=>{j(),Rm=t=>({name:"Im2Col",inputNames:["X"],inputTypes:[0],cacheHint:t}),Gm=(t,r,e,n,d,o)=>{let a=e.dims,l=n.dims,i=d.length,A=Ii(a,l,d,4),B=`\n        const int XC = ${a[1]};\n        const int XH = ${a[2]};\n        const int XW = ${a[3]};\n        const int KH = ${o.kernelShape[0]};\n        const int KW = ${o.kernelShape[1]};\n        const int dilationH = ${o.dilations[0]};\n        const int dilationW = ${o.dilations[1]};\n        const int strideH = ${o.strides[0]};\n        const int strideW = ${o.strides[1]};\n        const int padH = ${o.pads[0]};\n        const int padW = ${o.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${i}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${a.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;return{...r,output:{dims:A,type:e.type,textureType:4},shaderSource:B}},bf=(t,r,e,n,d)=>{let o=Rm(d.cacheKey);return{...o,get:()=>Gm(t,o,r,e,n,d)}},Ii=(t,r,e,n=4)=>[e[0],e[2],e[3],Math.ceil(t[1]*r[2]*r[3]/n)]})),Mm,Um,gf,yf=O((()=>{Y(),ut(),j(),qe(),_i(),Mm=(t,r)=>({name:"ConvDotProduct",inputNames:t?["Im2Col","K","B"]:["Im2Col","K"],inputTypes:t?[0,4,0]:[0,4],cacheKey:r.activationCacheKey}),Um=(t,r,e,n,d)=>{let o=e[0].dims,a=e[1].dims,l=[a[0],Math.ceil(o[1]*a[2]*a[3]/4)],i=Ii(o,a,n),[A,s]=t.calculateTextureWidthAndHeight(l,4),g=B.computeStrides(i),[p,C]=t.calculateTextureWidthAndHeight(i,4),u=n.length,K=e.length<3?"0.0":"_B(b)",c=Math.ceil(o[1]*a[2]*a[3]/4),{activationFunction:Q,applyActivation:W}=he(d),w=G(t.session.backend.glContext.version),b=`\n${Q}\nfloat process(int indices[${u}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${g[0]} + im2col[1] * ${g[1]} + im2col[2] * ${g[2]};\n  int kernelOffset = indices[1] * ${l[1]};\n  float value = ${K};\n  for (int i = 0; i < ${c}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${p}, ${C});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${A}, ${s});\n    value += dot(${w.texture2D}(Im2Col, im2colCoords), ${w.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${W}\n  return value;\n}`;return{...r,output:{dims:n,type:e[0].type,textureType:0},shaderSource:b}},gf=(t,r,e,n)=>{let d=Mm(r.length>2,n);return{...d,get:()=>Um(t,d,r,e,n)}}})),dr,Oi,Vm,zm,Wm,Hm,Si,qm,Bn=O((()=>{It(),Y(),lf(),mf(),yf(),qe(),_i(),Fn(),dr=(t,r,e,n,d)=>{let o=t[0],a=t.slice(2),l=a.length,i=r[0],A=r.slice(2).map(((t,r)=>t+(t-1)*(e[r]-1))),B=a.map(((t,r)=>t+n[r]+n[r+l])).map(((t,r)=>Math.floor((t-A[r]+d[r])/d[r])));return[o,i].concat(...B)},Oi=(t,r,e)=>(qm(r,e),Vm(t,r,e)),Vm=(t,r,e)=>{let n=Hm(e,r),d=t.session.pack,o=1===n.kernelShape[0]&&1===n.kernelShape[1];return n.group>1?[t.run(uf(t,r,n),r)]:o&&d?[zm(t,r,n)]:d&&4===r[0].dims.length&&1===r[0].dims[0]&&!o?[hf(t,r,n)]:[Wm(t,r,n)]},zm=(t,r,e)=>{let n=r[0].dims,d=r[1].dims,o=dr(n,d,e.dilations,e.pads,e.strides),a=t.reshapeUnpacked(r[0],[n[1],n[2]*n[3]]),l=t.reshapeUnpacked(r[1],[d[0],d[1]]),i=r.length>2?[l,a,r[2]]:[l,a],A=t.run(Ti(i,e),i);return t.reshapeUnpacked(A,o)},Wm=(t,r,e)=>{let n=r[0].dims,d=r[1].dims,o=dr(n,d,e.dilations,e.pads,e.strides),a=t.run(bf(t,r[0],r[1],o,e),[r[0]]),l=3===r.length?[a,r[1],r[2]]:[a,r[1]];return t.run(gf(t,r,o,e),l)},Hm=(t,r)=>{let e=t.kernelShape.slice();if(0===t.kernelShape.length)for(let t=2;t<r[1].dims.length;++t)e.push(r[1].dims[t]);let n=t.pads.slice();Ue.adjustPadsBasedOnAutoPad(r[0].dims,t.strides,t.dilations,e,n,t.autoPad);let d=Object.assign({},t);return Object.assign(d,{kernelShape:e,pads:n,cacheKey:t.cacheKey}),d},Si=t=>{let r=t.attributes,e=pr(r),n=r.getString("auto_pad","NOTSET"),d=r.getInts("dilations",[1,1]),o=r.getInt("group",1),a=r.getInts("kernel_shape",[]),l=r.getInts("pads",[0,0,0,0]),i=r.getInts("strides",[1,1]);return W({autoPad:n,dilations:d,group:o,kernelShape:a,pads:l,strides:i,...e})},qm=(t,r)=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==t[0].dims.length||4!==t[1].dims.length)throw new Error("currently only support 2-dimensional conv");if(t[0].dims[1]!==t[1].dims[1]*r.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===t.length&&(1!==t[2].dims.length||t[1].dims[0]!==t[2].dims[0]))throw new Error("invalid bias");let e=t[0].dims.length-2;if(r.dilations.length!==e)throw new Error(`dilations should be ${e}D`);if(r.strides.length!==e)throw new Error(`strides should be ${e}D`);if(r.pads.length!==2*e)throw new Error(`pads should be ${2*e}D`);if(0!==r.kernelShape.length&&r.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape");if("float32"!==t[0].type||"float32"!==t[1].type)throw new Error("Conv input(X,W) should be float tensor");if(3===t.length&&"float32"!==t[2].type)throw new Error("Conv input(bias) should be float tensor")}})),jm,Xm,Km,xf,Jm,Ym,Zm,Qm,tb,eb,Tf,rb,wf=O((()=>{It(),ut(),j(),qe(),jm=(t,r,e,n,d,o)=>(t-1)*r+e+(n-1)*d+1-o,Xm=(t,r,e,n,d)=>{let o=Math.floor(t/2);"SAME_UPPER"===r?(e[n]=o,e[d]=t-o):"SAME_LOWER"===r&&(e[n]=t-o,e[d]=o)},Km=(t,r,e,n,d,o,a,l)=>{let i=t.length-2,A=0===l.length;for(let B=0;B<i;++B){let s=A?t[B+2]*o[B]:l[B],g=jm(t[B+2],o[B],d[B],r[B],e[B],s);Xm(g,n,d,B,B+i),A&&l.push(o[B]*(t[B+2]-1)+a[B]+(r[B]-1)*e[B]+1-d[B]-d[B+i])}},xf=(t,r,e)=>(rb(r,e),Jm(t,r,e)),Jm=(t,r,e)=>{let n=eb(e,r);return[tb(t,r,n)]},Ym=(t,r)=>({name:"ConvTranspose",inputNames:t?["X","W","B"]:["X","W"],inputTypes:t?[0,0,0]:[0,0],cacheHint:r}),Zm=(t,r,e,n)=>{let d=r.length>2?"getB(output_channel)":"0.0",o=r[0].dims,a=r[1].dims,l=a[1],i=a[0]/n.group,A=[r[0].dims[0],r[1].dims[1]*n.group,...n.outputShape],B=G(t.session.backend.glContext.version),{activationFunction:s,applyActivation:g}=he(n),p=`\n  const ivec2 strides = ivec2(${n.strides[0]}, ${n.strides[1]});\n  const ivec2 pads = ivec2(${n.pads[0]}, ${n.pads[1]});\n  ${s}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${l};\n    int wOutChannel = output_channel - group_id * ${l};\n\n    float value = ${d};\n    for (int inChannelOffset = 0; inChannelOffset < ${i}; inChannelOffset++) {\n      int input_channel = group_id * ${i} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${a[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${a[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${n.dilations[0]}, wHOff * ${n.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${o[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${o[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${g}\n    ${B.output} = vec4(value, .0, .0, .0);\n  }\n`;return{...e,output:{dims:A,type:r[0].type,textureType:0},shaderSource:p,hasMain:!0}},Qm=(t,r,e)=>{let n=Ym(r.length>2,e.cacheKey);return{...n,get:()=>Zm(t,r,n,e)}},tb=(t,r,e)=>t.run(Qm(t,r,e),r),eb=(t,r)=>{let e=t.kernelShape.slice();if(0===t.kernelShape.length)for(let t=2;t<r[1].dims.length;++t)e.push(r[1].dims[t]);let n=t.pads.slice(),d=t.outputShape.slice(),o=r[0].dims;Km(o,e,t.dilations,t.autoPad,n,t.strides,t.outputPadding,d);let a=Object.assign({},t);return Object.assign(a,{kernelShape:e,pads:n,outputShape:d,cacheKey:t.cacheKey}),a},Tf=t=>{let r=t.attributes,e=pr(r),n=r.getString("auto_pad","NOTSET"),d=r.getInts("dilations",[1,1]),o=r.getInt("group",1),a=r.getInts("kernel_shape",[]),l=r.getInts("output_padding",[0,0]),i=r.getInts("output_shape",[]),A=r.getInts("pads",[0,0,0,0]),B=r.getInts("strides",[1,1]);return W({autoPad:n,dilations:d,group:o,kernelShape:a,outputPadding:l,outputShape:i,pads:A,strides:B,...e})},rb=(t,r)=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==t[0].dims.length||4!==t[1].dims.length)throw new Error("currently only support 2-dimensional conv");if(t[0].dims[1]!==t[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let e=t[1].dims[1]*r.group;if(3===t.length&&(1!==t[2].dims.length||t[2].dims[0]!==e))throw new Error("invalid bias");let n=t[0].dims.length-2;if(r.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(r.strides.length!==n)throw new Error(`strides should be ${n}D`);if(r.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(r.outputPadding.length!==n)throw new Error(`output_padding should be ${n}D`);if(0!==r.kernelShape.length&&r.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==r.outputShape.length&&r.outputShape.length!==t[0].dims.length-2)throw new Error("invalid output shape");if("float32"!==t[0].type||"float32"!==t[1].type)throw new Error("ConvTranspose input(X,W) should be float tensor");if(3===t.length&&"float32"!==t[2].type)throw new Error("ConvTranspose input(bias) should be float tensor")}})),vf,je,If,nb,_f,ob,ib,ab,Nn=O((()=>{It(),Y(),j(),vf={name:"Transpose",inputNames:["A"],inputTypes:[0]},je=(t,r,e)=>(ab(r),[t.run({...vf,cacheHint:e.cacheKey,get:()=>nb(t,r[0],e.perm)},r)]),If=t=>W({perm:t.attributes.getInts("perm",[])}),nb=(t,r,e)=>{let n=r.dims;e=_f(n,e);let d=ob(n,e),o=n.length,a=`\n      ${ib("perm",e,o)}\n      float process(int indices[${o}]) {\n        int a[${o}];\n        perm(a, indices);\n        return _A(a);\n      }`;return{...vf,output:{dims:d,type:r.type,textureType:0},shaderSource:a}},_f=(t,r)=>(r&&r.length!==t.length&&(r=[...t.keys()].reverse()),r),ob=(t,r)=>(r=_f(t,r),B.sortBasedOnPerm(t,r)),ib=(t,r,e)=>{let n=[];n.push(`void ${t}(out int a[${e}], int src[${e}]) {`);for(let t=0;t<e;++t)n.push(`\ta[${r[t]}]=src[${t}];`);return n.push("\t}"),n.join("\n")},ab=t=>{if(!t||1!==t.length)throw new Error("Transpose requires 1 input.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("input should be float tensor")}})),Of,Sf,sb,Af=O((()=>{Nn(),Of=(t,r,e)=>{sb(r);let n=e.blocksize,d=n*n,o="DCR"===e.mode?[0,3,4,1,5,2]:[0,1,4,2,5,3],a="DCR"===e.mode?[r[0].dims[0],n,n,r[0].dims[1]/d,r[0].dims[2],r[0].dims[3]]:[r[0].dims[0],r[0].dims[1]/d,n,n,r[0].dims[2],r[0].dims[3]],l=t.reshapeUnpacked(r[0],a),i={perm:o,cacheKey:`${o}`},[A]=je(t,[l],i),B=[r[0].dims[0],r[0].dims[1]/d,r[0].dims[2]*n,r[0].dims[3]*n];return[t.reshapeUnpacked(A,B)]},Sf=t=>{let r=t.attributes.getInt("blocksize");if(r<1)throw new Error(`blocksize must be >= 1, but got : ${r} for DepthToSpace`);let e=t.attributes.getString("mode","DCR");if("DCR"!==e&&"CRD"!==e)throw new Error(`unrecognized mode: ${e} for DepthToSpace`);return{mode:e,blocksize:r}},sb=t=>{if(1!==t.length)throw new Error(`DepthToSpace expect 1 inputs, but got ${t.length}`);if("string"===t[0].type||4!==t[0].dims.length)throw new TypeError("DepthToSpace input should be a 4-D numeric tensor")}})),Pf,Ef,ub,Df=O((()=>{Y(),Pf=(t,r,e)=>{ub(r,e);let n=B.flattenShape(r[0].dims,e);return[t.reshapeUnpacked(r[0],n)]},Ef=t=>t.attributes.getInt("axis",1),ub=(t,r)=>{if(!t||1!==t.length)throw new Error("Flatten requires 1 input.");let e=t[0].dims.length;if(0===e)throw new Error("scalar tensor is not supported.");if(r<-e||r>e)throw new Error("Invalid axis");if("string"===t[0].type)throw new Error("string tensor is not supported.")}})),Pe,Rr=O((()=>{Pe=["float32","float64","int32","int16","int8","uint16","uint32","uint8"]})),Lf,$f,lb,fb,cb,pb,kf=O((()=>{It(),Rr(),Y(),j(),Lf=(t,r,e)=>(pb(r,e.axis),[t.run(cb(t,r,e),r)]),$f=t=>W({axis:t.attributes.getInt("axis",0)}),lb={name:"Gather",inputNames:["A","B"],inputTypes:[0,0]},fb=(t,r,e,n)=>{let d=e[0].dims.slice(),o=e[1].dims.slice(),a=new Array(d.length+o.length-1);n=B.normalizeAxis(n,d.length);let l=[];for(let t=0;t<a.length;t++)t<n?(a[t]=d[t],l.push(`inputIdx[${t}] = outputIdx[${t}];`)):t<n+o.length?(a[t]=o[t-n],l.push(`indexDataIdx[${t-n}] = outputIdx[${t}];`)):(a[t]=d[t-o.length+1],l.push(`inputIdx[${t-o.length+1}] = outputIdx[${t}];`));let i=`\n      float process(int outputIdx[${a.length||1}]) {\n        int inputIdx[${d.length}];\n        int indexDataIdx[${o.length||1}];\n        indexDataIdx[0] = 0;\n        ${l.join("\n        ")}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${n}] = idx < 0 ? idx + ${d[n]} : idx;\n        return _A(inputIdx);\n      }`;return{...r,output:{dims:a,type:e[0].type,textureType:0},shaderSource:i}},cb=(t,r,e)=>{let n={...lb,cacheHint:e.cacheKey};return{...n,get:()=>fb(t,n,r,e.axis)}},pb=(t,r)=>{if(!t||2!==t.length)throw new Error("Gather requires 2 inputs.");let e=t[0].dims.length;if(e<1)throw new Error("Invalid input shape.");if(r<-e||r>e-1)throw new Error("Invalid axis.");if(-1===Pe.indexOf(t[0].type))throw new Error("Invaid input type.");if("int32"!==t[1].type&&"int16"!==t[1].type)throw new Error("Invaid input type.")}})),Ai,Bf,Ff,Cf,db,hb,mb,Nf=O((()=>{It(),Y(),j(),Ai=(t,r,e)=>(mb(r,e),[t.run(db(r,e),r)]),Bf=(t,r)=>{let e=0!==t.attributes.getInt("transA",0),n=0!==t.attributes.getInt("transB",0),d=t.attributes.getFloat("alpha",1),o=t.attributes.getFloat("beta",1);return W({transA:e,transB:n,alpha:d,beta:o,isOptionalC:r})},Ff=t=>Bf(t,!1),Cf=t=>Bf(t,!0),db=(t,r)=>{let e={name:"Gemm",inputNames:3===t.length?["A","B","C"]:["A","B"],inputTypes:3===t.length?[0,0,0]:[0,0],key:r.cacheKey};return{...e,get:()=>hb(e,t,r)}},hb=(t,r,e)=>{let n=r[0].dims.slice(),d=r[1].dims.slice(),[o,a]=Sn.getShapeOfGemmResult(n,e.transA,d,e.transB,3===r.length?r[2].dims:void 0),l=[o,a];if(!l)throw new Error("Can't use gemm on the given tensors");let i=n[n.length-1],A="";e.transA&&(i=n[0]),e.transA&&e.transB?A="value += _A_T(a) * _B_T(b);":e.transA&&!e.transB?A="value += _A_T(a) * _B(b);":!e.transA&&e.transB?A="value += _A(a) * _B_T(b);":!e.transA&&!e.transB&&(A="value += _A(a) * _B(b);");let B=l.length,s=`\n      float process(int indices[${B}]) {\n          int a[${B}];\n          int b[${B}];\n          ${3===r.length?`int c[${r[2].dims.length}];`:""}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${3===r.length?"bcastIndices_C(indices, c);":""}\n\n          float value = 0.0;\n          for (int k=0; k<${i}; ++k) {\n              a[${B-1}] = k;\n              b[${B-2}] = k;\n              ${A}\n          }\n\n          value = value * alpha;\n          ${3===r.length?"value += beta * _C(c);":""}\n          return value;\n      }`;return{...t,output:{dims:l,type:r[0].type,textureType:0},variables:[{name:"alpha",type:"float",data:e.alpha},{name:"beta",type:"float",data:e.beta}],shaderSource:s}},mb=(t,r)=>{if(!t)throw new Error("Input is missing");if(r.isOptionalC&&(t.length<2||t.length>3))throw new Error("Invaid input shape.");if(!r.isOptionalC&&3!==t.length)throw new Error("Gemm requires 3 inputs");if(3===t.length&&1!==t[2].dims.length&&2!==t[2].dims.length)throw new Error("Invalid input shape of C");if("float32"!==t[0].type&&"float64"!==t[0].type||"float32"!==t[1].type&&"float64"!==t[1].type||3===t.length&&"float32"!==t[2].type&&"float64"!==t[2].type)throw new Error("Invalid input type.");if(t[0].type!==t[1].type||3===t.length&&t[0].type!==t[2].type)throw new Error("Input types are mismatched")}})),Rf,Gf,bb,gb,yb,xb,Tb,Mf=O((()=>{It(),j(),Rf=(t,r,e)=>(Tb(r),[t.run(yb(t,r,e),r)]),Gf=t=>{let r=t.attributes.getFloat("scale"),e=t.attributes.getFloats("bias");return W({scale:r,bias:e})},bb={name:"ImageScaler",inputNames:["X"],inputTypes:[0]},gb=(t,r,e,n)=>{let d=e[0].dims.slice(),o=d.length,a=`\n      ${xb(n.bias.length)}\n      float process(int indices[${o}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;return{...r,output:{dims:d,type:e[0].type,textureType:0},variables:[{name:"bias",type:"float",arrayLength:n.bias.length,data:n.bias},{name:"scale",type:"float",data:n.scale}],shaderSource:a}},yb=(t,r,e)=>{let n={...bb,cacheHint:e.cacheKey};return{...n,get:()=>gb(t,n,r,e)}},xb=t=>{let r=[`float getBias(float bias[${t}], int channel) {`];for(let e=0;e<t;++e)0===e?r.push(`\tif (channel == ${e}) { return bias[${e}]; }`):e===t-1?r.push(`\telse { return bias[${e}]; }`):r.push(`\telse if (channel == ${e}) { return bias[${e}]; }`);return r.push("\t}"),r.join("\n")},Tb=t=>{if(!t||1!==t.length)throw new Error("ImageScaler requires 1 input.");if(4!==t[0].dims.length)throw new Error("Invalid input shape.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.")}})),Vf,zf,Uf,wb,vb,Ib,_b,Ob,Sb,Wf=O((()=>{ut(),j(),Vf=(t,r,e)=>{Sb(r);let n=t.run(vb(r[0]),r);return[t.run(Ob(t,r[0],e,n.dims),[r[0],n,r[1],r[2]])]},zf=t=>t.attributes.getFloat("epsilon",1e-5),Uf={name:"InstanceNormalization_MeanAndVariance",inputNames:["X"],inputTypes:[0]},wb=(t,r)=>{let e=r.dims.slice(),n=e[1],d=e[2]*e[3],o=[e[0],n],a=`\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${e[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${e[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${d});\n        temp = 0.0;\n        for(int a2=0; a2<${e[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${e[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${d});\n\n        return v;\n      }`;return{...t,output:{dims:o,type:r.type,textureType:4},shaderSource:a}},vb=t=>({...Uf,get:()=>wb(Uf,t)}),Ib={name:"InstanceNormalization_ComputeOutput",inputNames:["X","MeanAndVariance","Scale","B"],inputTypes:[0,4,0,0]},_b=(t,r,e,n,d)=>{let o=G(t.session.backend.glContext.version),[a,l]=t.calculateTextureWidthAndHeight(d,4),[i,A]=[a/4,l],B=`\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${i}, ${A});\n        return ${o.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;return{...r,output:{dims:e.dims,type:e.type,textureType:0},variables:[{name:"epsilon",type:"float",data:n}],shaderSource:B}},Ob=(t,r,e,n)=>{let d={...Ib,cacheHint:`${e}`};return{...d,get:()=>_b(t,d,r,e,n)}},Sb=t=>{if(!t||3!==t.length)throw new Error("InstanceNormalization requires 3 inputs.");let r=t[0],e=t[1],n=t[2];if(r.dims.length<3||1!==e.dims.length||1!==n.dims.length)throw new Error("Invalid input shape.");if(e.dims[0]!==r.dims[1]||n.dims[0]!==r.dims[1])throw new Error("Input shapes are mismatched.");if("float32"!==r.type&&"float64"!==r.type||"float32"!==e.type&&"float64"!==e.type||"float32"!==n.type&&"float64"!==n.type)throw new Error("Invalid input type.");if(4!==t[0].dims.length)throw new Error("Only support 4-D input shape.")}}));function Ab(t,r){let e=t[0].dims[1],n=t[0].dims.length,d=-Math.floor((r.size-1)/2),o=Math.ceil((r.size-1)/2),a=`float(${r.alpha}) / float(${r.size})`,l=`\n    float process(int indices[${n}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${d}; i <= ${o}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${e}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(float(${r.bias}) + ${a} * square_sum, float(${r.beta}));\n    }`;return{...jf,cacheHint:r.cacheKey,output:{dims:t[0].dims,type:t[0].type,textureType:0},shaderSource:l}}function Pb(t,r){return{...jf,cacheHint:r.cacheKey,get:()=>Ab(t,r)}}var Hf,qf,jf,Eb,Xf=O((()=>{It(),j(),Hf=(t,r,e)=>(Eb(r),[t.run(Pb(r,e),r)]),qf=t=>{let r=t.attributes.getFloat("alpha",1e-4),e=t.attributes.getFloat("beta",.75),n=t.attributes.getFloat("bias",1),d=t.attributes.getInt("size");return W({alpha:r,beta:e,bias:n,size:d})},jf={name:"LRN",inputNames:["X"],inputTypes:[0]},Eb=t=>{if(!t||1!==t.length)throw new Error("LRN requires 1 input.");if(4!==t[0].dims.length)throw new Error('currently only support LRN for input with "NCHW" format');if("float32"!==t[0].type)throw new Error("input should be float type")}})),Db,Pi,Kf,Jf,Yf,Lb,$b,kb,Bb,Fb,Cb,Nb,Rb,Zf=O((()=>{It(),Y(),ut(),j(),Db={name:"Pad",inputNames:["A"],inputTypes:[0]},Pi=(t,r,e)=>(kb(r),[t.run({...Db,cacheHint:e.cacheKey,get:()=>$b(t,r[0],e)},r)]),Kf=t=>{let r=t.attributes.getString("mode","constant"),e=t.attributes.getFloat("value",0),n=t.attributes.getInts("pads");return W({mode:r,value:e,pads:n})},Jf=(t,r,e)=>{Bb(r);let n=Lb(t,r,e);return Pi(t,[r[0]],n)},Yf=t=>t.attributes.getString("mode","constant"),Lb=(t,r,e)=>{if(!t.session.isInitializer(r[1].dataId)||r.length>=3&&!t.session.isInitializer(r[2].dataId))throw new Error("dynamic pad attributes are not allowed");let n=Array.from(r[1].integerData),d=r.length>=3?r[2].floatData[0]:0;return W({mode:e,pads:n,value:d})},$b=(t,r,e)=>{let n=B.padShape(r.dims.slice(),e.pads),d=n.length,o=`\n      ${Fb(t,r,e)}\n      float process(int[${d}] indices) {\n          return padA(indices);\n      }`;return{name:"Pad",inputNames:["A"],inputTypes:[0],output:{dims:n,type:r.type,textureType:0},shaderSource:o}},kb=t=>{if(!t||1!==t.length)throw new Error("Pad requires 1 input");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.")},Bb=t=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Pad requires 2 or 3 inputs");if("int32"!==t[1].type)throw new Error("Invalid input type.");if(t.length>=3&&"string"===t[2].type)throw new Error("Invalid input type.")},Fb=(t,r,e)=>{let n=G(t.session.backend.glContext.version),[d,o]=t.calculateTextureWidthAndHeight(r.dims,0),a=B.computeStrides(r.dims);switch(e.mode){case"constant":return Cb(n,r.dims,a,d,o,e.pads,e.value);case"reflect":return Nb(n,r.dims,a,d,o,e.pads);case"edge":return Rb(n,r.dims,a,d,o,e.pads);default:throw new Error("Invalid mode")}},Cb=(t,r,e,n,d,o,a)=>{let l=r.length,i="";for(let t=l-1;t>=0;--t)i+=`\n        k = m[${t}] - ${o[t]};\n        if (k < 0)  return constant;\n        if (k >= ${r[t]}) return constant;\n        offset += k * ${e[t]};\n        `;return`\n      float padA(int m[${l}]) {\n        const float constant = float(${a});\n        int offset = 0;\n        int k = 0;\n        ${i}\n        vec2 coords = offsetToCoords(offset, ${n}, ${d});\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\n        return value;\n      }\n      `},Nb=(t,r,e,n,d,o)=>{let a=r.length,l="";for(let t=a-1;t>=0;--t)l+=`\n        k = m[${t}] - ${o[t]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2*(r[t]-1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${r[t]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${e[t]};\n        `;return`\n      float padA(int m[${a}]) {\n        int offset = 0;\n        int k = 0;\n        ${l}\n        vec2 coords = offsetToCoords(offset, ${n}, ${d});\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\n        return value;\n      }\n      `},Rb=(t,r,e,n,d,o)=>{let a=r.length,l="";for(let t=a-1;t>=0;--t)l+=`\n        k = m[${t}] - ${o[t]};\n        if (k < 0)  k = 0;\n        if (k >= ${r[t]}) k = ${r[t]-1};\n        offset += k * ${e[t]};\n      `;return`\n      float padA(int m[${a}]) {\n        int offset = 0;\n        int k = 0;\n        ${l}\n        vec2 coords = offsetToCoords(offset, ${n}, ${d});\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\n        return value;\n      }\n      `}})),tc,ec,rc,nc,oc,ic,ac,sc,uc,Gb,Qf,lc,Gn,fc,Rn,Mb,cc=O((()=>{It(),Y(),j(),tc=(t,r,e)=>{Gn(r);let n={name:"AveragePool",inputNames:["X"],inputTypes:[0],cacheHint:e.cacheKey};return[t.run({...n,get:()=>rc(r,n,!1,e)},r)]},ec=t=>{let r=t.attributes.getString("auto_pad","NOTSET"),e=t.attributes.getInt("ceil_mode",0),n=0!==t.attributes.getInt("count_include_pad",0),d=t.attributes.getInts("kernel_shape"),o=t.attributes.getInts("strides",[]),a=t.attributes.getInts("pads",[]);if(0!==e)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return W({autoPad:r,ceilMode:e,countIncludePad:n,kernelShape:d,strides:o,pads:a})},rc=(t,r,e,n)=>{let[d,o]=uc(t,n,e),a=B.size(d.kernelShape),l="";d.countIncludePad?l+=`value /= float(${a});`:l+=`value /= float(${a} - pad);`;let i=`\n        ${fc(t[0].dims,d,"value += _X(x);",l,"0.0")}\n      `;return{...r,output:{dims:o,type:t[0].type,textureType:0},shaderSource:i}},nc=(t,r,e)=>{Gn(r);let n={name:"GlobalAveragePool",inputNames:["X"],inputTypes:[0],cacheHint:`${e.countIncludePad}`};return[t.run({...n,get:()=>rc(r,n,!0,e)},r)]},oc=t=>{let r=0!==t.attributes.getInt("count_include_pad",0);return W({autoPad:"",ceilMode:0,countIncludePad:r,kernelShape:[],strides:[],pads:[]})},ic=(t,r,e)=>{Gn(r);let n={name:"MaxPool",inputNames:["X"],inputTypes:[0],cacheHint:e.cacheKey};return[t.run({...n,get:()=>sc(r,n,!1,e)},r)]},ac=t=>{let r=t.attributes.getString("auto_pad","NOTSET"),e=t.attributes.getInt("ceil_mode",0),n=t.attributes.getInts("kernel_shape"),d=t.attributes.getInts("strides",[]),o=t.attributes.getInts("pads",[]),a=t.attributes.getInt("storage_order",0),l=t.attributes.getInts("dilations",[]);if(0!==a)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==e)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return W({autoPad:r,ceilMode:e,countIncludePad:!1,kernelShape:n,strides:d,pads:o,storageOrder:a,dilations:l})},sc=(t,r,e,n)=>{let[d,o]=uc(t,n,e),a=`\n      ${fc(t[0].dims,d,"\n      value = max(_X(x), value);\n    ","","-1e5")}\n    `;return{...r,output:{dims:o,type:t[0].type,textureType:0},shaderSource:a}},uc=(t,r,e)=>{let n=t[0].dims.slice(),d=Object.hasOwnProperty.call(r,"dilations"),o=r.kernelShape.slice(),a=r.strides.slice(),l=d?r.dilations.slice():[],i=r.pads.slice();Ue.adjustPoolAttributes(e,n,o,a,l,i);let A=Ue.computePoolOutputShape(e,n,a,l,o,i,r.autoPad),B=Object.assign({},r);return d?Object.assign(B,{kernelShape:o,strides:a,pads:i,dilations:l,cacheKey:r.cacheKey}):Object.assign(B,{kernelShape:o,strides:a,pads:i,cacheKey:r.cacheKey}),[B,A]},Gb={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Qf={name:"GlobalMaxPool",inputNames:["X"],inputTypes:[0]},lc=(t,r)=>(Gn(r),[t.run({...Qf,get:()=>sc(r,Qf,!0,Gb)},r)]),Gn=t=>{if(!t||1!==t.length)throw new Error("Pool ops requires 1 input.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.")},fc=(t,r,e,n,d)=>{let o=t.length;if(r.kernelShape.length<=2){let a=r.kernelShape[r.kernelShape.length-1],l=r.strides[r.strides.length-1],i=r.pads[r.pads.length/2-1],A=r.pads[r.pads.length-1],B=t[o-1],s="",g="",p="";if(s=i+A!==0?`\n          for (int i = 0; i < ${a}; i++) {\n            x[${o} - 1] = indices[${o} - 1] * ${l} - ${i} + i;\n            if (x[${o} - 1] < 0 || x[${o} - 1] >= ${B}) {\n              pad++;\n              continue;\n            }\n            ${e}\n          }`:`\n          for (int i = 0; i < ${a}; i++) {\n            x[${o} - 1] = indices[${o} - 1] * ${l} - ${i} + i;\n            ${e}\n          }`,2===r.kernelShape.length){let e=r.kernelShape[r.kernelShape.length-2],n=r.strides[r.strides.length-2],d=r.pads[r.pads.length/2-2],l=r.pads[r.pads.length-2],i=t[o-2];g=d+l!==0?`\n            for (int j = 0; j < ${e}; j++) {\n              x[${o} - 2] = indices[${o} - 2] * ${n} - ${d} + j;\n              if (x[${o} - 2] < 0 || x[${o} - 2] >= ${i}) {\n                pad+= ${a};\n                continue;\n              }\n          `:`\n            for (int j = 0; j < ${e}; j++) {\n              x[${o} - 2] = indices[${o} - 2] * ${n} - ${d} + j;\n            `,p="\n          }\n        "}return`\n        float process(int indices[${o}]) {\n          int x[${o}];\n          copyVec(indices, x);\n\n          float value = ${d};\n          int pad = 0;\n          ${g}\n          ${s}\n          ${p}\n          ${n}\n          return value;\n        }\n      `}{let a=B.size(r.kernelShape),l=B.computeStrides(r.kernelShape),i=l.length,A=r.pads.length,s=Mb(i),g=Rn(t,"inputDims"),p=Rn(r.pads,"pads"),C=Rn(l,"kernelStrides"),u=Rn(r.strides,"strides"),K="";return K=r.pads.reduce(((t,r)=>t+r))?`\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${e}\n          }`:`\n          }\n          ${e}\n        `,`\n        ${s}\n        float process(int indices[${o}]) {\n          int x[${o}];\n          copyVec(indices, x);\n          int offset[${i}];\n          int pads[${A}];\n          int inputDims[${o}];\n          int kernelStrides[${i}];\n          int strides[${i}];\n          ${p}\n          ${g}\n          ${u}\n          ${C}\n\n          float value = ${d};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${a}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${o} - ${i}; j < ${o}; j++) {\n              x[j] = indices[j] * strides[j - ${o} + ${i}]\n                + offset[j - ${o} + ${i}] - pads[j - 2];\n              ${K}\n          }\n          ${n}\n\n          return value;\n        }\n      `}},Rn=(t,r)=>{let e="";for(let n=0;n<t.length;n++)e+=`\n      ${r}[${n}] = ${t[n]};\n    `;return e},Mb=t=>`\n  void offsetToIndices(int offset, int[${t}] strides, out int[${t}] indices) {\n    if (${t} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${t} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${t} - 1] = offset;\n  }`})),Xe,Ee,Ub,Vb,pc,dc,hc,mc,bc,gc,yc,xc=O((()=>{It(),Rr(),Y(),j(),Xe=(t,r,e,n,d)=>{Vb(r);let o={name:n,inputNames:["A"],inputTypes:[0]};return[t.run({...o,cacheHint:e.cacheKey,get:()=>Ub(t,r,e,n,d,o)},r)]},Ee=t=>{let r=t.attributes.getInts("axes",[]),e=1===t.attributes.getInt("keepdims",1);return W({axes:r,keepDims:e})},Ub=(t,r,e,n,d,o)=>{let a=[],l=r[0].dims.length||1,i=[],A=B.normalizeAxes(e.axes,r[0].dims.length),s=d(r,A),g=s[1];for(let t=0;t<r[0].dims.length;t++)A.indexOf(t)>=0||0===A.length?(e.keepDims&&a.push(1),g=`\n          for(int j${t} = 0; j${t} < ${r[0].dims[t]}; j${t}++) {\n            inputIdx[${t}] = j${t};\n            ${g}\n          }`):(i.push(`inputIdx[${t}] = outputIdx[${a.length}];`),a.push(r[0].dims[t]));let p=`\n      float process(int outputIdx[${a.length||1}]) {\n        float value;                 // final result\n        int inputIdx[${l}];      // addressing input data\n        ${i.join("\n")}\n        ${s[0]}       // init ops for reduce max/min\n        ${g}\n        ${s[2]}       // final computation for reduce mean\n        return value;\n      }`;return{...o,output:{dims:a,type:r[0].type,textureType:0},shaderSource:p}},Vb=t=>{if(!t||1!==t.length)throw new Error("Reduce op requires 1 input.");if(-1===Pe.indexOf(t[0].type))throw new Error("Invalid input type.")},pc=(t,r,e)=>Xe(t,r,e,"ReduceSum",(()=>["value = 0.0;","value += _A(inputIdx);",""])),dc=(t,r,e)=>Xe(t,r,e,"ReduceMean",((t,r)=>{let e=1;for(let n=0;n<t[0].dims.length;n++)(r.indexOf(n)>=0||0===r.length)&&(e*=t[0].dims[n]);return["value = 0.0;","value += _A(inputIdx);",`value /= ${e}.;`]})),hc=(t,r,e)=>Xe(t,r,e,"ReduceMax",((t,r)=>{let e=[];for(let n=0;n<t[0].dims.length;n++)(r.indexOf(n)>=0||0===r.length)&&e.push(`inputIdx[${n}] = 0;`);return[`${e.join("\n")}\nvalue = _A(inputIdx);`,"value = max(value, _A(inputIdx));",""]})),mc=(t,r,e)=>Xe(t,r,e,"ReduceMin",((t,r)=>{let e=[];for(let n=0;n<t[0].dims.length;n++)(r.indexOf(n)>=0||0===r.length)&&e.push(`inputIdx[${n}] = 0;`);return[`${e.join("\n")}\nvalue = _A(inputIdx);`,"value = min(value, _A(inputIdx));",""]})),bc=(t,r,e)=>Xe(t,r,e,"ReduceProd",(()=>["value = 1.0;","value *= _A(inputIdx);",""])),gc=(t,r,e)=>Xe(t,r,e,"ReduceLogSum",(()=>["value = 0.0;","value += _A(inputIdx);","value = log(value);"])),yc=(t,r,e)=>Xe(t,r,e,"ReduceLogSumSquare",(()=>["float t; value = 0.0;","t = _A(inputIdx); value += t * t;",""]))})),Tc,wc=O((()=>{Y(),Tc=(t,r)=>{let e=B.calculateReshapedDims(r[0].dims,r[1].integerData);return t.session.pack?[t.reshapePacked(r[0],e)]:[t.reshapeUnpacked(r[0],e)]}})),vc,Ei,Ic,_c,Gr,zb,Di,Mn,Li=O((()=>{It(),ut(),j(),vc={name:"Upsample",inputNames:["X"],inputTypes:[0]},Ei=(t,r,e)=>(Di(r,e),[t.run({...vc,cacheHint:e.cacheKey,get:()=>zb(t,r,e)},r)]),Ic=t=>Gr(t,7),_c=t=>Gr(t,9),Gr=(t,r)=>{let e=r>=10,n=t.attributes.getString("mode","nearest");if("nearest"!==n&&"linear"!==n&&(r<11||"cubic"!==n))throw new Error(`unrecognized mode: ${n}`);let d=[];r<9&&(d=t.attributes.getFloats("scales"),Mn(d,n,e));let o=t.attributes.getFloat("extrapolation_value",0),a=r>10?t.attributes.getString("coordinate_transformation_mode","half_pixel"):"asymmetric";if(-1===["asymmetric","pytorch_half_pixel","tf_half_pixel_for_nn","align_corners","tf_crop_and_resize","half_pixel"].indexOf(a))throw new Error(`coordinate_transform_mode '${a}' is not supported`);let l="tf_crop_and_resize"===a,i=l,A="nearest"===n&&r>=11?t.attributes.getString("nearest_mode","round_prefer_floor"):"";if(-1===["round_prefer_floor","round_prefer_ceil","floor","ceil",""].indexOf(A))throw new Error(`nearest_mode '${A}' is not supported`);let B=t.attributes.getFloat("cubic_coeff_a",-.75),s=0!==t.attributes.getInt("exclude_outside",0);if(s&&"cubic"!==n)throw new Error("exclude_outside can be set to 1 only when mode is CUBIC.");let g=r<11||"nearest"===n&&"asymmetric"===a&&"floor"===A,p=0,C=0,u=0;return r>10?t.inputs.length>2?(p=1,C=2,u=3):(C=1,u=2):9===r&&(C=1),W({opset:r,isResize:e,mode:n,scales:d,extrapolationValue:o,coordinateTransformMode:a,useExtrapolation:i,needRoiInput:l,nearestMode:A,cubicCoefficientA:B,excludeOutside:s,useNearest2xOptimization:g,roiInputIdx:p,scalesInputIdx:C,sizesInputIdx:u})},zb=(t,r,e)=>{let n=G(t.session.backend.glContext.version),[d,o]=t.calculateTextureWidthAndHeight(r[0].dims,0),a=r[0].dims.map(((t,r)=>Math.floor(t*e.scales[r]))),[l,i]=t.calculateTextureWidthAndHeight(a,0),A=a.length,B=new Array(A),s=new Array(A),g=`\n      int output_pitches[${A}];\n      int input_pitches[${A}];\n      `;for(let t=A-1;t>=0;t--)B[t]=t===A-1?1:B[t+1]*a[t+1],s[t]=t===A-1?1:s[t+1]*r[0].dims[t+1],g+=`\n        output_pitches[${t}] = ${B[t]};\n        input_pitches[${t}] = ${s[t]};\n        `;let p=`\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${d}, ${o});\n        float value = getColorAsFloat(${n.texture2D}(X, coords));\n        return value;\n      }\n      `,C="nearest"===e.mode?`\n    ${p}\n    float process(int indices[${A}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${l}, ${i});\n\n      ${g}\n\n      int d, m;\n      for (int dim = 0; dim < ${A}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }`:4===A?`\n    ${p}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${l}, ${i});\n\n      ${g}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${r[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }`:`\n    ${p}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${l}, ${i});\n\n      ${g}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${r[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;return{...vc,output:{dims:a,type:r[0].type,textureType:0},shaderSource:C,variables:[{name:"scales",type:"int",arrayLength:e.scales.length,data:e.scales.map((t=>Math.ceil(t)))}]}},Di=(t,r)=>{if(!t||r.opset<9&&1!==t.length||r.opset>=9&&r.opset<11&&2!==t.length||r.opset>=11&&t.length<2)throw new Error("invalid inputs.");if(r.scales.length>0&&t[0].dims.length!==r.scales.length)throw new Error("Invalid input shape.");if("string"===t[0].type)throw new Error("Invalid input tensor types.")},Mn=(t,r,e)=>{if(e){for(let r of t)if(r<=0)throw new Error("Scale value should be greater than 0.")}else for(let r of t)if(r<1)throw new Error("Scale value should be greater than or equal to 1.");if(!("linear"!==r&&"cubic"!==r||2===t.length||4===t.length&&1===t[0]&&1===t[1]))throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${e?"Resize":"Upsample"} opeartor.`)}})),$i,ki,Oc,Sc,Wb,Hb,qb,jb,Ac=O((()=>{ut(),j(),pe(),He(),Li(),$i={name:"Resize",inputNames:["A"],inputTypes:[2]},ki=(t,r,e)=>(Di(r,e),[t.run({...$i,cacheHint:e.cacheKey,get:()=>Wb(t,r,e)},r)]),Oc=t=>Gr(t,10),Sc=t=>Gr(t,11),Wb=(t,r,e)=>{let n=G(t.session.backend.glContext.version),[d,o]=Hb(r,e);if(d.every((t=>1===t))&&"tf_crop_and_resize"!==e.coordinateTransformMode)return{...$i,output:{dims:o,type:r[0].type,textureType:2},hasMain:!0,shaderSource:`void main() {\n                    vec4 v = ${n.texture2D}(X, TexCoords);\n                    ${n.output} = v;\n                }`};let a=o.length;if(a<2)throw new Error(`output dimension should be at least 2, but got ${a}`);let l=o[a-2],i=o[a-1],A=r[0].dims;if(a!==A.length)throw new Error(`output dimension should match input ${A.length}, but got ${a}`);let B=A[a-2],s=A[a-1],g=d[a-2],p=d[a-1],C="";if("linear"!==e.mode)throw new Error(`resize (packed) does not support mode: '${e.mode}'`);switch(e.coordinateTransformMode){case"asymmetric":C="\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                ";break;case"half_pixel":C="\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                ";break;case"pytorch_half_pixel":C=`\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${i}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${l}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${i}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${l}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;break;case"align_corners":C=`\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${i}.0 - 1.0, ${l}.0 - 1.0, ${i}.0 - 1.0,\n                            ${l}.0 - 1.0);\n                        vec4 original = vec4(${s}.0 - 1.0, ${B}.0 - 1.0, ${s}.0 - 1.0,\n                            ${B}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;break;default:throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${e.coordinateTransformMode}'`)}let u=Bt(a),K=`\n            const vec2 inputWH = vec2(${B}.0, ${s}.0);\n            const vec4 scaleWHWH = vec4(float(${g}), float(${p}), float(${g}), float(${p}));\n            ${de()}\n            ${C}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${u} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${l-1};\n                bool hasNextCol = rc.z < ${i-1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${n.output} = vec4(newValue);\n            }\n        `;return{...$i,output:{dims:o,type:r[0].type,textureType:2},hasMain:!0,shaderSource:K}},Hb=(t,r)=>{let e,n=t[0].dims,d=r.scales;if(0===d.length){let o=t[r.scalesInputIdx];if(o&&0!==o.size){if(t[r.sizesInputIdx])throw new Error("Only one of scales or sizes must be provided as input.");d=qb(o,r.mode,r.isResize)}else{let o=t[r.sizesInputIdx];if(!o||0===o.size)throw new Error("Either scales or sizes MUST be provided as input.");e=Array.from(o.integerData),d=jb(e,n,r.mode,r.isResize)}}else if(t[r.sizesInputIdx])throw new Error("Only one of scales or sizes must be provided as input.");let o=e||n.map(((t,r)=>Math.floor(t*d[r])));return[d,o]},qb=(t,r,e)=>{let n=Array.from(t.floatData);return Mn(n,r,e),n},jb=(t,r,e,n)=>{let d=r.length,o=new Array(d);for(let e=0,n=d;e<n;e++)if(0===r[e]){if(0!==t[e])throw new Error("Input dim is zero but required output dim is non-zero.");o[e]=1}else o[e]=t[e]/r[e];return Mn(o,e,n),o}})),Pc,Xb,Ec=O((()=>{We(),Pc=(t,r)=>(Xb(r),[new bt([r[0].dims.length],"int32",void 0,void 0,new Int32Array(r[0].dims))]),Xb=t=>{if(!t||1!==t.length)throw new Error("Shape requires 1 input.")}})),Bi,Dc,Lc,$c,Kb,kc,Jb,Yb,Bc=O((()=>{It(),Rr(),Y(),j(),Bi={name:"Slice",inputNames:["A"],inputTypes:[0]},Dc=(t,r,e)=>(Kb(r),[t.run({...Bi,cacheHint:e.cacheKey,get:()=>$c(t,r[0],e)},r)]),Lc=t=>{let r=t.attributes.getInts("starts"),e=t.attributes.getInts("ends"),n=t.attributes.getInts("axes",[]);return W({starts:r,ends:e,axes:n})},$c=(t,r,e)=>{let n=0===e.axes.length?r.dims.slice(0).map(((t,r)=>r)):e.axes,d=B.normalizeAxes(n,r.dims.length),o=e.starts.map(((t,e)=>t>r.dims[d[e]]-1?r.dims[d[e]]:B.normalizeAxis(t,r.dims[d[e]]))),a=e.ends.map(((t,e)=>t>r.dims[d[e]]-1?r.dims[d[e]]:B.normalizeAxis(t,r.dims[d[e]]))),l=r.dims.slice(),i=[];for(let t=0;t<d.length;t++)l[d[t]]=a[t]-o[t],o[t]>0&&i.push(`outputIdx[${d[t]}] += ${o[t]};`);let A=`\n      float process(int outputIdx[${l.length}]) {\n        ${i.join("\n      ")}\n        return _A(outputIdx);\n      }`;return{...Bi,output:{dims:l,type:r.type,textureType:0},shaderSource:A}},Kb=t=>{if(!t||1!==t.length)throw new Error("Slice requires 1 input.");if(-1===Pe.indexOf(t[0].type))throw new Error("Invalid input type.")},kc=(t,r)=>{Yb(r);let e=Jb(t,r);return[t.run({...Bi,cacheHint:e.cacheKey,get:()=>$c(t,r[0],e)},[r[0]])]},Jb=(t,r)=>{if(!t.session.isInitializer(r[1].dataId)||!t.session.isInitializer(r[2].dataId)||r.length>=4&&!t.session.isInitializer(r[3].dataId)||r.length>=5&&!t.session.isInitializer(r[4].dataId))throw new Error("dynamic slice attributes are not allowed");if(r.length>=5&&r[4].integerData.some((t=>1!==t)))throw new Error("currently non-1 steps is not supported for Slice");let e=Array.from(r[1].integerData),n=Array.from(r[2].integerData),d=r.length>=4?Array.from(r[3].integerData):[];return{starts:e,ends:n,axes:d,cacheKey:`${d};${e};${n}`}},Yb=t=>{if(!t||t.length<3||t.length>5)throw new Error("Invalid input number.");if("int32"!==t[1].type||1!==t[1].dims.length)throw new Error("Invalid input type.");if("int32"!==t[2].type||1!==t[2].dims.length)throw new Error("Invalid input type.");if(t.length>=4&&("int32"!==t[3].type||1!==t[3].dims.length))throw new Error("Invalid input type.");if(t.length>=5&&("int32"!==t[4].type||1!==t[4].dims.length))throw new Error("Invalid input type.")}})),Fc,Cc,Nc,Rc,Gc,Mc,Uc,Vc,Zb,Qb,tg,zc,Wc=O((()=>{It(),Y(),ut(),j(),Nn(),Fc={name:"SoftmaxComputeMax",inputNames:["A"],inputTypes:[0]},Cc={name:"SoftmaxComputeScale",inputNames:["A","Max"],inputTypes:[0,0]},Nc={name:"SoftMax",inputNames:["A","Max","Norm"],inputTypes:[0,0,0]},Rc=(t,r,e)=>{zc(r);let n=r[0].dims.slice(),d=B.normalizeAxis(e.axis,n.length),o=B.sizeToDimension(n,d),a=B.sizeFromDimension(n,d);return Vc(t,r,e,o,a)},Gc=t=>W({axis:t.attributes.getInt("axis",1)}),Mc=t=>W({axis:t.attributes.getInt("axis",-1)}),Uc=(t,r,e)=>{zc(r);let n,d=r[0].dims.slice(),o=B.normalizeAxis(e.axis,d.length),a=d.length,l=o!==a-1,i=[],A=[],s=[];l&&(A=Array.from({length:a}).map(((t,r)=>r)),A[o]=a-1,A[a-1]=o,A.map((t=>i.push(d[t]))),n=W({perm:A}),s=je(t,r,n));let g=l?B.sizeToDimension(i,a-1):B.sizeToDimension(d,a-1),p=l?B.sizeFromDimension(i,a-1):B.sizeFromDimension(d,a-1),C=Vc(t,l?s:r,e,g,p);return l?je(t,C,n):C},Vc=(t,r,e,n,d)=>{let o=Zb(t,r[0],n,d,[n]),a=t.run({...Fc,cacheHint:e.cacheKey,get:()=>o},r),l=Qb(t,r[0],n,d,o.output.dims,[n]),i=t.run({...Cc,cacheHint:e.cacheKey,get:()=>l},[r[0],a]),A=tg(t,r[0],n,d,o.output.dims,l.output.dims);return[t.run({...Nc,cacheHint:e.cacheKey,get:()=>A},[r[0],a,i])]},Zb=(t,r,e,n,d)=>{let[o,a]=t.calculateTextureWidthAndHeight(r.dims,0),l=d.length;if(e<1||n<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(1!==d.length)throw new Error("Dimensionality of the output should be 1");if(d[0]!==e)throw new Error("Shape of the output should be equal to logical row count");let i=G(t.session.backend.glContext.version),A=`\n      float process(int[${l}] indices) {\n        int logical_row_start_offset = indices[0] * ${n};\n\n        float max = getColorAsFloat(${i.texture2D}(A, offsetToCoords(logical_row_start_offset, ${o},\n        ${a} )));\n        for(int i=1; i<${n}; ++i)\n        {\n          float current = getColorAsFloat(${i.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${o}, ${a})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;return{...Fc,output:{dims:d,type:r.type,textureType:0},shaderSource:A}},Qb=(t,r,e,n,d,o)=>{let[a,l]=t.calculateTextureWidthAndHeight(r.dims,0),i=o.length;if(e<1||n<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(1!==o.length)throw new Error("Dimensionality of the output should be 1");if(o[0]!==e)throw new Error("Shape of the output should be equal to logical row count");if(1!==d.length)throw new Error("Dimensionality of the intermediate results should be 1");if(d[0]!==e)throw new Error("Shape of the intermediate results should be equal to logical row count");let A=`\n      float process(int[${i}] indices) {\n        int logical_row_start_offset = indices[0] * ${n};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${n}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${G(t.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${a}, ${l}))) - max);\n        }\n\n        return norm_factor;\n      }`;return{...Cc,output:{dims:o,type:r.type,textureType:0},shaderSource:A}},tg=(t,r,e,n,d,o)=>{let[a,l]=t.calculateTextureWidthAndHeight(r.dims,0),i=r.dims.length;if(e<1||n<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(1!==d.length||1!==o.length)throw new Error("Dimensionality of the intermediate results should be 1");if(d[0]!==e||o[0]!==e)throw new Error("Shape of the intermediate results should be equal to logical row count");let A=`\n      float process(int[${i}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${a}, ${l});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${n};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;return{...Nc,output:{dims:r.dims,type:r.type,textureType:0},shaderSource:A}},zc=t=>{if(!t||1!==t.length)throw new Error("Softmax requires 1 input.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type")}})),Hc,qc,jc,eg,rg,ng,Xc=O((()=>{It(),Y(),j(),Hc={name:"Split",inputNames:["A"],inputTypes:[0]},qc=(t,r,e)=>{ng(r);let n=B.normalizeAxis(e.axis,r[0].dims.length),d=eg(t,r,n,e),o=[];for(let a=0;a<d;++a)o.push(t.run({...Hc,cacheHint:`${e.cacheKey};${a}`,get:()=>rg(t,r[0],e,n,a)},r));return o},jc=t=>{let r=t.attributes.getInt("axis",0),e=t.attributes.getInts("split",[]),n=t.outputs.length;return W({axis:r,split:e,numOutputs:n})},eg=(t,r,e,n)=>{let[,d]=$r.splitShape(r[0].dims,e,n.split,n.numOutputs);return d.length},rg=(t,r,e,n,d)=>{let[o,a]=$r.splitShape(r.dims,n,e.split,e.numOutputs),l=a[d],i=o[d],A=`\n      float process(int indices[${i.length}]) {\n        indices[${n}] += ${l};\n        return _A(indices);\n      }\n    `;return{...Hc,cacheHint:`${e.cacheKey}:${d}`,output:{dims:i,type:r.type,textureType:0},shaderSource:A}},ng=t=>{if(!t||1!==t.length)throw new Error("Split requires one input.");if("int8"!==t[0].type&&"uint8"!==t[0].type&&"int16"!==t[0].type&&"uint16"!==t[0].type&&"int32"!==t[0].type&&"uint32"!==t[0].type&&"float32"!==t[0].type&&"float64"!==t[0].type&&"bool"!==t[0].type)throw new Error("Invalid input type.")}})),Fi,Kc,Jc,og,ig,Yc=O((()=>{Y(),Fi=(t,r,e)=>{og(r);let n=B.squeezeShape(r[0].dims,e);return[t.reshapeUnpacked(r[0],n)]},Kc=(t,r)=>(ig(r),Fi(t,[r[0]],Array.from(r[1].integerData))),Jc=t=>t.attributes.getInts("axes"),og=t=>{if(!t||1!==t.length)throw new Error("Squeeze requires 1 input.");if("string"===t[0].type)throw new Error("invalid input tensor types.")},ig=t=>{if(!t||2!==t.length)throw new Error("Squeeze requires 2 inputs.");if("int32"!==t[1].type)throw new Error("Invalid input type.")}})),Zc,ag,sg,Qc=O((()=>{ut(),j(),Zc=(t,r)=>{sg(r);let e={name:"Sum",inputNames:r.map(((t,r)=>`X${r}`)),inputTypes:new Array(r.length).fill(0)};return[t.run({...e,get:()=>ag(t,r,e)},r)]},ag=(t,r,e)=>{let n=G(t.session.backend.glContext.version),d=r[0].dims.slice(),o=`\n      void main() {\n        vec4 result = ${r.map(((t,r)=>`${n.texture2D}(X${r},TexCoords)`)).join(" + ")};\n        ${n.output} = result;\n      }\n    `;return{...e,output:{dims:d,type:r[0].type,textureType:0},hasMain:!0,shaderSource:o}},sg=t=>{if(!t||0===t.length)throw new Error("Sum requires inputs.");let r=t[0].dims.length;for(let e=1;e<t.length;e++){if(r!==t[e].dims.length)throw new Error("Input shapes are mismatched.");for(let n=0;n<r;n++)if(t[0].dims[n]!==t[e].dims[n])throw new Error("Input shapes are not matched.")}if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.");for(let r=1;r<t.length;r++)if(t[0].type!==t[r].type)throw new Error("Input types are not matched.")}})),tp,ug,lg,ep=O((()=>{Rr(),j(),tp=(t,r)=>{lg(r);let e={name:"Tile",inputNames:["A"],inputTypes:[0]};return[t.run({...e,get:()=>ug(t,r,e)},r)]},ug=(t,r,e)=>{let n=r[0].dims.slice(),d=new Array(n.length),o=[];for(let t=0;t<n.length;t++)d[t]=n[t]*r[1].numberData[t],o.push(`inputIdx[${t}] = int(mod(float(outputIdx[${t}]), ${n[t]}.));`);let a=d.length,l=`\n      float process(int outputIdx[${a}]) {\n        int inputIdx[${a}];\n        ${o.join("\n")}\n        return _A(inputIdx);\n      }\n    `;return{...e,output:{dims:d,type:r[0].type,textureType:0},shaderSource:l}},lg=t=>{if(!t||2!==t.length)throw new Error("Tile requires 2 input.");if(1!==t[1].dims.length)throw new Error("The second input shape must 1 dimension.");if(t[1].dims[0]!==t[0].dims.length)throw new Error("Invalid input shape.");if(-1===Pe.indexOf(t[0].type))throw new Error("Invalid input type.");if("int32"!==t[1].type&&"int16"!==t[1].type)throw new Error("Invalid repeat type.")}})),Ci,rp,np,fg,cg,op=O((()=>{Y(),Ci=(t,r,e)=>{fg(r);let n=B.unsqueezeShape(r[0].dims,e);return[t.reshapeUnpacked(r[0],n)]},rp=(t,r)=>(cg(r),Ci(t,[r[0]],Array.from(r[1].integerData))),np=t=>t.attributes.getInts("axes"),fg=t=>{if(!t||1!==t.length)throw new Error("Unsqueeze requires 1 input.");if("string"===t[0].type)throw new Error("invalid input tensor types.")},cg=t=>{if(!t||2!==t.length)throw new Error("Unsqueeze requires 2 inputs.");if("int32"!==t[1].type)throw new Error("Invalid input type.")}})),ip,ap=O((()=>{ml(),Pl(),Ll(),Nl(),Bn(),wf(),Af(),Df(),kf(),Nf(),Mf(),Wf(),Xf(),Fn(),Zf(),cc(),xc(),wc(),Ac(),Ec(),Bc(),Wc(),Xc(),Yc(),Qc(),ep(),Nn(),xi(),op(),Li(),ip=[["Abs","","6+",Rl],["Acos","","7+",Gl],["Add","","7+",bl],["And","","7+",gl],["Asin","","7+",Ml],["Atan","","7+",Ul],["AveragePool","","7+",tc,ec],["BatchNormalization","","7+",dl,hl],["Cast","","6+",El,Dl],["Ceil","","6+",Wl],["Clip","","6-10",gi,Vl],["Clip","","11+",zl],["Concat","","4+",Bl,Cl],["Conv","","1+",Oi,Si],["ConvTranspose","","1+",xf,Tf],["Cos","","7+",Hl],["Div","","7+",yl],["Dropout","","7+",yi],["DepthToSpace","","1+",Of,Sf],["Equal","","7+",xl],["Elu","","6+",ql,jl],["Exp","","6+",Xl],["Flatten","","1+",Pf,Ef],["Floor","","6+",Kl],["FusedConv","com.microsoft","1+",Oi,Si],["Gather","","1+",Lf,$f],["Gemm","","7-10",Ai,Ff],["Gemm","","11+",Ai,Cf],["GlobalAveragePool","","1+",nc,oc],["GlobalMaxPool","","1+",lc],["Greater","","7+",Tl],["Identity","","1+",yi],["ImageScaler","","1+",Rf,Gf],["InstanceNormalization","","6+",Vf,zf],["LeakyRelu","","6+",Jl,Yl],["Less","","7+",wl],["LRN","","1+",Hf,qf],["Log","","6+",Zl],["MatMul","","1+",pf,df],["MaxPool","","1+",ic,ac],["Mul","","7+",vl],["Neg","","6+",Ql],["Not","","1+",tf],["Or","","7+",Il],["Pad","","2-10",Pi,Kf],["Pad","","11+",Jf,Yf],["Pow","","7+",_l],["PRelu","","7+",Ol],["ReduceLogSum","","1+",gc,Ee],["ReduceMax","","1+",hc,Ee],["ReduceMean","","1+",dc,Ee],["ReduceMin","","1+",mc,Ee],["ReduceProd","","1+",bc,Ee],["ReduceSum","","1-12",pc,Ee],["ReduceSumSquare","","1+",yc,Ee],["Relu","","6+",ef],["Reshape","","5+",Tc],["Resize","","10",ki,Oc],["Resize","","11+",ki,Sc],["Shape","","1+",Pc],["Sigmoid","","6+",rf],["Sin","","7+",nf],["Slice","","10+",kc],["Slice","","1-9",Dc,Lc],["Softmax","","1-12",Rc,Gc],["Softmax","","13+",Uc,Mc],["Split","","2-12",qc,jc],["Sqrt","","6+",of],["Squeeze","","1-12",Fi,Jc],["Squeeze","","13+",Kc],["Sub","","7+",Sl],["Sum","","6+",Zc],["Tan","","7+",af],["Tanh","","6+",sf],["Tile","","6+",tp],["Transpose","","1+",je,If],["Upsample","","7-8",Ei,Ic],["Upsample","","9",Ei,_c],["Unsqueeze","","1-12",Ci,np],["Unsqueeze","","13+",rp],["Xor","","7+",Al]]}));function up(t){let r,e={};for(;null!==(r=sp.exec(t));){let t=r[3].split(",").map((t=>{let r=t.trim().split(" ");return r&&2===r.length?{type:r[0],name:r[1]}:null})).filter((t=>null!==t));e[r[2]]={params:t,body:r[4]}}for(let n in e){let d=pg.replace("__FUNC__",n),o=new RegExp(d,"gm");for(;null!==(r=o.exec(t));){let d=r[1],o=r[2],a=r[3].split(","),l=d?`${d} ${o};`:"",i=e[n].body,A="";e[n].params.forEach(((t,r)=>{t&&(A+=`${t.type} ${t.name} = ${a[r]};\n`)})),i=`${A}\n ${i}`,i=i.replace("return",`${o} = `);let B=`\n      ${l}\n      {\n        ${i}\n      }\n      `;t=t.replace(r[0],B)}}return t.replace(sp,"")}var sp,pg,lp=O((()=>{sp=/@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm,pg="(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;"}));function hr(t,r){let e=[],n=[];for(let r=0;r<t.length;++r)1!==t[r]&&(e.push(t[r]),n.push(r));return{newShape:e,keptDims:n}}function mg(t){if(0===t.length)return 1;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];return r}function fp(t){let r=Math.ceil(Math.sqrt(t));return[r,Math.ceil(t/r)]}var Un,Ni=O((()=>{Ut(),Y(),Un=class{constructor(t){this.maxTextureSize=t}computeTextureWH(t,r){let e=this.computeTexture(t,r);return r&&r.isPacked&&(e[0]/=2,e[1]/=2),r&&r.reverseWH?[e[1],e[0]]:e}computeTexture(t,r){let e=r&&r.isPacked;if(0===t.length)return e?[2,2]:[1,1];let n=this.maxTextureSize;if(r&&void 0!==r.breakAxis){let e=r.breakAxis>=t.length?1:t.slice(r.breakAxis).reduce(((t,r)=>t*r)),d=r.breakAxis<=0?1:t.slice(0,r.breakAxis).reduce(((t,r)=>t*r));if(!(e>n||d>n))return[e,d];tt.verbose("TextureLayout",`Given width/height preferences were unattainable: shape:${t}, breakAxis:${r.breakAxis}`)}let d=t.slice(0);e&&(n*=2,d=d.map(((t,r)=>r>=d.length-2?d[r]%2==0?d[r]:d[r]+1:d[r])),1===d.length&&(d=[2,d[0]])),2!==d.length&&(d=hr(d).newShape);let o=mg(d);return d.length<=1&&o<=n?[1,o]:2===d.length&&d[0]<=n&&d[1]<=n?d:3===d.length&&d[0]*d[1]<=n&&d[2]<=n?[d[0]*d[1],d[2]]:3===d.length&&d[0]<=n&&d[1]*d[2]<=n?[d[0],d[1]*d[2]]:4===d.length&&d[0]*d[1]*d[2]<=n&&d[3]<=n?[d[0]*d[1]*d[2],d[3]]:4===d.length&&d[0]<=n&&d[1]*d[2]*d[3]<=n?[d[0],d[1]*d[2]*d[3]]:e?fp(o/4).map((t=>2*t)):fp(o)}}})),Vn,cp=O((()=>{Y(),Te(),ut(),Ni(),pe(),Vn=class extends Ht{constructor(t){super(t)}getFunctions(){return{...this.offsetToCoords(),...this.coordsToOffset(),...this.toVec(),...this.valueFrom(),...this.getCommonUtilFuncs(),...this.getInputsSamplingSnippets(),...this.getOutputSamplingSnippet()}}getCustomTypes(){return{}}offsetToCoords(){return{offsetToCoords:new k("\n      vec2 offsetToCoords(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      ")}}coordsToOffset(){return{coordsToOffset:new k("\n      int coordsToOffset(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      ")}}getOutputSamplingSnippet(){let t=this.context.outputTextureLayout;return t.isPacked?this.getPackedOutputSamplingSnippet(t):this.getUnpackedOutputSamplingSnippet(t)}getPackedOutputSamplingSnippet(t){let r=t.unpackedShape,e=[t.width,t.height],n={},d="getOutputCoords";switch(r.length){case 0:n[d]=this.getOutputScalarCoords();break;case 1:n[d]=this.getOutputPacked1DCoords(r,e);break;case 2:n[d]=this.getOutputPacked2DCoords(r,e);break;case 3:n[d]=this.getOutputPacked3DCoords(r,e);break;default:n[d]=this.getOutputPackedNDCoords(r,e)}let o=`\n      void setOutput(vec4 val) {\n        ${G(this.context.glContext.version).output} = val;\n      }\n    `;return n.floatTextureSetRGBA=new k(o),n}getUnpackedOutputSamplingSnippet(t){let r=t.unpackedShape,e=[t.width,t.height],n={},d="getOutputCoords";switch(r.length){case 0:n[d]=this.getOutputScalarCoords();break;case 1:n[d]=this.getOutputUnpacked1DCoords(r,e);break;case 2:n[d]=this.getOutputUnpacked2DCoords(r,e);break;case 3:n[d]=this.getOutputUnpacked3DCoords(r,e);break;case 4:n[d]=this.getOutputUnpacked4DCoords(r,e);break;case 5:n[d]=this.getOutputUnpacked5DCoords(r,e);break;case 6:n[d]=this.getOutputUnpacked6DCoords(r,e);break;default:throw new Error(`Unsupported output dimensionality: ${r.length}`)}let o=`\n        void setOutput(float val) {\n          ${G(this.context.glContext.version).output} = vec4(val, 0, 0, 0);\n        }\n    `;return n.floatTextureSetR=new k(o),n}getOutputScalarCoords(){return new k("\n      int getOutputCoords() {\n        return 0;\n      }\n    ")}getOutputPacked1DCoords(t,r){let e=r,n="";return 1===e[0]?(n=`\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${e[1]}.0);\n          }\n        `,new k(n)):1===e[1]?(n=`\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${e[0]}.0);\n          }\n        `,new k(n)):(n=`\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${e[0]}, ${e[1]}));\n          return 2 * (resTexRC.y * ${e[0]} + resTexRC.x);\n        }\n      `,new k(n))}getOutputPacked2DCoords(t,r){let e="";if(Me.arraysEqual(t,r))return e=`\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${r[0]}, ${r[1]}));\n        }\n      `,new k(e);let n=r,d=Math.ceil(t[1]/2);return e=`\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${n[0]}, ${n[1]}));\n\n          int index = resTexRC.y * ${n[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${d}) * 2;\n          int c = 2 * (index / ${d});\n\n          return ivec2(r, c);\n        }\n      `,new k(e)}getOutputPacked3DCoords(t,r){let e=[r[0],r[1]],n=Math.ceil(t[2]/2),d=n*Math.ceil(t[1]/2);return new k(`\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${e[0]}, ${e[1]}));\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\n\n          int b = index / ${d};\n          index -= b * ${d};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${n}) * 2;\n          int c = 2 * (index / ${n});\n\n          return ivec3(b, r, c);\n        }\n      `)}getOutputPackedNDCoords(t,r){let e=[r[0],r[1]],n=Math.ceil(t[t.length-1]/2),d=n*Math.ceil(t[t.length-2]/2),o=d,a="",l="b, r, c";for(let r=2;r<t.length-1;r++)o*=t[t.length-r-1],a=`\n      int b${r} = index / ${o};\n      index -= b${r} * ${o};\n    `+a,l=`b${r}, `+l;let i=`\n      ivec${t.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.y * ${e[0]} + resTexRC.x;\n\n        ${a}\n\n        int b = index / ${d};\n        index -= b * ${d};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${n}) * 2;\n        int c = 2 * (index / ${n});\n\n        return ivec${t.length}(${l});\n      }\n    `;return new k(i)}getOutputUnpacked1DCoords(t,r){let e=`\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${r[0]}, ${r[1]}));\n          return resTexRC.y * ${r[0]} + resTexRC.x;\n        }\n      `;return new k(e)}getOutputUnpacked2DCoords(t,r){let e=`\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${r[0]}, ${r[1]}));\n          int index = resTexRC.y * ${r[0]} + resTexRC.x;\n          int r = index / ${t[1]};\n          int c = index - r * ${t[1]};\n          return ivec2(r, c);\n        }\n      `;return new k(e)}getOutputUnpacked3DCoords(t,r){let e="",n=t.length,d=null;n<2&&(d=[]),d=new Array(n-1),d[n-2]=t[n-1];for(let r=n-3;r>=0;--r)d[r]=d[r+1]*t[r+1];let o=["r","c","d"],a=d.map(((t,r)=>`int ${o[r]} = index / ${t}; ${r===d.length-1?`int ${o[r+1]} = index - ${o[r]} * ${t}`:`index -= ${o[r]} * ${t}`};`)).join("");return e=`\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${r[0]}, ${r[1]}));\n          int index = resTexRC.y * ${r[0]} + resTexRC.x;\n          ${a}\n          return ivec3(r, c, d);\n        }\n      `,new k(e)}getOutputUnpacked4DCoords(t,r){let e="",n=t.length,d=null;n<2&&(d=[]),d=new Array(n-1),d[n-2]=t[n-1];for(let r=n-3;r>=0;--r)d[r]=d[r+1]*t[r+1];let o=["r","c","d","d2"],a=d.map(((t,r)=>`int ${o[r]} = index / ${t}; ${r===d.length-1?`int ${o[r+1]} = index - ${o[r]} * ${t}`:`index -= ${o[r]} * ${t}`};`)).join("");return e=`\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${r[0]}, ${r[1]}));\n          int index = resTexRC.y * ${r[0]} + resTexRC.x;\n          ${a}\n          return ivec4(r, c, d, d2);\n        }\n      `,new k(e)}getOutputUnpacked5DCoords(t,r){let e="",n=t.length,d=null;n<2&&(d=[]),d=new Array(n-1),d[n-2]=t[n-1];for(let r=n-3;r>=0;--r)d[r]=d[r+1]*t[r+1];let o=["r","c","d","d2","d3"],a=d.map(((t,r)=>`int ${o[r]} = index / ${t}; ${r===d.length-1?`int ${o[r+1]} = index - ${o[r]} * ${t}`:`index -= ${o[r]} * ${t}`};`)).join("");return e=`\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${r[0]}, ${r[1]}));\n          int index = resTexRC.y * ${r[0]} + resTexRC.x;\n          ${a}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `,new k(e)}getOutputUnpacked6DCoords(t,r){let e="",n=t.length,d=null;n<2&&(d=[]),d=new Array(n-1),d[n-2]=t[n-1];for(let r=n-3;r>=0;--r)d[r]=d[r+1]*t[r+1];let o=["r","c","d","d2","d3","d4"],a=d.map(((t,r)=>`int ${o[r]} = index / ${t}; ${r===d.length-1?`int ${o[r+1]} = index - ${o[r]} * ${t}`:`index -= ${o[r]} * ${t}`};`)).join("");return e=`\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${r[0]}, ${r[1]}));\n         int index = resTexRC.y * ${r[0]} + resTexRC.x;\n         ${a}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `,new k(e)}getCommonUtilFuncs(){let t={},r="uvFromFlat";t[r]=new k("\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    "),r="packedUVfrom1D",t[r]=new k("\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "),r="packedUVfrom2D",t[r]=new k("\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "),r="packedUVfrom3D",t[r]=new k("\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "),r="sampleTexture";let e=G(this.context.glContext.version);return t[r]=new k(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${e.texture2D}(textureSampler, uv).r;\n        }`),t}getInputsSamplingSnippets(){let t={},r=this.context.outputTextureLayout;return this.context.programInfo.inputNames.forEach(((e,n)=>{let d=this.context.inputTextureLayouts[n],o=An(e);d.isPacked?t[o]=this.getPackedSamplerFromInput(o,e,d):t[o]=this.getUnpackedSamplerFromInput(o,e,d);let a=Yu(e);d.unpackedShape.length<=r.unpackedShape.length&&(d.isPacked?t[a]=this.getPackedSamplerAtOutputCoords(a,d,r,e):t[a]=this.getUnpackedSamplerAtOutputCoords(a,d,r,e))})),t}getPackedSamplerAtOutputCoords(t,r,e,n){let d,o=r.unpackedShape,a=e.unpackedShape,l=An(n),i=o.length,A=a.length,s=kt.getBroadcastDims(o,a),g=Bt(A),p=A-i,C=ne();d=0===i?"":A<2&&s.length>=1?"coords = 0;":s.map((t=>`coords.${C[t+p]} = 0;`)).join("\n");let u="";u=A<2&&i>0?"coords":o.map(((t,r)=>`coords.${C[r+p]}`)).join(", ");let K="return outputValue;",c=1===B.size(o),Q=1===B.size(a);if(1!==i||c||Q){if(c&&!Q)K=1===A?"\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        ":"\n          return vec4(outputValue.x);\n        ";else if(s.length){let t=i-2,r=i-1;s.indexOf(t)>-1&&s.indexOf(r)>-1?K="return vec4(outputValue.x);":s.indexOf(t)>-1?K="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":s.indexOf(r)>-1&&(K="return vec4(outputValue.xx, outputValue.zz);")}}else K="\n        return vec4(outputValue.xy, outputValue.xy);\n      ";let W=`\n        int lastDim = coords.${C[A-1]};\n        coords.${C[A-1]} = coords.${C[A-2]};\n        coords.${C[A-2]} = lastDim;\n      `;return new k(`\n      vec4 ${t}() {\n        ${g} coords = getOutputCoords();\n        ${W}\n        ${d}\n        vec4 outputValue = ${l}(${u});\n        ${K}\n      }\n    `,["coordinates.getOutputCoords"])}getUnpackedSamplerAtOutputCoords(t,r,e,n){let d=[e.width,e.height],o=[r.width,r.height],a=r.unpackedShape.length,l=e.unpackedShape.length,i=r.unpackedShape,A=e.unpackedShape,B=An(n);if(a===l&&Me.arraysEqual(o,d))return new k(`\n          float ${t}() {\n            return sampleTexture(${n}, TexCoords);\n          }\n        `,["coordinates.sampleTexture"]);let s,g=Bt(l),p=kt.getBroadcastDims(i,A),C=l-a,u=ne();s=0===a?"":l<2&&p.length>=1?"coords = 0;":p.map((t=>`coords.${u[t+C]} = 0;`)).join("\n");let K="";return K=l<2&&a>0?"coords":r.unpackedShape.map(((t,r)=>`coords.${u[r+C]}`)).join(", "),new k(`\n        float ${t}() {\n          ${g} coords = getOutputCoords();\n          ${s}\n          return ${B}(${K});\n        }\n      `,["coordinates.getOutputCoords"])}getPackedSamplerFromInput(t,r,e){switch(e.unpackedShape.length){case 0:return this.getPackedSamplerScalar(t,r);case 1:return this.getPackedSampler1D(t,r,e);case 2:return this.getPackedSampler2D(t,r,e);case 3:return this.getPackedSampler3D(t,r,e);default:return this.getPackedSamplerND(t,r,e)}}getUnpackedSamplerFromInput(t,r,e){let n=e.unpackedShape;switch(n.length){case 0:return this.getUnpackedSamplerScalar(t,r,e);case 1:return this.getUnpackedSampler1D(t,r,e);case 2:return this.getUnpackedSampler2D(t,r,e);case 3:return this.getUnpackedSampler3D(t,r,e);case 4:return this.getUnpackedSampler4D(t,r,e);case 5:return this.getUnpackedSampler5D(t,r,e);case 6:return this.getUnpackedSampler6D(t,r,e);default:throw new Error(`Unsupported dimension ${n.length}-D`)}}getPackedSamplerScalar(t,r){let e=`\n          vec4 ${t}() {\n            return ${G(this.context.glContext.version).texture2D}(${r}, halfCR);\n          }\n        `;return new k(e)}getPackedSampler1D(t,r,e){let n=[e.width,e.height],d=[n[1],n[0]],o=G(this.context.glContext.version),a=`vec4 ${t}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${d[0]}, ${d[1]}, index);\n      return ${o.texture2D}(${r}, uv);\n    }`;return new k(a,["coordinates.packedUVfrom1D"])}getPackedSampler2D(t,r,e){let n=e.unpackedShape,d=[e.width,e.height],o=G(this.context.glContext.version),a=d[0],l=d[1];if(null!=d&&Me.arraysEqual(n,d)){let e=`vec4 ${t}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}.0, ${a}.0);\n        return ${o.texture2D}(${r}, uv);\n      }`;return new k(e)}let i=d,A=Math.ceil(n[1]/2),B=`vec4 ${t}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${i[1]}, ${i[0]}, ${A}, row, col);\n      return ${o.texture2D}(${r}, uv);\n    }`;return new k(B,["coordinates.packedUVfrom2D"])}getPackedSampler3D(t,r,e){let n=e.unpackedShape,d=[e.width,e.height],o=[d[0],d[1]],a=G(this.context.glContext.version);if(1===n[0]){let d=n.slice(1),o=[1,2],a=lr(n,d),l=["b","row","col"],i=JSON.parse(JSON.stringify(e));i.unpackedShape=a;let A=this.getPackedSamplerFromInput(t,r,i),B=`${A.routineBody}\n      vec4 ${t}(int b, int row, int col) {\n        return ${t}(${fr(l,o)});\n      } `;return new k(B,A.dependencies)}let l=o[0],i=o[1],A=Math.ceil(n[2]/2),B=`vec4 ${t}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${l}, ${A*Math.ceil(n[1]/2)}, ${A}, b, row, col);\n      return ${a.texture2D}(${r}, uv);}`;return new k(B,["coordinates.packedUVfrom3D"])}getPackedSamplerND(t,r,e){let n=e.unpackedShape,d=n.length,o=[e.width,e.height],a=G(this.context.glContext.version),l=[o[0],o[1]],i=l[1],A=l[0],B=Math.ceil(n[d-1]/2),s=B*Math.ceil(n[d-2]/2),g="int b, int row, int col",p=`b * ${s} + (row / 2) * ${B} + (col / 2)`;for(let t=2;t<d-1;t++)g=`int b${t}, `+g,s*=n[d-t-1],p=`b${t} * ${s} + `+p;let C=`vec4 ${t}(${g}) {\n      int index = ${p};\n      int texR = index / ${A};\n      int texC = index - texR * ${A};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${A}, ${i});\n      return ${a.texture2D}(${r}, uv);\n    }`;return new k(C)}getUnpackedSamplerScalar(t,r,e){let[n,d]=[e.width,e.height];return 1===n&&1===d?new k(`\n          float ${t}() {\n            return sampleTexture(${r}, halfCR);\n          }\n        `,["coordinates.sampleTexture"]):new k(`\n        float ${t}() {\n          int offset_${r} = coordsToOffset(TexCoords, ${n}, ${d});\n          vec2 uv = uvFromFlat(${n}, ${d}, offset_${r});\n          return sampleTexture(${r}, uv);\n        }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler1D(t,r,e){let n=e.width,d=e.height;return 1===d&&1===n?new k(`\n        float ${t}(int index) {\n          return sampleTexture(${r}, halfCR);\n        }\n      `,["coordinates.sampleTexture"]):1===d?new k(`\n          float ${t}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${n}.0, 0.5);\n            return sampleTexture(${r}, uv);\n          }\n        `,["coordinates.sampleTexture"]):1===n?new k(`\n          float ${t}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${d}.0);\n            return sampleTexture(${r}, uv);\n          }\n        `,["coordinates.sampleTexture"]):new k(`\n        float ${t}(int index) {\n          vec2 uv = uvFromFlat(${n}, ${d}, index);\n          return sampleTexture(${r}, uv);\n        }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture"])}getUnpackedSampler2D(t,r,e){let n=e.unpackedShape,d=[e.height,e.width];if(null!=d&&Me.arraysEqual(n,d))return new k(`\n          float ${t}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${d[1]}.0, ${d[0]}.0);\n            return sampleTexture(${r}, uv);\n          }\n        `,["coordinates.sampleTexture"]);let{newShape:o,keptDims:a}=hr(n),l=o;if(l.length<n.length){let d=lr(n,l),o=JSON.parse(JSON.stringify(e));o.unpackedShape=d;let i=["col","row"],A=`\n          ${this.getUnpackedSamplerFromInput(t,r,o).routineBody}\n          float ${t}(int row, int col) {\n            return ${t}(${fr(i,a)});\n          }\n        `;return new k(A,["coordinates.sampleTexture"])}let i=d[1],A=d[0];if(1===A){let e=`\n          float ${t}(int row, int col) {\n            int offset_${r} = coordsToOffset(TexCoords, ${i}, ${A});\n            float index = dot(vec3(row, col, offset_${r}), vec3(${n[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${i}.0);\n            return sampleTexture(${r}, uv);\n          }\n        `;return new k(e,["coordinates.sampleTexture","coordinates.coordsToOffset"])}if(1===i){let e=`\n          float ${t}(int row, int col) {\n            int offset_${r} = coordsToOffset(TexCoords, ${i}, ${A});\n            float index = dot(vec3(row, col, offset_${r}), vec3(${n[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${A}.0, 0.5);\n            return sampleTexture(${r}, uv);\n          }\n        `;return new k(e,["coordinates.sampleTexture","coordinates.coordsToOffset"])}let B=`\n        float ${t}(int row, int col) {\n          int index = col * ${n[1]} + row;\n          vec2 uv = uvFromFlat(${i}, ${A}, index);\n          return sampleTexture(${r}, uv);\n        }\n      `;return new k(B,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler3D(t,r,e){let n=e.unpackedShape,d=n[1]*n[2],o=n[2],{newShape:a,keptDims:l}=hr(n),i=a;if(i.length<n.length){let d=lr(n,i),o=["batch","col","row"],a=JSON.parse(JSON.stringify(e));a.unpackedShape=d;let A=this.getUnpackedSamplerFromInput(t,r,a),B=l.reverse(),s=`\n          ${A.routineBody}\n          float ${t}(int batch, int row, int col) {\n            return ${t}(${fr(o,B)});\n          }\n        `;return new k(s,A.dependencies)}let A=e.width,B=e.height;return new k(`\n          float ${t}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${d} + col * ${o} + row;\n            vec2 uv = uvFromFlat(${A}, ${B}, index);\n            return sampleTexture(${r}, uv);\n          }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler4D(t,r,e){let n=e.unpackedShape,d=n[3],o=n[2]*d,a=n[1]*o,l=e.width,i=e.height;return new k(`\n        float ${t}(int row, int col, int depth, int depth2) {\n          int index = row * ${a} + col * ${o} +\n              depth2 * ${d} + depth;\n          vec2 uv = uvFromFlat(${l}, ${i}, index);\n          return sampleTexture(${r}, uv);\n        }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture"])}getUnpackedSampler5D(t,r,e){let n=e.unpackedShape,d=n[4],o=n[3]*d,a=n[2]*o,l=n[1]*a,{newShape:i,keptDims:A}=hr(n);if(i.length<n.length){let d=lr(n,i),o=["row","col","depth","depth2","depth3"],a=JSON.parse(JSON.stringify(e));a.unpackedShape=d;let l=`\n          ${this.getUnpackedSamplerFromInput(t,r,a).routineBody}\n          float ${t}(int row, int col, int depth, int depth2, int depth3) {\n            return ${t}(${fr(o,A)});\n          }\n        `;return new k(l,["coordinates.sampleTexture","coordinates.uvFromFlat"])}let B=e.width,s=e.height;return new k(`\n        float ${t}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${l} + col * ${a} + depth * ${o} +\n          depth3 * ${d} + depth2;\n          vec2 uv = uvFromFlat(${B}, ${s}, index);\n          return sampleTexture(${r}, uv);\n        }\n      `,["coordinates.sampleTexture","coordinates.uvFromFlat"])}getUnpackedSampler6D(t,r,e){let n=e.unpackedShape,d=n[5],o=n[4]*d,a=n[3]*o,l=n[2]*a,i=n[1]*l,{newShape:A,keptDims:B}=hr(n);if(A.length<n.length){let d=lr(n,A),o=["row","col","depth","depth2","depth3","depth4"],a=JSON.parse(JSON.stringify(e));a.unpackedShape=d;let l=`\n            ${this.getUnpackedSamplerFromInput(t,r,a).routineBody}\n            float ${t}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${t}(${fr(o,B)});\n            }\n          `;return new k(l,["coordinates.sampleTexture","coordinates.uvFromFlat"])}let s=e.width,g=e.height;return new k(`\n          float ${t}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${i} + col * ${l} + depth * ${a} +\n            depth2 * ${o} + depth3 * ${d} + depth4;\n            vec2 uv = uvFromFlat(${s}, ${g}, index);\n            return sampleTexture(${r}, uv);\n          }\n        `,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}toVec(){let t=this.context.outputTextureLayout,r=t.shape.length,e=t.strides,n=t.width,d=t.height,o=[];for(let t=0;t<r-1;++t)o.push(`\n        c[${t}] = offset / ${e[t]};`),o.push(`\n        offset -= c[${t}] * ${e[t]};`);o.push(`\n        c[${r-1}] = offset;`);let a=`\n      void toVec(vec2 texCoords, out int c[${r}]) {\n        int offset = coordsToOffset(texCoords, ${n}, ${d});\n        ${o.join("")}\n      }\n      void toVec(int offset, out int c[${r}]) {\n        ${o.join("")}\n      }\n    `;return{toVec:new k(a,["coordinates.coordsToOffset"])}}valueFrom(){let t={};return this.context.programInfo.inputNames.forEach(((r,e)=>{let n=this.context.inputTextureLayouts[e],d=(n.unpackedShape.length>0?n.unpackedShape:n.shape).length,o=`_${r}`;t[o]=new k(this.getValueFromSingle(r,d,n.width,n.height,!1),[`shapeUtils.indicesToOffset${o}`,"coordinates.offsetToCoords","fragcolor.getColorAsFloat"]),o+="_T",t[o]=new k(this.getValueFromSingle(r,d,n.width,n.height,!0),[`shapeUtils.indicesToOffset${o}`,"coordinates.offsetToCoords","fragcolor.getColorAsFloat"])})),t}getValueFromSingle(t,r,e,n,d){let o=`_${t}`;return d&&(o+="_T"),`\n        float ${o}(int m[${r}]) {\n          int offset = indicesToOffset${o}(m);\n          vec2 coords = offsetToCoords(offset, ${e}, ${n});\n          float value = getColorAsFloat(${G(this.context.glContext.version).texture2D}(${t}, coords));\n          return value;\n        }\n        `}getPackedValueFrom(t,r,e,n,d){let o=`_${t}_Pack`;return d&&(o+="_T"),`\n        vec4 ${o}(int m[${r}]) {\n          int offset = indicesToOffset_${t}(m);\n          vec2 coords = offsetToCoords(offset, ${e}, ${n});\n          return ${G(this.context.glContext.version).texture2D}(${t}, coords);\n        }\n        `}}})),zn,pp=O((()=>{Te(),zn=class t extends Ht{constructor(t){super(t)}getFunctions(){return{...this.encodeFloat32(),...this.decodeFloat32()}}getCustomTypes(){return{}}encodeFloat32(){return{encode:new k("highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        ")}}decodeFloat32(){return{decode:new k("highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        ")}}encodeUint8(){let r=t.isLittleEndian()?"rgba.rgba=rgba.abgr;":"";return{encode:new k(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${r}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)}}decodeUint8(){let r=t.isLittleEndian()?"rgba.rgba=rgba.abgr;":"";return{decode:new k(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${r}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)}}static isLittleEndian(){let t=new ArrayBuffer(4),r=new Uint32Array(t),e=new Uint8Array(t);if(r[0]=3735928559,239===e[0])return!0;if(222===e[0])return!1;throw new Error("unknown endianness")}}})),Wn,dp=O((()=>{Te(),ut(),Wn=class extends Ht{constructor(t){super(t)}getFunctions(){return{...this.setFragColor(),...this.getColorAsFloat()}}getCustomTypes(){return{}}setFragColor(){let t=G(this.context.glContext.version);return{setFragColor:new k(`\n        void setFragColor(float value) {\n            ${t.output} = encode(value);\n        }\n        `,["encoding.encode"])}}getColorAsFloat(){return{getColorAsFloat:new k("\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        ",["encoding.decode"])}}}})),Hn,hp=O((()=>{Te(),Hn=class t extends Ht{constructor(t){super(t)}getFunctions(){return{...this.bcastIndex(),...this.bcastMatmulIndex(),...this.offsetToIndices(),...this.indicesToOffset(),...this.incrementIndices()}}getCustomTypes(){return{}}bcastIndex(){let t=this.context.outputTextureLayout.shape.length,r={};return this.context.programInfo.inputNames.forEach(((e,n)=>{let d=this.context.inputTextureLayouts[n].unpackedShape;if(d.length<=t){let n=d.length,o=t-n,a=`bcastIndices_${e}`,l="";for(let t=0;t<n;++t)l+=`\n          realIndices[${t}] = int( mod(float(bcastedIndices[${o+t}]), ${d[t]}.0) );\n          `;let i=`\n        void ${a} (int bcastedIndices[${t}], out int realIndices[${n}]) {\n          ${l}\n        }\n        `;r[a]=new k(i)}})),r}bcastMatmulIndex(){let t=this.context.outputTextureLayout.shape.length,r={};return this.context.programInfo.inputNames.forEach(((e,n)=>{let d=this.context.inputTextureLayouts[n].shape;if(!(d.length<2||d.length>t)){let n=d.length,o=t-n,a=`bcastMatmulIndices_${e}`,l="";for(let t=0;t<n-2;++t)l+=`\n          realIndices[${t}] = int( mod(float(bcastedIndices[${o+t}]), ${d[t]}.0) );\n          `;let i=`\n        void ${a}(int bcastedIndices[${t}], out int realIndices[${n}]) {\n          ${l}\n          realIndices[${n-1}] = bcastedIndices[${t-1}];\n          realIndices[${n-2}] = bcastedIndices[${t-2}];\n        }\n        `;r[a]=new k(i)}})),r}indicesToOffset(){let r={};return this.context.programInfo.inputNames.forEach(((e,n)=>{let d=this.context.inputTextureLayouts[n].shape,o=this.context.inputTextureLayouts[n].strides,a=d.length,l=`indicesToOffset_${e}`;r[l]=new k(t.indexToOffsetSingle(l,a,o)),l=`indicesToOffset_${e}_T`,r[l]=new k(t.indexToOffsetSingle(l,a,o.slice().reverse()))})),r}static indexToOffsetSingle(t,r,e){let n="";for(let t=r-1;t>=0;--t)n+=`\n        offset += indices[${t}] * ${e[t]};\n        `;return`\n      int ${t}(int indices[${r}]) {\n        int offset = 0;\n        ${n}\n        return offset;\n      }\n      `}offsetToIndices(){let r={};return this.context.programInfo.inputNames.forEach(((e,n)=>{let d=this.context.inputTextureLayouts[n].shape,o=this.context.inputTextureLayouts[n].strides,a=d.length,l=`offsetToIndices_${e}`;r[l]=new k(t.offsetToIndicesSingle(l,a,o)),l=`offsetToIndices_${e}_T`,r[l]=new k(t.offsetToIndicesSingle(l,a,o.slice().reverse()))})),r}static offsetToIndicesSingle(t,r,e){let n=[];for(let t=0;t<r-1;++t)n.push(`\n      indices[${t}] = offset / ${e[t]};`),n.push(`\n        offset -= indices[${t}] * ${e[t]};`);return n.push(`\n      indices[${r-1}] = offset;`),`\n      void ${t}(int offset, out int indices[${r}]) {\n        ${n.join("")}\n      }\n      `}incrementIndices(){let t={};return this.context.programInfo.inputNames.forEach(((r,e)=>{let n=this.context.inputTextureLayouts[e].shape,d=n.length,o=`incrementIndices_${r}`,a="";for(let t=0;t<d;++t)a+=`\n        shape[${t}] = ${n[t]};`;let l=`\n        void ${o}(int axis, out int indices[${d}]) {\n          int shape[${d}];\n          ${a};\n          for(int i = ${d} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;t[o]=new k(l)})),t}}})),qn,mp=O((()=>{Te(),qn=class extends Ht{constructor(t){super(t)}getCustomTypes(){return{}}getFunctions(){return{...this.binaryVecFunctions(),...this.copyVec(),...this.setVecItem(),...this.getVecItem()}}binaryVecFunctions(){let t=this.context.outputTextureLayout.shape.length,r={add:"+=",sub:"-=",mul:"*=",div:"/="},e={};for(let n in r){let d=`${n}Vec`,o="";for(let e=0;e<t;++e)o+=`\n          dest[${e}] ${r[n]} src[${e}];\n          `;let a=`\n        void ${d}(int src[${t}], out int dest[${t}]) {\n          ${o}\n        }\n        `;e[d]=new k(a)}return e}copyVec(){let t=this.context.outputTextureLayout.shape.length,r="";for(let e=0;e<t;++e)r+=`\n        dest[${e}] = src[${e}];\n        `;return{copyVec:new k(`\n      void copyVec(int src[${t}], out int dest[${t}]) {\n        ${r}\n      }\n      `)}}setVecItem(){let t=this.context.outputTextureLayout.shape.length,r=`\n        if(index < 0)\n            index =${t} + index;\n        if (index == 0)\n            m[0] = value;\n        `;for(let e=1;e<t-1;++e)r+=`\n        else if (index == ${e})\n            m[${e}] = value;\n            `;return r+=`\n        else\n            m[${t-1}] = value;\n        `,{setVecItem:new k(`\n      void setVecItem(out int m[${t}], int index, int value) {\n        ${r}\n      }\n        `)}}getVecItem(){let t=this.context.outputTextureLayout.shape.length,r=`\n        if(index < 0)\n            index = ${t} + index;\n        if (index == 0)\n            return m[0];\n      `;for(let e=1;e<t-1;++e)r+=`\n        else if (index == ${e})\n            return m[${e}];\n      `;return r+=`\n        else\n            return m[${t-1}];\n        `,{getVecItem:new k(`\n      int getVecItem(int m[${t}], int index) {\n        ${r}\n      }\n    `)}}}})),Ri,bp=O((()=>{cp(),pp(),dp(),hp(),mp(),Ri={encoding:zn,fragcolor:Wn,vec:qn,shapeUtils:Hn,coordinates:Vn}})),jn,gp=O((()=>{Te(),lp(),bp(),ut(),jn=class{constructor(t,r,e,n){this.libs={},this.glslLibRoutineDependencyGraph={},this.context=new Ln(t,r,e,n),Object.keys(Ri).forEach((t=>{let r=new Ri[t](this.context);this.libs[t]=r}));let d=this.glslLibRoutineDependencyGraph;for(let t in this.libs){let r=this.libs[t].getFunctions();for(let e in r){let n,o=t+"."+e;d[o]?(n=d[o],n.routineBody=r[e].routineBody):(n=new Nr(o,r[e].routineBody),d[o]=n);let a=r[e].dependencies;if(a)for(let t=0;t<a.length;++t)if(d[a[t]])n.addDependency(d[a[t]]);else{let r=new Nr(a[t]);d[a[t]]=r,n.addDependency(r)}}}}preprocess(){let t=this.context.programInfo,r=t.shaderSource;return this.context.programInfo.hasMain||(r=`${r}\n      ${Ju(this.context.glContext.version,this.context.outputTextureLayout.shape.length)}`),r=up(r),`${Ku(this.context.glContext.version)}\n    ${this.getUniforms(t.inputNames,t.variables)}\n    ${this.getImports(r)}\n    ${r}`}getImports(t){let r=this.selectGlslLibRoutinesToBeIncluded(t);if(0===r.length)return"";let e="";for(let t=0;t<r.length;++t){if(!r[t].routineBody)throw new Error(`Missing body for the Glsl Library routine: ${r[t].name}`);e+=r[t].routineBody+"\n"}return e}selectGlslLibRoutinesToBeIncluded(t){let r=[];return Object.keys(this.glslLibRoutineDependencyGraph).forEach((e=>{let n=e.split(".")[1];-1!==t.indexOf(n)&&r.push(this.glslLibRoutineDependencyGraph[e])})),$n.returnOrderedNodes(r)}getUniforms(t,r){let e=[];if(t)for(let r of t)e.push(`uniform sampler2D ${r};`);if(r)for(let t of r)e.push(`uniform ${t.type} ${t.name}${t.arrayLength?`[${t.arrayLength}]`:""};`);return e.join("\n")}}})),Xn,yp=O((()=>{Yt(),Ut(),gp(),ut(),Xn=class{constructor(t,r,e){this.profiler=t,this.glContext=r,this.textureLayoutStrategy=e,this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,e){this.profiler.event("op",`ProgramManager.run ${t.programInfo.name??"unknown kernel"}`,(()=>{let n=this.glContext.gl,d=t.program;n.useProgram(d);try{this.bindOutput(e),this.attributesBound||this.bindAttributes(t.attribLocations),this.bindUniforms(t.uniformLocations,t.programInfo.variables??[],r)}catch(r){throw tt.error("ProgramManager",t.programInfo.shaderSource),r}this.profiler.event("backend","GlContext.draw()",(()=>{this.glContext.draw()}))}),this.glContext)}dispose(){this.vertexShader&&this.glContext.deleteShader(this.vertexShader),this.repo.forEach((t=>this.glContext.deleteProgram(t.program)))}build(t,r,e){return this.profiler.event("backend","ProgramManager.build",(()=>{let n=new jn(this.glContext,t,r,e),d=n.preprocess(),o=this.compile(d);return{programInfo:t,program:o,uniformLocations:this.getUniformLocations(o,n.context.programInfo.inputNames,n.context.programInfo.variables),attribLocations:this.getAttribLocations(o)}}))}compile(t){if(!this.vertexShader){tt.verbose("ProrgramManager","Compiling and caching Vertex shader for the first time");let t=Xu(this.glContext.version);this.vertexShader=this.glContext.compileShader(t,this.glContext.gl.VERTEX_SHADER)}z.debug&&tt.verbose("ProrgramManager",`FragShader:\n${t}\n`);let r=this.glContext.compileShader(t,this.glContext.gl.FRAGMENT_SHADER),e=this.glContext.createProgram(this.vertexShader,r);return this.glContext.deleteShader(r),e}bindOutput(t){let r=t.width,e=t.height;tt.verbose("ProrgramManager",`Binding output texture to Framebuffer: w/h=${r}/${e}, shape=${t.shape}, type=${t.tensor.type}`),this.glContext.attachFramebuffer(t.texture,r,e)}bindAttributes(t){let r=t.position,e=t.textureCoord;this.glContext.setVertexAttributes(r,e),this.attributesBound=!0}bindUniforms(t,r,e){let n=this.glContext.gl,d=0;for(let{name:o,type:a,location:l,arrayLength:i}of t){let t=r.find((t=>t.name===o))?.data;if("sampler2D"!==a&&!t)throw new Error(`variable '${o}' does not have data defined in program info`);switch(a){case"sampler2D":this.bindTexture(e[d],l,d),d++;break;case"float":i?n.uniform1fv(l,t):n.uniform1f(l,t);break;case"int":i?n.uniform1iv(l,t):n.uniform1i(l,t);break;default:throw new Error(`Uniform not implemented: ${a}`)}}}bindTexture(t,r,e){this.glContext.bindTextureToUniform(t.texture,e,r)}getAttribLocations(t){return{position:this.getAttribLocation(t,"position"),textureCoord:this.getAttribLocation(t,"textureCoord")}}getUniformLocations(t,r,e){let n=[];if(r)for(let e of r)n.push({name:e,type:"sampler2D",location:this.getUniformLocation(t,e)});if(e)for(let r of e)n.push({...r,location:this.getUniformLocation(t,r.name)});return n}getUniformLocation(t,r){let e=this.glContext.gl.getUniformLocation(t,r);if(null===e)throw new Error(`Uniform ${r} not found.`);return e}getAttribLocation(t,r){return this.glContext.gl.getAttribLocation(t,r)}}})),Kn,xp=O((()=>{Ut(),Fr(),Kn=class{constructor(t,r,e,n){this.glContext=t,this.layoutStrategy=r,this.profiler=e,this.config=n,this.pendingRead=new Map,n.reuseTextures&&(this.inUseTextures=new Map,this.idleTextures=new Map,this.textureLookup=new Map)}createTextureFromLayout(t,r,e,n){let d=this.toEncoderType(t),o=this.glContext.getEncoder(d,r.channels||1,n);if(r.isPacked&&1===n)throw new Error("not implemented");let a,l,i=r.width,A=r.height;if(this.config.reuseTextures){a=`${i}x${A}_${o.format}_${o.internalFormat}_${o.textureType}`,l=this.inUseTextures.get(a),l||(l=[],this.inUseTextures.set(a,l));let r=this.idleTextures.get(a);if(r&&r.length>0){let d=r.pop();return l.push(d),1===n&&this.glContext.updateTexture(d,i,A,o,this.toTextureData(t,e)),d}}tt.verbose("TextureManager",`Creating new texture of size ${r.width}x${r.height}`);let B=this.glContext.allocateTexture(i,A,o,this.toTextureData(t,e));return this.config.reuseTextures&&(l.push(B),this.textureLookup.set(B,a)),B}readTexture(t,r,e){return e||(e=1),this.profiler.event("backend","TextureManager.readTexture",(()=>{let n=t.shape.reduce(((t,r)=>t*r))*e,d=this.glContext.readTexture(t.texture,t.width,t.height,n,this.toEncoderType(r),e);return this.toTensorData(r,d)}))}async readTextureAsync(t,r,e){let n=t.tensor.dataId;if(e||(e=1),this.pendingRead.has(n)){let t=this.pendingRead.get(n);return new Promise((r=>t?.push(r)))}return this.profiler.event("backend","TextureManager.readTextureAsync",(async()=>{this.pendingRead.set(n,[]);let d=t.shape.reduce(((t,r)=>t*r))*e;await this.glContext.createAndWaitForFence();let o=this.glContext.readTexture(t.texture,t.width,t.height,d,this.toEncoderType(r),e),a=this.toTensorData(r,o),l=this.pendingRead.get(n);return this.pendingRead.delete(n),l?.forEach((t=>t(a))),a}))}readUint8TextureAsFloat(t){return this.profiler.event("backend","TextureManager.readUint8TextureAsFloat",(()=>{let r=t.shape.reduce(((t,r)=>t*r)),e=this.glContext.readTexture(t.texture,t.width,t.height,4*r,"byte",4);return new Float32Array(e.buffer,e.byteOffset,r)}))}releaseTexture(t,r){let e;if(this.config.reuseTextures&&(e=this.textureLookup.get(t.texture),e)){r&&this.textureLookup.delete(e);let n=this.inUseTextures.get(e);if(n){let r=n.indexOf(t.texture);if(-1!==r){n.splice(r,1);let d=this.idleTextures.get(e);d||(d=[],this.idleTextures.set(e,d)),d.push(t.texture)}}}(!e||r)&&(tt.verbose("TextureManager",`Deleting texture of size ${t.width}x${t.height}`),this.glContext.deleteTexture(t.texture))}toTensorData(t,r){switch(t){case"int16":return r instanceof Int16Array?r:Int16Array.from(r);case"int32":return r instanceof Int32Array?r:Int32Array.from(r);case"int8":return r instanceof Int8Array?r:Int8Array.from(r);case"uint16":return r instanceof Uint16Array?r:Uint16Array.from(r);case"uint32":return r instanceof Uint32Array?r:Uint32Array.from(r);case"uint8":case"bool":return r instanceof Uint8Array?r:Uint8Array.from(r);case"float32":return r instanceof Float32Array?r:Float32Array.from(r);case"float64":return r instanceof Float64Array?r:Float64Array.from(r);default:throw new Error(`TensorData type ${t} is not supported`)}}toTextureData(t,r){if(r)return r instanceof Float32Array?r:new Float32Array(r)}toEncoderType(t){return"float"}clearActiveTextures(){this.glContext.clearActiveTextures()}}})),Jn,Tp=O((()=>{Ut(),Bs(),cl(),ap(),yp(),Ni(),xp(),Jn=class{constructor(t,r){this.backend=t,this.context=r,this.layoutStrategy=new Un(t.glContext.maxTextureSize),this.programManager=new Xn(this.context.profiler,t.glContext,this.layoutStrategy),this.textureManager=new Kn(t.glContext,this.layoutStrategy,this.context.profiler,{reuseTextures:"full"===t.textureCacheMode}),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map,this.pack=t.pack,this.pack2unpackMap=new Map,this.unpack2packMap=new Map}createInferenceHandler(){return new Dn(this)}onGraphInitialized(t){let r=t.getValues().filter((t=>-1===t.from&&t.tensor)).map((t=>t.tensor.dataId));this.initializers=new Set(r)}isInitializer(t){return!!this.initializers&&this.initializers.has(t)}addInitializer(t){this.initializers.add(t)}getTextureData(t,r){return r?this.packedTextureDataCache.get(t):this.unpackedTextureDataCache.get(t)}setTextureData(t,r,e=!1){tt.verbose("WebGLSessionHandler","Storing Texture data in cache"),e?this.packedTextureDataCache.set(t,r):this.unpackedTextureDataCache.set(t,r)}dispose(){this.programManager.dispose(),this.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach((t=>this.textureManager.releaseTexture(t,!0))),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach((t=>this.textureManager.releaseTexture(t,!0))),this.unpackedTextureDataCache=new Map}resolve(t,r,e){let n=ks(t,r,ip);return{impl:n.opImpl,context:n.opInit?n.opInit(t,e):t}}}}));function bg(t){let r=0;for(;r<t.length&&t[r]();++r);return r-1}var Mr,wp=O((()=>{Yt(),Fr(),Fr(),pe(),Mr=class{constructor(t,r){this.frameBufferBound=!1,this.itemsToPoll=[],this.gl=t,this.version=r,this.getExtensions(),this.vertexbuffer=this.createVertexbuffer(),this.framebuffer=this.createFramebuffer(),this.queryVitalParameters()}allocateTexture(t,r,e,n){let d=this.gl,o=d.createTexture();d.bindTexture(d.TEXTURE_2D,o),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.NEAREST),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.NEAREST),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE);let a=n?e.encode(n,t*r):null;return d.texImage2D(d.TEXTURE_2D,0,e.internalFormat,t,r,0,e.format,e.textureType,a),this.checkError(),o}updateTexture(t,r,e,n,d){let o=this.gl;o.bindTexture(o.TEXTURE_2D,t);let a=n.encode(d,r*e);o.texSubImage2D(o.TEXTURE_2D,0,0,0,r,e,n.format,n.textureType,a),this.checkError()}attachFramebuffer(t,r,e){let n=this.gl;n.bindTexture(n.TEXTURE_2D,t),n.bindFramebuffer(n.FRAMEBUFFER,this.framebuffer),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0),this.checkError(),n.viewport(0,0,r,e),n.scissor(0,0,r,e)}readTexture(t,r,e,n,d,o){let a=this.gl;o||(o=1),this.frameBufferBound||this.attachFramebuffer(t,r,e);let l=this.getEncoder(d,o),i=l.allocate(r*e);return a.bindTexture(a.TEXTURE_2D,t),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,t,0),a.readPixels(0,0,r,e,a.RGBA,l.textureType,i),this.checkError(),l.decode(i,n)}isFramebufferReady(){return!0}getActiveTexture(){let t=this.gl;return"TEXTURE"+(t.getParameter(this.gl.ACTIVE_TEXTURE)-t.TEXTURE0)}getTextureBinding(){return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D)}getFramebufferBinding(){return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING)}setVertexAttributes(t,r){let e=this.gl;e.vertexAttribPointer(t,3,e.FLOAT,!1,20,0),e.enableVertexAttribArray(t),-1!==r&&(e.vertexAttribPointer(r,2,e.FLOAT,!1,20,12),e.enableVertexAttribArray(r)),this.checkError()}createProgram(t,r){let e=this.gl,n=e.createProgram();return e.attachShader(n,t),e.attachShader(n,r),e.linkProgram(n),n}compileShader(t,r){let e=this.gl,n=e.createShader(r);if(!n)throw new Error(`createShader() returned null with type ${r}`);if(e.shaderSource(n,t),e.compileShader(n),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw new Error(`Failed to compile shader: ${e.getShaderInfoLog(n)}\nShader source:\n${t}`);return n}deleteShader(t){this.gl.deleteShader(t)}bindTextureToUniform(t,r,e){let n=this.gl;n.activeTexture(n.TEXTURE0+r),this.checkError(),n.bindTexture(n.TEXTURE_2D,t),this.checkError(),n.uniform1i(e,r),this.checkError()}draw(){this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4),this.checkError()}checkError(){if(z.debug){let t=this.gl,r=t.getError(),e="";switch(r){case t.NO_ERROR:return;case t.INVALID_ENUM:e="INVALID_ENUM";break;case t.INVALID_VALUE:e="INVALID_VALUE";break;case t.INVALID_OPERATION:e="INVALID_OPERATION";break;case t.INVALID_FRAMEBUFFER_OPERATION:e="INVALID_FRAMEBUFFER_OPERATION";break;case t.OUT_OF_MEMORY:e="OUT_OF_MEMORY";break;case t.CONTEXT_LOST_WEBGL:e="CONTEXT_LOST_WEBGL";break;default:e=`Unknown WebGL Error: ${r.toString(16)}`}throw new Error(e)}}deleteTexture(t){this.gl.deleteTexture(t)}deleteProgram(t){this.gl.deleteProgram(t)}getEncoder(t,r,e=0){if(2===this.version)return new Pn(this.gl,r);switch(t){case"float":return 1===e||this.isRenderFloat32Supported?new Br(this.gl,r):new Br(this.gl,r,this.textureHalfFloatExtension.HALF_FLOAT_OES);case"int":throw new Error("not implemented");case"byte":return new En(this.gl,r);default:throw new Error(`Invalid dataType: ${t}`)}}clearActiveTextures(){let t=this.gl;for(let r=0;r<this.maxTextureImageUnits;++r)t.activeTexture(t.TEXTURE0+r),t.bindTexture(t.TEXTURE_2D,null)}dispose(){if(this.disposed)return;let t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteFramebuffer(this.framebuffer),t.bindBuffer(t.ARRAY_BUFFER,null),t.deleteBuffer(this.vertexbuffer),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.finish(),this.disposed=!0}createDefaultGeometry(){return new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0])}createVertexbuffer(){let t=this.gl,r=t.createBuffer();if(!r)throw new Error("createBuffer() returned null");let e=this.createDefaultGeometry();return t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),this.checkError(),r}createFramebuffer(){let t=this.gl.createFramebuffer();if(!t)throw new Error("createFramebuffer returned null");return t}queryVitalParameters(){let t=this.gl;if(this.isFloatTextureAttachableToFrameBuffer=this.checkFloatTextureAttachableToFrameBuffer(),this.isRenderFloat32Supported=this.checkRenderFloat32(),this.isFloat32DownloadSupported=this.checkFloat32Download(),1===this.version&&!this.textureHalfFloatExtension&&!this.isRenderFloat32Supported)throw new Error("both float32 and float16 TextureType are not supported");this.isBlendSupported=!this.isRenderFloat32Supported||this.checkFloat32Blend(),this.maxTextureSize=t.getParameter(t.MAX_TEXTURE_SIZE),this.maxTextureImageUnits=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),this.version}getExtensions(){2===this.version?(this.colorBufferFloatExtension=this.gl.getExtension("EXT_color_buffer_float"),this.disjointTimerQueryWebgl2Extension=this.gl.getExtension("EXT_disjoint_timer_query_webgl2")):(this.textureFloatExtension=this.gl.getExtension("OES_texture_float"),this.textureHalfFloatExtension=this.gl.getExtension("OES_texture_half_float"))}checkFloatTextureAttachableToFrameBuffer(){let t=this.gl,r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);let e=2===this.version?t.RGBA32F:t.RGBA;t.texImage2D(t.TEXTURE_2D,0,e,1,1,0,t.RGBA,t.FLOAT,null);let n=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,n),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);let d=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(n),d}checkRenderFloat32(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1}else if(!this.textureFloatExtension)return!1;return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Download(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1}else if(!this.textureFloatExtension||!this.gl.getExtension("WEBGL_color_buffer_float"))return!1;return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Blend(){let t,r,e,n,d,o=this.gl;try{t=o.createTexture(),r=o.createFramebuffer(),o.bindTexture(o.TEXTURE_2D,t);let a=2===this.version?o.RGBA32F:o.RGBA;return o.texImage2D(o.TEXTURE_2D,0,a,1,1,0,o.RGBA,o.FLOAT,null),o.bindFramebuffer(o.FRAMEBUFFER,r),o.framebufferTexture2D(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,t,0),o.enable(o.BLEND),e=o.createShader(o.VERTEX_SHADER),!!(e&&(o.shaderSource(e,"void main(){}"),o.compileShader(e),n=o.createShader(o.FRAGMENT_SHADER),n)&&(o.shaderSource(n,"precision highp float;void main(){gl_FragColor=vec4(0.5);}"),o.compileShader(n),d=o.createProgram(),d))&&(o.attachShader(d,e),o.attachShader(d,n),o.linkProgram(d),o.useProgram(d),o.drawArrays(o.POINTS,0,1),o.getError()===o.NO_ERROR)}finally{o.disable(o.BLEND),d&&o.deleteProgram(d),e&&o.deleteShader(e),n&&o.deleteShader(n),r&&(o.bindFramebuffer(o.FRAMEBUFFER,null),o.deleteFramebuffer(r)),t&&(o.bindTexture(o.TEXTURE_2D,null),o.deleteTexture(t))}}beginTimer(){if(2===this.version&&this.disjointTimerQueryWebgl2Extension){let t=this.gl,r=this.disjointTimerQueryWebgl2Extension,e=t.createQuery();return t.beginQuery(r.TIME_ELAPSED_EXT,e),e}throw new Error("WebGL1 profiling currently not supported.")}endTimer(){if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error("WebGL1 profiling currently not supported");{let t=this.gl,r=this.disjointTimerQueryWebgl2Extension;t.endQuery(r.TIME_ELAPSED_EXT)}}isTimerResultAvailable(t){let r=!1,e=!1;if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error("WebGL1 profiling currently not supported");{let n=this.gl,d=this.disjointTimerQueryWebgl2Extension;r=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE),e=n.getParameter(d.GPU_DISJOINT_EXT)}return r&&!e}getTimerResult(t){let r=0;if(2!==this.version)throw new Error("WebGL1 profiling currently not supported");{let e=this.gl;r=e.getQueryParameter(t,e.QUERY_RESULT),e.deleteQuery(t)}return r/1e6}async waitForQueryAndGetTime(t){return await li((()=>this.isTimerResultAvailable(t))),this.getTimerResult(t)}async createAndWaitForFence(){let t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let r,e=t,n=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return t.flush(),r=null===n?()=>!0:()=>{let t=e.clientWaitSync(n,0,0);return t===e.ALREADY_SIGNALED||t===e.CONDITION_SATISFIED},{query:n,isFencePassed:r}}async pollFence(t){return new Promise((r=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>r()))}))}pollItems(){let t=bg(this.itemsToPoll.map((t=>t.isDoneFn)));for(let r=0;r<=t;++r){let{resolveFn:t}=this.itemsToPoll[r];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}async addItemToPoll(t,r){this.itemsToPoll.push({isDoneFn:t,resolveFn:r}),!(this.itemsToPoll.length>1)&&await li((()=>(this.pollItems(),0===this.itemsToPoll.length)))}}}));function Gi(t){let r;if(t&&"webgl2"!==t||!("webgl2"in mr)?(!t||"webgl"===t)&&"webgl"in mr&&(r=mr.webgl):r=mr.webgl2,!r)try{r=vp(yg(),t)}catch{r=vp(gg(),t)}t=t||1===r.version?"webgl":"webgl2";let e=r.gl;return mr[t]=r,e.isContextLost()?(delete mr[t],Gi(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),r)}function vp(t,r){let e,n={alpha:!1,depth:!1,antialias:!1,stencil:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1,failIfMajorPerformanceCaveat:!1};if((!r||"webgl2"===r)&&(e=t.getContext("webgl2",n),e))try{return new Mr(e,2)}catch(t){tt.warning("GlContextFactory",`failed to create WebGLContext using contextId 'webgl2'. Error: ${t}`)}if((!r||"webgl"===r)&&(e=t.getContext("webgl",n)||t.getContext("experimental-webgl",n),e))try{return new Mr(e,1)}catch(t){tt.warning("GlContextFactory",`failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${t}`)}throw new Error("WebGL is not supported")}function gg(){if(typeof document>"u")throw new TypeError("failed to create canvas: document is not supported");let t=document.createElement("canvas");return t.width=1,t.height=1,t}function yg(){if(typeof OffscreenCanvas>"u")throw new TypeError("failed to create offscreen canvas: OffscreenCanvas is not supported");return new OffscreenCanvas(1,1)}var mr,Ip=O((()=>{Ut(),wp(),mr={}})),Yn,_p=O((()=>{Yt(),Ut(),Tp(),Ip(),Yn=class{get contextId(){return z.webgl.contextId}set contextId(t){z.webgl.contextId=t}get matmulMaxBatchSize(){return z.webgl.matmulMaxBatchSize}set matmulMaxBatchSize(t){z.webgl.matmulMaxBatchSize=t}get textureCacheMode(){return z.webgl.textureCacheMode}set textureCacheMode(t){z.webgl.textureCacheMode=t}get pack(){return z.webgl.pack}set pack(t){z.webgl.pack=t}get async(){return z.webgl.async}set async(t){z.webgl.async=t}initialize(){try{return this.glContext=Gi(this.contextId),"number"!=typeof this.matmulMaxBatchSize&&(this.matmulMaxBatchSize=16),"string"!=typeof this.textureCacheMode&&(this.textureCacheMode="full"),"boolean"!=typeof this.pack&&(this.pack=!1),"boolean"!=typeof this.async&&(this.async=!1),tt.setWithEnv(z),z.webgl.context||Object.defineProperty(z.webgl,"context",{value:this.glContext.gl}),tt.verbose("WebGLBackend",`Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`),!0}catch(t){return tt.warning("WebGLBackend",`Unable to initialize WebGLBackend. ${t}`),!1}}createSessionHandler(t){return new Jn(this,t)}dispose(){this.glContext.dispose()}}}));async function Mi(t){if(!t)return Mi(["webgl"]);{let r="string"==typeof t?[t]:t;for(let t of r){let r=Op.get(t);if(r)return r;let e=await Tg(t);if(e)return e}}throw new Error("no available backend to use")}async function Tg(t){let r=xg;if(typeof r[t]<"u"&&wg(r[t])){let e=r[t],n=e.initialize();if("object"==typeof n&&"then"in n&&(n=await n),n)return Op.set(t,e),e}}function wg(t){let r=t;return"initialize"in r&&"function"==typeof r.initialize&&"createSessionHandler"in r&&"function"==typeof r.createSessionHandler&&"dispose"in r&&"function"==typeof r.dispose}var Op,xg,Sp=O((()=>{_p(),Op=new Map,xg={webgl:new Yn}})),Ui,Zn,Ap=O((()=>{Ut(),Ui=class{constructor(t,r){this.op=t,this.node=r}},Zn=class{constructor(t,r,e){this.graph=t,this.profiler=e,this.initialize(r)}initialize(t){this.profiler.event("session","ExecutionPlan.initialize",(()=>{let r=this.graph.getNodes();if(r.length!==t.length)throw new Error("The size of nodes and OPs do not match.");this._ops=t.map(((t,e)=>new Ui(t,r[e]))),this.reset(),this._starter=[],this._ops.forEach(((t,r)=>{let e=!0;for(let r of t.node.inputs)if(!this._values[r]&&-1===this.graph.getInputIndices().indexOf(r)){e=!1;break}e&&this._starter.push(r)}))}))}reset(){this._values=this.graph.getValues().map((t=>t.tensor))}async execute(t,r){return this.profiler.event("session","ExecutionPlan.execute",(async()=>{this.reset();let e=t.createInferenceHandler(),n=this.graph.getInputIndices();if(r.length!==n.length)throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${r.length} expected: ${n.length}`);r.forEach(((t,r)=>{let e=n[r];this._values[e]=t}));let d=this._starter.slice(0),o=this.graph.getValues(),a=this.graph.getNodes(),l=0;for(;l<d.length;){let t=d[l++],r=this._ops[t],n=r.node.inputs.map((t=>this._values[t]));if(-1!==n.indexOf(void 0))throw new Error(`unresolved input detected: op: ${r.node}`);let i=n;tt.verbose("ExecPlan",`Running op:${r.node.name} (${i.map(((t,e)=>`'${r.node.inputs[e]}': ${t.type}[${t.dims.join(",")}]`)).join(", ")})`);let A=await this.profiler.event("node",r.node.name,(async()=>r.op.impl(e,i,r.op.context)));if(A.length!==r.node.outputs.length)throw new Error("the size of output does not match model definition.");A.forEach(((t,e)=>{let n=r.node.outputs[e];if(this._values[n])throw new Error(`output [${n}] already has value: op:${r.node.name}`);this._values[n]=t}));let B=new Set;A.forEach(((t,e)=>{let n=r.node.outputs[e];for(let t of o[n].to){let r=a[t],e=!0;for(let t of r.inputs)if(!this._values[t]){e=!1;break}e&&B.add(t)}})),d.push(...B)}let i=[];for(let t=0;t<this.graph.getOutputIndices().length;t++){let r=this.graph.getOutputIndices()[t],e=this._values[r];if(void 0===e)throw new Error(`required output [${r}] does not have value`);0===r?await e.getData():e.data,i.push(e)}return tt.verbose("ExecPlan","disposing of inferenceHandler"),e.dispose(),i}))}}})),q,Xt,Ur,Pp=O((()=>{Pr(),q=rr(sr()),We(),Y(),Xt=F.experimental.fbs,Ur=class t{constructor(r){if(this._attributes=new Map,null!=r){for(let e of r)e instanceof q.onnx.AttributeProto?this._attributes.set(e.name,[t.getValue(e),t.getType(e)]):e instanceof Xt.Attribute&&this._attributes.set(e.name(),[t.getValue(e),t.getType(e)]);if(this._attributes.size<r.length)throw new Error("duplicated attribute names")}}set(t,r,e){this._attributes.set(t,[e,r])}delete(t){this._attributes.delete(t)}getFloat(t,r){return this.get(t,"float",r)}getInt(t,r){return this.get(t,"int",r)}getString(t,r){return this.get(t,"string",r)}getTensor(t,r){return this.get(t,"tensor",r)}getFloats(t,r){return this.get(t,"floats",r)}getInts(t,r){return this.get(t,"ints",r)}getStrings(t,r){return this.get(t,"strings",r)}getTensors(t,r){return this.get(t,"tensors",r)}get(t,r,e){let n=this._attributes.get(t);if(void 0===n){if(void 0!==e)return e;throw new Error(`required attribute not found: ${t}`)}if(n[1]!==r)throw new Error(`type mismatch: expected ${r} but got ${n[1]}`);return n[0]}static getType(t){let r=t instanceof q.onnx.AttributeProto?t.type:t.type();switch(r){case q.onnx.AttributeProto.AttributeType.FLOAT:return"float";case q.onnx.AttributeProto.AttributeType.INT:return"int";case q.onnx.AttributeProto.AttributeType.STRING:return"string";case q.onnx.AttributeProto.AttributeType.TENSOR:return"tensor";case q.onnx.AttributeProto.AttributeType.FLOATS:return"floats";case q.onnx.AttributeProto.AttributeType.INTS:return"ints";case q.onnx.AttributeProto.AttributeType.STRINGS:return"strings";case q.onnx.AttributeProto.AttributeType.TENSORS:return"tensors";default:throw new Error(`attribute type is not supported yet: ${q.onnx.AttributeProto.AttributeType[r]}`)}}static getValue(t){let r=t instanceof q.onnx.AttributeProto?t.type:t.type();if(r===q.onnx.AttributeProto.AttributeType.GRAPH||r===q.onnx.AttributeProto.AttributeType.GRAPHS)throw new Error("graph attribute is not supported yet");let e=this.getValueNoCheck(t);if(r===q.onnx.AttributeProto.AttributeType.INT&&Rt.isLong(e))return Rt.longToNumber(e);if(r===q.onnx.AttributeProto.AttributeType.INTS){let t=e,r=new Array(t.length);for(let e=0;e<t.length;e++){let n=t[e];r[e]=Rt.longToNumber(n)}return r}if(r===q.onnx.AttributeProto.AttributeType.TENSOR)return t instanceof q.onnx.AttributeProto?bt.fromProto(e):bt.fromOrtTensor(e);if(r===q.onnx.AttributeProto.AttributeType.TENSORS){if(t instanceof q.onnx.AttributeProto)return e.map((t=>bt.fromProto(t)));if(t instanceof Xt.Attribute)return e.map((t=>bt.fromOrtTensor(t)))}return r===q.onnx.AttributeProto.AttributeType.STRING&&t instanceof q.onnx.AttributeProto?kr(e):r===q.onnx.AttributeProto.AttributeType.STRINGS&&t instanceof q.onnx.AttributeProto?e.map(kr):e}static getValueNoCheck(t){return t instanceof q.onnx.AttributeProto?this.getValueNoCheckFromOnnxFormat(t):this.getValueNoCheckFromOrtFormat(t)}static getValueNoCheckFromOnnxFormat(t){switch(t.type){case q.onnx.AttributeProto.AttributeType.FLOAT:return t.f;case q.onnx.AttributeProto.AttributeType.INT:return t.i;case q.onnx.AttributeProto.AttributeType.STRING:return t.s;case q.onnx.AttributeProto.AttributeType.TENSOR:return t.t;case q.onnx.AttributeProto.AttributeType.GRAPH:return t.g;case q.onnx.AttributeProto.AttributeType.FLOATS:return t.floats;case q.onnx.AttributeProto.AttributeType.INTS:return t.ints;case q.onnx.AttributeProto.AttributeType.STRINGS:return t.strings;case q.onnx.AttributeProto.AttributeType.TENSORS:return t.tensors;case q.onnx.AttributeProto.AttributeType.GRAPHS:return t.graphs;default:throw new Error(`unsupported attribute type: ${q.onnx.AttributeProto.AttributeType[t.type]}`)}}static getValueNoCheckFromOrtFormat(t){switch(t.type()){case Xt.AttributeType.FLOAT:return t.f();case Xt.AttributeType.INT:return t.i();case Xt.AttributeType.STRING:return t.s();case Xt.AttributeType.TENSOR:return t.t();case Xt.AttributeType.GRAPH:return t.g();case Xt.AttributeType.FLOATS:return t.floatsArray();case Xt.AttributeType.INTS:{let r=[];for(let e=0;e<t.intsLength();e++)r.push(t.ints(e));return r}case Xt.AttributeType.STRINGS:{let r=[];for(let e=0;e<t.stringsLength();e++)r.push(t.strings(e));return r}case Xt.AttributeType.TENSORS:{let r=[];for(let e=0;e<t.tensorsLength();e++)r.push(t.tensors(e));return r}default:throw new Error(`unsupported attribute type: ${Xt.AttributeType[t.type()]}`)}}}})),zi,Qn,Wi,me,to,Vi,Ep=O((()=>{Pp(),Pr(),zi=rr(sr()),We(),Y(),Qn=F.experimental.fbs,Wi={from:(t,r)=>new Vi(t,r)},me=class{constructor(t){this._from=void 0,this._to=[],this.tensor=void 0,this.type=void 0,t&&(this.type=At.tensorValueTypeFromProto(t.type.tensorType))}get from(){return this._from}get to(){return this._to}},to=class{constructor(t,r){t instanceof zi.onnx.NodeProto?(this.name=t.name,this.opType=t.opType,this.attributes=new Ur(t.attribute)):t instanceof Qn.Node&&(this.name=r??t.name(),this.opType=t.opType(),this.attributes=new Ur(At.tensorAttributesFromORTFormat(t))),this.inputs=[],this.outputs=[],this.executeNode=!0}},Vi=class{constructor(t,r){if(!t)throw new TypeError("graph is empty");this.buildGraph(t),this.transformGraph(r),this.checkIsAcyclic()}getInputIndices(){return this._allInputIndices}getInputNames(){return this._allInputNames}getOutputIndices(){return this._allOutputIndices}getOutputNames(){return this._allOutputNames}getValues(){return this._allData}getNodes(){return this._nodes}buildGraph(t){if(t instanceof zi.onnx.GraphProto)this.buildGraphFromOnnxFormat(t);else{if(!(t instanceof Qn.Graph))throw new TypeError("Graph type is not supported.");this.buildGraphFromOrtFormat(t)}}buildGraphFromOnnxFormat(t){let r=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];let e=new Map;if(!t.input)throw new Error("missing information in graph: input");let n=[];for(let e of t.input){if(r.has(e.name))throw new Error(`duplicated input name: ${e.name}`);let t=this._allData.push(new me(e))-1;r.set(e.name,t),n.push(e.name)}if(!t.initializer)throw new Error("missing information in graph: initializer");for(let e of t.initializer){let t=r.get(e.name);if(void 0===t){let n=new me;n.type={shape:{dims:At.tensorDimsFromProto(e.dims)},tensorType:At.tensorDataTypeFromProto(e.dataType)},t=this._allData.push(n)-1,r.set(e.name,t)}this._allData[t]._from=-1,this._allData[t].tensor=bt.fromProto(e)}for(let t=0;t<this._allData.length;t++)this._allData[t].tensor||(this._allInputIndices.push(t),this._allInputNames.push(n[t]));if(!t.output)throw new Error("missing information in graph: output");for(let e of t.output){if(r.has(e.name))throw new Error(`duplicated output name: ${e.name}`);let t=this._allData.push(new me(e))-1;r.set(e.name,t),this._allOutputIndices.push(t),this._allOutputNames.push(e.name)}if(!t.node)throw new Error("missing information in graph: node");for(let r of t.node){if(!r.name)for(let t=0;;t++){let n=`unnamed_${r.opType}_${t}`;if(!e.has(n)){r.name=n;break}}if(e.has(r.name))throw new Error(`duplicated node name: ${r.name}`);let t=this._nodes.push(new to(r))-1;e.set(r.name,t)}for(let e=0;e<this._nodes.length;e++){let n=this._nodes[e],d=t.node[e];if(!d.output)throw new Error(`missing output for node: ${d.name}`);for(let t of d.output){let o=r.get(t);if(typeof o>"u"&&(o=this._allData.push(new me)-1,r.set(t,o)),n.outputs.push(o),void 0!==this._allData[o]._from)throw new Error(`multiple nodes output to one data value: ${o}`);if(this._allData[o]._from=e,"Constant"===d.opType){if(!d.attribute||1!==d.attribute.length||!d.attribute[0].t)throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");if(!d.output||1!==d.output.length)throw new Error("missing output or incorrect number of outputs for this Constant operator");n.outputs.pop(),n.executeNode=!1,this._allData[o]._from=-1,this._allData[o].tensor=bt.fromProto(d.attribute[0].t)}}}for(let e=0;e<this._nodes.length;e++){let n=this._nodes[e],d=t.node[e];if(!d.input)throw new Error(`missing input for node: ${d.name}`);for(let t of d.input){let o=r.get(t);if(typeof o>"u"){if(""===t&&(3===d.input.length||4===d.input.length)&&"Resize"===d.opType)continue;throw new Error(`unrecognized input '${t}' for node: ${d.name}`)}n.inputs.push(o),this._allData[o]._to.push(e)}}return!0}buildGraphFromOrtFormat(t){let r=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];let e=new Map,n=[];for(let e=0;e<t.inputsLength();e++){let d=t.inputs(e);if(r.has(d))throw new Error(`duplicated input name: ${d}`);for(let e=0;e<t.nodeArgsLength();e++)if(t.nodeArgs(e)?.name()===d){let o=new me;if(t.nodeArgs(e)?.type()?.valueType()!==Qn.TypeInfoValue.tensor_type)throw new Error("Unexpected value type for the nodeArg.");let a=t.nodeArgs(e).type().value(new Qn.TensorTypeAndShape),l=At.tensorDataTypeFromProto(a.elemType()),i=a.shape(),A=[];for(let t=0;t<i.dimLength();t++)A.push(Rt.longToNumber(i.dim(t).value().dimValue()));o.type={shape:{dims:A},tensorType:l};let B=this._allData.push(o)-1;r.set(d,B),n.push(d)}}for(let e=0;e<t.initializersLength();e++){let n=t.initializers(e),d=r.get(n.name());if(void 0===d){let t=new me,e=At.tensorDimsFromORTFormat(n),o=At.tensorDataTypeFromProto(n.dataType());t.type={shape:{dims:e},tensorType:o},d=this._allData.push(t)-1,r.set(n.name(),d)}this._allData[d]._from=-1,this._allData[d].tensor=bt.fromOrtTensor(n)}for(let t=0;t<this._allData.length;t++)this._allData[t].tensor||(this._allInputIndices.push(t),this._allInputNames.push(n[t]));for(let e=0;e<t.outputsLength();e++){let n=t.outputs(e);if(r.has(n))throw new Error(`duplicated output name: ${n}`);let d=this._allData.push(new me)-1;r.set(n,d),this._allOutputIndices.push(d),this._allOutputNames.push(n)}if(!t.nodes)throw new Error("missing information in graph: node");for(let r=0;r<t.nodesLength();r++){let n=t.nodes(r),d=n.name();if(!d)for(let t=0;d=`unnamed_${n.opType()}_${t}`,e.has(d);t++);if(e.has(d))throw new Error(`duplicated node name: ${d}`);let o=this._nodes.push(new to(n,d))-1;e.set(d,o)}for(let e=0;e<this._nodes.length;e++){let n=this._nodes[e],d=t.nodes(e);if(null==d)throw new Error(`No node exists at index ${e}`);if(0===d?.outputsLength())throw new Error(`missing output for node: ${d.name}`);for(let t=0;t<d?.outputsLength();t++){let o=d?.outputs(t),a=r.get(o);if(typeof a>"u"&&(a=this._allData.push(new me)-1,r.set(o,a)),n.outputs.push(a),void 0!==this._allData[a]._from)throw new Error(`multiple nodes output to one data value: ${a}`);if(this._allData[a]._from=e,"Constant"===d.opType()){if(1!==d.attributesLength()||!d.attributes(0).t())throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");if(1!==d.outputsLength())throw new Error("missing output or incorrect number of outputs for this Constant operator");n.outputs.pop(),n.executeNode=!1,this._allData[a]._from=-1,this._allData[a].tensor=bt.fromOrtTensor(d.attributes(0).t())}}}for(let e=0;e<this._nodes.length;e++){let n=this._nodes[e],d=t.nodes(e);if(0===d.inputsLength())throw new Error(`missing input for node: ${d.name}`);for(let t=0;t<d.inputsLength();t++){let o=d.inputs(t),a=r.get(o);if(typeof a>"u")throw new Error(`unrecognized input '${o}' for node: ${d.name()}`);n.inputs.push(a),this._allData[a]._to.push(e)}}}checkIsAcyclic(){let t=new Set;this._allInputIndices.forEach((r=>{this._allData[r]._to.forEach((r=>{t.add(r)}))}));let r=Array.from(t),e=new Array(this._nodes.length).fill("white");for(;r.length>0;){let t=r.pop();"gray"===e[t]?e[t]="black":(r.push(t),e[t]="gray",this._nodes[t].outputs.forEach((n=>{let d=this._allData[n];if(typeof d.tensor<"u")throw new Error("node outputs should not be initialized");if(d._from!==t)throw new Error("from property of the Value object doesn't match index of Node being processed");d._to.forEach((t=>{if("gray"===e[t])throw new Error("model graph is cyclic");"white"===e[t]&&r.push(t)}))})))}}transformGraph(t){this.removeAllIdentityNodes(),this.removeAllDropoutNodes(),this.fuseConvActivationNodes(),t&&t.transformGraph(this),this.finalizeGraph()}finalizeGraph(){let t=0,r=new Array(this._nodes.length,0),e=0;for(let t=0;t<this._nodes.length;t++)r[t]=e,this._nodes[t].executeNode?(e!==t&&(this._nodes[e]=this._nodes[t]),e++):this._nodes[t].outputs.forEach((t=>{this._allData[t]._from=-2}));this._nodes.splice(e,this._nodes.length-e);for(let t=0;t<this._allData.length;t++){let e=this._allData[t];void 0!==e._from&&-1!==e._from&&-2!==e._from&&(e._from=r[e._from]);for(let t=0;t<e._to.length;t++){if(!(e._to[t]>=0))throw new Error("Trying to update a removed node");e._to[t]=r[e._to[t]]}}t=0;for(let r=0;r<this._allData.length;r++)if(-2!==this._allData[r].from||-1!==this._allOutputIndices.indexOf(r+t)){if(t>0){let e=-1;void 0!==this._allData[r].from&&-1!==this._allData[r].from?(e=this._nodes[this._allData[r].from].outputs.indexOf(r+t),-1!==e&&(this._nodes[this._allData[r].from].outputs[e]=r)):(e=this._allInputIndices.indexOf(r+t),-1!==e&&(this._allInputIndices[e]=r)),this._allData[r].to.forEach((n=>{e=this._nodes[n].inputs.indexOf(r+t),-1!==e&&(this._nodes[n].inputs[e]=r)})),0===this._allData[r].to.length&&(e=this._allOutputIndices.indexOf(r+t),-1!==e&&(this._allOutputIndices[e]=r))}}else t++,this._allData.splice(r,1),r--}deleteNode(t){let r=this._nodes[t];if(r.outputs.length>1)for(let t=1;t<r.outputs.length;t++)if(this._allData[r.outputs[t]].to.length>0)throw new Error("Node deletion with more than one output connected to other nodes is not supported. ");r.executeNode=!1;let e=r.inputs[0],n=r.outputs[0],d=this._allData[n].to;for(let e=0;e<r.inputs.length;e++){let n=this._allData[r.inputs[e]].to.indexOf(t);if(-1===n)throw new Error("The Value object doesn't have the current Node in it's 'to' property ");this._allData[r.inputs[e]].to.splice(n,1)}this._allData[n]._to=[];let o=this._allOutputIndices.indexOf(n);if(-1!==o&&(this._allOutputIndices[o]=e),d&&d.length>0)for(let t of d){let r=this._nodes[t].inputs.indexOf(n);if(-1===r)throw new Error("The Node object doesn't have the output Value in it's 'inputs' property ");this._nodes[t].inputs[r]=e,this._allData[e].to.push(t)}}removeAllDropoutNodes(){let t=0;for(let r of this._nodes){if("Dropout"===r.opType){if(1!==r.inputs.length)throw new Error("Dropout nodes should only contain one input. ");if(1!==r.outputs.length&&2!==r.outputs.length)throw new Error("Dropout nodes should contain either 1 or 2 output(s)");if(2===r.outputs.length&&0!==this._allData[r.outputs[1]]._to.length)throw new Error("Dropout nodes's second output should not be referenced by other nodes");this.deleteNode(t)}t++}}removeAllIdentityNodes(){let t=0;for(let r of this._nodes)"Identity"===r.opType&&this.deleteNode(t),t++}isActivation(t){switch(t.opType){case"Relu":case"Sigmoid":case"Clip":return!0;default:return!1}}fuseConvActivationNodes(){for(let t of this._nodes)if("Conv"===t.opType){let r=this._allData[t.outputs[0]]._to;if(1===r.length&&this.isActivation(this._nodes[r[0]])){let e=this._nodes[r[0]];if("Clip"===e.opType)if(1===e.inputs.length)try{t.attributes.set("activation_params","floats",[e.attributes.getFloat("min"),e.attributes.getFloat("max")])}catch{t.attributes.set("activation_params","floats",[Ve,ze])}else{if(!(e.inputs.length>=3&&void 0!==this._allData[e.inputs[1]].tensor&&void 0!==this._allData[e.inputs[2]].tensor))continue;t.attributes.set("activation_params","floats",[this._allData[e.inputs[1]].tensor.floatData[0],this._allData[e.inputs[2]].tensor.floatData[0]])}t.attributes.set("activation","string",e.opType),this.deleteNode(r[0])}}}}})),Dp,vg,eo,Lp=O((()=>{wn(),Ep(),Pr(),Dp=rr(sr()),Y(),vg=F.experimental.fbs,eo=class{constructor(){}load(t,r,e){let n;if(!e)try{return void this.loadFromOnnxFormat(t,r)}catch(t){if(void 0!==e)throw t;n=t}try{this.loadFromOrtFormat(t,r)}catch(t){throw void 0!==e?t:new Error(`Failed to load model as ONNX format: ${n}\nas ORT format: ${t}`)}}loadFromOnnxFormat(t,r){let e=Dp.onnx.ModelProto.decode(t);if(Rt.longToNumber(e.irVersion)<3)throw new Error("only support ONNX model with IR_VERSION>=3");this._opsets=e.opsetImport.map((t=>({domain:t.domain,version:Rt.longToNumber(t.version)}))),this._graph=Wi.from(e.graph,r)}loadFromOrtFormat(t,r){let e=new w.ByteBuffer(t),n=vg.InferenceSession.getRootAsInferenceSession(e).model();if(Rt.longToNumber(n.irVersion())<3)throw new Error("only support ONNX model with IR_VERSION>=3");this._opsets=[];for(let t=0;t<n.opsetImportLength();t++){let r=n.opsetImport(t);this._opsets.push({domain:r?.domain(),version:Rt.longToNumber(r.version())})}this._graph=Wi.from(n.graph(),r)}get graph(){return this._graph}get opsets(){return this._opsets}}})),ro,$p=O((()=>{Sp(),Ap(),Ut(),Lp(),ro=class{constructor(t={}){this._initialized=!1,this.backendHint=t.backendHint,this.profiler=xn.create(t.profiler),this.context={profiler:this.profiler,graphInputTypes:[],graphInputDims:[]}}get inputNames(){return this._model.graph.getInputNames()}get outputNames(){return this._model.graph.getOutputNames()}startProfiling(){this.profiler.start()}endProfiling(){this.profiler.stop()}async loadModel(t,r,e){await this.profiler.event("session","Session.loadModel",(async()=>{let n=await Mi(this.backendHint);if(this.sessionHandler=n.createSessionHandler(this.context),this._model=new eo,"string"==typeof t){let r=t.endsWith(".ort");{let e=await(await fetch(t)).arrayBuffer();this.initialize(new Uint8Array(e),r)}}else if(ArrayBuffer.isView(t))this.initialize(t);else{let n=new Uint8Array(t,r||0,e||t.byteLength);this.initialize(n)}}))}initialize(t,r){if(this._initialized)throw new Error("already initialized");this.profiler.event("session","Session.initialize",(()=>{let e=this.sessionHandler.transformGraph?this.sessionHandler:void 0;this._model.load(t,e,r),this.sessionHandler.onGraphInitialized&&this.sessionHandler.onGraphInitialized(this._model.graph),this.initializeOps(this._model.graph),this._executionPlan=new Zn(this._model.graph,this._ops,this.profiler)})),this._initialized=!0}async run(t){if(!this._initialized)throw new Error("session not initialized yet");return this.profiler.event("session","Session.run",(async()=>{let r=this.normalizeAndValidateInputs(t),e=await this._executionPlan.execute(this.sessionHandler,r);return this.createOutput(e)}))}normalizeAndValidateInputs(t){let r=this._model.graph.getInputNames();if(Array.isArray(t)){if(t.length!==r.length)throw new Error(`incorrect input array length: expected ${r.length} but got ${t.length}`)}else{if(t.size!==r.length)throw new Error(`incorrect input map size: expected ${r.length} but got ${t.size}`);let e=new Array(t.size),n=0;for(let d=0;d<r.length;++d){let o=t.get(r[d]);if(!o)throw new Error(`missing input tensor for: '${name}'`);e[n++]=o}t=e}if(this.context.graphInputTypes&&0!==this.context.graphInputTypes.length&&this.context.graphInputDims&&0!==this.context.graphInputDims.length)this.validateInputTensorDims(this.context.graphInputDims,t,!1);else{let r=this._model.graph.getInputIndices(),e=this._model.graph.getValues(),n=new Array(r.length);for(let d=0;d<r.length;++d){let o=e[r[d]];n[d]=o.type.shape.dims,this.context.graphInputTypes.push(o.type.tensorType),this.context.graphInputDims.push(t[d].dims)}this.validateInputTensorDims(n,t,!0)}return this.validateInputTensorTypes(this.context.graphInputTypes,t),t}validateInputTensorTypes(t,r){for(let e=0;e<r.length;e++){let n=t[e],d=r[e].type;if(n!==d)throw new Error(`input tensor[${e}] check failed: expected type '${n}' but got ${d}`)}}validateInputTensorDims(t,r,e){for(let n=0;n<r.length;n++){let d=t[n],o=r[n].dims;if(!this.compareTensorDims(d,o,e))throw new Error(`input tensor[${n}] check failed: expected shape '[${d.join(",")}]' but got [${o.join(",")}]`)}}compareTensorDims(t,r,e){if(t.length!==r.length)return!1;for(let n=0;n<t.length;++n)if(t[n]!==r[n]&&(!e||0!==t[n]))return!1;return!0}createOutput(t){let r=this._model.graph.getOutputNames();if(t.length!==r.length)throw new Error("expected number of outputs do not match number of generated outputs");let e=new Map;for(let n=0;n<r.length;++n)e.set(r[n],t[n]);return e}initializeOps(t){let r=t.getNodes();this._ops=new Array(r.length);for(let e=0;e<r.length;e++)this._ops[e]=this.sessionHandler.resolve(r[e],this._model.opsets,t)}}})),no,kp=O((()=>{Yt(),We(),no=class{constructor(t){this.session=t,this.inputNames=this.session.inputNames,this.outputNames=this.session.outputNames}async dispose(){}async run(t,r,e){let n=new Map;for(let r in t)if(Object.hasOwnProperty.call(t,r)){let e=t[r];n.set(r,new bt(e.dims,e.type,void 0,void 0,e.data))}let d=await this.session.run(n),o={};return d.forEach(((t,r)=>{o[r]=new yt(t.type,t.data,t.dims)})),o}startProfiling(){this.session.startProfiling()}endProfiling(){this.session.endProfiling()}}})),Bp={};Or(Bp,{onnxjsBackend:()=>Ig});var Ig,Fp=O((()=>{$p(),kp(),Ig=new class{async init(){}async createInferenceSessionHandler(t,r){let e=new ro(r);return await e.loadModel(t),new no(e)}}})),oo=O((()=>{})),Rp={};Or(Rp,{default:()=>_g});var Cp,Np,_g,Gp=O((()=>{qi(),Ke(),Vr(),Cp="ort-wasm-proxy-worker",(Np=globalThis.self?.name===Cp)&&(self.onmessage=t=>{let{type:r,in:e}=t.data;try{switch(r){case"init-wasm":io(e.wasm).then((()=>{ao(e).then((()=>{postMessage({type:r})}),(t=>{postMessage({type:r,err:t})}))}),(t=>{postMessage({type:r,err:t})}));break;case"init-ep":{let{epName:t,env:n}=e;so(n,t).then((()=>{postMessage({type:r})}),(t=>{postMessage({type:r,err:t})}));break}case"copy-from":{let{buffer:t}=e,n=zr(t);postMessage({type:r,out:n});break}case"create":{let{model:t,options:n}=e;uo(t,n).then((t=>{postMessage({type:r,out:t})}),(t=>{postMessage({type:r,err:t})}));break}case"release":lo(e),postMessage({type:r});break;case"run":{let{sessionId:t,inputIndices:n,inputs:d,outputIndices:o,options:a}=e;fo(t,n,d,o,new Array(o.length).fill(null),a).then((t=>{t.some((t=>"cpu"!==t[3]))?postMessage({type:r,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:r,out:t},po([...d,...t]))}),(t=>{postMessage({type:r,err:t})}));break}case"end-profiling":co(e),postMessage({type:r})}}catch(t){postMessage({type:r,err:t})}}),_g=Np?null:t=>new Worker(t??br,{type:"module",name:Cp})})),Up={};Or(Up,{default:()=>Og});var ji,Mp,Og,Vp=O((()=>{ji=_documentCurrentScript&&"SCRIPT"===_documentCurrentScript.tagName.toUpperCase()&&_documentCurrentScript.src||new URL("content.js",document.baseURI).href,Mp=async function(t={}){function r(){return R.buffer!=E.buffer&&f(),E}function e(){return R.buffer!=E.buffer&&f(),H}function n(){return R.buffer!=E.buffer&&f(),Y}function d(){return R.buffer!=E.buffer&&f(),V}function o(){return R.buffer!=E.buffer&&f(),v}var a,l,i=Object.assign({},t),A=new Promise(((t,r)=>{a=t,l=r})),B="object"==typeof window,s="function"==typeof importScripts,g=s&&"em-pthread"==self.name;i.mountExternalData=(t,r)=>{t.startsWith("./")&&(t=t.substring(2)),(i.Ua||(i.Ua=new Map)).set(t,r)},i.unmountExternalData=()=>{delete i.Ua};var p,C,u=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor,K=Object.assign({},i),c=(t,r)=>{throw r},Q="";(B||s)&&(s?Q=self.location.href:typeof document<"u"&&document.currentScript&&(Q=document.currentScript.src),ji&&(Q=ji),Q=Q.startsWith("blob:")?"":Q.substr(0,Q.replace(/[?#].*/,"").lastIndexOf("/")+1),s&&(C=t=>{var r=new XMLHttpRequest;return r.open("GET",t,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)}),p=(t,r,e)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?r(n.response):e()},n.onerror=e,n.send(null)});var W,w=console.log.bind(console),b=console.error.bind(console),F=w,h=b;if(Object.assign(i,K),K=null,g){let t=function(r){try{var e=r.data,n=e.cmd;if("load"===n){let r=[];self.onmessage=t=>r.push(t),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let e of r)t(e);self.onmessage=t};for(let t of e.handlers)i[t]&&!i[t].proxy||(i[t]=(...r)=>{postMessage({Za:"callHandler",kb:t,args:r})},"print"==t&&(F=i[t]),"printErr"==t&&(h=i[t]));R=e.wasmMemory,f(),m(e.wasmModule)}else if("run"===n){Dr(e.pthread_ptr,0,0,1,0,0),kt(e.pthread_ptr),Kt(),st(),G||=!0;try{Qt(e.start_routine,e.arg)}catch(t){if("unwind"!=t)throw t}}else"cancel"===n?Tr()&&Mr(-1):"setimmediate"!==e.target&&("checkMailbox"===n?G&&Mt():n&&(h(`worker: received unknown command ${n}`),h(e)))}catch(t){throw xr(),t}};var m,G=!1;h=function(...t){t=t.join(" "),console.error(t)},self.alert=function(...t){postMessage({Za:"alert",text:t.join(" "),nb:Tr()})},i.instantiateWasm=(t,r)=>new Promise((t=>{m=e=>{e=new WebAssembly.Instance(e,j()),r(e),t()}})),self.onunhandledrejection=t=>{throw t.reason||t},self.onmessage=t}i.wasmBinary&&(W=i.wasmBinary);var R,Z,X,E,H,Y,V,y,v,S=!1;function f(){var t=R.buffer;i.HEAP8=E=new Int8Array(t),i.HEAP16=new Int16Array(t),i.HEAPU8=H=new Uint8Array(t),i.HEAPU16=new Uint16Array(t),i.HEAP32=Y=new Int32Array(t),i.HEAPU32=V=new Uint32Array(t),i.HEAPF32=new Float32Array(t),i.HEAPF64=v=new Float64Array(t),i.HEAP64=y=new BigInt64Array(t),i.HEAPU64=new BigUint64Array(t)}if(!g){if(!((R=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof u))throw h("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");f()}var U=[],N=[],L=[],T=0,I=null;function D(){if(0==--T&&I){var t=I;I=null,t()}}function x(t){throw h(t="Aborted("+t+")"),S=!0,X=1,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),l(t),t}var J,k=t=>t.startsWith("data:application/octet-stream;base64,"),M=t=>t.startsWith("file://");function O(t){if(t==J&&W)return new Uint8Array(W);if(C)return C(t);throw"both async and sync fetching of the wasm failed"}function z(t,r,e){return function(t){if(!W&&(B||s)){if("function"==typeof fetch&&!M(t))return fetch(t,{credentials:"same-origin"}).then((r=>{if(!r.ok)throw`failed to load wasm binary file at '${t}'`;return r.arrayBuffer()})).catch((()=>O(t)));if(p)return new Promise(((r,e)=>{p(t,(t=>r(new Uint8Array(t))),e)}))}return Promise.resolve().then((()=>O(t)))}(t).then((t=>WebAssembly.instantiate(t,r))).then(e,(t=>{h(`failed to asynchronously prepare wasm: ${t}`),x(t)}))}function j(){return{a:{j:q,b:wt,E:Ft,g:Rt,V:Zt,A:Yt,C:Vt,W:yt,T:vt,L:St,S:ft,o:Ut,B:Nt,y:Lt,U:Tt,z:It,_:Dt,Z:xt,P:Jt,w:Ot,F:jt,k:Pt,O:kt,Y:qt,I:_t,J:er,K:nr,G:dr,H:or,v:ar,q:ir,l:Ar,p:Br,e:sr,X:pr,x:Cr,d:gr,f:ur,i:Kr,u:cr,t:br,s:Fr,Q:Rr,R:Zr,D:ot,h:Xr,n:Er,M:Hr,m:Vr,a:R,r:nt,N:fr,c:Ur}}}var P={837620:(t,r,n,d,o)=>{if(void 0===i||!i.Ua)return 1;if((t=Gt(t>>>0)).startsWith("./")&&(t=t.substring(2)),!(t=i.Ua.get(t)))return 2;if(d>>>=0,(r>>>=0)+(n>>>=0)>t.byteLength)return 3;try{let a=t.subarray(r,r+n);switch(o){case 0:e().set(a,d>>>0);break;case 1:i.mb(d,a);break;default:return 4}return 0}catch{return 4}},838303:()=>typeof wasmOffsetConverter<"u"};function q(){return typeof wasmOffsetConverter<"u"}function _(t){this.name="ExitStatus",this.message=`Program terminated with exit(${t})`,this.status=t}var $=t=>{t.terminate(),t.onmessage=()=>{}},tt=t=>{0==at.length&&(pt(),gt(at[0]));var r=at.pop();if(!r)return 6;lt.push(r),At[t.Ra]=r,r.Ra=t.Ra;var e={cmd:"run",start_routine:t.cb,arg:t.ab,pthread_ptr:t.Ra};return r.postMessage(e,t.ib),0},rt=0,et=(t,r,...e)=>{for(var n=2*e.length,d=qr(),a=Pr(8*n),l=a>>>3,i=0;i<e.length;i++){var A=e[i];"bigint"==typeof A?(y[l+2*i]=1n,y[l+2*i+1]=A):(y[l+2*i]=0n,o()[l+2*i+1>>>0]=A)}return t=Jr(t,0,n,a,r),jr(d),t};function nt(t){if(g)return et(0,1,t);if(X=t,!(0<rt)){for(var r of lt)$(r);for(r of at)$(r);at=[],lt=[],At=[],S=!0}c(0,new _(t))}function dt(t){if(g)return et(1,0,t);ot(t)}var ot=t=>{if(X=t,g)throw dt(t),"unwind";nt(t)},at=[],lt=[],it=[],At={},Bt=t=>{var r=t.Ra;delete At[r],at.push(t),lt.splice(lt.indexOf(t),1),t.Ra=0,kr(r)};function st(){it.forEach((t=>t()))}var gt=t=>new Promise((r=>{t.onmessage=e=>{var n=(e=e.data).cmd;if(e.targetThread&&e.targetThread!=Tr()){var d=At[e.targetThread];d?d.postMessage(e,e.transferList):h(`Internal error! Worker sent a message "${n}" to target pthread ${e.targetThread}, but that thread no longer exists!`)}else"checkMailbox"===n?Mt():"spawnThread"===n?tt(e):"cleanupThread"===n?Bt(At[e.thread]):"killThread"===n?(e=e.thread,n=At[e],delete At[e],$(n),kr(e),lt.splice(lt.indexOf(n),1),n.Ra=0):"cancelThread"===n?At[e.thread].postMessage({cmd:"cancel"}):"loaded"===n?(t.loaded=!0,r(t)):"alert"===n?alert(`Thread ${e.threadId}: ${e.text}`):"setimmediate"===e.target?t.postMessage(e):"callHandler"===n?i[e.handler](...e.args):n&&h(`worker sent an unknown command ${n}`)},t.onerror=t=>{throw h(`worker sent an error! ${t.filename}:${t.lineno}: ${t.message}`),t};var e,n=[];for(e of[])i.hasOwnProperty(e)&&n.push(e);t.postMessage({cmd:"load",handlers:n,wasmMemory:R,wasmModule:Z})}));function pt(){var t=new Worker(new URL(_documentCurrentScript&&"SCRIPT"===_documentCurrentScript.tagName.toUpperCase()&&_documentCurrentScript.src||new URL("content.js",document.baseURI).href),{type:"module",workerData:"em-pthread",name:"em-pthread"});at.push(t)}var Ct,ut=t=>{for(;0<t.length;)t.shift()(i)},Kt=()=>{var t=Tr(),r=d()[t+52>>>2>>>0];t=d()[t+56>>>2>>>0],zr(r,r-t),jr(r)},ct=[],Qt=(t,r)=>{rt=0;var e=ct[t];e||(t>=ct.length&&(ct.length=t+1),ct[t]=e=Ct.get(t)),t=e(r),0<rt?X=t:Mr(t)};class Wt{constructor(t){this.Xa=t-24}}function wt(t,r,e){var n=new Wt(t>>>=0);throw r>>>=0,e>>>=0,d()[n.Xa+16>>>2>>>0]=0,d()[n.Xa+4>>>2>>>0]=r,d()[n.Xa+8>>>2>>>0]=e,t}function bt(t,r,e,n){return g?et(2,1,t,r,e,n):Ft(t,r,e,n)}function Ft(t,r,e,n){if(t>>>=0,r>>>=0,e>>>=0,n>>>=0,void 0===u)return h("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var d=[];return g&&0===d.length?bt(t,r,e,n):(t={cb:e,Ra:t,ab:n,ib:d},g?(t.Za="spawnThread",postMessage(t,d),0):tt(t))}var ht=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,mt=(t,r,e)=>{var n=(r>>>=0)+e;for(e=r;t[e]&&!(e>=n);)++e;if(16<e-r&&t.buffer&&ht)return ht.decode(t.buffer instanceof u?t.slice(r,e):t.subarray(r,e));for(n="";r<e;){var d=t[r++];if(128&d){var o=63&t[r++];if(192==(224&d))n+=String.fromCharCode((31&d)<<6|o);else{var a=63&t[r++];65536>(d=224==(240&d)?(15&d)<<12|o<<6|a:(7&d)<<18|o<<12|a<<6|63&t[r++])?n+=String.fromCharCode(d):(d-=65536,n+=String.fromCharCode(55296|d>>10,56320|1023&d))}}else n+=String.fromCharCode(d)}return n},Gt=(t,r)=>(t>>>=0)?mt(e(),t,r):"";function Rt(t,r,e){return g?et(3,1,t,r,e):0}function Zt(t,r){if(g)return et(4,1,t,r)}var Xt=t=>{for(var r=0,e=0;e<t.length;++e){var n=t.charCodeAt(e);127>=n?r++:2047>=n?r+=2:55296<=n&&57343>=n?(r+=4,++e):r+=3}return r},Et=(t,r,e,n)=>{if(!(0<n))return 0;var d=e>>>=0;n=e+n-1;for(var o=0;o<t.length;++o){var a=t.charCodeAt(o);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),127>=a){if(e>=n)break;r[e++>>>0]=a}else{if(2047>=a){if(e+1>=n)break;r[e++>>>0]=192|a>>6}else{if(65535>=a){if(e+2>=n)break;r[e++>>>0]=224|a>>12}else{if(e+3>=n)break;r[e++>>>0]=240|a>>18,r[e++>>>0]=128|a>>12&63}r[e++>>>0]=128|a>>6&63}r[e++>>>0]=128|63&a}}return r[e>>>0]=0,e-d},Ht=(t,r,n)=>Et(t,e(),r,n);function Yt(t,r){if(g)return et(5,1,t,r)}function Vt(t,r,e){if(g)return et(6,1,t,r,e)}function yt(t,r,e){return g?et(7,1,t,r,e):0}function vt(t,r){if(g)return et(8,1,t,r)}function St(t,r,e){if(g)return et(9,1,t,r,e)}function ft(t,r,e,n){if(g)return et(10,1,t,r,e,n)}function Ut(t,r,e,n){if(g)return et(11,1,t,r,e,n)}function Nt(t,r,e,n){if(g)return et(12,1,t,r,e,n)}function Lt(t){if(g)return et(13,1,t)}function Tt(t,r){if(g)return et(14,1,t,r)}function It(t,r,e){if(g)return et(15,1,t,r,e)}var Dt=()=>{x("")},xt=()=>1;function Jt(t){Dr(t>>>0,!s,1,!B,131072,!1),st()}function kt(t){t>>>=0,"function"==typeof Atomics.jb&&(Atomics.jb(n(),t>>>2,t).value.then(Mt),t+=128,Atomics.store(n(),t>>>2,1))}var Mt=()=>{var t=Tr();if(t&&(kt(t),t=Or,!S))try{if(t(),!(0<rt))try{g?Mr(X):ot(X)}catch(t){t instanceof _||"unwind"==t||c(0,t)}}catch(t){t instanceof _||"unwind"==t||c(0,t)}};function Ot(t,r){(t>>>=0)==r>>>0?setTimeout(Mt):g?postMessage({targetThread:t,cmd:"checkMailbox"}):(t=At[t])&&t.postMessage({cmd:"checkMailbox"})}var zt=[];function jt(t,r,e,n,d){for(r>>>=0,n/=2,zt.length=n,e=d>>>0>>>3,d=0;d<n;d++)zt[d]=y[e+2*d]?y[e+2*d+1]:o()[e+2*d+1>>>0];return(r?P[r]:Nr[t])(...zt)}function Pt(t){t>>>=0,g?postMessage({cmd:"cleanupThread",thread:t}):Bt(At[t])}function qt(t){}function _t(t,r){t=-9007199254740992>t||9007199254740992<t?NaN:Number(t),r>>>=0,t=new Date(1e3*t),n()[r>>>2>>>0]=t.getUTCSeconds(),n()[r+4>>>2>>>0]=t.getUTCMinutes(),n()[r+8>>>2>>>0]=t.getUTCHours(),n()[r+12>>>2>>>0]=t.getUTCDate(),n()[r+16>>>2>>>0]=t.getUTCMonth(),n()[r+20>>>2>>>0]=t.getUTCFullYear()-1900,n()[r+24>>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[r+28>>>2>>>0]=t}var $t=t=>t%4==0&&(t%100!=0||t%400==0),tr=[0,31,60,91,121,152,182,213,244,274,305,335],rr=[0,31,59,90,120,151,181,212,243,273,304,334];function er(t,r){t=-9007199254740992>t||9007199254740992<t?NaN:Number(t),r>>>=0,t=new Date(1e3*t),n()[r>>>2>>>0]=t.getSeconds(),n()[r+4>>>2>>>0]=t.getMinutes(),n()[r+8>>>2>>>0]=t.getHours(),n()[r+12>>>2>>>0]=t.getDate(),n()[r+16>>>2>>>0]=t.getMonth(),n()[r+20>>>2>>>0]=t.getFullYear()-1900,n()[r+24>>>2>>>0]=t.getDay();var e=($t(t.getFullYear())?tr:rr)[t.getMonth()]+t.getDate()-1|0;n()[r+28>>>2>>>0]=e,n()[r+36>>>2>>>0]=-60*t.getTimezoneOffset(),e=new Date(t.getFullYear(),6,1).getTimezoneOffset();var d=new Date(t.getFullYear(),0,1).getTimezoneOffset();t=0|(e!=d&&t.getTimezoneOffset()==Math.min(d,e)),n()[r+32>>>2>>>0]=t}function nr(t){t>>>=0;var r=new Date(n()[t+20>>>2>>>0]+1900,n()[t+16>>>2>>>0],n()[t+12>>>2>>>0],n()[t+8>>>2>>>0],n()[t+4>>>2>>>0],n()[t>>>2>>>0],0),e=n()[t+32>>>2>>>0],d=r.getTimezoneOffset(),o=new Date(r.getFullYear(),6,1).getTimezoneOffset(),a=new Date(r.getFullYear(),0,1).getTimezoneOffset(),l=Math.min(a,o);return 0>e?n()[t+32>>>2>>>0]=+(o!=a&&l==d):0<e!=(l==d)&&(o=Math.max(a,o),r.setTime(r.getTime()+6e4*((0<e?l:o)-d))),n()[t+24>>>2>>>0]=r.getDay(),e=($t(r.getFullYear())?tr:rr)[r.getMonth()]+r.getDate()-1|0,n()[t+28>>>2>>>0]=e,n()[t>>>2>>>0]=r.getSeconds(),n()[t+4>>>2>>>0]=r.getMinutes(),n()[t+8>>>2>>>0]=r.getHours(),n()[t+12>>>2>>>0]=r.getDate(),n()[t+16>>>2>>>0]=r.getMonth(),n()[t+20>>>2>>>0]=r.getYear(),t=r.getTime(),BigInt(isNaN(t)?-1:t/1e3)}function dr(t,r,e,n,d,o,a){return g?et(16,1,t,r,e,n,d,o,a):-52}function or(t,r,e,n,d,o){if(g)return et(17,1,t,r,e,n,d,o)}function ar(t,r,e,o){t>>>=0,r>>>=0,e>>>=0,o>>>=0;var a=(new Date).getFullYear(),l=new Date(a,0,1),i=new Date(a,6,1);a=l.getTimezoneOffset();var A=i.getTimezoneOffset(),B=Math.max(a,A);d()[t>>>2>>>0]=60*B,n()[r>>>2>>>0]=+(a!=A),l=(t=t=>t.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(l),i=t(i),A<a?(Ht(l,e,17),Ht(i,o,17)):(Ht(l,o,17),Ht(i,e,17))}var lr=[];function ir(t,r,a){t>>>=0,r>>>=0,a>>>=0,lr.length=0;for(var l;l=e()[r++>>>0];){var i=105!=l;a+=(i&=112!=l)&&a%8?4:0,lr.push(112==l?d()[a>>>2>>>0]:106==l?y[a>>>3]:105==l?n()[a>>>2>>>0]:o()[a>>>3>>>0]),a+=i?8:4}return P[t](...lr)}var Ar=()=>{},Br=()=>Date.now();function sr(t,r){return h(Gt(t>>>0,r>>>0))}var gr,pr=()=>{throw rt+=1,"unwind"};function Cr(){return 4294901760}gr=()=>performance.timeOrigin+performance.now();var ur=()=>navigator.hardwareConcurrency;function Kr(){return x("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function cr(t){t>>>=0;var r=e().length;if(t<=r||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var d=r*(1+.2/n);d=Math.min(d,t+100663296);var o=Math;d=Math.max(t,d);t:{o=(o.min.call(o,4294901760,d+(65536-d%65536)%65536)-R.buffer.byteLength+65535)/65536;try{R.grow(o),f();var a=1;break t}catch{}a=void 0}if(a)return!0}return!1}var Qr=()=>(x("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),Wr={},wr=t=>{t.forEach((t=>{Qr()}))};function br(){var t=Error().stack.toString().split("\n");return"Error"==t[0]&&t.shift(),wr(t),Wr.$a=Qr(),Wr.bb=t,Wr.$a}function Fr(t,r,e){if(t>>>=0,r>>>=0,Wr.$a==t)var d=Wr.bb;else"Error"==(d=Error().stack.toString().split("\n"))[0]&&d.shift(),wr(d);for(var o=3;d[o]&&Qr()!=t;)++o;for(t=0;t<e&&d[t+o];++t)n()[r+4*t>>>2>>>0]=Qr();return t}var hr,mr={},Gr=()=>{if(!hr){var t,r={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(t in mr)void 0===mr[t]?delete r[t]:r[t]=mr[t];var e=[];for(t in r)e.push(`${t}=${r[t]}`);hr=e}return hr};function Rr(t,e){if(g)return et(18,1,t,e);t>>>=0,e>>>=0;var n=0;return Gr().forEach(((o,a)=>{var l=e+n;for(a=d()[t+4*a>>>2>>>0]=l,l=0;l<o.length;++l)r()[a++>>>0]=o.charCodeAt(l);r()[a>>>0]=0,n+=o.length+1})),0}function Zr(t,r){if(g)return et(19,1,t,r);t>>>=0,r>>>=0;var e=Gr();d()[t>>>2>>>0]=e.length;var n=0;return e.forEach((t=>n+=t.length+1)),d()[r>>>2>>>0]=n,0}function Xr(t){return g?et(20,1,t):52}function Er(t,r,e,n){return g?et(21,1,t,r,e,n):52}function Hr(t,r,e,n){return g?et(22,1,t,r,e,n):70}var Yr=[null,[],[]];function Vr(t,r,n,o){if(g)return et(23,1,t,r,n,o);r>>>=0,n>>>=0,o>>>=0;for(var a=0,l=0;l<n;l++){var i=d()[r>>>2>>>0],A=d()[r+4>>>2>>>0];r+=8;for(var B=0;B<A;B++){var s=e()[i+B>>>0],p=Yr[t];0===s||10===s?((1===t?F:h)(mt(p,0)),p.length=0):p.push(s)}a+=A}return d()[o>>>2>>>0]=a,0}var yr=[31,29,31,30,31,30,31,31,30,31,30,31],vr=[31,28,31,30,31,30,31,31,30,31,30,31],Sr=(t,e)=>{r().set(t,e>>>0)};function fr(t,r,e,o){function a(t,r,e){for(t="number"==typeof t?t.toString():t||"";t.length<r;)t=e[0]+t;return t}function l(t,r){return a(t,r,"0")}function i(t,r){function e(t){return 0>t?-1:0<t?1:0}var n;return 0===(n=e(t.getFullYear()-r.getFullYear()))&&0===(n=e(t.getMonth()-r.getMonth()))&&(n=e(t.getDate()-r.getDate())),n}function A(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function B(t){var r=t.Sa;for(t=new Date(new Date(t.Ta+1900,0,1).getTime());0<r;){var e=t.getMonth(),n=($t(t.getFullYear())?yr:vr)[e];if(!(r>n-t.getDate())){t.setDate(t.getDate()+r);break}r-=n-t.getDate()+1,t.setDate(1),11>e?t.setMonth(e+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return e=new Date(t.getFullYear()+1,0,4),r=A(new Date(t.getFullYear(),0,4)),e=A(e),0>=i(r,t)?0>=i(e,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}t>>>=0,r>>>=0,e>>>=0,o>>>=0;var s=d()[o+40>>>2>>>0];for(var g in o={gb:n()[o>>>2>>>0],fb:n()[o+4>>>2>>>0],Va:n()[o+8>>>2>>>0],Ya:n()[o+12>>>2>>>0],Wa:n()[o+16>>>2>>>0],Ta:n()[o+20>>>2>>>0],Qa:n()[o+24>>>2>>>0],Sa:n()[o+28>>>2>>>0],ob:n()[o+32>>>2>>>0],eb:n()[o+36>>>2>>>0],hb:s?Gt(s):""},e=Gt(e),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})e=e.replace(new RegExp(g,"g"),s[g]);var p,C,u="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),K="January February March April May June July August September October November December".split(" ");for(g in s={"%a":t=>u[t.Qa].substring(0,3),"%A":t=>u[t.Qa],"%b":t=>K[t.Wa].substring(0,3),"%B":t=>K[t.Wa],"%C":t=>l((t.Ta+1900)/100|0,2),"%d":t=>l(t.Ya,2),"%e":t=>a(t.Ya,2," "),"%g":t=>B(t).toString().substring(2),"%G":B,"%H":t=>l(t.Va,2),"%I":t=>(0==(t=t.Va)?t=12:12<t&&(t-=12),l(t,2)),"%j":t=>{for(var r=0,e=0;e<=t.Wa-1;r+=($t(t.Ta+1900)?yr:vr)[e++]);return l(t.Ya+r,3)},"%m":t=>l(t.Wa+1,2),"%M":t=>l(t.fb,2),"%n":()=>"\n","%p":t=>0<=t.Va&&12>t.Va?"AM":"PM","%S":t=>l(t.gb,2),"%t":()=>"\t","%u":t=>t.Qa||7,"%U":t=>l(Math.floor((t.Sa+7-t.Qa)/7),2),"%V":t=>{var r=Math.floor((t.Sa+7-(t.Qa+6)%7)/7);if(2>=(t.Qa+371-t.Sa-2)%7&&r++,r)53==r&&(4==(e=(t.Qa+371-t.Sa)%7)||3==e&&$t(t.Ta)||(r=1));else{r=52;var e=(t.Qa+7-t.Sa-1)%7;(4==e||5==e&&$t(t.Ta%400-1))&&r++}return l(r,2)},"%w":t=>t.Qa,"%W":t=>l(Math.floor((t.Sa+7-(t.Qa+6)%7)/7),2),"%y":t=>(t.Ta+1900).toString().substring(2),"%Y":t=>t.Ta+1900,"%z":t=>(0<=(t=t.eb)?"+":"-")+("0000"+((t=Math.abs(t)/60)/60*100+t%60)).slice(-4),"%Z":t=>t.hb,"%%":()=>"%"},e=e.replace(/%%/g,"\0\0"),s)e.includes(g)&&(e=e.replace(new RegExp(g,"g"),s[g](o)));return p=e=e.replace(/\0\0/g,"%"),C=Array(Xt(p)+1),Et(p,C,0,C.length),(g=C).length>r?0:(Sr(g,t),g.length-1)}function Ur(t,r,e,n){return fr(t>>>0,r>>>0,e>>>0,n>>>0)}g||function(){for(var t=i.numThreads-1;t--;)pt();U.unshift((()=>{var t;T++,t=()=>D(),g?t():Promise.all(at.map(gt)).then(t)}))}();var Nr=[nt,dt,bt,Rt,Zt,Yt,Vt,yt,vt,St,ft,Ut,Nt,Lt,Tt,It,dr,or,Rr,Zr,Xr,Er,Hr,Vr],Lr=function(){function t(t,r){return e=Lr=t.exports,n=t=>()=>t()>>>0,d=t=>r=>t(r)>>>0,(e=Object.assign({},e)).Ba=n(e.Ba),e.Ca=d(e.Ca),e.emscripten_main_runtime_thread_id=n(e.emscripten_main_runtime_thread_id),e.Oa=d(e.Oa),e.Pa=n(e.Pa),Lr=e,it.push(Lr.Ea),Ct=Lr.Fa,N.unshift(Lr.$),Z=r,D(),Lr;var e,n,d}var r,e,n,d=j();if(T++,i.instantiateWasm)try{return i.instantiateWasm(d,t)}catch(r){h(`Module.instantiateWasm callback failed with error: ${r}`),l(r)}return J||=i.locateFile?k("ort-wasm-simd-threaded.wasm")?"ort-wasm-simd-threaded.wasm":i.locateFile?i.locateFile("ort-wasm-simd-threaded.wasm",Q):Q+"ort-wasm-simd-threaded.wasm":new URL("ort-wasm-simd-threaded.wasm",_documentCurrentScript&&"SCRIPT"===_documentCurrentScript.tagName.toUpperCase()&&_documentCurrentScript.src||new URL("content.js",document.baseURI).href).href,(r=d,e=function(r){t(r.instance,r.module)},n=J,W||"function"!=typeof WebAssembly.instantiateStreaming||k(n)||M(n)||"function"!=typeof fetch?z(n,r,e):fetch(n,{credentials:"same-origin"}).then((t=>WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return h(`wasm streaming compile failed: ${t}`),h("falling back to ArrayBuffer instantiation"),z(n,r,e)}))))).catch(l),{}}();i._OrtInit=(t,r)=>(i._OrtInit=Lr.aa)(t,r),i._OrtGetLastError=(t,r)=>(i._OrtGetLastError=Lr.ba)(t,r),i._OrtCreateSessionOptions=(t,r,e,n,d,o,a,l,A,B)=>(i._OrtCreateSessionOptions=Lr.ca)(t,r,e,n,d,o,a,l,A,B),i._OrtAppendExecutionProvider=(t,r)=>(i._OrtAppendExecutionProvider=Lr.da)(t,r),i._OrtAddFreeDimensionOverride=(t,r,e)=>(i._OrtAddFreeDimensionOverride=Lr.ea)(t,r,e),i._OrtAddSessionConfigEntry=(t,r,e)=>(i._OrtAddSessionConfigEntry=Lr.fa)(t,r,e),i._OrtReleaseSessionOptions=t=>(i._OrtReleaseSessionOptions=Lr.ga)(t),i._OrtCreateSession=(t,r,e)=>(i._OrtCreateSession=Lr.ha)(t,r,e),i._OrtReleaseSession=t=>(i._OrtReleaseSession=Lr.ia)(t),i._OrtGetInputOutputCount=(t,r,e)=>(i._OrtGetInputOutputCount=Lr.ja)(t,r,e),i._OrtGetInputName=(t,r)=>(i._OrtGetInputName=Lr.ka)(t,r),i._OrtGetOutputName=(t,r)=>(i._OrtGetOutputName=Lr.la)(t,r),i._OrtFree=t=>(i._OrtFree=Lr.ma)(t),i._OrtCreateTensor=(t,r,e,n,d,o)=>(i._OrtCreateTensor=Lr.na)(t,r,e,n,d,o),i._OrtGetTensorData=(t,r,e,n,d)=>(i._OrtGetTensorData=Lr.oa)(t,r,e,n,d),i._OrtReleaseTensor=t=>(i._OrtReleaseTensor=Lr.pa)(t),i._OrtCreateRunOptions=(t,r,e,n)=>(i._OrtCreateRunOptions=Lr.qa)(t,r,e,n),i._OrtAddRunConfigEntry=(t,r,e)=>(i._OrtAddRunConfigEntry=Lr.ra)(t,r,e),i._OrtReleaseRunOptions=t=>(i._OrtReleaseRunOptions=Lr.sa)(t),i._OrtCreateBinding=t=>(i._OrtCreateBinding=Lr.ta)(t),i._OrtBindInput=(t,r,e)=>(i._OrtBindInput=Lr.ua)(t,r,e),i._OrtBindOutput=(t,r,e,n)=>(i._OrtBindOutput=Lr.va)(t,r,e,n),i._OrtClearBoundOutputs=t=>(i._OrtClearBoundOutputs=Lr.wa)(t),i._OrtReleaseBinding=t=>(i._OrtReleaseBinding=Lr.xa)(t),i._OrtRunWithBinding=(t,r,e,n,d)=>(i._OrtRunWithBinding=Lr.ya)(t,r,e,n,d),i._OrtRun=(t,r,e,n,d,o,a,l)=>(i._OrtRun=Lr.za)(t,r,e,n,d,o,a,l),i._OrtEndProfiling=t=>(i._OrtEndProfiling=Lr.Aa)(t);var Tr=()=>(Tr=Lr.Ba)();i._malloc=t=>(i._malloc=Lr.Ca)(t),i._free=t=>(i._free=Lr.Da)(t);var Ir,Dr=(t,r,e,n,d,o)=>(Dr=Lr.Ga)(t,r,e,n,d,o),xr=()=>(xr=Lr.Ha)(),Jr=(t,r,e,n,d)=>(Jr=Lr.Ia)(t,r,e,n,d),kr=t=>(kr=Lr.Ja)(t),Mr=t=>(Mr=Lr.Ka)(t),Or=()=>(Or=Lr.La)(),zr=(t,r)=>(zr=Lr.Ma)(t,r),jr=t=>(jr=Lr.Na)(t),Pr=t=>(Pr=Lr.Oa)(t),qr=()=>(qr=Lr.Pa)();function _r(){0<T||(g?(a(i),g||ut(N),startWorker(i)):(ut(U),0<T||Ir||(Ir=!0,i.calledRun=!0,S||(g||ut(N),a(i),g||ut(L)))))}return i.___start_em_js=838360,i.___stop_em_js=838421,i.stackSave=()=>qr(),i.stackRestore=t=>jr(t),i.stackAlloc=t=>Pr(t),i.UTF8ToString=Gt,i.stringToUTF8=Ht,i.lengthBytesUTF8=Xt,I=function t(){Ir||_r(),Ir||(I=t)},_r(),A},Og=Mp,"em-pthread"===globalThis.self?.name&&Mp()})),br,Sg,Ag,Pg,zp,Wp,Eg,Hp,Vr=O((()=>{oo(),br=(_documentCurrentScript&&"SCRIPT"===_documentCurrentScript.tagName.toUpperCase()&&_documentCurrentScript.src||new URL("content.js",document.baseURI).href)??(typeof document<"u"?document.currentScript?.src:typeof self<"u"?self.location?.href:void 0),Sg=typeof location>"u"?void 0:location.origin,Ag=(t,r)=>{try{let e=r??br;return(e?new URL(t,e):new URL(t)).origin===Sg}catch{return!1}},Pg=async t=>{let r=await(await fetch(t,{credentials:"same-origin"})).blob();return URL.createObjectURL(r)},zp=(Gp(),sn(Rp)).default,Wp=async()=>{if(!br)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Ag(br))return[void 0,zp()];let t=await Pg(br);return[t,zp(t)]},Eg=(Vp(),sn(Up)).default,Hp=async(t,r,e)=>[void 0,Eg]})),Xi,Ki,ho,qp,Dg,Lg,io,xt,Ke=O((()=>{Vr(),Ki=!1,ho=!1,qp=!1,Dg=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Lg=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},io=async t=>{if(Ki)return Promise.resolve();if(ho)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(qp)throw new Error("previous call to 'initializeWebAssembly()' failed.");ho=!0;let r=t.initTimeout,e=t.numThreads;if(!Lg())throw new Error("WebAssembly SIMD is not supported in the current environment.");let n=Dg();e>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),t.numThreads=e=1);let d=t.wasmPaths,o="string"==typeof d?d:void 0,a=d?.mjs,l=a?.href??a,i=d?.wasm,A=i?.href??i,B=t.wasmBinary,[s,g]=await Hp(l,o,e>1),p=!1,C=[];if(r>0&&C.push(new Promise((t=>{setTimeout((()=>{p=!0,t()}),r)}))),C.push(new Promise(((t,r)=>{let n={numThreads:e};B?n.wasmBinary=B:(A||o)&&(n.locateFile=(t,r)=>A??(o??r)+t),g(n).then((r=>{ho=!1,Ki=!0,Xi=r,t(),s&&URL.revokeObjectURL(s)}),(t=>{ho=!1,qp=!0,r(t)}))}))),await Promise.race(C),p)throw new Error(`WebAssembly backend initializing failed due to timeout: ${r}ms`)},xt=()=>{if(Ki&&Xi)return Xi;throw new Error("WebAssembly is not initialized yet.")}})),Tt,Wr,ht,mo=O((()=>{Ke(),Tt=(t,r)=>{let e=xt(),n=e.lengthBytesUTF8(t)+1,d=e._malloc(n);return e.stringToUTF8(t,d,n),r.push(d),d},Wr=(t,r,e,n)=>{if("object"==typeof t&&null!==t){if(e.has(t))throw new Error("Circular reference in options");e.add(t)}Object.entries(t).forEach((([t,d])=>{let o=r?r+t:t;if("object"==typeof d)Wr(d,o+".",e,n);else if("string"==typeof d||"number"==typeof d)n(o,d.toString());else{if("boolean"!=typeof d)throw new Error("Can't handle extra config type: "+typeof d);n(o,d?"1":"0")}}))},ht=t=>{let r=xt(),e=r.stackSave();try{let e=r.stackAlloc(8);r._OrtGetLastError(e,e+4);let n=r.HEAP32[e/4],d=r.HEAPU32[e/4+1],o=d?r.UTF8ToString(d):"";throw new Error(`${t} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{r.stackRestore(e)}}})),jp,Xp=O((()=>{Ke(),mo(),jp=t=>{let r=xt(),e=0,n=[],d=t||{};try{if(void 0===t?.logSeverityLevel)d.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===t?.logVerbosityLevel)d.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===t?.terminate&&(d.terminate=!1);let o=0;return void 0!==t?.tag&&(o=Tt(t.tag,n)),e=r._OrtCreateRunOptions(d.logSeverityLevel,d.logVerbosityLevel,!!d.terminate,o),0===e&&ht("Can't create run options."),void 0!==t?.extra&&Wr(t.extra,"",new WeakSet,((t,d)=>{let o=Tt(t,n),a=Tt(d,n);0!==r._OrtAddRunConfigEntry(e,o,a)&&ht(`Can't set a run config entry: ${t} - ${d}.`)})),[e,n]}catch(t){throw 0!==e&&r._OrtReleaseRunOptions(e),n.forEach((t=>r._free(t))),t}}})),$g,kg,Bg,Fg,Kp,Jp=O((()=>{Ke(),mo(),$g=t=>{switch(t){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}},kg=t=>{switch(t){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}},Bg=t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});let r=t.extra.session;r.use_ort_model_bytes_directly||(r.use_ort_model_bytes_directly="1"),t.executionProviders&&t.executionProviders.some((t=>"webgpu"===("string"==typeof t?t:t.name)))&&(t.enableMemPattern=!1)},Fg=(t,r,e)=>{for(let n of r){let r="string"==typeof n?n:n.name;switch(r){case"webnn":if(r="WEBNN","string"!=typeof n){let r=n?.deviceType;if(r){let n=Tt("deviceType",e),d=Tt(r,e);0!==xt()._OrtAddSessionConfigEntry(t,n,d)&&ht(`Can't set a session config entry: 'deviceType' - ${r}.`)}}break;case"webgpu":if(r="JS","string"!=typeof n){let r=n;if(r?.preferredLayout){if("NCHW"!==r.preferredLayout&&"NHWC"!==r.preferredLayout)throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${r.preferredLayout}`);let n=Tt("preferredLayout",e),d=Tt(r.preferredLayout,e);0!==xt()._OrtAddSessionConfigEntry(t,n,d)&&ht(`Can't set a session config entry: 'preferredLayout' - ${r.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${r}`)}let d=Tt(r,e);0!==xt()._OrtAppendExecutionProvider(t,d)&&ht(`Can't append execution provider: ${r}.`)}},Kp=t=>{let r=xt(),e=0,n=[],d=t||{};Bg(d);try{let t=$g(d.graphOptimizationLevel??"all"),o=kg(d.executionMode??"sequential"),a="string"==typeof d.logId?Tt(d.logId,n):0,l=d.logSeverityLevel??2;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log serverity level is not valid: ${l}`);let i=d.logVerbosityLevel??0;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log verbosity level is not valid: ${i}`);let A="string"==typeof d.optimizedModelFilePath?Tt(d.optimizedModelFilePath,n):0;if(e=r._OrtCreateSessionOptions(t,!!d.enableCpuMemArena,!!d.enableMemPattern,o,!!d.enableProfiling,0,a,l,i,A),0===e&&ht("Can't create session options."),d.executionProviders&&Fg(e,d.executionProviders,n),void 0!==d.enableGraphCapture){if("boolean"!=typeof d.enableGraphCapture)throw new Error(`enableGraphCapture must be a boolean value: ${d.enableGraphCapture}`);let t=Tt("enableGraphCapture",n),o=Tt(d.enableGraphCapture.toString(),n);0!==r._OrtAddSessionConfigEntry(e,t,o)&&ht(`Can't set a session config entry: 'enableGraphCapture' - ${d.enableGraphCapture}.`)}if(d.freeDimensionOverrides)for(let[t,o]of Object.entries(d.freeDimensionOverrides)){if("string"!=typeof t)throw new Error(`free dimension override name must be a string: ${t}`);if("number"!=typeof o||!Number.isInteger(o)||o<0)throw new Error(`free dimension override value must be a non-negative integer: ${o}`);let d=Tt(t,n);0!==r._OrtAddFreeDimensionOverride(e,d,o)&&ht(`Can't set a free dimension override: ${t} - ${o}.`)}return void 0!==d.extra&&Wr(d.extra,"",new WeakSet,((t,d)=>{let o=Tt(t,n),a=Tt(d,n);0!==r._OrtAddSessionConfigEntry(e,o,a)&&ht(`Can't set a session config entry: ${t} - ${d}.`)})),[e,n]}catch(t){throw 0!==e&&r._OrtReleaseSessionOptions(e),n.forEach((t=>r._free(t))),t}}})),Hr,Yp,qr,Zp,Qp,bo,go,td,Ji=O((()=>{Hr=t=>{switch(t){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${t}`)}},Yp=t=>{switch(t){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${t}`)}},qr=(t,r)=>{let e=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][t],n="number"==typeof r?r:r.reduce(((t,r)=>t*r),1);return e>0?Math.ceil(n*e):void 0},Zp=t=>{switch(t){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}},Qp=t=>{switch(t){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${t}`)}},bo=t=>"float32"===t||"float16"===t||"int32"===t||"int64"===t||"uint32"===t||"uint8"===t||"bool"===t||"uint4"===t||"int4"===t,go=t=>"float32"===t||"float16"===t||"int32"===t||"int64"===t||"uint32"===t||"uint64"===t||"int8"===t||"uint8"===t||"bool"===t,td=t=>{switch(t){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${t}`)}}})),jr,Yi=O((()=>{oo(),jr=async t=>{if("string"==typeof t){let r=await fetch(t);if(!r.ok)throw new Error(`failed to load external data file: ${t}`);let e=r.headers.get("Content-Length"),n=e?parseInt(e,10):0;if(n<1073741824)return new Uint8Array(await r.arrayBuffer());{if(!r.body)throw new Error(`failed to load external data file: ${t}, no response body.`);let e,d=r.body.getReader();try{e=new ArrayBuffer(n)}catch(t){if(!(t instanceof RangeError))throw t;{let t=Math.ceil(n/65536);e=new WebAssembly.Memory({initial:t,maximum:t}).buffer}}let o=0;for(;;){let{done:t,value:r}=await d.read();if(t)break;let n=r.byteLength;new Uint8Array(e,o,n).set(r),o+=n}return new Uint8Array(e,0,n)}}return t instanceof Blob?new Uint8Array(await t.arrayBuffer()):t instanceof Uint8Array?t:new Uint8Array(t)}})),Cg,ao,so,yr,Ng,zr,uo,lo,ed,fo,co,po,qi=O((()=>{Xp(),Jp(),Ji(),Ke(),mo(),Yi(),Cg=(t,r)=>{0!==xt()._OrtInit(t,r)&&ht("Can't initialize onnxruntime.")},ao=async t=>{Cg(t.wasm.numThreads,Qp(t.logLevel))},so=async(t,r)=>{},yr=new Map,Ng=t=>{let r=xt(),e=r.stackSave();try{let e=r.stackAlloc(8);return 0!==r._OrtGetInputOutputCount(t,e,e+4)&&ht("Can't get session input/output count."),[r.HEAP32[e/4],r.HEAP32[e/4+1]]}finally{r.stackRestore(e)}},zr=t=>{let r=xt(),e=r._malloc(t.byteLength);if(0===e)throw new Error(`Can't create a session. failed to allocate a buffer of size ${t.byteLength}.`);return r.HEAPU8.set(t,e),[e,t.byteLength]},uo=async(t,r)=>{let e,n,d=xt();Array.isArray(t)?[e,n]=t:t.buffer===d.HEAPU8.buffer?[e,n]=[t.byteOffset,t.byteLength]:[e,n]=zr(t);let o=0,a=0,l=[],i=[],A=[];try{if([a,l]=Kp(r),r?.externalData&&d.mountExternalData){let t=[];for(let e of r.externalData){let r="string"==typeof e?e:e.path;t.push(jr("string"==typeof e?e:e.data).then((t=>{d.mountExternalData(r,t)})))}await Promise.all(t)}for(let t of r?.executionProviders??[])if("webnn"===("string"==typeof t?t:t.name)){if(d.shouldTransferToMLTensor=!1,d.currentContext)throw new Error("WebNN execution provider is already set.");if("string"!=typeof t){let r=t,e=r?.context,n=r?.gpuDevice,o=r?.deviceType,a=r?.numThreads,l=r?.powerPreference;d.currentContext=e||(n?await navigator.ml.createContext(n):await navigator.ml.createContext({deviceType:o,numThreads:a,powerPreference:l}))}else d.currentContext=await navigator.ml.createContext();break}o=await d._OrtCreateSession(e,n,a),0===o&&ht("Can't create a session."),d.currentContext&&(d.jsepRegisterMLContext(o,d.currentContext),d.currentContext=void 0,d.shouldTransferToMLTensor=!0);let[t,B]=Ng(o),s=!!r?.enableGraphCapture,g=[],p=[];for(let r=0;r<t;r++){let t=d._OrtGetInputName(o,r);0===t&&ht("Can't get an input name."),i.push(t),g.push(d.UTF8ToString(t))}for(let t=0;t<B;t++){let r=d._OrtGetOutputName(o,t);0===r&&ht("Can't get an output name."),A.push(r);let e=d.UTF8ToString(r);p.push(e)}let C=null;return yr.set(o,[o,i,A,C,s,!1]),[o,g,p]}catch(t){throw i.forEach((t=>d._OrtFree(t))),A.forEach((t=>d._OrtFree(t))),0!==o&&d._OrtReleaseSession(o),t}finally{d._free(e),0!==a&&d._OrtReleaseSessionOptions(a),l.forEach((t=>d._free(t))),d.unmountExternalData?.()}},lo=t=>{let r=xt(),e=yr.get(t);if(!e)throw new Error(`cannot release session. invalid session id: ${t}`);let[n,d,o,a,l]=e;a&&(l&&r._OrtClearBoundOutputs(a.handle),r._OrtReleaseBinding(a.handle)),r.jsepOnReleaseSession?.(t),d.forEach((t=>r._OrtFree(t))),o.forEach((t=>r._OrtFree(t))),r._OrtReleaseSession(n),yr.delete(t)},ed=(t,r,e,n,d,o=!1)=>{if(!t)return void r.push(0);let a,l,i=xt(),A=t[0],B=t[1],s=t[3];if("string"===A&&("gpu-buffer"===s||"ml-tensor"===s))throw new Error("String tensor is not supported on GPU.");if(o&&"gpu-buffer"!==s)throw new Error(`External buffer must be provided for input/output index ${d} when enableGraphCapture is true.`);if("gpu-buffer"===s){let r=t[2].gpuBuffer;l=qr(Hr(A),B);let e=i.jsepRegisterBuffer;if(!e)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');a=e(n,d,r,l)}else if("ml-tensor"===s){let r=t[2].mlTensor;l=qr(Hr(A),B);let e=i.jsepRegisterMLTensor;if(!e)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');a=e(r,Hr(A),B)}else{let r=t[2];if(Array.isArray(r)){l=4*r.length,a=i._malloc(l),e.push(a);let t=a/4;for(let n=0;n<r.length;n++){if("string"!=typeof r[n])throw new TypeError(`tensor data at index ${n} is not a string`);i.HEAPU32[t++]=Tt(r[n],e)}}else l=r.byteLength,a=i._malloc(l),e.push(a),i.HEAPU8.set(new Uint8Array(r.buffer,r.byteOffset,l),a)}let g=i.stackSave(),p=i.stackAlloc(4*B.length);try{let t=p/4;B.forEach((r=>i.HEAP32[t++]=r));let e=i._OrtCreateTensor(Hr(A),a,l,p,B.length,td(s));0===e&&ht(`Can't create tensor for input/output. session=${n}, index=${d}.`),r.push(e)}finally{i.stackRestore(g)}},fo=async(t,r,e,n,d,o)=>{let a=xt(),l=yr.get(t);if(!l)throw new Error(`cannot run inference. invalid session id: ${t}`);let i=l[0],A=l[1],B=l[2],s=l[3],g=l[4];l[5];let p=r.length,C=n.length,u=0,K=[],c=[],Q=[],W=[],w=a.stackSave(),b=a.stackAlloc(4*p),F=a.stackAlloc(4*p),h=a.stackAlloc(4*C),m=a.stackAlloc(4*C);try{a.jsepOnRunStart?.(i),[u,K]=jp(o);for(let n=0;n<p;n++)ed(e[n],c,W,t,r[n],g);for(let r=0;r<C;r++)ed(d[r],Q,W,t,p+n[r],g);let l,w=b/4,G=F/4,R=h/4,Z=m/4;for(let t=0;t<p;t++)a.HEAPU32[w++]=c[t],a.HEAPU32[G++]=A[r[t]];for(let t=0;t<C;t++)a.HEAPU32[R++]=Q[t],a.HEAPU32[Z++]=B[n[t]];l=await a._OrtRun(i,F,b,p,m,C,h,u),0!==l&&ht("failed to call OrtRun().");let X=[];for(let t=0;t<C;t++){let r=a.HEAPU32[h/4+t];if(r===Q[t]){X.push(d[t]);continue}let e,o=a.stackSave(),l=a.stackAlloc(16),i=!1,A=0;try{0!==a._OrtGetTensorData(r,l,l+4,l+8,l+12)&&ht(`Can't access output tensor data on index ${t}.`);let d=l/4,o=a.HEAPU32[d++];A=a.HEAPU32[d++];let B=a.HEAPU32[d++],g=a.HEAPU32[d++],p=[];for(let t=0;t<g;t++)p.push(a.HEAPU32[B/4+t]);a._OrtFree(B);let C=p.reduce(((t,r)=>t*r),1);e=Yp(o);let u=s?.outputPreferredLocations[n[t]];if("string"===e){if("gpu-buffer"===u||"ml-tensor"===u)throw new Error("String tensor is not supported on GPU.");let t=[],r=A/4;for(let e=0;e<C;e++){let n=a.HEAPU32[r++],d=e===C-1?void 0:a.HEAPU32[r]-n;t.push(a.UTF8ToString(n,d))}X.push([e,p,t,"cpu"])}else if("gpu-buffer"===u&&C>0){let t=a.jsepGetBuffer;if(!t)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let n=t(A),d=qr(o,C);if(void 0===d||!bo(e))throw new Error(`Unsupported data type: ${e}`);i=!0,X.push([e,p,{gpuBuffer:n,download:a.jsepCreateDownloader(n,d,e),dispose:()=>{a._OrtReleaseTensor(r)}},"gpu-buffer"])}else if("ml-tensor"===u&&C>0){let t=a.jsepEnsureTensor;if(!t)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(void 0===qr(o,C)||!go(e))throw new Error(`Unsupported data type: ${e}`);let n=await t(A,o,p,!1);i=!0,X.push([e,p,{mlTensor:n,download:a.jsepCreateMLTensorDownloader(A,e),dispose:()=>{a.jsepReleaseTensorId(A),a._OrtReleaseTensor(r)}},"ml-tensor"])}else{let t=new(Zp(e))(C);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(a.HEAPU8.subarray(A,A+t.byteLength)),X.push([e,p,t,"cpu"])}}finally{a.stackRestore(o),"string"===e&&A&&a._free(A),i||a._OrtReleaseTensor(r)}}return s&&!g&&(a._OrtClearBoundOutputs(s.handle),yr.set(t,[i,A,B,s,g,!1])),X}finally{a.stackRestore(w),c.forEach((t=>a._OrtReleaseTensor(t))),Q.forEach((t=>a._OrtReleaseTensor(t))),W.forEach((t=>a._free(t))),0!==u&&a._OrtReleaseRunOptions(u),K.forEach((t=>a._free(t)))}},co=t=>{let r=xt(),e=yr.get(t);if(!e)throw new Error("invalid session id");let n=e[0],d=r._OrtEndProfiling(n);0===d&&ht("Can't get an profile file name."),r._OrtFree(d)},po=t=>{let r=[];for(let e of t){let t=e[2];!Array.isArray(t)&&"buffer"in t&&r.push(t.buffer)}return r}})),Je,Kt,Xr,xo,To,yo,Zi,Qi,xr,Tr,Gg,rd,nd,od,id,ad,sd,ud,ta=O((()=>{Yt(),qi(),Ke(),Vr(),Je=()=>!!z.wasm.proxy&&typeof document<"u",Xr=!1,xo=!1,To=!1,Qi=new Map,xr=(t,r)=>{let e=Qi.get(t);e?e.push(r):Qi.set(t,[r])},Tr=()=>{if(Xr||!xo||To||!Kt)throw new Error("worker not ready")},Gg=t=>{switch(t.data.type){case"init-wasm":Xr=!1,t.data.err?(To=!0,Zi[1](t.data.err)):(xo=!0,Zi[0]()),yo&&(URL.revokeObjectURL(yo),yo=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let r=Qi.get(t.data.type);t.data.err?r.shift()[1](t.data.err):r.shift()[0](t.data.out);break}}},rd=async()=>{if(!xo){if(Xr)throw new Error("multiple calls to 'initWasm()' detected.");if(To)throw new Error("previous call to 'initWasm()' failed.");if(Xr=!0,Je())return new Promise(((t,r)=>{Kt?.terminate(),Wp().then((([e,n])=>{try{(Kt=n).onerror=t=>r(t),Kt.onmessage=Gg,Zi=[t,r];let d={type:"init-wasm",in:z};Kt.postMessage(d),yo=e}catch(t){r(t)}}),r)}));try{await io(z.wasm),await ao(z),xo=!0}catch(t){throw To=!0,t}finally{Xr=!1}}},nd=async t=>{if(Je())return Tr(),new Promise(((r,e)=>{xr("init-ep",[r,e]);let n={type:"init-ep",in:{epName:t,env:z}};Kt.postMessage(n)}));await so(z,t)},od=async t=>Je()?(Tr(),new Promise(((r,e)=>{xr("copy-from",[r,e]);let n={type:"copy-from",in:{buffer:t}};Kt.postMessage(n,[t.buffer])}))):zr(t),id=async(t,r)=>{if(Je()){if(r?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Tr(),new Promise(((e,n)=>{xr("create",[e,n]);let d={type:"create",in:{model:t,options:{...r}}},o=[];t instanceof Uint8Array&&o.push(t.buffer),Kt.postMessage(d,o)}))}return uo(t,r)},ad=async t=>{if(Je())return Tr(),new Promise(((r,e)=>{xr("release",[r,e]);let n={type:"release",in:t};Kt.postMessage(n)}));lo(t)},sd=async(t,r,e,n,d,o)=>{if(Je()){if(e.some((t=>"cpu"!==t[3])))throw new Error("input tensor on GPU is not supported for proxy.");if(d.some((t=>t)))throw new Error("pre-allocated output tensor is not supported for proxy.");return Tr(),new Promise(((d,a)=>{xr("run",[d,a]);let l=e,i={type:"run",in:{sessionId:t,inputIndices:r,inputs:l,outputIndices:n,options:o}};Kt.postMessage(i,po(l))}))}return fo(t,r,e,n,d,o)},ud=async t=>{if(Je())return Tr(),new Promise(((r,e)=>{xr("end-profiling",[r,e]);let n={type:"end-profiling",in:t};Kt.postMessage(n)}));co(t)}})),ld,Mg,wo,fd=O((()=>{Yt(),ta(),Ji(),oo(),Yi(),ld=(t,r)=>{switch(t.location){case"cpu":return[t.type,t.dims,t.data,"cpu"];case"gpu-buffer":return[t.type,t.dims,{gpuBuffer:t.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[t.type,t.dims,{mlTensor:t.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${t.location} for ${r()}`)}},Mg=t=>{switch(t[3]){case"cpu":return new yt(t[0],t[2],t[1]);case"gpu-buffer":{let r=t[0];if(!bo(r))throw new Error(`not supported data type: ${r} for deserializing GPU tensor`);let{gpuBuffer:e,download:n,dispose:d}=t[2];return yt.fromGpuBuffer(e,{dataType:r,dims:t[1],download:n,dispose:d})}case"ml-tensor":{let r=t[0];if(!go(r))throw new Error(`not supported data type: ${r} for deserializing MLTensor tensor`);let{mlTensor:e,download:n,dispose:d}=t[2];return yt.fromMLTensor(e,{dataType:r,dims:t[1],download:n,dispose:d})}default:throw new Error(`invalid data location: ${t[3]}`)}},wo=class{async fetchModelAndCopyToWasmMemory(t){return od(await jr(t))}async loadModel(t,r){let e;Fe(),e="string"==typeof t?await this.fetchModelAndCopyToWasmMemory(t):t,[this.sessionId,this.inputNames,this.outputNames]=await id(e,r),Ce()}async dispose(){return ad(this.sessionId)}async run(t,r,e){Fe();let n=[],d=[];Object.entries(t).forEach((t=>{let r=t[0],e=t[1],o=this.inputNames.indexOf(r);if(-1===o)throw new Error(`invalid input '${r}'`);n.push(e),d.push(o)}));let o=[],a=[];Object.entries(r).forEach((t=>{let r=t[0],e=t[1],n=this.outputNames.indexOf(r);if(-1===n)throw new Error(`invalid output '${r}'`);o.push(e),a.push(n)}));let l=n.map(((t,r)=>ld(t,(()=>`input "${this.inputNames[d[r]]}"`)))),i=o.map(((t,r)=>t?ld(t,(()=>`output "${this.outputNames[a[r]]}"`)):null)),A=await sd(this.sessionId,d,l,a,i,e),B={};for(let t=0;t<A.length;t++)B[this.outputNames[a[t]]]=o[t]??Mg(A[t]);return Ce(),B}startProfiling(){}endProfiling(){ud(this.sessionId)}}})),pd={};Or(pd,{OnnxruntimeWebAssemblyBackend:()=>vo,initializeFlags:()=>cd,wasmBackend:()=>Ug});var cd,vo,Ug,dd=O((()=>{Yt(),ta(),fd(),Vr(),cd=()=>{if(("number"!=typeof z.wasm.initTimeout||z.wasm.initTimeout<0)&&(z.wasm.initTimeout=0),!1===z.wasm.simd&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),"boolean"!=typeof z.wasm.proxy&&(z.wasm.proxy=!1),"boolean"!=typeof z.wasm.trace&&(z.wasm.trace=!1),"number"!=typeof z.wasm.numThreads||!Number.isInteger(z.wasm.numThreads)||z.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)z.wasm.numThreads=1;else{let t=typeof navigator>"u"?Co("node:os").cpus().length:navigator.hardwareConcurrency;z.wasm.numThreads=Math.min(4,Math.ceil((t||1)/2))}},Ug=new(vo=class{async init(t){cd(),await rd(),await nd(t)}async createInferenceSessionHandler(t,r){let e=new wo;return await e.loadModel(t,r),Promise.resolve(e)}})}));Yt(),Yt(),Yt();var Ds="1.20.1";{let t=(Fp(),sn(Bp)).onnxjsBackend;nr("webgl",t,-10)}{let t=(dd(),sn(pd)).wasmBackend;nr("cpu",t,10),nr("wasm",t,10)}Object.defineProperty(z.versions,"web",{value:Ds,enumerable:!0});
/*! Bundled license information:

  long/index.js:
    (**
     * @license
     * Copyright 2009 The Closure Library Authors
     * Copyright 2020 Daniel Wirtz / The long.js Authors.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * SPDX-License-Identifier: Apache-2.0
     *)
  */
const base64decode=function(t){return atob(t)},utf8ByteToHex=t=>`<0x${t.toString(16).toUpperCase().padStart(2,"0")}>`,hexToUtf8Byte=t=>{const r=t.replace(/<0x|>/g,"");return parseInt(r,16)};class PriorityQueue{constructor(t=(t,r)=>t>r){this._heap=[],this._comparator=t}size(){return this._heap.length}isEmpty(){return 0==this.size()}peek(){return this._heap[0]}push(...t){return t.forEach((t=>{this._heap.push(t),this._siftUp()})),this.size()}pop(){const t=this.peek(),r=this.size()-1;return r>0&&this._swap(0,r),this._heap.pop(),this._siftDown(),t}replace(t){const r=this.peek();return this._heap[0]=t,this._siftDown(),r}_parent(t){return(t+1>>>1)-1}_left(t){return 1+(t<<1)}_right(t){return t+1<<1}_greater(t,r){return this._comparator(this._heap[t],this._heap[r])}_swap(t,r){[this._heap[t],this._heap[r]]=[this._heap[r],this._heap[t]]}_siftUp(){let t=this.size()-1;for(;t>0&&this._greater(t,this._parent(t));)this._swap(t,this._parent(t)),t=this._parent(t)}_siftDown(){let t=0;for(;this._left(t)<this.size()&&this._greater(this._left(t),t)||this._right(t)<this.size()&&this._greater(this._right(t),t);){let r=this._right(t)<this.size()&&this._greater(this._right(t),this._left(t))?this._right(t):this._left(t);this._swap(t,r),t=r}}}const BOS_TOKEN_ID=1;class LlamaTokenizer{vocabById;vocabByString;merges;utf8Encoder=new TextEncoder;utf8Decoder=new TextDecoder("utf-8");constructor(t,r){this.vocabById=this.decodeVocabulary(t||llama_vocab_base64),this.vocabByString=new Map,this.vocabById.forEach(((t,r)=>{this.vocabByString.set(t,r)})),this.merges=this.decompressMerges(r||llama_merges_binary)}getMergeIdentifierString(t,r){return this.vocabById[t]+" "+this.vocabById[r]}decompressMerges(t){const r=base64decode(t),e=new Uint8Array(r.length);for(let t=0;t<r.length;t++)e[t]=r.charCodeAt(t);const n=[];for(let t=0;t<e.length;t+=2){const r=e[t]+(e[t+1]<<8);n.push(r)}const d=new Map;for(let t=0;t<n.length;t+=2){const r=n[t],e=n[t+1],o=this.getMergeIdentifierString(r,e);d.set(o,t+1)}return d}decodeVocabulary(t){const r=Uint8Array.from(base64decode(t),(t=>t.charCodeAt(0)));return new TextDecoder("utf-8").decode(r).split("\n")}mapCharactersToTokenIds(t,r,e){const n=[];r&&n.push(BOS_TOKEN_ID),e&&(t=" "+t);const d=t.replaceAll(" ",this.vocabById[29871]),o=Array.from(d);for(let t=0;t<o.length;t++){const r=o[t];if(this.vocabByString.has(r))n.push(this.vocabByString.get(r));else{const t=this.utf8Encoder.encode(r);for(let e=0;e<t.length;e++){const d=this.vocabByString.get(utf8ByteToHex(t[e]));n.push(d),d>=0||(console.log("Encountered unknown character "+r+" (partial UTF-8 byte "+t[e]+" + hex + "+utf8ByteToHex(t[e])+")"),n[n.length-1]=0)}}}return n}encode(t,r=!0,e=!0,n=!1){let d=null;if(n&&(d=performance.now()),!this.vocabById||!this.vocabByString||!this.merges)return void console.log("Tokenizer not initialized properly!");if(0===t.length)return[];const o=this.mapCharactersToTokenIds(t,r,e),a=new PriorityQueue(((t,r)=>t.mergePrio<r.mergePrio)),l=r=>{const e=this.getMergeIdentifierString(r.tokenId,r.next.tokenId),n=this.merges.get(e)+r.origPos/t.length;n&&(r.mergePrio=n,r.mergeToString=e.replace(" ",""),a.push(r))};let i={origPos:0,tokenId:o[0],prev:null,next:null},A=i;for(let t=1;t<o.length;t++){const r={origPos:t,tokenId:o[t],prev:A,next:null};A.next=r,l(A),A=r}for(;!a.isEmpty();){const t=a.pop();if(t.deleted)continue;if(!t.next)continue;if(t.next.deleted)continue;if(t.deleted=!0,t.next.deleted=!0,t.prev){const r=t.prev;r.deleted=!0;const e={origPos:r.origPos,tokenId:r.tokenId,prev:r.prev,next:r.next};t.prev=e,e.prev?e.prev.next=e:i=e}const r={origPos:t.origPos,tokenId:this.vocabByString.get(t.mergeToString),prev:t.prev,next:t.next.next};r.prev?(r.prev.next=r,r.prev,l(r.prev)):i=r,r.next&&(r.next.prev=r,l(r))}const B=[];for(let t=i;null!==t;t=t.next)B.push(t.tokenId);if(n){const t=performance.now();console.log("Tokenizer running time: "+(t-d)+" milliseconds")}return B}decode(t,r=!0,e=!0){const n=[];for(let e=r&&t[0]===BOS_TOKEN_ID?1:0;e<t.length;e++){const r=t[e],d=this.vocabById[r];if(d.startsWith("<0x")&&d.endsWith(">")){const t=hexToUtf8Byte(d);n.push(t)}else this.utf8Encoder.encode(d).forEach((t=>n.push(t)))}const d=new Uint8Array(n),o=this.utf8Decoder.decode(d).replaceAll(this.vocabById[29871]," ");return e&&" "===o[0]?o.slice(1):o}defaultTests(t){function r(r,e,n=!0,d=!0){const o=t.decode(r,n,d);if(o!==e)throw Error(`Decode test failed. Expected ${e}, actual was: ${o}`)}function e(r,e){const n=t.encode(r,!0,!0,!0);if(o=e,(d=n).length!==o.length||!d.every((function(t,r){return t===o[r]})))throw Error(`Test failed. LLaMA Tokenizer Encoder returned unexpected result: expected tokenize(${r}) === ${e}, actual was: ${n}`);var d,o;if(r!==t.decode(n))throw Error(`Test failed. LLaMA Tokenizer Decoder returned unexpected result: expected decode(${n}) === ${r}, actual was: ${decode(n)}`)}return e("grabbed",[1,2646,1327,287]),e(" grabbed",[1,29871,2646,1327,287]),e("           grabbed",[1,9651,2646,1327,287]),e("\n",[1,29871,13]),e(" \n",[1,259,13]),e("\ttabs\t\t\t\tout here",[1,29871,12,21175,12,12,12,12,449,1244]),e("ax\n####\nboo",[1,4853,13,4136,13,833,29877]),e("镇",[1,29871,30411]),e("🦙",[1,29871,243,162,169,156]),e("🦙Ꙋ",[1,29871,243,162,169,156,237,156,141]),e("Ꙋ🦙",[1,29871,237,156,141,243,162,169,156]),r([1,2646,1327,287],"grabbed",!0,!0),r([1,2646,1327,287],"<s> grabbed",!1,!1),r([1,2646,1327,287]," grabbed",!0,!1),r([1,2646,1327,287],"<s> grabbed",!1,!0),r([2646,1327,287],"grabbed",!0,!0),r([2646,1327,287]," grabbed",!1,!1),r([2646,1327,287]," grabbed",!0,!1),r([2646,1327,287],"grabbed",!1,!0),e('The llama (/ˈlɑːmə/; 🦙Spanish pronunciation: [ˈʎama]) (Lama glama) is a domesticated South American camelid, widely used as a meat and pack animal by Andean cultures since the Pre-Columbian era. Llamas are social animals and live with others as a herd. Their wool is soft and contains only a small amount of lanolin.[2] Llamas can learn simple tasks after a few repetitions. When using a pack, they can carry about 25 to 30% of their body weight for 8 to 13 km (5–8 miles).[3] The name llama (in the past also spelled "lama" or "glama") was adopted by European settlers from native Peruvians.[4] The ancestors of llamas are thought to have originated from the Great Plains of North America about 40 million years ago, and subsequently migrated to South America about three million years ago during the Great American Interchange. By the end of the last ice age (10,000–12,000 years ago), camelids were extinct in North America.[3] As of 2007, there were over seven million llamas and alpacas in South America and over 158,000 llamas and 100,000Ꙋ🦙 alpacas, descended from progenitors imported late in the 20th century, in the United States and Canada.[5] In Aymara mythology, llamas are important beings. The Heavenly Llama is said to drink water from the ocean and urinates as it rains.[6] According to Aymara eschatology, llamas will return to the water springs and lagoons where they come from at the end of time.[6]',[1,450,11148,3304,20374,30176,29880,30426,30215,29885,30184,29914,29936,29871,243,162,169,156,15495,728,11504,11173,362,29901,518,30176,31743,3304,2314,313,29931,3304,3144,3304,29897,338,263,21849,630,4275,3082,3949,295,333,29892,17644,1304,408,263,27654,322,4870,13019,491,1126,29872,273,4185,1973,1951,278,4721,29899,1625,3774,713,3152,29889,365,5288,294,526,5264,15006,322,5735,411,4045,408,263,902,29881,29889,11275,281,1507,338,4964,322,3743,871,263,2319,5253,310,10906,22878,7226,29906,29962,365,5288,294,508,5110,2560,9595,1156,263,2846,21159,2187,29889,1932,773,263,4870,29892,896,508,8677,1048,29871,29906,29945,304,29871,29941,29900,29995,310,1009,3573,7688,363,29871,29947,304,29871,29896,29941,2383,313,29945,29994,29947,7800,467,29961,29941,29962,450,1024,11148,3304,313,262,278,4940,884,805,14356,376,29880,3304,29908,470,376,3820,3304,1159,471,16356,491,7824,3604,9306,515,7531,25493,1403,550,7226,29946,29962,450,19525,943,310,11829,294,526,2714,304,505,3978,630,515,278,7027,13494,1144,310,4644,6813,1048,29871,29946,29900,7284,2440,8020,29892,322,17602,9725,630,304,4275,6813,1048,2211,7284,2440,8020,2645,278,7027,3082,4124,3167,29889,2648,278,1095,310,278,1833,14890,5046,313,29896,29900,29892,29900,29900,29900,29994,29896,29906,29892,29900,29900,29900,2440,8020,511,3949,295,4841,892,1294,5562,297,4644,6813,7226,29941,29962,1094,310,29871,29906,29900,29900,29955,29892,727,892,975,9881,7284,11829,294,322,394,29886,562,294,297,4275,6813,322,975,29871,29896,29945,29947,29892,29900,29900,29900,11829,294,322,29871,29896,29900,29900,29892,29900,29900,29900,237,156,141,243,162,169,156,394,29886,562,294,29892,5153,2760,515,410,1885,17259,19673,5683,297,278,29871,29906,29900,386,6462,29892,297,278,3303,3900,322,7400,7226,29945,29962,512,319,962,2518,22082,3002,29892,11829,294,526,4100,367,886,29889,450,22977,368,365,29880,3304,338,1497,304,13748,4094,515,278,23474,322,5065,262,1078,408,372,1153,1144,7226,29953,29962,7579,304,319,962,2518,831,13496,3002,29892,11829,294,674,736,304,278,4094,7689,886,322,301,4425,787,988,896,2041,515,472,278,1095,310,931,7226,29953,29962]),console.log("LLaMA Tokenizer tests passed successfully."),!0}runTests(t=this.defaultTests){t(this)}}const llama_vocab_base64="PHVuaz4KPHM+Cjwvcz4KPDB4MDA+CjwweDAxPgo8MHgwMj4KPDB4MDM+CjwweDA0Pgo8MHgwNT4KPDB4MDY+CjwweDA3Pgo8MHgwOD4KPDB4MDk+CjwweDBBPgo8MHgwQj4KPDB4MEM+CjwweDBEPgo8MHgwRT4KPDB4MEY+CjwweDEwPgo8MHgxMT4KPDB4MTI+CjwweDEzPgo8MHgxND4KPDB4MTU+CjwweDE2Pgo8MHgxNz4KPDB4MTg+CjwweDE5Pgo8MHgxQT4KPDB4MUI+CjwweDFDPgo8MHgxRD4KPDB4MUU+CjwweDFGPgo8MHgyMD4KPDB4MjE+CjwweDIyPgo8MHgyMz4KPDB4MjQ+CjwweDI1Pgo8MHgyNj4KPDB4Mjc+CjwweDI4Pgo8MHgyOT4KPDB4MkE+CjwweDJCPgo8MHgyQz4KPDB4MkQ+CjwweDJFPgo8MHgyRj4KPDB4MzA+CjwweDMxPgo8MHgzMj4KPDB4MzM+CjwweDM0Pgo8MHgzNT4KPDB4MzY+CjwweDM3Pgo8MHgzOD4KPDB4Mzk+CjwweDNBPgo8MHgzQj4KPDB4M0M+CjwweDNEPgo8MHgzRT4KPDB4M0Y+CjwweDQwPgo8MHg0MT4KPDB4NDI+CjwweDQzPgo8MHg0ND4KPDB4NDU+CjwweDQ2Pgo8MHg0Nz4KPDB4NDg+CjwweDQ5Pgo8MHg0QT4KPDB4NEI+CjwweDRDPgo8MHg0RD4KPDB4NEU+CjwweDRGPgo8MHg1MD4KPDB4NTE+CjwweDUyPgo8MHg1Mz4KPDB4NTQ+CjwweDU1Pgo8MHg1Nj4KPDB4NTc+CjwweDU4Pgo8MHg1OT4KPDB4NUE+CjwweDVCPgo8MHg1Qz4KPDB4NUQ+CjwweDVFPgo8MHg1Rj4KPDB4NjA+CjwweDYxPgo8MHg2Mj4KPDB4NjM+CjwweDY0Pgo8MHg2NT4KPDB4NjY+CjwweDY3Pgo8MHg2OD4KPDB4Njk+CjwweDZBPgo8MHg2Qj4KPDB4NkM+CjwweDZEPgo8MHg2RT4KPDB4NkY+CjwweDcwPgo8MHg3MT4KPDB4NzI+CjwweDczPgo8MHg3ND4KPDB4NzU+CjwweDc2Pgo8MHg3Nz4KPDB4Nzg+CjwweDc5Pgo8MHg3QT4KPDB4N0I+CjwweDdDPgo8MHg3RD4KPDB4N0U+CjwweDdGPgo8MHg4MD4KPDB4ODE+CjwweDgyPgo8MHg4Mz4KPDB4ODQ+CjwweDg1Pgo8MHg4Nj4KPDB4ODc+CjwweDg4Pgo8MHg4OT4KPDB4OEE+CjwweDhCPgo8MHg4Qz4KPDB4OEQ+CjwweDhFPgo8MHg4Rj4KPDB4OTA+CjwweDkxPgo8MHg5Mj4KPDB4OTM+CjwweDk0Pgo8MHg5NT4KPDB4OTY+CjwweDk3Pgo8MHg5OD4KPDB4OTk+CjwweDlBPgo8MHg5Qj4KPDB4OUM+CjwweDlEPgo8MHg5RT4KPDB4OUY+CjwweEEwPgo8MHhBMT4KPDB4QTI+CjwweEEzPgo8MHhBND4KPDB4QTU+CjwweEE2Pgo8MHhBNz4KPDB4QTg+CjwweEE5Pgo8MHhBQT4KPDB4QUI+CjwweEFDPgo8MHhBRD4KPDB4QUU+CjwweEFGPgo8MHhCMD4KPDB4QjE+CjwweEIyPgo8MHhCMz4KPDB4QjQ+CjwweEI1Pgo8MHhCNj4KPDB4Qjc+CjwweEI4Pgo8MHhCOT4KPDB4QkE+CjwweEJCPgo8MHhCQz4KPDB4QkQ+CjwweEJFPgo8MHhCRj4KPDB4QzA+CjwweEMxPgo8MHhDMj4KPDB4QzM+CjwweEM0Pgo8MHhDNT4KPDB4QzY+CjwweEM3Pgo8MHhDOD4KPDB4Qzk+CjwweENBPgo8MHhDQj4KPDB4Q0M+CjwweENEPgo8MHhDRT4KPDB4Q0Y+CjwweEQwPgo8MHhEMT4KPDB4RDI+CjwweEQzPgo8MHhEND4KPDB4RDU+CjwweEQ2Pgo8MHhENz4KPDB4RDg+CjwweEQ5Pgo8MHhEQT4KPDB4REI+CjwweERDPgo8MHhERD4KPDB4REU+CjwweERGPgo8MHhFMD4KPDB4RTE+CjwweEUyPgo8MHhFMz4KPDB4RTQ+CjwweEU1Pgo8MHhFNj4KPDB4RTc+CjwweEU4Pgo8MHhFOT4KPDB4RUE+CjwweEVCPgo8MHhFQz4KPDB4RUQ+CjwweEVFPgo8MHhFRj4KPDB4RjA+CjwweEYxPgo8MHhGMj4KPDB4RjM+CjwweEY0Pgo8MHhGNT4KPDB4RjY+CjwweEY3Pgo8MHhGOD4KPDB4Rjk+CjwweEZBPgo8MHhGQj4KPDB4RkM+CjwweEZEPgo8MHhGRT4KPDB4RkY+CuKWgeKWgQriloF0CmVyCmluCuKWgWEKZW4Kb24K4paBdGgKZXMK4paB4paB4paB4paBCuKWgXMK4paBZAphdApvcgphbgriloFjCmlzCnJlCml0CuKWgXRoZQphcgpsZQriloF3CuKWgXAKb3UKYWwK4paBZgriloFtCmVkCuKWgW8K4paBYgpvbQppb24KaW5nCmljCmFzCmVsCmVudAriloFpbgriloFoCm5kCmV0CuKWgWwK4paBbgpzdAriloF0bwpjaAriloFJCnJvCuKWgeKWgeKWgeKWgeKWgeKWgeKWgeKWgQppbAriloFvZgpkZQpjdAriloEoCmFtCuKWgUMK4paBZGUK4paBUwriloF1CuKWgUEK4paBXAriloFlCuKWgWFuZAriloFUCm9sCuKWgXYKaW0Kb3QKYWQKdXQK4paBZwplbQp1cgppZAriloEqCmlnCnJhCuKWgXJlCuKWgWlzCnF1Cm93CuKWgU0KZXN0CuKWgXkKc2UKdmUKY2UKaWUKdW4K4paBUAriloFCCmFnCnVsCuKWgT0KaGUKZW5kCm9kZQp0ZXIKbWVudApvcwriloFECmlmCmF0aW9uCuKWgWZvcgriloFyCuKWgUwK4paBeW91CuKWgWJlCmx5CnZlcgphYgp0ZQriloFpdAriloFvbgpyaQp1cwriloEiCuKWgXdoCuKWgWNvbgriloFICuKWgXN0CmlyCuKWgUUK4paBRgpjawriloFhbgp0aAplZwpheQppdGgK4paBUgppc3QKYW5kCuKWgXRoYXQK4paBYWwK4paBJAriloEjCm9kCnVtCuKWgVcKaHQKY29kZQriloFHCmF0ZQplc3MK4paBTgplcmUKcHAK4paBYXMK4paBc2UK4paBcHJvCuKWgXdpdGgKcGUK4paBawplcnMKcHQKKTsKbG8K4paB4paB4paB4paB4paBCuKWgWNvbQphbWUK4paBYAriloFDb20KaWEKYW50CuKWgWxhCuKWgXsK4paBZW4KY3Rpb24K4paBZXgKbGQKdWIK4paBagpsYQp1ZQriloFKCmljaAriloFkbwriloFPCuKWgXF1Cml2Cm9ydAphcnQK4paBdW4K4paBIyMK4paBdGhpcwprZQriloFoYQriloEtCm91dAriloFUaGUK4paBbm90CuKWgW5lCmlsbAriloFsZQpjaQpyb20KaW5lCi8vCm9wCmVnaW4K4paBQ29tbWVudAriloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloEKYmVnaW4K0YHRggphc3MKaXoKKS4Kb2cK4paB0L8K4paBb3IK4paBd2FzCuKWgWF0Cm91cgriloFpCmFpbgriloFLCtC90LAK4paBVgpnZQriloFzdQphcAphZ2UKb3VsZApuZQphdgp4dApvcmUKaWxlCi0tCuKWgdCyCuKWgWJ5CmxpCmF0aArRgNCwCmJlcgphY2gKYWxsCuKWgVRoCnVsdAriloF9CuKWgVUK4paBdXMK4paBegp1c3QK4paBaGF2ZQpsaWMK0L3QuAriloFjYW4KdHIKY29tCiksCuKWgUluCmluZAplbGwK4paBZnJvbQrQvtCyCnRvCuKWgVsKYWJsZQpvc3QK4paBY2gKZWN0CmlnaHQKaW50CuKWgScK4paBYXJlCuKWgWltCuKWgXNoCuKWgTwK4paBQW4K4paB0YEKYXRhCmlyZQriloF0cgpjb24Kb3JkCml0eQphcmQK4paB4paB4paB4paB4paB4paBCuKWgWhlCuKWgWJ1dApvYwo9IgriloFwcgp1cmUKcGVyCmFjawpvcmsKb25nCmFucwrQutC+CnBsZQriloFkZXMKb2sKb3JtCndlcgphawpwcgphc2UK4paBZWwKcGgKYWMK4paBdW5kCuKWgWFyCuKWgWlmCnVkCnBzCml0ZQpibGUK0L3QvgpmZXIKcGwKaXZlCmFuZwplbnMK0YDQvgriloFzbwpzbwphc3QKKCkKc3dlcgpydQppZXMK4paBOgphdQpvdgrRgNC1CtCz0L4K4paBZGVyCuKWgW15CuKWgXdlCuKWgW1lCm50CuKWgWFkCnVybgriloF5b3VyCjovLwphcmUK4paBYWxsCmZmCmlvCmVzdGlvbgppbWUK4paBZXIKbGFzcwriloHQuAriloF3aGljaApvbWUKb250CuKWgXBhcgriloFtYQriloFZCiIsCuKWgdC+CmZ0CmlhbApjYwpvdW5kCuKWgWxpCuKWgXJlcwpldGgKamVjdAriloFhcHAK4paBU3QKaWNlCuKWgWFtCmFjdAriloFkZWwKZ3IKYXRlZAppZXIK4paB4paB4paB4paB4paB4paB4paB4paB4paB4paB4paB4paBCuKWgWFiCuKWgWV0CmFsbHkKLi4KcG9ydAppawriloFwZXIK4paBY29udArRgNC4CtC60LAKc2VyCtC70LgKbGwKaWV3CmlnbgpfewpwdXQKb25lCnVuY3Rpb24K4paBZGkKYXJ5Cml0aW9uCm1hCtC10L0KZ2V0CuKWgWxvCuKWgXZhbAriloFRCnJhbgriloHQtAplbmNlCuKWgXdvcmsK4paB0L3QsAppcAppdGVtCnlwZQriloEmCuKWgWhpcwriloF1c2UKZGVyCuKWgUFuc3dlcgriloF3aWxsCml6ZQrRgtCwCmxvdwriloFDaAriloFnZXQKaWRlCm91cwppbmsKcHRpb24K0LvQsAp0dXJuCnVuZwplYwp1Zwpmb3JtCnJlcwpodHQKb3VnCtC70YwK4paBbm8KY2wK4paBcm8K4paBb25lCnR0CmNyaQpkdQriloF1cArRgtC+CigiCuKWgW9iCndlCm9yeQriloFlc3QKZXJ5CmllbApzdHIKb2IK4paBcXVlCmlhbgriloFvdXQK4paBcGwK4paBbmV3CtC60LgK4paBKwpyeQpvdGgKdGhlcgriloF2YXIK4paBd291bGQK4paBc2VyCnRlcm4KdGV4dAriloF0aGVyZQppc2gKcm9yCtGC0LUK4paBc2V0CuKWgUAK4paB0L/QvgriloF0ZQpleAriloFyZXR1cm4KYWlsCuKWgWFueQriloFJdAriloFmdW5jdGlvbgp7XAonLArDqXMKYWxlCtCw0L0K4paBd2hlbgppYgriloFnbwphbmNlCuKWgWhhZAriloFRdQriloFjb21wCtC70LUK4paB0LcKbWF0aAriloFoYXMK4paB0LwK4paBcHJlCmVuZXIK4paBcGFydAplbGYK4paBZGllCuKWgWxpa2UKcmF5Cmlyc3QK4paBZGlzCuKWgW1hbgpyaXQK4paBdGhlbgriloFjbGFzcwpwcm8K4paBcG8K4paBdXNpbmcKZWIK4paBY29kZQpvd24K4paBc29tZQpjZXMK4paBJFwK0LXRgApsZWN0CuKWgWF1CmlzY2gK4paBY29sCuKWgeKAkwp1cApvbnMK4paBYWRkCmlsZAppc3MKdmFsCm91bnQKbGVzCnZlbnQK4paB4paB4paB4paB4paB4paB4paB4paB4paB4paB4paB4paB4paBCuKWgVoKSW4Kcm93CmVhcgphdGlvbnMKYWgKcXVlCnVibGljCmFuawriloFzcAriloFXaAotLS0tCnNrCmV3CmFncwrRgtC4CmFubgriloHigJQKZXJ0CmFjZQpzY2gK4paBbmVlZAriloHDoAppZW4Kb3VnaArQvdC1CuKWgWRlZgppagplcm4K4paBd2hhdAriloFBcgp3bwptbAo8LwriloFSZQriloFlcwriloFpbnN0CmJvCmF6CuKWgSMjIwriloHQsQplcm0K4paBQWwKbGVkCtC00LAKdGVuCnNldArQu9C+CuKWgWNvbW0Kc2gK0LLQsAriloEvCuKWgWRhdGEK4paBLy8KXSgK4paBc3RyCm9zZQriloFVbgp2ZW4KU3QKLi4uCuKWgdChCnlzdAriloHCqwppY2sKaXgKcGFyCuKWgdGDCuKWgXdhbnQKbmcKb3RlCuKWgWdyCuKWgWR1CuKWgS4KdW5kCuKWgW9ubHkK4paBc2EKZWx5CnZlcnMK4paBZW50CikpCignCuKWgW1vZAphdmEKdG9uCuKWgXNob3VsZAplbWVudAriloFmb3JtCuKWgWFsc28K4paBc2MKaW5ncwriloFZb3UKw7NuCuKWgWtuCigpOwriloF8CuKWgXdlcmUKc3MK4paBUXVlc3Rpb24KaXNlCuKWgXRoZXkK4paBRGUKb25kCuKWgXNvbAriloFmb2wK4paBbW9yZQriloFoZXIK4paBXwriloHDqQphdGNoCmZ0ZXIK4paBY3JlCmxvY2sKdHJpbmcK4paBVGhpcwp6ZQphZG8KdWxsCmdlcgpiZQriloFvdGhlcgriloFUYWdzCnV0aW9uCmljdAriloFob3cK4paBeAriloFTZQriloFjaGUKY3JpcHQK4paBanVzdAriloFwb3MKYW5nZQppZmljCnJlZQp9fQriloF0aW1lCmFwcArQvdGLCuKWgWZpbGUKYXJrCmljYWwK4paBZmlyc3QK4paBaW50CuKWgdCSCuKWgUhlCnRhCnVtZW50Cm9ycwpsZW1lbnQKcmFjCuKWgWFnCuKWgWRvZXMKeW4KcmVhZAp1YWwK4paBTGUKeXMK4paBZW0K4paBbnVtCnZlbArQtNC4Cm92ZXIK4paBZGlmCmV0aG9kCuKWgUlmCuKWgXNwZQp5bQriloF0aGVtCuKWgWludG8K4paB4paB4paB4paB4paB4paB4paB4paB4paB4paBCuKWgWxlcwriloFpdHMKZXNlCmllbGQK4paBcHVibGljCuKWgdCfCuKWgWRlbgp5c3RlbQpvZgriloFvdmVyCi0+CuKWgWZpbApuYW1lCmluYWwK4paBaWwKYW1wbGUK4paBd2F5CmljYQrQstC+CmNlc3MKaXR0CnVjaAriloF3aGVyZQrQvNC4Cm9yZwpodHRwcwriloF2bwppZW50Cm92ZQriloF2YWx1ZQplbmcK4paBTGEKXnsKcmVmCmllZApFUgriloFzdGF0CmZpZwptZQriloF2b24K4paBaW50ZXIKcm9pZAphdGVyCuKWgXRoZWlyCuKWgWJldAriloFlaW4KfVwKIj4K4paBc3ViCuKWgW9wCuKWgWRvbgp0eQriloF0cnkK4paBUHJvCuKWgXRyYQriloFzYW1lCmVwCuKWgXR3bwriloFuYW1lCm9sZApsZXQK4paBc2ltCnNwCuKWgWF2CmJyZQpibGVtCmV5CuKWgWNvdWxkCuKWgWNvcgriloFhY2MKYXlzCmNyZQp1cnIKc2kK4paBY29uc3QKdWVzCn0kClZpZXcK4paBYWN0CuKWgWJvCuKWgdC60L4K4paBc29tCuKWgWFib3V0CmxhbmQKbWVyCuKWgWxpc3QKY2FsCuKWgWltcG9ydApjb2wK4paBbmEKbmEKOjoK4paBd2hvCuKWgWVycm9yCuKWgVgKYXRvcgpleHQK4paBYmVlbgrDqXIK4paBcnVuCnBvcwriloFjbAoqKgriloHQmgp1bGFyCmF1c2UK4paBcmVnCuKWgWtub3cK4paBc2VlCuKWgWhpbQpuaW5nCuKWgdC30LAKYXRlcwpmb3JlCmlvbnMK4paBaGVsCnV0ZQriloFyZW0K4paB0LPQvgriloFNYXIK0YDRgwp2aWNlCmlyZWN0Cm5lcgriloF1bmRlcgpyaWIKaHIK0YfQtQriloFBcwriloFlbmQKZW1iZXIK4paB0LAK4paBYXR0CmluYQpzb24K4paBZm9sbG93CuKWgVNjaApwZWN0CuKWgXJlbAriloFTbwriloFsb29rCmFiZWwK4paBcHJvYmxlbQriloF2YW4Kc3Ryb25nCmNvCnBvbgpjYQphZGEKIjoKY29uZAphbWIKfSwKcXVlc3QK4paBYXV0CuKWgXJlc3VsdAriloFtYXkKUmUKaHR0cAopOgriloFBbmQKcmVkCuKWgUhvdwpwbwrRgdC60L4KYXR0Cm91cApjZWQK4paBdHlwZQriloF0aGFuCuKWgWNvbnMKdWYK0YbQuAriloFxdWVzdGlvbgpyYXBoCmlnaAriloHQnAriloFodHQKaW5zCmRlbgriloFkYQriloF2ZXIKb2gK4paBPT4Kcml2CnVkZQriloFGb3IK4paBcmEKZnJhYwrQvNCwCuKWgWFmdGVyCn17CuKWgW1ldGhvZAoiKQphbXAKYXNoCuKWgXJlYwriloFkaWZmZXIKT04KYXgKYW1lbnQKb3VyY2UKQ29uCml0cwpOYW1lCm1hbgriloFiZWMKY2hlCuKWgUVuCmFqCuKWgWdlbmVyCklOCuKWgWlkCmFnZXMK4paBbG9jCmZvCmJyCuKWgXNoZQpQcm8K4paBdW5hCuKWgdC6CmV0YQpsb2cKb2xvZwriloFzdXIKYXJnCuKWgS0tCmt0CihcCm1pbgriloFsaW5lCuKWgXZhcmkK0YHRjwppY3MK0L3Rjwp2ZXJ5CmFkZAriloFvYmplY3QKSWQK4paBQnV0CuKWgWNhc2UK4paBbWFrZQriloFjYWwK4paBcGFzcwrRgdGMCmVzc2lvbgpuZXQKLiIK4paB0LMKw6RyCtC00LUKbm8KYXRpbmcKYXRvCmxpbmUK0LLQuAriloFFeAriloFhc3MK4paBdmVycwrQu9GPCuKWgWVkCnVtbgpvdGhlcgrRgdGC0LAKYXRpdmUKU3RyaW5nCuKWgWxvcwp3bgriloFhbnN3ZXIK4paBbGV0CuKWgXBlCmVudHMK4paBZmUKaW5jZQpuaQppZGVyCm93cwriloF0ZXN0CuKWgWhlcmUKcm9sbAriloFjYWxsCnJ1Y3QK4paBcG9sCmFpdAriloFiYWNrCmhvCkV4CnJlc3MKU1QKcmllZApkYXRlCtC10YIK4paBZGlkCnRpbmcK4paBRWwK4paBZGVtCikkCtC+0LLQsAp1cnJlbnQKbGFjZQpyaWdodApyZW4K0L/QvgriloFlYWNoCmN5CmJsb2NrCmRhdGEK4paBJQriloFhYwriloE9PQrDvHIK4paBcG9yCmFzawphcmNoCmFtZXMK4paBQ29uCtGH0LAK4paBb2ZmCuKWgWZpbmQKY29udAriloFub3cKd29yawphdGlvbmFsCmRkCmNpw7NuCuKWgdCQCmF1bHQKTGlzdAriloFleHQKdXJzCmFrZQp1bGUK4paBcG9pbnQKQVQKYXV0CuKWgXRyYW5zCuKWgWNvCuKWgXJlYWQK4paBdXNlZArRgdC60LgKYXJpCkxFCmV0ZXIKb3VuCmV2ZXIKc2VsZgppbmVkCmlkdGgKdXgKanMK4paBc3VjaAriloFJcwrDqWUKZnVsCuKWgWRpc3QK4paBYnUKaXRlbWl6ZQpDb250CmplCtGB0LgK4paBcHJvdgpiYgp3YXJkCmVzZW50CmVyc29uCmFua3MKd2gKbm90CuKWgVdlCmthCnJvcAphdHVyCmFscwriloFiZWwKw7ZyCmZyCuKWgWV4YW1wbGUK4paBaW5jbAphbWlsCuKWgdGA0LAK4paB4oCcCuKWgXN0cmluZwriloF0aGluawpUaAriloF0ZW0KYXZlCuKWgUZyYW4K4paBbnVtYmVyCuKWgXNpCmltZXMKdGVtCm15Cmxlcgpsb2FkCj09CuKWgWhhbmQKemEK4paBYmVjYXVzZQriloFzY2gKdm8KdGhpcwpJRArDo28K4paBc3RhcnQK4paBd2FyCuKWgWhlbHAKdHMK4paBY2hhcgriloFwaAriloFtaW4KdGlsCnJpdGUKLS0tLS0tLS0KZWxzCuKWgW1pdAplZGlhCtC60YMK4paBU2gKYW55Cl07CuKWgdCRCmlxdWUKZGEKZWYKZGV4CuKWgXByb2R1CuKWgdCdCmdyYW0K4paBT3IK4paBZ3JlCnF1b3RlCmxlZwpvcm4K4paBaW5kCuKWgXBvc3QK4paBZGVwCl0sCnZpCuKWgXVzZXIK4paBPgpsaWNrCuKWgXZlcnkKZXRoaW5nCuKWgWFycmF5CuKWgWd1CuKWgWR1cgpgLgrRgtGMCmxpY2F0aW9uCtGB0YLQuAplawppY28K4paBZGF0CtC+0YAKaHRtbAppb25lCuKWgWRpZmZlcmVudAriloFjaGVjawriloFmcgriloFFcgriloF0ZXh0CtC90ZYKaWNodApzdGFjawpFTgpyYWcK4paBZXZlcnkKQXIK4paBYmVmb3JlCmFsc2UK4paBZmluCuKWgWTDqQriloF0aGVzZQriloFkZXQKVmFsCmNlcHRpb24K4paBYW5kcm9pZApibG9ja3F1b3RlCuKWgWplCmZpbGUKYXRzCuKWgdC00L4KZXNzYWdlCuKWgWFnYWluCmF3CkNoCndlZW4K4paB0JQKZm9yCmNpYWwKcGxheQpwcmUKaWRhCuKWgVBhcgpueQpyYWN0CuKWgXN1cHAKYXNlZApsZWN0aW9uCuKWgWRhbnMKYWlyCnJvbAriloF0aHIKRGF0YQpsaWNoCuKWgdC/0YDQvgriloFsb25nCuKWgXNlY29uZAp1YWxseQppbmVzCuKWgWZvdW5kCmVuZ3RoCnlwCmVhZAriloFsb2cKdWkKbmV3CuKWgdCgCmdvCmF1cwpvZHkK4paBc29uCtC80LUKZXJvCnZlZApzdWIK4paBcmlnaHQKdmlldwriloFmb2xsb3dpbmcKJykKIik7CuKWgXNhaWQK0LbQtQrRh9C4CtGC0YMKb3R0CtGB0LUKYXJzCiQuCmdnCuKWgWJyCm9vbAp5bGUKdXNlCuKWgXNob3cKbGVhc2UKY2lhCuKWgWRpcmVjdApkb2MK0LDRgAptcwriloFnaXYK4paBZXhwCnFsCtC00YMK0LLQtQriloFCZQpDb20KaXRlcgpSRQptcAptZW4K4paBUm8KTUEK4paBQ29sCmlzdGVyCuKWgXdlbGwK4paBPC8KYXlvdXQKYXR1cmUKaXZlcnMKenkK4paB0L3QtQriloFtZXQKdW5lCnl0aApUeXBlCuKWgWVsZW1lbnQK4paBbGluawptb2QK4paBYmV0d2VlbgpjZXB0CnF1aXJlCuKWgXRocm91Z2gK4paBd2hpbGUK4paBT24KdGhlCsOtYQriloFzb21ldGhpbmcKdm9sCuKWgW1vc3QKc2MKdXNzCuKWgWNhcgriloFzbQriloHRgNC+CmFubwpsZWZ0CnZhCuKWgXRydWUKKCQKZW1zCuKWgW11Y2gKw6FzCuKWgU5ldwriloFwcm9wZXIKZXJhCml0ZWQK4paBZG9jCmljZXMKVGhlCuKWgT8K0YHRgtC+CmZsCuKWgXNwZWMKZW5kZXIKd2F5CuKWgXNlbGYK4paBZXZlbgrRltCyCuKWgdGB0LUK0L3QuNGPCuKWgVByCuKWgWtlCmVtYgriloF0YWJsZQriloFlcXUKbGllbnQKdGQKcGFydAriloFwcmludAriloF1bmUKaWZ5CuKWgS0+CmVuZQriloFtb24K4paBZGVjCuKWgXN0aWxsCuKWgdC+0LEK4paBVHIK4paB0YQKaWZlCmlzbQpieQpyYXcKaW9yCuKWgW1lZApvcmxkCuKWgWNvbXBsZQp3dwriloFhcnQKcm9uCuKWgdCTCuKWgU15CuKWgWFscwpyZWN0CuKWgWF1ZgriloFkb3duCmF0aGVyCkNvbApUZXh0CmJhY2sKJCwK4paBeWVhcgrQvNC+CnBpCuKWgUdyCnJlYW0K4paBcmVwCmJmCnd3dwriloF3dXIK4paBb3JnCmludGVyCuKWgURpZQriloFiZWluZwoiLgpsYWJlbAriloFjZW50CmphdmEKYmFyCmFudGUKYW5hCl9fCuKWgXNvbHV0aW9uCuKWgdCeCuKWgWZsCuKWgWNyZWF0ZQppY2kKc3RlCnl0aG9uCnVudAphc29uCmZlcmVuY2UKU0UK4paBbm9uCmFuZQriloFpbnMKYWRlcgpfe1wKUmVzCuKWgW1haW4K0L/QuAriloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloEK4paBVGhlcmUK4paBcG91cgpSTwpgLApsaXNoCmJqZWN0CmNjZXNzCuKWgW9yaWcK4paB4paB4paBCmlzY2hlbgpvd2VyCuKWgWhldAp1YwriloFlbHNlCsK7LgriloHQvtGCCmVxdQpzaWJsZQp0ZXN0CnN0YW5kCsOpbgpldHMKR0UKaWRlbnQK4paB0LUK4paB0L/RgNC4Ci4sCuKWgWRhcwpvY2sKLCIK4paBdm9sCuKWgWZvCuKWgXBhcmEK4paB0KIK4paBQ2FyCnJhbAriloFTcAp2YXIK4paBcGxheQpvdXNlCuKWgdGC0LAKaWNhbGx5CuKWgWNvbnRhaW4KcG9uc2UK4paBU3RyaW5nCsOhbgriloFib3RoCmtlbgpBUgrQtdGA0LUK4paBSWwK4paBaXNzCuKWgW9wZW4K4paBKQriloFXaGF0CmZlCnJpdmF0ZQpyZWcK4paBd2l0aG91dAriloF6dQp2aXMKZmxvdwriloFodHRwCmFiYXNlCuKWgXdvcmQK4paBY2hhbmdlCuKWgXdvcmtzCuKWgWdlCuKWgSEK4paBZWVuCml0bGUK4paBZXZlbnQKd29yZAphbmRvClNCCnJlbQriloFmaWVsZAp2aW5nClNlcgriloFvdXIK4paBcXVpCuKWgW9wZXIK4paBaXN0CmRlZgriloFtYWRlCtC90LjQtQpweAriloFtZW4Kcm0KYWlzCmNlbnQKbGlzdApUbwriloFUbwpqYQp2ZXJ0CuKWgW1hcgp2YWx1ZQriloHigJ4KIjsK4paBYXVzCuKWgUJyCm9sZQriloFtdWx0Cm91Z2h0CuKWgW1hdAriloF2aWV3CmZpbAriloHRgdC+CtCz0LAK4paBdm9pZAriloFnb29kCtCx0L4KQ1QK4paBbWFueQpiZW4K4paB0LLQvgriloHQutCwCuKWgXN5c3RlbQppbm8K4paBYW5vdGhlcgriloFyZXN0CnVzZXIKaWxpdHkKYWkK4paBbWlnaHQKdXN0b20K4paBb3JkZXIK4paBVmVyClNTCn0pCuKWgWVmZgrQtNC+CmV0dAriloFzaWduCtC80YMKSVQKc3RyaW5nCmVsbGUK4paBc2luZwpjdWwK4paBdHJ5aW5nCuKWgWJlZwriloFwYWdlCtGF0L4K4paBQ2FuCuKWgVNlcgorKwriloFtdXN0CuKWgXZhbHVlcwriloFrZXkKaWJsZQpdLgppcmQK4paBcHJvZ3JhbQpyb2xsZXIK4paBY29ubmUK4paBc2F5CuKWgXBhcmFtCmFjaGUKdmVsb3AK4paBc2VsZWN0CuKWgWZhbWlsCuKWgWxhc3QK4paBVGhhbmtzCuKWgXBvcAp9LgplcQriloFkb2VzbgpbJwriloF0ZXJtCuKWgXLDqQriloFkb2N1bWVudArQv9CwCtC70YMKYXRlZwouKQpsaW5nCmlvbmFsCmFibGVzCuKWgXRhawp1dHRvbgriloFhcmcKdHlwZQriloFzdXJlCuKWgXJlYWwK4paBd2ViCuKWgWN1cnJlbnQK4paBUGwKY2hvCm1lbnRzCuKWgUpvaApvdHMK4paBZXhpc3QK0L3RgwriloFmw7xyCuKWgdC40LcKZG8K0L3QvtCz0L4K4paBbGFzCuKWgW51bGwK4paBaW5mb3JtCuKWgdCbCuKWgXZlcnNpb24K4paBY2hhbmcKYWdlcgriloFDb21tCtC70ZYKdXNoCuKWgUdlCuKWgWhpZ2gK4paBaW5wdXQKb2dsZQpyb3MKYm94CmdlbgriloFzdGUK4paBbG9jYWwKSW0K4paBcHJvY2Vzcwp0ZXJuYWwKaXplZArQs9C4CsOpdAriloFJbmQK4paBb2NoCmx0CuKWgWNvbHVtbgriloF0cmllZAriloFjb21tYW5kCuKWgWJlc3QKYXN0ZXIK0LfQsAriloFwcmltCuKWgW1vZGVsCuKWgdGWCuKWgXRob3NlCml0aWVzCsOocmUK4paB0YDQtQrRmNC1CtGI0LgKcXVlcwriloFBbQriloFvd24KbGluCtC30LgKVmFsdWUKdGhpbmcK4paBLAriloFUZQriloFzdHVkCuKWgXVtCuKWgXNlcnZlcgppbGxlCuKWgXB1dAphdGl2Cmd5CtC+0LLQuApyYWYK0L7QstC+CuKWgXd1cmRlCuKWgVdoZW4K4paBZGl2CmFudHMK4paBdGVyCuKWgXBhcnRpYwriloHRggriloFEbwriloFObwpzZXJ0CmlkbwptYXRoY2FsCmFkZQriloFJSQpsZWFyCm9ncmFwaAplbnNlCuKWgXJvdwpudW0K4paBcG9zc2libGUK4paBc2luY2UK4paBQm8KY3Rpb25zCuKWgUltCk9SCtGG0ZYK4paBaWRlCm1hcAriloFjb3JyZWN0CnZlcwpwaHAK4paBb3V0cHV0CuKWgVBoCkFMCmFyZWQKXFwK4paBaW1hZ2UKZXNjaArQttC4CuKWgWNvbmYKcG9yCnF1ZXJ5CnVyZXMKaXVtCmVuZHMK4paBQWIKU0JOCtGW0LQKZXRoZXIKcHRpb25zCml0dQpsaWIKbnMKa2kK4paBd29ya2luZwriloFjb21vCuKWgVRoZW4KTUwKa2V5CmNsYXNzCm9wbGUKaXR0bGUK4paBbWF0Y2gKd2F5cwptYXRoYmIK4paBcmVxdWlyZQphbHQK4paBdmlzCuKWgWJsCuKWgWNhbGxlZApJdGVtCnVyYQp2ZWMKZW1lCuKWgWRlbGxhCmVtYnJlCnVyZwpTZQriloFyZXF1ZXN0CmlzY2hlCuKWgXBvcnQK4paBaW5zdGVhZAo9XAriloHQowpob3IKZW50ZQp1bWUKZXJkCtGB0LAK4paBd2h5CnJpc3QK4paBcGVyc29uCuKWgS4uLgriloFwcml2YXRlCuKWgXRvdApwaGEKaWZ0Cml0YQpsb2MK4paBb2xkCtC+0L0K4paBbmVsCiddCnRpCmlldApjaXRlCnBsZW1lbnQK4paBYWJvdmUKa3MKcmVhZHkK4paBY29tZQpzZWN0aW9uCuKWgVBvbAriloF3cml0CuKWgWh0dHBzCuKWgSQkCuKWgcK7CuKWgWJ1aWxkCml0bwriloFjb25zaWRlcgphZnQKQXBwCixcCmluZG93cwpjb21tCuKWgTsKZ3JvdW5kCuKWgXBsYWNlCkJ5CuKWgXByb2plY3QKT2JqZWN0CuKWgXJlcHIKZW5jZXMKaW5kb3cKenQK4paBZmlsZXMKY3oKaXZpdHkK4paBaW5pdAriloFwcm9iCuKWgXNrCm9ydGgKaW1lbnQKb3VibGUKYXRhbAppcmMK4paBw6gK4paBYnJlCmlzdGEKaW5wdXQK4paB0JgK0L3QvtC5CnN1bQpwYXRoCuKWgWNvdXIK4paBdG9vCuKWgUFkCuKWgUd1CuKWgWZhbHNlCuKWgWZ1bgriloHRgdGCCm9vZArDqHMK4paBZW5jCmJvbApybAphcmdldApvcmRlcgriloFtZWFuCtC/0LUKaWdlbgriloHQv9GA0LUKd2lkdGgKOw0KaXRvcgriloFzdGF0ZQriloFncmVhdAplbm4KYmluCkVyCk1vZApvegriloF3b24K4paBZmFjdAriloFqYXZhCuKWgVVuaXZlcnMK4paBY2FwCmlzdG9yCn0oCmt1Cml0aGVyCmFsZXMK4paBb3UKcm9zcwriloF0YWtlCnJpeApsb2IK4paBZWluZQphc2VzCuKWgWFjY2VzcwppdMOpCmlzdHIKaXphdGlvbgriloFhcHBybwpiYWxsCuKWgW1hawp9XgriloFDb25zCnByZXNzCnNlcnYKKCkuCmFmCuKWgXJlZgopXAriloFjb250aW4Kc3UKaXZlcgriloFjb25kCuKWgWV4cGVjdAriloFjaGFyYWN0CmJlcnQKZWx0CnRlcnMKc2NyaXB0CuKWgUVkCmFwdAonKTsKcHJpbnQK4paBc2l6ZQriloFzaWNoCmZhY2UKZW5kZW4K4paBQW1lcgppZmllZArDs3cK4paBU3UKdGVzCm1lZAriloFSZWcKc29sZQriloFpbmNsdWQKaW5pCmluY2kK4paBcGxhCuKWgWxlZnQKZGYKUGFyCuKWgUFsbAriloFvY2MK4paBQXQK4paBY3IKUXUK4paBZ2l2ZW4K4paBU3lzdGVtCmljYW4K4paBZmluYWwKaXRpb25zCuKWgdCx0YsK4paBcGVyZm9ybQpBTgriloFNZQp1cm8K4paBVGhhdArQs9GA0LAK4paB0J/QvgriloHQstC4CmFibHkK4paBcHJlc2VudApkdWN0CnJpYwriloFFbmcKdHJ5CuKWgWxhcgpibAppZGQK4paBw6RyCm9yYQpMTApvc3MK4paBSVNCTgriloF0aHJlZQpqbwpuw60KcmMK4paBZmFyCuKWgU5vdAriloFsaXR0bGUKZGlzCmF0aQpmdW5jdGlvbgriloFhYmxlCmxlc3MK0YHQvgriloFwYXRoCuKWgXByZXMKbG9zZQpQSQriloFpc3N1ZQphY2thZ2UKdGltZQppZ2UKYW1zCuKWgUNsCmFpbHMKYWxrCmlpCtGI0LUKcGVuClFMCuKWgWVhcwpSTApjZWwK4paBc2wK4paBYXNrCuKWgW5vbQriloF0b3AKaWRlcwppbmRleArDqW0K4paBaGFwcApveApjZAriloFiZXR0ZXIK4paBbG9hZAphZG9zCnplbgriloFjZQriloFmYQriloFKb2huCklNQQriloFCYXIKb3ZlcmZsb3cK4paB0LTQtQpuZXNzCmNlcgriloFIZXJlCnJldAriloFzegphbWJkYQpvcHkKdXJsCnB5CnJ0CuKWgXVuZGVyc3RhbmQKYcWCCmhlcgojIwriloFjaGlsZAriloFleGVjCuKWgWFwcGxpY2F0aW9uCuKWgXN0cnVjdAriloHRjwpGaWxlCuKWgWNlcnQKaXNvbgriloF2YXJpYWJsZQpERQpycwriloFyZWFsbHkKUG9ydApiYQriloFCZXIK4paBaW50ZQriloFzdGF0aWMK4paBY29uZmlnCuKWgVNoZQplc3Rpb25zCuKWgXBsdXMK4paBaGFiCm9wZQriloFtdXMK4paBY291bnQKTUUK4paBc3VwcG9ydAriloFwZW9wbGUK4paBYmVoCuKWgWFscmVhZHkKVHIK4paBZG9uZQpkZW0Kc2l6ZQphbHBoYQriloFkaXNjCl0pCuKWgU1hbgriloFtaWwK4paBc3RhbmQK4paBZ3JvdXAK4paBc21hbGwK4paBbWFnCtGB0YLRjAriloFkZWZhdWx0CuKWgXNpbmdsZQpsaW5rCmNsdWRlCuKWgWVhcgppbGFyCioqKioK4paBZml4CmxleQriloFwYXMK0L3QuNC5Cmlzc2lvbgriloFpbXBsZW1lbnQKaXRjaAriloHQs9C+0LTQsAriloFhbHdheXMK4paBSmFoCnByaW5nCsOnw6NvCnBsYXRlCuKWgWRlc2NyaQriloFoZWFkCmluaXQKb2dyYWYK4paBcXVlcnkKaXZlZAriloFpbmcKcHR5CmhhCuKWgW1vdgriloHRjQpldHRlCmlseQriloFnb3QKaWxlZAppY3JvCuKWgXdyCtGA0Y8K4paBbmV2ZXIKb3JlcwriloFiYXMKaW9zCmxhY2sKYWludAp2aW91cwriloFnaXZlCmlkYWQKRW4K0L3Ri9C5CnRhYmxlCuKWgdCd0LAK4paBcGF0CtGC0L7RgAphbmd1CmxveQriloFzZWcKYXJyYXkK4paBRmwK4paBaW5kZXgK4paBc3cKSU1BR0UK4paBa20K0LHQuApDbGFzcwplbmEK0LzQtdC9CmNvbXAKYXR1cwpyYXAK4paBTGlzdApFcnJvcgriloF0eXAK4paB0LzQsApjcwonOgpqaQriloFIb3dldmVyCuKWgdGC0LUK4paBYmVsb3cK4paBQXBwCtGJ0LUKfV8KYnVtCnZpcgrDqWVzCuKWgXJlY29yZAp0YWluCmxlbQppdGFsCuKWgWltcAplZ28K4paBb2QK4paBcmVjZQptaXQKZmZpYwpzdGFja292ZXJmbG93CmlldmUK4paB0JcK4paBbm92CtGG0LUK4paBSW50ZXJuCmJ1CuKWgXN1Z2cK4paBbG9vcApyaWRlCuKWgSQoCuKWgXN1cGVyCnJpZArQvdGL0YUK4paBUGVyCuKWgWRvbQo9Jwp1dHNjaApsZW4K4paBd3JpdGUK4paBaW52Cm91dGgK4paBSGVyCuKWgXllYXJzCuKWgW9yaWdpbmFsCmVnYQriloFTdGUK4paBc2VlbXMKw6lnCuKWgW5leHQKZWRlcgriloFOZQphdmFzCmlmaWNhdGlvbgpFeGNlcHRpb24K4paBRGVyCuKWgXZlCmF0aWMKaGF0CmJyYXJ5CnJldHVybgp1cmNoCmlzaW9uCm1pCm9pbnQK4paBZGF5CmljdGlvbgrDoWwK4paBw6lzCuKWgXRob3VnaAphY3Rpb24Kw610CnVuZ2VuCm91cnMK4paBc2NyaXB0CuKWgWluZm9ybWF0aW9uCuKWgW11bHRpCuKWgVxcCnN0ZXIK0LrQtQpBQwpjaWVzCuKWgWRpc3BsYXkKb21hbgpUaW1lCml1cwopKTsKdHJlCuKWgWxpbQphdGVseQrDqWQKaXN0ZQriloHRgdCwCnBvc3QKdWVsCmltZwriloHRhwrRgdC60LAKZWxkCnBwZXIKdWxhCuKWgWdlbmVyYWwKQWwKRm9ybQriloF1cG9uCnpvCmFtZW50ZQriloFwcm9tCuKWgcO8CmxleAriloF0dXJuCuKWgdC80LUKZW50aW9uCtC70LXQvQriloFhZgppY2xlCtGB0YLQsgriloFGaWwK4paB0KQKYXZhc2NyaXB0Ck1hbgphcmEKd2FyZQphbGlnbgphbmdsZQriloFTYwp1bmljCuKWgWZyYW4KVW4KemkKbWV0CkFkZAriloFwdWIK0LrQvtCyCuKWgWdlbgriloFwb2QK4paBc3VtCuKWgWhhdmluZwriloFhdmVjCnNsCuKWgWZpZwriloFSZXMKRGF0ZQp1bGVzCndpdGgK0YHQutC40LkKZ3UKRVQK4paBYnJvCnJpZQphcHMKZW5kaW5nCm1haWwKb29rCuKWgXN1Y2Nlc3MKYmVyZwriloFkZWIKZWx0YQooKWAKZW50aWFsCmZyYW1lCktleQppbm4K4paBc2ltcGxlCml2YWwK4paBY2FyZQriloFXZWIKIikuCj48LwriloFkYXRhYmFzZQriloFOb3cKSW5kCuKWgdC80L4KY2h0CmJhbgpyYW0KZXF1YXRpb24Kc2tpCmllZgpsaW0KR2V0CuKWgXRyZQphdGVuCmJlZAriloFKZQriloFyZXN1bHRzCtC70Y4K0YLQtdC70YwKZGIK4paBYml0CmJvZHkKQXJyYXkKbXUKcHJlc3Npb24K4paB0YHRgtCwCm9ueQppZmYK4paBYmFyCuKWgUFyY2gKYmVycwopewriloFNb24K4paBZG9pbmcK4paBcHJvZgriloFpbnN0YWxsCuKWgXBvc2l0aW9uCmVtYQriloF9KTsKUGF0aAphbGkK4paBJiYKbGV2CuKWgWNhbm5vdAriloFNYXkKaW5zdAotXAriloFjb3VuCuKWgWFuZwriloFhcHBlYXIKY29yCmNpw7MKaWRlZApxdWVzdGlvbnMKYXR0ZXIK4paBUGEKc2VsZWN0CuKWgXByaW5jaQpFdmVudAriloFzaWRlCuKWgW1lbQriloFKYW4KYXJpbwriloF3aXRoaW4K4paBVmFsCm9kZXMKaWRkbGUKdXJhdGlvbgpicmEK4paBZGF0ZQpbXQriloFlbnRyZQppbGkKUG9ydGFpbApkb2NzCtGB0LrQvtC5CkVsZW1lbnQK4paBbWVzc2FnZQriloFuYWNoCuKWgWR1cmluZwriloFncmEKZXR3b3JrCuKWgUJ5CuKWgXRlbGwKZXRlCn5cCuKWgWJpcwriloFwdQriloFyZWQK4paBdGhpbmcK4paBc29ydAp4aW0KaXJlcwpVc2VyCmlvZAriloFFc3QKb3NlZApvdXRlCuKWgUxlcwriloFzZW50CnJpYnV0ZQp1dGVzCmlzdG9yeQriloFzZXJ2aWNlCic7CmZpZWxkCuKWgUlOCmVuc2lvbgpyZWwK4paBZ29pbmcKd2ViCkNvbnRleHQK4paBbGF0ZXIKdWsKbGF5b3V0Cm9uYQrDoXQKLS0tLS0tLS0tLS0tLS0tLQriloFleGFjdAphbmRvbQriloFzaWUKSUkK4paBVGhleQptZW50ZQppYmxpCuKWgWZpbmUKVVQK4paBZGV2ZWxvcAriloFFaW4Kc29mdApvZmYKU2V0CuKWgWF6CmV0ZXJzCmlsZGVyCnBsZXMK4paBc3BlY2lmaWMK4paBb20KZXJyb3IKZW50bHkK4paBZmlsbQp1Y2sKYWlucwphY2nDs24KZ2VzCtC20LAK4paBdGhpbmdzClNoCuKWgXRob3VnaHQK4paBYWRkZWQKZGVwCtGB0LrQvtCz0L4K4paBTGkKaWxzCnluYwriloHRgtC+CnJpZXMK4paBY3UKY2hlbgpJT04K4paBRGVzCnVsdGFkbwppcnQK4paBYmFzZWQK4paBbW8K4paBZGVzdApwbmcKcmVlbgriloFydW5uaW5nCmFtbWEKb3VkCuKWgXJlZmVyCmlvdXMK4paBSnVsCuKWgXNlYXJjaAphbGQKZWRlCuKWgXdyb25nCkFuCuKWgXVudGlsCnNpdGUKYXllcgriloFvbmNlCmFycgriloFhZ2FpbnN0Cj09PT0K4paBc291cmNlCmFybgphcGkK4paBcmVwcmVzZW50CuKWgWFmZgriloFzZWluCuKWgWFsbG93Cm9ybWFsCmVuZGVkCuKWgWNvbnRyb2wKbWF0aGJmCmNvbWUKY3VyCmVuZG8Kd2EK4paBdXBkYXRlCuKWgWluc2lkZQriloFyZWFzb24Kb21lbgriloHQstGLCkRlCuKWgdGY0LUKc3cK4paBc2V2ZXIKT2YK4paBaW5zdGFuY2UK4paBbWVyCuKWgWVmZmVjdApjb2xvcgp1Z3VzdAppbHQKZGVzCml0egp1bGF0aW9uCm5pZQriloFXb3JsZAriloFzaW1pbGFyCnltYm9sCmhpbmcK4paBbWFyawpTdGF0ZQriloFjb250ZW50CuKWgW1lYW5zCmFtZWQK4paBRW5kCk5ECmNvdW50CuKWgUluc3QKcGVydHkKY3RvcgriloF7XAriloFMZXQK4paBIT0K4paBZ2V0dGluZwp1dGgKdW1iZXIK4paBQ29uc3VsdGFkbwpzY2hhZnQKbGV0ZQriloFXaWxsCuKWgUVtCmhlYWQK4paBbGVnCtC90L7QvApPcgphcm0KcG9uZAriloFDaHJpc3QK4paBYXJvdW5kCuKWgWNsZWFyCuKWgWhyZWYK4paBU2VlCicpLgriloFjcmVhdGVkCuKWgWJ1dHRvbgppbmluZwriloFjbGljawppYW0KcGxpdApGb3IK4paBcG9saXQK4paBc2VlbQriloFsaWZlCtC90L7QsgriloFpbnRlcm4K0YnQuApzZWwKc29jaQriloFzdG9yCmNsZQplYXJjaAphbmRyb2lkCn1eewriloFlaXRoZXIK4paBZmV3CuKWgWluaXRpYWwKbGVuZ3RoCnJpYQpzcWwKd2lrCuKWgcOpdAp1ZXIK4paBdmFsaWQKQW5kCmluY2x1ZGUKdXJ5CuKWgXN1cwppcmVkCuKWgUFmdGVyCuKWgWR1ZQriloFiZWkKb3VyY2VzCuKWgU5vdgpBY3QK4paBQ29udAriloFicmVhawplc3RlZAriloFhY3R1YWxseQplbHNlCnRtbApyZXIKb25lcwriloFkZXNpZ24K4paBcHJvcGVydHkKcGhpCmFsaXR5Cm9jaAppc3RzCuKWgcK3CnVkaW8KQUIKYWxhCmlvbmVzCtGE0LgKZmluZApBcwriloFjdXN0b20K4paBYW5uCkVTCk9UCmxhbWJkYQriloFpZGVudAriloFvcmdhbgriloFDZW50CuKWgUNoYXIK4paBb3MK4paBaGFyZArRgNC+0LIK4paBLz4Ka28K4paBZXhwZXIK4paBc2VwYXIKeWwKb3VybgriloFkZXYK4paBYXVjaAriloFibG9jawpib29rCuKWgW1hcAppbGxhCuKWgWNvbXB1dAriloFzcGFjZQpyZXN1bHQKKX0K4paBZWNobwpjb25maWcKaGkK4paBbGFyZ2UK4paBd2lkdGgK4paBR28KbWF0CuKWgWRpZmYK4paBa2luZAphbmNlcwp5bmFtCuKWgWNvbG9yCkludApzb2wK4paBcGkK4paBY2hhcmFjdGVyCm9tZW50CuKWgXJlc3BvbnNlCmlnbWEKd2FyZHMKYXJyb3cK0YHRgwp0aWVzCuKWgcO8YmVyCkltYWdlCnlkCuKWgdC/0LXRgNC1CuKWgW5vZGUK4paBaXRlbQphY2hpbmUKaW1hCuKWgXZhCuKWgWFwcHJvYWNoCuKWgXdlcgriloHRh9C1Ck9uCm9sbG93CtC+0L3QsApjdGVkCnVyZWQKQ29udHJvbGxlcgpsaWVkCuKWgWpvCuKWgWRhbAp1bmsK4paBw64Kc3RhcnQKb2xhCuKWgWNvbXBvbgpJQwpiaXQK4paBYmFzZQrQv9GDCuKWgWlkZWEK4paBZGlyZQriloFyYWQKZ3JvdXAK4paBV2l0aApzZXJ2ZXIKc2lkZQpzaW5nCuKWgWRpZXMK4paBbmVhcgriloF2b29yCuKWgWFyZ3VtZW50CuKWgX0sCuKWgWxhbmQK4paBbmFtZXMK4paBb3B0aW9uCml0aHViCnBwZWQKYXVnCuKWgWxpbmtzCuKWgWZ1bGwK4paBc2l0dQriloFjb25zb2xlCuKWgWV0YwphdXgK4paBQ29yCmljcm9zb2Z0CuKWgWNhbWUKbG9jYWwK4paBa25vd24K4paBbXVsdGlwbGUKYW5ndWFnZQriloF0b3RhbApvbG9neQrDpHQK4paB0KUK4paBZnJlCuKWgXRlbgppZGVvCuKWgWJlcwp0cnVlClF1ZXJ5Cm9tbQriloFBcnQK4paBa2VlcAriloFVbml2ZXJzaXR5CnJlYXRlCnBwb3J0CuKWgXB5dGhvbgp0cmEKZWN0b3IK0YDRlgpvcGgK4paBY29uYwriloFmb3VyCnZpcm9uCuKWgXZpYQo/IgppbWFnZQpvbGwK0L3Ri9C1CuKWgWNvbnRleHQK4paBc2VtCi5fCuKWgWVuZwptYXIKQUQK4paBbW9yCuKWgUNhbAriloFjZWxsCmltYWwKQVRFCuKWgWluZgrDtm4KdWZmZXIKc3EKLi4uLgriloF6dXIKV2l0aArRgNCw0L0KY2huCuKWgWRvb3IKY29udGVudAriloFtaXNzCuKWgXNpbXAKw6FyCmlyYQriloFoYXQKVGVzdAriloFjZXJ0YWluCk5TCuKWgWNobwriloFhZHYKd2hlcmUK4paBbG9va2luZwriloF0aW1lcwrQvdC40YUKdXRvCuKWgcOJCmNhbgpob3N0CuKWgSgqCmxvYXQK4paBbmljaHQKRmllbGQKYnVyZwpjb25zdAphZGVzCuKWgU11cwriloFub3RoaW5nCuKWgWluY3JlCuKWgU1pbgriloFwb3dlcgriloFBbWVyaWNhbgpsbgp2YWxpZAp1bmdzCuKWgU5hdGlvbmFsCuKWgVNhbgriloFZb3JrClJlcXVlc3QKY2hhcgriloFaZQpidXR0b24K4paBYWxnClNPTgriloFhcAp1ZmYKYWJpbGl0eQrQtdC8CuKWgWFueXRoaW5nCmVsYQooKSkK0LHQsAphbXBpb24K4paBcG90CuKWgWZ1dAphaWxhYmxlCuKWgXByb3AKIl0K4paBbGVzcwpsYWcK4paBQXVndXN0Ckl0CuKWgXBsZWFzZQriloFzdHlsZQriloFBbHNvCmJ0CuKWgXByb2JhYmx5CuKWgU9uZQriloFwb3NzClVJCnVpdAriloFXZXN0CmhuCitcCkJ1dHRvbgpqc29uCmVycgpyYW1lCmRvbQppbG9uCmFsZgriloFjbGllbnQK4paBY29udGludQp4bWwKcGVjCmFkb3IKbHMK4paBaG93ZXZlcgriloFBbnkKw6RuZAptYXRocm0K4paBdXJsCuKWgWJvb2sK4paBZ2wKaXZlcwpnaQriloF0cm8K4paBVVMKcG9pbnQKb3BlbgriloFjdXIK4paBZXJhCuKWgXBhcnRpY3VsYXIK4paBSFQKb290CmVsbG8KbG9iYWwK4paBYWN0aW9uCuKWgUludAriloFpbmNsdWRlCuKWgWVsZW1lbnRzCtC90LDRjwphcmRzCuKWgUJsCuKWgWh1bQpmcm9tCmNoYW5nZQriloFmdW5jdGlvbnMKaGVuClNlcnZpY2UK4paBaGVpZ2h0CuKWgUxhbmQKaWFzCmdzCmnDs24K0LvQvtCyCm5vZGUKLuKAnQpoYW5kCuKWgdCx0YMK4paBYW1iCuKWgUx1CuKWgXRocm93CuKWgW1vdAriloFBY3QK4paBd29ybGQKX1wKYmFzZQriloFDbwriloFhcmNoCuKWgSMjIyMKZ2VkCnByaWwKb2xkZXIKTW9kZWwK4paBc2V2ZXJhbApsaWUKY2hlY2sKXXsKY29ucwriloFUcmEKaGVjawriloFsZWFzdApkb3duCmVicnUKRGVmCnBhcmFtCmlzY2hlcgriloFjYXMKQ0gK4paBYWRkcmVzcwriloHRgNCw0LcKdWZlbgp1cm9wZQrQtdC5CuKWgWJvdW5kCkNPCuKWgUFuZwriloFNYQpJbmRleApjb3JlCm91Y2gKYXRhYmFzZQpyaWJ1dGlvbgpkb2N1bWVudApMZQp9X3sKdmVybgriloFzdGF0ZW1lbnQK4paBQnJpdApvbm8KcHNpbG9uCuKWgWxldmVsCuKWgXByb2R1Y3QKSVMK4paBY291cnNlCuKWgU1yCj4NCuKWgWJhY2tncm91bmQK4paBcmV0CmVyaW5nCm1vc3QK0YHRjNC60L4K4paBdGhyZWFkCml0aW9uYWwKaXRlcwpQbAriloFkb3MKZ2EKZGF5CuKWgUdlbmVyCuKWgXR3CkFkCiI+PAriloEoJAriloFtb21lbnQKdGl0bGUKY3JlYXRlCnZlcnNpb24KTWFuYWdlcgriloFmdXIKcHBpbmcKaWpuCtC+0YEK4paBcmF0aGVyCnB0ZW1iZXIKT1MK4paBc2l0ZQriloFjYXVzCmFuaQriloFob21lCtC80ZYK4paBc2hvcnQKcGEK4paBbGVhZAppc2hlZApjaW5nCm9yZGluZwriloFwcm90ZQrRgdC70LUKTEVDVAriloFkaWRuCnBvc2l0aW9uCiIsIgooKSwKdHJhbnMK4paBbG90CuKWgdC+0LQKQVMK4paBc2F0CuKWgXBvaW50cwpnaXRodWIKc3R5bGUK4paB0LPQvtC00YMK4paBRGlzCnBvbmVudApvbWV0CnplcgpVTEwK4paBcGEKQVAKYWNlcwriloFVbml0ZWQKYW1hCmV0eQpDb2xvcgriloFlbm91Z2gKVVMK4paBbGVuZ3RoCigpKTsKXntcCmZ0eQpCb3gKYXB0ZXIK4paBY29tcGxldArQvdC40LoKbWF4Cm9iamVjdAooewppbWd1cgppdGl2ZQp1bmNoCuKWgVN1YgplbmRlCtCz0YMKYXRlZ29yeQrRgtGLCmlhbm8K4paBdXBkCuKWgUF1c3QKfXtcCnRvcApsYXMKcGlzCmluZXNzCuKWgXsNCuKWgdCVCkdyCuKWgUFTCuKWgdCy0LUKdGhlcnMK4paBZGVmaW5lZAphemlvbmUK4paBb2ZmaWMK4paBYXV0b20Kw7xuCuKWgWJyb3cK4paBc2VydgriloFyZW1vdmUKaXJvCuKWgUJpYmxpCkVECuKWgXdob2xlCuKWgdGICuKWgUphdmEK4paBenVtCnVhCnBtCmRldgrQutGA0LAKb2xkcwriloFXYXIKw6RuCnBhc3MKdXoKWyIK4paBdHJpCmlzZWQK0YXQsAriloFtZW1vcnkK4paBUG9ydApvcGVyClVwCuKWgVRoYW5rCuKWgU1pY2gKeWNoCmJvYXJkCtCx0YMKSW5zdAriloFiZWdpbgppbmF0aW9uCuKWgU1vZApfLAriloFEZW4Kb3B0aW9uCuKWgWNvbnN0cnVjdAriloFKdXN0Ck1hcApydW4K4paBcmVzcGVjdApoYW0K0LzQsNC9CmltZWRpYQriloFhcHBseQpjcmlwdGlvbgptYWluCuKWgdCa0LAKb2lkCkNvZGUKfTsKSW5mbwriloFmb3JtYXQKTG9nCuKWgdGB0YMK4paBbGF0CnV0b3IK4paBcmVmZXJlbmNlCuKWgWNhbGN1bApvbm4KTG8KaW5mdHkK4paBYWxvbmcK4paBxI0K4paBdGFzawriloFldgp0aGV0YQpyYXMKam9yCuKWgdCx0L4K4paBcHJpbmNpcApNeQriloFlaW5lcgriloFFcwpvbWIKcXVhZApeey0KdW1wCuKWgXRpbGwK0LTRlgriloFsb29rcwriloFvawrRhtCwCm51CkZpbAriloFzb250CuKWgU1lZAphZ3VlCuKWgWNvc3QK4paBU2ltCuKWgWNvbW1lbnQK4paBKFwKZWdlbgriloFwYXJhbWV0ZXIK4paBRnJhbmNlCnJlcAriloFUSAriloF5ZXQK4paBYXdheQriloFjaXJjCuKWgUFQSQplbXAK0LLRlgpMYXlvdXQK4paBbGluZXMK4paBUGFydAplbXB0CuKWgUJpCuKWgW1pbmQKa3kKZ2luZwriloFyZXBvcnQK4paBQWRkCtGA0L7QtAriloFyYW5nZQpjaWFzCmxpcAriloFLYXIK4paBQ29tbW9ucwpnZXJ1ZmVuCmFmZgpzZWMK4paBaHRtbApsaWcK4paBd2luZG93CmluaXRpb24KY2lzCuKWgXV0CmVsbgriloFhdXgK4paBbmVnCkhhbmQK4paBKTsK4paBYW5hbAriloFmcmkK4paB0YHQuApldGNoCm1kCnBhZ2UK4paBbGlicmFyeQriloE6PQpST00KWW91CnNwYWNlCuKWgWR1cmNoCuKWgWhvc3QKYXZlbgriloFGaWxlCmFsbGUK0YLQuNCyCuKWgXBhcArRgdGC0LLQvgptYXJrCuKWgW1haXMKZXJtYW4KU2l6ZQrQtdC6CuKWgdCc0LAK4paBaXNuCuKWgWNvcHkKc3RlbgpyaXZlcgriloF3ZW50CuKWgWphdmFzY3JpcHQK4paBc2FtCuKWgWZyYW1lCuKWgXZpCuKWgXByZXZpb3VzCnJvZHUK4paBbWV0aG9kcwriloFuZWNlc3MKTkEKY2tldAriloFvcHQKTG9jCmhvdwriloHDrm4Kc2hpcAriloFpdHNlbGYK4paBUGxlYXNlCmllbmUK0LLQtdGACuKWgTw8CuKWgW1pbGwK4paBdHJhZApwYWNlCuKWgUhhcgppdGVuCndpc2UKd3JpdGUK0YbQuNC4CtGA0YsKTGluZQpvbG8K4paBYWNjZXB0CmhlaWdodAriloFlbGVjdAplbGxhCuKWgXDDpQpTZWxlY3QK4paB0LvQuAriloFcPAooKAriloFJRApvcHMK0LLQsNC9CmnDswpUUArCuywKbmVjdGlvbgpwYXJlbnQK4paBTWFnClRhYmxlCk92ZXIK4paBbmV0d29yawrRgdC/0L4K4paBYXNzaWduCmlnZ2VyCmlybQopYApvdHRvbQpiZXRhCuKWgWRlbGwK4paBYm9keQriloHQtNCwCuKWgVlvdXIK4paBZnVlCuKWgXBhY2thZ2UK4paBbGlnaHQK4paBKioKTVAK4paBY291Cnllcwo6XAriloHQpwriloFtZW50aW9uCmVuc2NoCuKWgWRlZwriloFjb252ZXJ0CuKWgURhdgphZHQKUmVzdWx0CnRob3VnaAriloFidXMKeHkK4paBc2VlbgpBbGwKcHVibGljCml2ZWx5CuKWgVJlYwriloFIaXMKc2ltCuKWgWbDtnIK4paBaGlzdG9yCuKWgXNldHQKcmF0CmFibGVkCuKWgcK7LApnb29nbGUKV2ViCsOpbAriloF0aXRsZQriloFKYW51CtGY0LAK4paBdG9vawppZGVuCnN6CuKWgUdldAriloFvYmplY3RzCuKWgWNvbW1vbgriloFjaGFuZ2VzCuKWgUxvbmQK4paBZXh0ZXJuCuKWgWp1CklzCuKWgWF2YWlsYWJsZQp0cmkK4paBbcOhcwpvc2EKQmUK4paBRGF0YQp1cmFsCuKWgWhvbQriloFhY2NvdW50Cm9vCuKWgXBlcm0KcmVzcG9uZAp5dAriloFzZW5kCuKWgXJldHVybnMKaXZpZAriloFleHBsYQrDrW4K4paBbm9yCklmCuKWgUZyb20K4paBdGFyZ2V0CmZlY3QK0LXQvdGCCuKWgXVpdAriloFKbwriloF2YXJpYWJsZXMK4paBc2VyaWVzCuKWgWZ1bmMK4paBaGltc2VsZgriloHRh9CwCmFudGkK4paBYWNoCmlhbG9nCuKWgXN0ZAphZQriloFmb290CuKWgXVudGVyCmdyZXNzCk5vdApyYWQKZsOpcgriloF1dGlsCm9yZW0K4paBc291Cm9wdAriloFvZwriloF1bWEKaXRhcgriloFPawrDvGNrCnNxcnQK4paBYW50CuKWgXdlcmRlbgrDpXIKfSk7CuKWgVBhcmlzCuKWgWV4Y2VwdGlvbgriloFkZXRlcm0K4paBVm9sCuKWgVNhbQriloFlc3MKbGllcwppb25pCm9kaW5nCmlkZ2V0CuKWgXByaQriloF3aGV0aGVyCuKWgdC/0L7QtAriloFudW1iZXJzCuKWgX4KZXZlbnQK4paBc2hvd3MKYXR1cmVzCuKWgWhvdXNlCuKWgWZhY2UK4paBc2nEmQp2aXJvbm1lbnQKdmFuCuKWgWluY2x1ZGluZwriloE8LQp0aW1lcwpub3cK4paBcHVyCmlmaWVyCuKWgWVtcAriloFjbGEKbW9uCuKWgURhcwphZHkK4paB0LLRltC0CuKWgdGGCmFib3IKT1NUCuKWgWJhbmQK4paBw7oK4paBZXhhY3RseQppZXJ0CmF2aWcK4paBcmVkdQriloFTRQpsaXNoZWQKQnUKTWVzc2FnZQpjZWxsCmZ1bGx5CuKWgXN2CuKWgW1ha2VzCnBvbAriloFyZXF1aXJlZApmZXJyZXIK4paBcGVycwriloFtaQpGSQriloFQYXVsCuKWgVVJCuKWgUJlbAppbmMK4paBY29udGFpbnMKT3V0CmFzdXJlCnB1Cm90bwriloFnYW1lCnpuCuKWgVdoeQpvcml0aApiaWcK0LrQuNC5CnNpZ21hCuKWgXF1aXRlCuKWgWplZApyZWMK4paBU1FMCtCx0LUK4paBTWFydAp5YQriloFzY2hvb2wK4paBc2ltcGx5CuKWgXZvcgriloFkb3VibGUK0YDQsNCyCuKWgVN0cgppZW0K4paBYWxidW0K4paBcmVzb2wK4paBZGVpCuKWgVdpawriloFhdwp1bWIKb2xzCuKWgSovCuKWgXplCuKWgWFuaW0KLz4KcmlzCnJlc2gKTm8KaXF1ZXMKY3VycmVudAriloFwZXJpb2QK4paBQXByaWwK4paBc3RvcmUKJywnCuKWgVNldAo9ewphY2hlZAriloFNYWwK4paBUGFsCmFudGVzCmF0ZXJpYWwK4paBd29ya2VkCmxlcQpvcmVmZXJyZXIK4paBaGFwcGVuCuKWgWJveApuZXkK4paBY2xvc2UK4paBZ3JhbgriloFsaWUK4paBaXIK4paBZXhwZWN0ZWQK4paB0LTQu9GPCmNsaWNrCsiZaQriloFwYXJ0ZQpvZ24K4paBRm9ybQriloFtZW1iCuKWgXBsYW4K4paBdGVhbQpdWwriloFjb21tdW4Kb3JyeQplbmN5CmdsCmluYXJ5CmNkb3QKXlwK4paBRmlyc3QKYW5kZXIK4paBRGVjCnJlcXVlc3QK0YHRgtCy0LAK4paBc3RydWN0dXJlCuKWgXx8CuKWgUNvbXAKYWN0b3J5CuKWgU1pbAriloFTb21lClN0cmVhbQriloFhc3N1bQp1ZW4K4paBd29yZHMK4paBU2VwdGVtYmVyCuKWgdCa0L4K4paBZGF5cwpvcmllcwrRgdGC0LDQsgpzbQp2aW4KcGFydGlhbAriloFwYXJlbnQKb2oK0L3QuNC4CiEiCnVnaW4K4paBV2luZG93cwpFZAo6fQriloFxCuKWgWJlbgppYW5hCuKWgWxhYmVsCnN0YXRlCnV0ZWQK4paBKCkK4paB0YHQstC+CuKWgWVkaXQKdXJpbmcK4paBTlMK4paBSmFocgriloFwcm92aWRlCkhlCuKWgVllcwphbmVsCmVuYW1lCuKWgURvbgppc2sKZ3JhCmVsaWoK4paBcm9vdAoqLwriloFGcmUK4paBTW9yCnVzZWQKcmFuZ2UK4paBdGFtYgriloFtb2R1bGUK4paBZGlyZWN0b3J5Cm91bmRzCkFjdGl2aXR5CuKWgW11CmluZm8K4paBZnJlZQpvcmdlCnRhYgopPQpsYW5nCuKWgdC+0YEK4paBRlJPTQriloFlbnRlcgriloFiZWNhbWUKaWRhZQrRhdC4CuKWgVN0YXRlcwp2ZXJzZQriloFleHBsCnludApVTgplZQplbmRlbnQK4paBbWFraW5nCuKWgSIkCnVuaQpxdWVuY2UK4paBbHVpCkhUCuKWgXVzZXMKemllCm5pYQpDb250ZW50CuKWgUNvdW50CuKWgXN0YW5kYXJkCkVOVAriloHQutC+0L0KZm9ydAphZGFzCtC30YMKU3lzdGVtCuKWgVN3CuKWgWV2ZXIKTE8K4paBY29ycmVzcG9uZAriloFQbwphcmdpbgrQutGCCtGW0LkK4paBcmVtYWluCmNpbwriloFhY3R1YWwK0YHRgtGDCuKWgXNpbmQK4paBUGUK4paBY2hhbmdlZAriloFOb3RlCnNraWUK4paBZmFtaWx5Cml0w6AKY29zCnR4dAprZXIKY2VlZAriloFhcnIK4paBY2FtCml6ZXIK4paBRGFuCmhlbAppY3VsdApIUAppbGVyCuKWgVNhbAriloFjb25uZWN0aW9uCnVzaW9uCmtuClJJCuKWgXZvbQpMaXN0ZW5lcgriloHDtgriloFkaW0K4paBcHJlc3MK4paBZXNjCuKWgVRyeQphdGFsb2cK4paBdGhhbmtzCkRPCuKWgXdyaXR0ZW4KZGlyCnJldwriloFmaXJlCuKWgU5hY2gK4paBw6EKZW5jCuKWgW9yaWdpbgriloFOb3ZlbWJlcgriloF9OwpDb3VudAriloHQl9CwCuKWgWdyYXBoCuKWgW1pcwriloFFeHRlcm5hbAriloHiloHiloHiloHiloHiloHiloHiloHiloEK4paBb3B0aW9ucwriloFVUkwK4paBcGhwCuKWgWludGVncgpDb25maWcK4paBVGV4dAppbm5lcgriloFjcml0CizigJ0K4paBdG9nCiQkCm5vZgriloFzZXMKw7xocgriloFTaW5jZQpEZXMKdWJlCuKWgXNlY3Rpb24K4paBZ2kKZm9yZAriloFBc3MKYWluZXIKdHRwCuKWgWJlaGF2CnBvcnRzCmRyYXcKVGhpcwpyYW5jaAppbmRpbmcK4paBZXN0YWIK4paBb2J0YWluCnJpY2gKbGljaXQK0LXQsgriloFxdWFsCuKWgXphCuKWgWhhcgriloFmYWMKYWFyCmpldAppY2xlcwriloFBdXMK4paBaG9yCuKWgXJlbW92CuKWgXdpZQpDbGllbnQK4paBbmF0dXIKaGlwClN1YgriloFyYW5kb20KREYK4paBYXJlYQp0YWcKUHIK4paBSXRhbAriloFyb2t1Cm5vZm9sbG93Cip9CuKWgW90aGVycwriloFsaW1pdAriloFzaWwK4paBc2F2CuKWgW9mdGVuCuKWgXJlbmRlcgpEQgriloFNYwriloF6aWpuCtC20LXQvQriloF0YWcKbWluZwpsaWNoZW4KcGFjawriloFBZwriloFzZW5zZQpwZwpNZXRob2QKYWdlZArDoWcKxYJhCuKWgWludGVyZXN0CuKWgWFzc29jaQp2b2x1dGlvbgriloFlbXB0eQppY2hlCuKWgWdybwriloF0eXBlcwriloFTaWUKSW50ZXIK4paBbm9yZWZlcnJlcgriloFnaXZlcwpoYWwK4paBc2F2ZQriloFmb250CnJ1Y3Rpb24KU2NyaXB0CuKWgWFsbGEK4paBc2F5cwriloFmdQphcGUK4paBbGFuZ3VhZ2UKaWdlcgriloFLaW5nCmJvcgp1dgriloFzaGFsbAriloFFdXJvcGUK4paBZWluZW0K4paBd2F0ZXIK4paBZ292ZXJuCmFuegphdG9ycwriloFtb250aAp5ZQriloFpbXBvcnRhbnQKYXR6CmZpcnN0CuKWgVRyYW5zCuKWgU1hZAriloFicmEKaWthCuKWgVNhaW50Cm9yaWEKa3JlCmVtZW50cwriloFCZW4KbGF2CuKWgWFkbWluCuKWgUhlbgpyaWwK4paBU20KY2F0CuKWgVJlZmVyCuKWgdCoCuKWgXByYWN0CuKWgVBhdAriloFHcmUK4paBeW91bmcK4paBSW50ZXIKb21hCnRlZ2VyCmliaWxpdHkK4paBcGFyYW1ldGVycwriloFldmVyeXRoaW5nCmRhdAp1cm9wCm9sZWFuCuKWgXJldHVybmVkCuKWgUNsYXNzCmFjeQojIyMjCuKWgXDFmQriloFmb2xkZXIK4paBa29uCuKWgWd1ZXNzCmd0Cmplbgphbm5lbAppY29uCuKWgWNvbWIKcmljdAriloFoaWoK4paBYXV0aG9yCnNlZQpoZXJlCnN0cmEK4paBZW50aXJlCuKWgWRpcmVjdGx5CnJhZnQKaGVldAplc3RlcgriloHQvNC4CuKWgW1hc3MKdW50dQriloF1c2VycwpjaGkKUEUK4paBY29tcG9uZW50CkNsaWNrCkF0dAriloFzb2JyZQphbmRzCuKWgUhvbAriloFTYW50Cm9yaQriloFzdWEKc3RkCmVudGljCkNDCuKWgWZpbHRlcgpTUUwK4paBR29kCkF0CuKWgdC80YMK4paBcGVyZm9ybWFuY2UKZGVsdGEKYW5kZQphbWVyCtC00YsK4paBY3VsdAriloFOb3IKYnV0CuKWgWxpawoqKioqKioqKgrRgdGC0LLQtdC9CuKWgWNvbW1lCuKWgWRyCmltZXIKb3JkaW4K4paBY29uZGl0aW9uCmVzdGUKKFsKRkYK0YLRjNGB0Y8KaW1vCnJhYgrRltC70YwK4paBaGFsZgplYWNoCkRpcwriloFyb3dzCuKWgWhvbgriloF0b2dldGhlcgriloHImWkKbWVkaQphZ24KYWxsZWQK4paBdmlsbApJTkcKaWRkZW4K4paBZHJhdwp5bnRheAriloFhdHRlbXB0ClVSTApwb3NlCuKWgWluZGljCtC90LjQutCwCuKWgUVuZ2xpc2gK4paBZMOpYwriloFuZWVkcwriloFub3JtYWwKdXJ0CuKWgdC90L4KfX1cCmxhc3QK4paBRmluCuKWgUZlYnJ1CmlsYQriloFjb3VudHJ5CuKWgWZpZWxkcwriloFtYXgKbMOpcwpvd2llCuKWgWRldXgK4paBYnVpbHQK4paBTWFpbgriloFjYW1wCml2bwppdmEKaWN5Cnppb25lCk5vZGUK4paBOikK4paBYW1vbmcK4paBT2IK4paBY2FzZXMKaGFwcwpzZXJzCmFydGVyCsWbY2kK4paBaXRlcgriloFuYW1lZApleGVjCuKWgXNlYXNvbgp0b3QKPT4KZ3JhcGgK4paBbmlsCmFjaW9uYWwK4paBTlVMTAriloFzcGVjaWFsCtGB0YLQtQpjc3MK4paBXCgKdnMKYWVsCuKWgWNpdHkKb3ZhCuKWgWFydGljbGUK4paBU291dGgKQWN0aW9uCsOnYQpzcHJpbmcKaXR1ZGUK4paBY29tcGxleAriloHRh9GC0L4KYnVpbGQKZ2FtbWEK4paBRW50CmllcnMKJy4KY2FyCmFwYWNoZQppbmdlbgpJbnB1dAo64oCJCuKWgWR5bmFtCmFsbHMKc2hvdwp8XAriloF3aXJkCkJhcgphbHRoCm1vZGVsClRyYW5zClJvdwphYmUK4paBbGliCm51bGwKcmFnbWVudAriloFTdGF0ZQriloFsYXcKRnJhbWUK4paBTG8KZ2ViCn0kLgriloFuZWVkZWQK4paBY29udHIKYXJpZXMK4paBc2NyZWVuCnlyCm1tCuKWgXNob3duCuKWgWJhZAriloFjYXN0CuKWgVRlc3QK4paBQXVmCuKWgXF1YW50CmlnYQriloFyZW4K4paBTWFjCuKWgXRyYW5zZm9ybQriloFkaWZmZXJlbmNlCuKWgXRpdApURQriloFzdGVwCuKWgWNhcHQK4paBY29sbGVjdGlvbgppY3Rpb25hcnkK4paBVG9tCnJpZXIK4paBbW92ZQpjb3BlCm9yZHMK4paBZnVydGhlcgriloFjb2x1bW5zCuKWgUxpbgriloFmaXhlZAriloFjaGlsZHJlbgpNUwptbwp1bmEK4paBaW5kaXZpZAp0dHkKYXN0ZQpzcmMKbWF0Y2gKd2kK4paB0YUK4paB0LTQuAriloFvcmQKaXZpbmcK4paBQnJvCuKWgWFsbW9zdAriloFQcmVzCnJlY2kKYXJpbmcK4paBLy8vCtC10YLRgdGPCuKWgXNpZwpsaWdodAriloFSZWQK4paBc3VnZ2VzdApvbGYK4paBw6l0w6kKaXNhdGlvbgrQt9C90LAKTmV3CtGB0YLQsNC9CkxBCnVuaWNpcAriloFmaWd1cmUKbXQKaWFsZQriloFjYXRjaApkZWZhdWx0CuKWgXRlbGUK4paBbWF0dGVyCmNhc3QK4paBUmljaAriloFoYW5kbGUKdmFsdQokLQrQvtCxCuKWgWpzb24KQ3JlYXRlCuKWgWV4YW0K0LDQu9GMCtGO0YIKb3JlZAppZG9zCmFwcGVuZAriloFBcnJheQrQutGBCn1bCnJpdmUK4paBY2x1YgptYW5uCuKWgWVzdGUKZXN0YQriloFHaQriloFKYXAK4paBTmFtZQpDb2x1bW4Kb3Vwcwppc21vCuKWgUNpdHkK4paBY2xhc3NlcwriloFpbmZsCmhsCtGA0L7QvAriloFhZGRpbmcK4paBZmFpbAp4eArDtWVzClNjCnV0aWwK4paBbG9jYXRpb24KbGVnZQphZ28K4paBcHJvcGVydGllcwphYmlsCnZhcwp9JCwKaXR0ZWQKw7NkCuKWgURlbQriloFhc2tlZAriloF0YWIKU291cmNlCuKWgWVycm9ycwpvZ3JhcGhpZQriloHQttC4CuKWgW1hbApzdHJhY3QK4paBZHJvCnJhawriloFub3RlCuKWgXNldHRpbmcK4paBZmVtCuKWgXNhdwppYXIKSEVSCtC10YEK4paBcHJlZAriloFPdXQK4paBaXRlbXMK0LvQsNC9CuKWgXdlcmQKZXJzaW9uCmxpYQriloFzaW4KaWNodGUK4paBZmVlbAriloHQv9GA0LAK4paBb2RlcgpVRQpvY3VtZW50CuKWgW1vZGUK4paBTmEK0LTQtdC9Cm1lcwpmcmFtZXdvcmsK4paBYXV0bwrQvdGL0LwKdWJ5CuKWgXRlbXBsYXRlCuKWgW1lc3MKaWVkZXIK4paBcmVsYXRlZApva2VuCuKWgWZvbGxvd3MKc2VhcmNoCmFtaQriloF3YWl0CmlncgriloFsb3cK0YHQutC40YUK0YHQutCw0Y8K4paBTWFyawriloFpbGwKYW1lbnRvClw8CuKWgWRmCm9zaXRpb24K4paB0JLQuAppc2YK4paBRGV1dHNjaAphaGwKd2FyCml0ZWN0CuKWgXNhbAplbGVuCkJ5SWQK4paBZ3J1CnN2CuKWgXBhc3NlZAriloFhw7EKU2NoCuKWgXNvbHZlCndlaXNlCmF0b3MK4paBbWVnCuKWgW1lbWJlcgplcm5hbWUK4paBY29ubmVjdAppcHMK4paBcm91bmQK4paBXQpuZXMK4paBZGlyCuKWgUxvbmRvbgpkeQpGQQriloFyZWNlaXZlZApyZWV0CuKWgUxvZwriloFTY2hvb2wKYW5nbwriloFUaGVzZQriloFNb250CuKWgWVuZXIKbGFkCuKWgWRlZmluZQpzaWduCuKWgWNsZQpmaWd1cmUK4paBVmlldwp0ZXh0YmYKJFwK0LfRiwpudW1iZXIK4paBZGluCmVsbGVyCm9yaXRobQpmYWxzZQpmb2wKZmZpY2llbnQK4paBSFRNTApsaWNoZQriloFNbwriloFpbnRyb2R1CmV4cAriloFzdHJvbmcK4paBdGh1cwovKQriloFlbGUK4paB0YLQsNC6CuKWgdC/0LAK4paBZG9udAriloFjYXVzZQpOdW1iZXIK4paBaW1hZ2VzCuKWgXNhbXBsZQriloFzY2kKbGlrZQriloFMb3UKZGl2CmFuYwriloFmcm9udApuZW4K4paBbWlzc2luZwphcmlhCnByZXMK4paB0L/RgNC10LQKREkKZmlsdGVyCuKWgU1pdApVUgriloFvcHAK4paBc3FsCuKWgdGA0L7QutGDCmVyZW4KZW1hdArDrXMK4paBSmVhbgrDqWMK4paBY2kKZW5uZQphdGZvcm0K4paBdGFrZW4K4paBT2YK4paB0L3QsNGB0LUK4paBZXJyCk9QCkZyb20KRGVmYXVsdAriloFHZW5lcmFsCndpa2kK4paBZ3JhbmQK4paBZWluZW4KUmVnCkhhbmRsZXIKY29ub20KYW5nZXIK4paB0LHRi9C7CuKWgUxvcwriloFleHByZXNzaW9uCtGI0LAKeWFsCuKWgSQoJwriloFzd2l0Y2gK4paBdmVjdG9yCuKWgVRob20K4paBdmlydApsZWFzZWQK4paBY292ZXIK4paBcmVzcApha28KcmVuY2gKb3RhCkNlbGwKYW5nZWQK4paBKz0KbGFjCnNrYQpuZXh0CuKWgUludGVybmF0aW9uYWwK4paBV2lsCuKWgW9udAppYnIKdXN0cgriloFibGFjawriloFzZWxlY3RlZApjaGVyCuKWgWxpdGVyCnJvb3QK0LvRgdGPCuKWgUxpZmUK4paBaW5zZXJ0CuKWgW1hdHJpeAppc2VzCildCuKWgXBlbApPdmVycmlkZQpyeXB0CuKWgWZvcm1lcgriloFGaWxtCuKWgU5vcnRoCmNsaWVudAriloFuaWdodArRhdC+0LTQuAriloFBdXN0cmFsCuKWgVJldApyaG8K4paB0L/QtdGACmlwZWRpYQriloFleHByZXNzCuKWgXRoaXJkCuKWgW1ham9yCuKWgWdyYWQKb3dlCuKWgWJlbGlldmUKb3VybmFsCuKWgXN0YXR1cwp1bmMK4paBZG91CuKWgUpTT04KdWlzCuKWgXBvcHVsYXRpb24KZW56CuKWgVdpbGxpYW0Kc2YK4paBT2JqZWN0CuKWgWNpbgriloFEaQpjdXJpdHkK4paBT3BlbgriloHQu9C1CmxhcgphZGRpbmcK4paBa29tCn0oXAriloFraWwKdW1lcgoiLz4K4paBZmVhdHVyZQriloFBcmUKY2tzCuKWgUludGVybmV0CuKWgWloCuKWgXN0YXJ0ZWQK4paBZWFybHkK4paBYmVnYW4KVEgKcHl0aG9uCmFzcAriloFGcgriloFjbG9zCmlzdGljCuKWgW11c2ljCuKWgWRpZwriloFpdGFsCuKWgURhdmlkCuKWgXdlYnNpdGUK4paBY29udHJvbGxlcgriloFNZXIKY29udGV4dApwcm9kdWN0Cm9zcAriloHiloHiloHiloHiloHiloHiloEK4paBanVuCnJvd24K4paBQXoKIjoiCuKWgWFhbgriloFEYXRlCm11bHQK4paBYnJvd3NlcgrRgNC10LQKd2hpY2gKUkEKcXVhcmUK4paBUnVzcwriloFzb29uCuKWgVByZQp0YXUK4paBd2VlawriloHQsdCwCuKWgW9jdAriloF0b3duCnJveQriloFlbHMKYmxpYwp1bmRsZQriloFIaXN0b3IK4paBZm9pCuKWgW1vZGVscwrQt9C+Cm9ueW0KUGFyYW0K4paBTWV0CmdlbmVyCmrEhQriloFlc3BlCkNFCuKWgWRldmljZQplbGxvdwriloFkZWJ1ZwrDqXJpZQp1c2luZwrQsNC90LMK4paBKikKdWRpCuKWgU1pc3MK0LrQvtC8CnBvc2VkCuKWgXp3ZQrRltC9CuKWgVJvYmVydAriloFPY3QKbG9wCmphcgriloFhdmVyCuKWgWhhYml0CuKWgTo6CsOkbmcKU3RhcnQK4paBcG93CuKWgXNyYwriloFwYXR0ZXJuCuKWgdCtCuKWgWJpCm90ZXMK4paBX18K4paBc2VucwriloFhdm9pZApleGFtcGxlCnV0dApMYWJlbAp0ZXgKYm9vdAplc3RvCuKWgU1hcmNoCuKWgWVhc3kKaWN0dXJlCkdyb3VwCuKWgWZhdGhlcgriloF1cGRhdGVkCuKWgVZvCuKWgUlJSQpvbWVnYQriloFhbGxlClJlYwp5ZwrQt9C1CuKWgURpbQpuZWN0CuKWgVRvcgriloFkZXV0c2NoCuKWgXdoaXRlCuKWgW5hdGlvbmFsCnBwZQriloFhaXIK4paBcGFzc3dvcmQKZGV0CuKWgWJpZwriloFVc2UKY2FsbAriloFleHRyYQpXZQphbmlhCuKWgWhvbGQKQ29udHJvbAriloFDTwriloHQvNGWCml0aQriloFLZQplbnUK4paBUGFyawrRgtC+0LwK4paBYXV0aAriloFjZW50ZXIKUGgK0YLQvtCyCmlkaW5nCuKWgWFjcm9zcwriloFzb25nCuKWgXBoeXMK4paBbnVtZXIK0YnQsAriloFBbGV4CuKWgXByb2JsZW1zCuKWgUVycm9yCmZvcm1hdAriloFBY2MK4paBc2l4CuKWgWRiCuKWgUNhc3QKb21zCnByb2plY3QK4paBdmVydApjcmV0CuKWgWhlYWRlcgriloFzdHJlYW0KaWRzCuKWgXRvcgriloFzZXB0CuKWgWVzdGltCuKWgWRlY2wK4paBZ2F2ZQriloFwbGF5ZXIKeXNpcwriloHQtNGA0YMKYW1tCtGJ0L4K4paBKCIK4paBYXgKUHJvcGVydHkKdXNyCuKWgXNvbWVvbmUK4paBaW1wcm8KYWRlbgpyb3RlCuKWgdCc0LgKaWgKKyspCuKWgXZpZGVvCuKWgWV4aXN0cwrQutC70LAK4paBY29tcGxldGUK4paBc2Vzc2lvbgriloFjb25zdGFudAppY29zCuKWgXBhY2sKcm9tZQplZ3IKQXBwbGljYXRpb24K4paBeWVzCuKWgWVsbGUK4paBZW1haWwKb3JmCmNhc2UK4paBcG9pbnRlcgriloFyZWdhcmQKc2VuCnN0YXR1cwriloFtZXMK4paBZGVsbGUKaW5ndG9uCuKWgUJhcwopXgpkZXZlbG9wCuKWgWZvcmNlCuKWgWNoYXJhY3RlcnMK4paBY3Jvc3MK4paBZGVhdGgK4paBdGFrZXMKw6lyaQppZ25lCtGH0LXQvQpVUAouOgpUaHJlYWQKanUKaW55CuKWgWRldGFpbHMK4paBeG1sCnRhaXQKb3V0cHV0Cm1lc3NhZ2UKJycK4paBQnJpdGlzaAp2aWxsZQriloFEaXYK4paBVXNlcgpjbQrRh9C90L4KY29sdW1uCmVxcmVmCsOzcgpvbm9tCuKWgVBvc3QKZWxsZW4KQWIKdWx0w6kK4paBcGVyZmVjdAooKXsKdmlzaW9uCmFjdGl2ZQpsaWVyCnJpagpzZAriloFrw7YK4paBbmllCuKWgXJlbGlnCuKWgW90CuKWgW1hY2hpbmUK4paBaGVsZAopJC4KPT09PT09PT0KY2tlcgrQstGLCmJvcm4K4paBcGFzdArRgNC40Y8K4paBRHIK4paBcmVndWxhcgriloFwcm92aWRlZApURVIK4paBdW5pdmVycwriloFnZXRzCuKWgW51CuKWgS8qCm9iZXIKZmluCuKWgW5lbGxhCuKWgWJlY29tZQriloFgYAriloFoaXN0b3J5CuKWgVNvbAriloFSYWQK4paBdGVybXMK4paBZXZlbnRzCmx5bXAKKSkpCtGA0L7QstCwCuKWgWFic29sCuKWgXNvZnQKbGlua3MK4paBaG9wZQriloFzdWJqZWN0CiIpLAriloFjcmVhdGluZwriloF9DQriloFTawriloFmbG93CuKWgdCg0LAK4paBYXNzZXJ0CnpldAriloFGcmFuawpzYQriloFkaXN0cmlidXRpb24KY3UKYmFuZAppenoK4paBam9iCmluZXIKc3RydWN0CsOhawpUTwphdWYK4paBZXh0ZW5kcwriloFHcmEKZGlzcGxheQriloFzaWduaWZpYwpvbmV5CnNvdXJjZQptaWNyb3NvZnQKaW5kZXIK4paBcXVpY2sK4paBd29uZGVyCkluc3RhbmNlCmVsbGVzCsOobWUK4paBY29tcGFueQp1w58KLn0K4paBc2VwYXJhdGUKVU0KSEVSRQriloF3cml0aW5nCml0dXRpb24K4paBR2VzY2gK0LzRjwriloFKYW1lcwriloFERQriloFTcGUKcHJvY2VzcwpTdHIK4paBc3ltCuKWgWFvCuKWgXd5CuKWgWFueW9uZQriloFVcAp1c2V1bQphcm9uCuKWgWRlZmluaXRpb24K4paBYCQK4paBZmF2CnJpYnV0ZXMK4paBUsOpCm9ncmFmaWEKZWxlbWVudApjYXAKcGF0CuKWgUJyYQopKAriloFhY2NvcmRpbmcK0LPQtQriloFwaWUKZWxpCn0iCuKWgWFjdGl2CuKWgXN0b3AKcGF0Y2gK0YLRlgriloFKb3NlCkVuZAriloFwcnplCuKWgWFnZQppdG9yeQriloFQSFAKYWdlbWVudAriloFgLgriloFwcmV0dHkK4paBcmVjb21tCuKWgXN1ZAriloFyZXF1CuKWgdC+0LHQu9CwCmF0aXZlcwriloFIaWdoCsOhegpvdWwKcmVzdAriloFUZXIKdW5kZXIKdGhlcm4KY2VudGVyCuKWgXVyCmxhdAriloFpbnRlcmZhY2UK4paB0LjQvQriloF3aG9zZQppY2FzCmFtZW4KRmlsdGVyCuKWgXN0YXRpb24KUGFnZQriloFhcm0K4paBZXllcwriloHRgNCw0LkK4paBc2V1Cm9saQp3aW4KbGlrCmdleApjaGFuCmlkZW5jZQphcmdzCmFraW5nCuKWgUdvb2dsZQriloFTdHVkCuKWgWhvCtGC0L7RgNGLClN1CuKWgWF1dG9tYXQKw6ptZQriloFjeQpsb3IK4paBc3RhY2sK4paBU0VMRUNUCkFGCuKWgT4+CuKWgWNvbXBldAriloFwYWlyCuKWgWluZ2zDqXMKUmVzcG9uc2UK4paBRmlnCmdyYWQK4paBZG9jdW1lbnRhdGlvbgriloFjYW50CuKWgWFwcHJlY2kKw6VuCuKWgWxlYXJuCuKWgWluZGVwCuKWgXBhbApwYWNrYWdlCmFyZXMK4paBQmVybGluCtCx0LvQuApyZWljaArRkdC9CuKWgXNhdGlzZgriloFyZWdpb24K4paBZnJpZW5kCuKWgUdlb3JnZQriloHQktC+CuKWgSIiCuKWgWRlc2RlCkZhY3RvcnkK4paBQ291bnR5Cm91dgriloHigJgK4paBaW5zdGFsbGVkCuKWgXdhbnRlZAriloFQeXRob24K4paBaW50ZXJwcmUK4paBaW5jbHVkZWQK4paBKCgK4paBYWx0ZXJuCmlzdG8KZ24K4paBYm9yZGVyCnBkZgriloFkdXAK4paBZG93bmxvYWQKanVzdAriloFtZW1iZXJzCmNoaWxkCuKWgXBheQriloFjZXIK4paBbG9va2VkCuKWgWNvcnJlY3RseQphdXRoCuKWgdGB0YLQsNC9CuKWgWVzcAriloFkZXNjCmViZW4K4paBcXVlc3Rpb25zCm1hbAriloFhYmdlcnVmZW4K4paBQmFuZAriloFbXQpCYXNlCuKWgXJpcwriloFmb3J0CuKWgUlkCuKWgXZhcmlvdXMK4paBTGVhZ3VlCuKWgUhhbmQK4paBVHlwZQppcmwK4paBRmUKacOpbgppdHRlcgriloFmYXN0CnN0YQriloFleGNlcHQKaWN6CuKWgUZyZW5jaAriloFlbnZpcm9ubWVudAriloFjb25zZQrRg9GACtC+0LPQvgriloFuZWNlc3NhcnkKdGFyZ2V0CuKWgXJlYWRpbmcKaG9tZQp6ZWljaAriloFlcXVhbAriloFwacO5CuKWgXByZW0K4paBZGlmZmljdWx0CuKWgXVuaXQK4paBcmVwbGFjZQriloFoZWFydAriloF0YWxrCkFNCuKWgVJFCuKWgVBlcnNvbgplbmRlbmN5CuKWgWltbQriloFodW1hbgpkbgriloFLaXIK4paBQXV0Cmtub3duCuKWgWZyZXF1CnN5c3RlbQrQu9Cw0LIK4paBU3oK4paBR2FsCtC90L7QtQpzZWx2ZXMKcmlnaHRhcnJvdwriloHQodCwCj0iQAriloFidWlsZGluZwppbXBvcnQK4paBZmFtCuKWgWRlbGV0ZQphaXJlCm1hcnkK4paBZnVuZAriloFwYXJ0aWNpcAriloFzeW4Kc2luCuKWgWxvd2VyCuKWgXplcm8K4paBc2VjCuKWgWZyYQpQb2ludAriloFmYWlsZWQKaWVudG8KY3VwCuKWgXNsb3cK4paBbmF0aW9uCsOkaHIK4paBaW5mbwriloFQdWJsaWMK4paBZGVjbGEK4paB0KLQsAriloFzb2xkCuKWgVJlbQriloFQaGlsCtGB0YLRgNCwCuKWgW1laHIK4paBV29yawriloFOb3JkCuKWgWZhaXQK4paBZ2V3CnByaW50bG4Kb2JpbGUK4paBS29uCuKWgWFzc3VtZQpsYW5kcwriloFhbW91bnQK4paBUHJlc3MKw71jaAriloFtYXhpbQriloFDaGFtcGlvbgpsaWJyYXJ5CmHDsQriloFXYWwKQ29tbQpdXQriloF6dwriloFzb2NpYWwKTEkK4paBVW50ZXIKdm9yCkRlbHRhCmVtYWlsCnJhaW50Cm9uaQriloFhbHQK4paBbsOpCtGG0LjRjwpvZ3JhcGh5CuKWgW1lbnRpb25lZAriloE8PQriloFjZXR0ZQriloFjdXJyZW50bHkKdmFyZQppemluZwriloFEZWYKaWNvbArDvG5kCuKWgWNvbmZpZ3VyYXRpb24KZXN0aWcKSUlJCmxhbQppw6hyZQriloFFYXIK4paBdHUKRW50CuKWgVVzaW5nCuKWgdC60L7QvApjaWUK4paBcHJvb2YK4paBaW52b2wK4paBSGlzdG9yeQo+PAriloFBTkQKYXZ5CuKWgXJlbGF0aW9ucwokewriloFjb21lcwriloFkaXJlY3Rpb24K4paBSnVuZQriloFXYXkKQ29tcG9uZW50CmVjaAriloFQZXRlcgpzZwriloFzdHJhCnVjdAriloFpbXBsZW1lbnRhdGlvbgphdHRsZQriloFjegpwbG90CuKWgXBsYXllZAoiPjwvCuKWgWZpdmUK4paBY29sbAriloFDaGFybGVzClRyYQriloFzdW8KZmlsZXMKZW50ZXMKcmVzcG9uc2UKSG93CuKWgVNvY2kK4paBaWduCuKWgWxlZAriloFHZXJtYW4KdWRvCuKWgUR1CuKWgXRpbQpvdW50ZXIK4paBYXR0YWNrCnVyaQriloHQsNGACmVzc2UKaXZpbAriloFKdQriloF2ZWwKbWF0cml4CuKWgU1hdApnaW8K4paBWmVpdApWRVIKaGFzCkNvbm5lY3Rpb24K4paBaWhyCuKWgWF0dHJpYnV0ZQriloFkaXNjdXNzCuKWgWRvbWFpbgpiaW5kCuKWgVNlYwpyaWsKY2xvc2UKZ2luCuKWgWxvdmUKYW50bwpnZW50CmFiYQpqYW5nbwpiaQriloFvYnNlcgppdHRpbmcK4paB0YDRgwp9PQphZ2VuCkJDCnNvbWUK4paBQnUK4paBc29jaQriloFpbmRpdmlkdWFsCuKWgWRlYWwK4paBb3V0c2lkZQpyaW8KRXhlYwphbmRpZAriloFidXNpbmVzcwriloF0ZW1wb3IK4paBVHVyCuKWgSghCnJpdGVyCuKWgWdvb2dsZQpdOgppdHRlCnhpCuKWgdCf0LAKaG9sCtC90YwKcmluZwriloFzdWwK0L3QvtGB0YLQuApfLgpnYXIKVGFzawriloFDaGVjawriloFtb2Rlcm4K4paBd2luCnVzdGVyCmhhbgpmb3JtYXRpb24Kdm9pZAriloHRhNC4CuKWgXVzZWZ1bAriloFFbmdsYW5kCmxvcwpldGltZQpldXIK4paBdW5pcXVlCuKWgdC60LDQugp5aW5nCm9iagp1aWQK4paBd2luZG93cwriloFkaXN0YW5jZQriloFub21icmUK0ZbRjwpvY3VzCmFobgppZXJ0ZQriloFkYXIKU0kKbG9uZwphc3RhCml2ZW4K4paBdG9sZAriloFHcnUKZm9vCuKWgWNhbGxpbmcKaWVtYnJlCuKWgWZ1dHVyZQpwcsOocwpsZWVwCmF2aWdhdGlvbgpQT1NUCuKWgWRlc2NyaWJlZAriloFub2NoCnVuaXQKYWxsZW4K4paBYnJhbmNoCmZhCuKWgWZpbGwK4paBb2JqCuKWgXRyZWUK4paBd3VyZGVuCuKWgUxpdGVyCnJvdApzcGxpdAplbWVpbgptb2R1bGUKQ0EK4paBb3BlcmF0b3IK4paBd3JvdGUK4paBSmFjawpvbG9naWUK4paBQW50CtGC0LXRgApzdHJlYW0K4paBUXVlCmVwc2lsb24Kbm9uCnN0ZWluCuKWgXNpbXBsCnB1YgriloFKdWx5CuKWgW5hdHVyZQriloFEYXRhYmFzZQrDs2wK0L3QuNC8CuKWgVZJCsOqdHJlCmlsZXMK4paBd2VsCicpLAriloFtdXQKbG9jYXRpb24K4paBdGhlcmVmb3JlCmVsbGkK4paB0IYKbsOpCuKWgdCw0LIKbGVkZ2UK4paBY29udmVyCsOtbQriloFYVgp2aWRlcgriloFKYW51YXJ5CuKWgXVzdWFsbHkK4paBcmVsZWFzZWQK4paBTWkKSGVhZAppbGxlcgriloFqYW4K4paBbGV0dGVyCnByb2R1CnJkCuKWgUNhbQosJwriloHQpgriloFwdXNoCnVwZGF0ZQriloFtYXliZQpIdHRwCkAiCtC80LXRgApzZXJ2aWNlCnBhcnNlCuKWgWRhc3MKw6puCikiCm1vcmUKLyoK4paBbWFzCuKWgWxpa2VseQriloFtYXRlcmlhbAriloFbWwriloFsb25nZXIKYmFsCuKWgUFyY2hpdgppZ3QK4paBZWd5CmlkZ2UKaWd1CmNvbmYK4paBaW5jCmNvbnN1bHTDqQriloFtYWkKV29yawriloHQs9GA0LAK4paBT2N0b2JlcgriloFnbG9iYWwK4paBc2VsCuKWgW11bmljaXAK4paBdmlvbAriloFEb2VzCuKWgVxbCtGB0LrQvtC8CuKWgWNvbXBvcwrQsdGA0Y8K0LLRjwriloFyZXNwb25zCuKWgWNvbnNpZGVyZWQK4paBSmFwYW4KcGVzCm9zdG8K4paBbWlsaXQKU1AK0YHRiwphdHRyCmNpbAppcmVjdG9yeQphdmluZwriloFEZWwK4paBcHJldmVudAppZGFkZQpnaXQKaWZvcm0Kb3V0ZXIKaW5jdApsZXZlbAphdGV2ZXIK4paBcmVwZQriloFleGMK0LTQsNGAClN0eWxlCuKWgVRob21hcwplbGluZQriloHQtgp1bnRpbWUK4paBbGFyZwpUcnVlCi4qCmNyZWVuCnlsZXMK4paBdHJhbnNsCuKWgdCh0L4KZW5zaW9ucwrDpGwKaXNzZQriloF2b2x0CmNpYWxseQpuaWsKLl0K4paBU3RhZHQK0LzRiwpmaWxsCmxvdgriloEiLwpTcAriloFBaXIKQ2FsbAriloFudXIKQ2hlY2sKaWVuY2UKZWZpbmVkCuKWgdCy0YDQtQrFgm8KZHoK4paB0L7RgAppa2VyCm93YQrQvtCy0LjRhwpyw6kKT0wK4paBbGluZWFyCuKWgWV4cG9ydAphaHIKaWNpYWwKUmVwCuKWgW5hdHVyYWwK4paBY29wCuKWgX0pCsOnw7Vlcwp6egpXaGF0CuKWgUhvdXNlClJlZgppbmdlcgriloF0YWtpbmcKbsSbCuKWgUVpbnoK4paBZGFtCuKWgWlzc3VlcwpCdWlsZGVyCmVkaXQK4paBcHJ6CnBhc3N3b3JkCkdlbmVyCnJpbQriloFwYXJ0cwotLS0KaWdpbmFsCuKWgVNjaQriloFtb3RoZXIKcmVhCuKWgWNvbnRhaW5lcgrQtNGPCuKWgUlQCuKWgW5vbmUK4paBZm9sbG93ZWQK4paBcGxlCuKWgW1lYXN1cmUK4paBdG91dApFeHQK4paBVFYK4paBZXhwbGFpbgriloFwYXBlcgrRgdGC0ZYKd3MKV2lrCuKWgW1tCuKWgU5vcm0K4paBU2VydmVyCmZvbnQKZWNhdXNlClRSCuKWgdCx0LgKTGEK4paBZW5zCuKWgXJldHIK4paBU2lsCuKWgXNlcXVlbmNlCmFyYwpJVgp6w6EK4paBQW5kcm9pZAriloFTdXBlcgriloFyb3oKb3ZpZQpPbQriloFXZWxsCm1ha2UKb3JwaAriloFKZXIK4paBUm9zCnJlZmVyZW5jZQriloFmZWF0dXJlcwriloFHZXIK4paBTGVnCuKWgWxhdGUK4paBYWRkaXRpb25hbAriloFmbG8K4paB0LXQs9C+CuKWgWFsZ29yaXRobQpCQQprYXIKSVAKXSk7CuKWgWFwcGVhcnMKeXcK4paBdGVtcAriloFhdXNzaQptZXRob2QK4paBcGV0CnN0cmFwCmFybmluZwriloFjdXQK4paBU2EK4paBdHJhY2sK4paBZW1wbG95CuKWgWluZGUKcmF2CuKWgWdlbmVyYXRlCmJlcwphcnRzClN0YXR1cwp1Z2UKYWxpcwriloFvdmVycmlkZQriloFmaQriloFsb3N0Cm90ZWQK4paBcm9vbQriloFjYWxscwriloFjb25zaXN0CtGA0LXQvQriloF2aWxsYWdlCmRpc3QK4paBdGVjaG4KZW56YQriloHRgNC+0LcK4paBQ2F0YWxvZwriloFiZWNvbQpyb3dzCuKWgU5lbApjb21wbGUK4paBcHJlbWkK4paBcm90CuKWgVdlYmxpbmtzCuKWgWZvb3RiYWxsCuKWgWNvbXBhcgriloFsaXZlCtC60LjRhQriloFlcXVpdmFsCmNhcGUK4paBR2VuCm5kZXIK4paBVmlzCuKWgWJlaGluZApnZXJzCnZva2UK4paBbWVkaWEKRVgKdGhhdAriloFzb25vCuKWgW15c3FsCmV2CuKWgXJ1bGUK0LTQvtCyCmFjYwriloFXSEVSRQrQtdC90LUKR3JpZAriloFqdWwK4paBbW9ydAriloFnZW5lcmF0ZWQKZW5jaWEKYWN0ZXIKY2x1ZAriloFzY2VuCuKWgWNsb3NlZAriloFNaWNoYWVsCuKWgW1vdW50CikkLAriloFkcm9wCuKWgWNvbWJpbgp0b2NvbAriloFnb2VzCuKWgWdlYgpNRAriloFBbnRvbgriloEkKCIKVGVtCuKWgWNhCuKWgWluc3RydQplZHMK4paBdG9vbApteXMK4paBcm91dGUKIikpCtC/0YDQtQriloFmbG9hdAriloFzZXJ2aWNlcwriloHRh9C4CtC60ZYKZW1ibHkKYWtlcgriloFTb24K4paBTWF0aAphc3NlCm91c2x5CmxpY2F0aW9ucwriloFydQriloHRidC+CuKWgUNvbnN0CuKWgWltbWVkaQpGTwpvcm8K4paBcHJvZHVjdGlvbgpyZWkK4paBanF1ZXJ5CmFubnQK4paBV2hpbGUK4paBc24K4paB0LPQvtC00LgKRm9ybWF0CuKWgXN0YXIK4paBU2VuCuKWgWtvCk5BTUUK4paBcHLDqXMKY2hhCndoYXQKb21pbgplbmRhbnQKaHkK4paBb2JzZXJ2CuKWgXByZWZlcgrRg9C9CuKWgWNvbnN0cnVjdG9yCmJzCuKWgW1hYwriloFCcmUK4paBSW5zdGl0CuKWgXN0b3J5CuKWgXN5bWJvbAplbGVzCsOfZQphc2luZwriloF3ZXN0CmlhbnMK4paBbWFzdGVyCtC10LcK4paBd2F5cwpibQriloFwaWNrCuKWgWRlcGFydApCYWNrCmVuawpsaXBzZQriloFtYXRoCuKWgUZyYW5jaXMK4paBRGVjZW1iZXIKZnMKcnVtCuKWgWRldmVsb3BtZW50CkxUCmVybmVsCuKWgVRydWUK4paBTW9yZQpyYW5nbGUK4paBY29uZGl0aW9ucwpPcHRpb25zCuKWgWdsaQriloFvcGVyYXRpb24Kw6lrCmFjaHQKaWdodHMK4paBbWlzdAphbmRhCuKWgWVuZXJneQriloHQttC1CuKWgXdvbWVuCmFrdAriloFDSApnZWJyYQriloFtZWV0Cml1CndlbGwKw7ZsCuKWgWdvdmVybm1lbnQK4paBSm9zCmllZwriloFzeW50YXgKZml4CuKWgVBldApqcXVlcnkK4paBY2FyZAriloFwcmluY2lwYWwK4paBZHJ1CuKWgXRlcnJpdAriloHQv9C+0LIK4paBU1MK0YDQuNC4CnRyZXMKYWduZQpseWluZwp0aWxkZQpiZXJuCmVudGVyClBlcgriloFzb21ldApMb2FkCmxpY2UK4paBc291cwriloFMb3VpcwriloFsb2dpYwriloFPdGhlcgriloFjaXIKw6l2CmNocm9uCuKWgWhhbgriloFtYXJnaW4KV2luZG93CsOocmVzCm55Y2gKcHVzaApib2xkcwriloFsYXlvdXQK4paBW2AKQ2hhcgriloFDYXAKYm9sZHN5bWJvbAriloFSb21hbgriloFNYXgKOigK4paBQ29kZQppc2luZwriloFzdGF0ZXMK4paBZXhpc3RpbmcKc3VwcG9ydAriloFyZXNlYXJjaApsaWNhdGUKdmFyaQriloFiaWoK4paBYXBwZQriloFoYXBwZW5zClwiCuKWgWNvbmNlcm4Kd2VzdAriloFzYXlpbmcKcGlkCuKWgXJlY29nbgriloFIZXQKQ2hpbGQK4paBY3MKXCwK4paBY2xlYW4KbGVjdGlvbnMKYWNjZXNzCtCy0YMK0L/RgNC+CmFjaXR5CuKWgU9mZgriloFlYXNpbHkKw6hxdWUK4paBamFrbwriloFpegriloFIYQriloFEZXQK4paBZm9ybWEKc2NoZQpzd2VycwriloFvZmZlcgpxdWlyZWQKVXNlcnMK4paBc3Vic3QKPigK4paBZ3JvdW5kCnVubgpyb2QKc3BlCnVyc29yCuKWgWxlYXZlCmVyawriloF0YWwK4paBYm90dG9tCklPCuKWgXBvcHVsYXIKaWdvCuKWgVRpbWUKdmFsdWVzCuKWgUxvYwriloFDbHViCuKWgWFuY2hlCmlhxYIK0ZbRlwpPbWVnYQriloFsb2NhdGVkClVybAriloFFc3AK0LvRiwrRhtGMCnVsYXRlCuKWgWpvaW4KYXZlcwp2ZXQKbGlvCnJlbW92ZQriloF0b2tlbgriloFvcHRpbQriloFjbGFpbQpvbG9naWNhbAriloFjc3MK4paBYWx0aG91Z2gK4paBcHJpdgriloFCYQrDvGwKZW50aWNhdGlvbgriloF2ZW4KU2VydmVyCuKWgUNvbmcKTkVUCkNPTgpkdApwZXJ0aWVzCuKWgWVwaXMKd2lraXBlZGlhCuKWgWVuZ2luZQriloFmZXIKZ2V0RWxlbWVudAriloFDbGEKxZnDrQriloFyb20KdmFyZXBzaWxvbgriloFwcmltZQppc3RyeQpwZWN0ZWQKb3JhZ2UK4paBdG91Y2gK4paBWycK4paBZGFuCkVtCmFjaW9uZXMKQ2FuCuKWgXdob20K4paBYmVoYXZpb3IK4paBc3RyaW5ncwriloFFdXJvcAriloFSb20KY2lyYwriloFwdW4K4paBcmVnaXN0ZXIKYnVudHUKcmFpbgpPYgpUQQriloFzb21ldGltZXMK4paBbWVudAriloFpbnRlZ2VyCuKWgUphYwpsZWdhdGUKb3RoaW5nCuKWgXNvdW5kCmxhY2VzCuKWgdCR0LAKcmIKZGkK0LvQtdC90LjRjwriloF0aGVtc2VsdmVzCuKWgUJsYWNrCuKWgXNldHRpbmdzCuKWgW5vcm0K4paBcnVucwriloFOT1QKS0UK4paBcGVyaGFwcwriloHQrwriloFtb2wK4paBYW5zCmF0cmUK4paBRGllcwpUb2tlbgphbmllCuKWgWFsbG93ZWQKUmFuZ2UK4paBR3JvCnZpYQp1dG9yaWFsCmVuc29yCmVzdGl2YWwKKTsNCtC60YDQsNGXCuKWgXR1cm5lZApzY29wZQriloFiaWVuCj0kCuKWgWV4dGVuc2lvbgphdG9yZQriloHQoNC+CuKWgXNwZWNpZnkKZWR1CkRhdG9zCuKWgXN0b3JlZAriloFwYXJzZQriloFhbnN3ZXJzCmlsbHMK4paBaGVhcmQKbHUK4paBVEhFCuKWgWfDqW4K4paBZnVsCmV6CuKWgVByZW0KdGhlbgpkcArRgdGM0LrQvtCz0L4K4paBU2kKw6dvCkVkaXQK0LrRltCyCuKWgdCb0LgK4paBU2luZwriloFjYXRlZwpFcXUK4paBZ3VlcgpXaWR0aAriloFDaHJpc3RpYW4Kc3RhdApXcml0ZQriloF3b21hbgp3b29kClZpcwrRgNCw0LcK4paBJCRcCm9kZXIK4paBYm9vbAriloFpbnRlcm5hdGlvbmFsCtC90L7RgdGC0YwK4paBUmljaGFyZAriloFhZGRpdGlvbgriloFNdXNpYwriloFhYmVyCnTDswriloFoaWVyCnVnaAriloFwb2IK4paBdGFibGVzCkRvCuKWgWhpZ2hlcgpwc2kKcsOhCuKWgWFjdGl2ZQriloFUYWJsZQrRmtC1CuKWgWRlc2NyaXB0aW9uCuKWgXNlZW1lZArDrXN0CuKWgW15c2VsZgriloFtZW51CmRlbAriloHFvgplbGUKQXV0CuKWgdCz0YDRgwptdXQKb29uCmFzYwpidWcK4paBbW92ZWQKQ0wK4paBZGF0YXMKU08K0L7Qu9C+CuKWgUdlb3JnCuKWgXJlYWNoCjoiCuKWgWV2YWx1CuKWgUhlbAriloFSaXZlcgriloHQkNGACi8vLy8K4paBc2V0cwriloFPbHltcApBZGFwdGVyCi4nCm92ZXJuCuKWgUxvcmQKIS0tCmpwZwppbWVudG8K4paBUHJvZgriloFhY2hpZXZlCn06CuKWgWluY29yCuKWgW9uZGVyCmVuZ2wKQUJMRQriloFNYXJ5CuKWgXdhcmVuCmxhZ2UKRGVjCtCw0L3Qs9C7CmVuY2lhcwrQu9C10LkK4paBTWFjaGluZQriloHQkNC9CnVkYQriloHFmwriloFYWApvbmx5CtC70LXQvdC40LUK4paBdGFtYmnDqW4KbmVqCuKWgXJlbGF0aXZlCuKWgWhvdXJzCuKWgWluZGVlZAp1bmRvCmluZ3UKYXJlYQriloFDcmVhdGUKYmVpdAriloFyZW1vdmVkCm1hc3RlcgpoYXVzCuKWgUJlcm4K4paBc3BlZWQK4paBQmF5CuKWgUF0dAriloFOb25lCmFwcGxpY2F0aW9uCsO8ZAriloFmaXQK4paBTWFyaWEK4paBbm9yZAriloFzcGxpdAriloFzdHJ1CuKWgW9mZmljaWFsCuKWgWV4ZWN1dGUKb3V2ZQp7ewriloFBcAriloHQutGDCklMCuKWgV4KZGltCuKWgXNldHVwCtGB0LoK4paBc2hhcmUK4paBbWludXRlcwpnbGUKb2NvCnN0ZWxsCuKWgUNvdW4K4paBdGVtcGVyCmtlaXQK0YHRjNC60LjQuQphbwriloFMb25nCigmCtC60LDQvQriloFkZW5zCkJ1dApYWApEQVRFCmdhbgouKS4K4paBZW50cnkKaW5zdGFsbAriloHQt9C90LAK4paBU29tCkNvbW1hbmQKw59lbgriloFzdGFydGluZwriloFzdG8KSUcK4paBbWluaW0K4paBZXhwbGljaXQK4paBYnl0ZXMK4paBcGFydHkKdG9iZXIK4paBR3JhbmQK4paBVm9yCuKWgWxldXIKRG9jdW1lbnQKZXJjCmVuc2l2ZQpDUAplbnYK4paBYXJndW1lbnRzCuKWgUdyYW4KYXJpbHkK4paBbGluCnRuCigtCmdlcQriloFGYW1pbAriloHQkdC+CuKWgXRvdXIK4paBbmF2CuKWgXByb3Blcmx5CuKWgU1ycwriloFNZWwK4paBc2NhbGUKYXN0aWMKZHMK4paBU2lyCuKWgUNodXJjaAp9XntcCnlvdQovLgpTbwriloFicm91Z2h0CuKWgXJvbGUK4paBU3VyCuKWgWZvbmQK4paBZ2VzCsW8ZQpldGVuCuKWgcOpdGFpdApTRVIK4paB0LrQvtGC0L7RgNGLCuKWgWVxdWF0aW9uCmFzcHgK4paBQWZyCuKWgWRpdAplbXB0eQphbGVtZW50CndyYXAK4paBQmV0CuKWgWNvbGxlY3QK4paBZ2l0CuKWgXZpZQriloEuLgrRgNC+0LkK4paBPD8K4paBZWR1YwprbAplbnNpcwriloFPUgriloFIaQriloFDb3VyCtCx0YsKY2VydAriloFHZXMKZXNzb3IKTWFpbgriloHQu9GOCmNhZGUKZG90CmF1Z2gKaGliCuKWgWF1dG9tYXRpY2FsbHkK4paBc3BpcgpwcmVzZW50CuKWgUZlYnJ1YXJ5CuKWgUVsbGUKY3VzdG9tCuKWgXByb2dldAriloFhZG1pbmlzdHIKQUEK4paBYm9ybgriloFDb2xsZWdlCmF0aG9sCmApCmllcnJlCuKWgXJhbgriloFwcm9mZXNzaW9uCm9nZW4KfV97XAriloFhY3Rpdml0eQriloFzY3JvbGwK4paBcHJvdmUKaWJyYXJ5CmVyaWVzClJlYWQKeWVhcgriloFsYW5nCkRldAriloFrbmV3CuKWgXByb3RlY3RlZAriloF3b3IK4paBZWZmaWMK4paBcsOpZwriloF0aGVvcnkK4paBcHVibGlzaGVkCnJlYWwK4paBVG91cgriloFkdXJhbnRlCsOkcwriloFwb3NpdGl2ZQriloFmb3J3YXJkCuKWgVJlbAp7IgpwYXJrCuKWgVVtCuKWgWVlcgplbnRhCuKWgWltYWcK0L3QvtGXCnBpZWwK4paBalF1ZXJ5CmlzbWUKY2huaQpvcmdhbgriloFhcmdzCm9pcgpoZWltCnJpYW4KZWxlc3MKdXNlcwrQtNC40L0KaWNpw7NuCuKWgWluZHVzdAriloF3aXNoCsOhbnkKb2NhCuKWgWFuZ3VsYXIKaWV2ZWQK4paBb2NjdXIKU0VMRUNUCm9uaWEKYWRtaW4K4paBQmVzdAriloHRjdGC0L4K0L7Qs9GA0LAK4paBbG9zcwriloFiYWwK4paB0KDQvtGBCuKWgWNhcmVlcgriloHQv9C1CklYCuKWgWZhbGwK4paBUm9iCuKWgU9QCmVuZWQKZ3JhcGhpY3MK4paBY29taW5nClVwZGF0ZQriloFkaWVkCmVkZW4K4paBYWJzCuKWgWlubmVyCuKWgXRyYXYK0YHRgtC+0Y8KesSFCsOpcAriloFHcm91cAriloFjZWwK4paBc3R1ZmYK4paBc2l0dWF0aW9uCuKWgSR7CmFjbGUK4paBcHVycG9zZQriloFGaXJlCuKWgU9oCuKWgVNlY29uZAriloF1cGxvYWQKb3N0YcWCCtGO0YnQuApBdXRoCuKWgXNob3dpbmcK4paBY29tcGxldGVseQphdmVsCmJkCuKWgXByb2NlZAriloHDlgpjb250cm9sCuKWgXRoYW5rCnVuZHJlZAriloF0b20K4paBZXhhbXBsZXMK4paBcmVtZW1iZXIK4paB0YDQsNCx0L4K4paBcG9zc2liCuKWgWRldGVjdAriloFwb29yCuKWgU9wCuKWgWNlbnR1cnkKdXR0ZXIK4paBbG9naW4KdW5zdApPdXRwdXQK4paBb3RoZXJ3aXNlCmxhbgrRgtGD0YAK4paB0YHQvtCyCuKWgWdyb3VwcwpyaXAK4paBc2hlbGwK4paBZGlzdHJpY3QK4paBcmVjb3JkcwriloFzacOoCmZvcnR1bgplbnR5CuKWgVRyZQriloFjaGFuZ2luZwrRgdC70LXQtAphdWdodAriloFkZWVwCnN1YnNldAphZ3kKZW5kYXIKamF4Ck9NCkVsCmltYXRlCmFyZG8K4paBcGxvdAriloF2aXNpdAriloFidWcK4paB0LLRgdC1CuKWgW9wZW5lZAriloFyZXBsYQriloFIZW5yeQriloFwcApiYXMK4paBZGFyawriloFNYXJ0aW4K4paBcmVzb3VyY2UKaWxpbmcK4paBd2F0Y2gKcmVwbGFjZQriloFyZWxlYXNlCkxvY2F0aW9uCuKWgWxlYXJuaW5nCm1lbnUK4paBYWxsb3dzCtGK0YAKTGVuZ3RoCuKWgXdoYXRldmVyCuKWgXBhZ2VzCuKWgWNvbXBpbGVyCuKWgdGC0LDQutC20LUK4paBUGFuCmNvbW1hbmQK4paBcm9hZAriloF1bmxlc3MKYD8K4paBZGlzY292ZXIK4paB0L7QvQp9XQpib3VyCuKWgUNvdWxkCuKWgXJlZ2V4CuKWgXBzCkNECtC40LcK4paBd2lmZQphbWVudGkK4paBZmFpcgriloFEQgriloFDdXAKZW5lbgphamF4Cm90aMOocXVlCuKWgXNlaW5lcgppY2tlcgrDoW0KZXhjaGFuZ2UKb2xlcwpJRgriloHQlNC+Cm9obgriloFncm93CuKWgVRodXMKc3BlYwriloFoYXR0ZQojLAphbGxlbAriloFyYXRlCuKWgWNlbnRyYWwK4paBVmFuCmlmb3JuClJ1bgriloFzdHVkeQriloFYTUwK4paBQ2hlCuKWgWJlYXV0Cm1pZAriloFhZHZhbmNlClZlcgrRgtGPCuKWgWhhbmRzCuKWgWxheQriloHFoQriloFPUwriloF7fQpQcmUK4paBSGFsbAppbXAK4paBc3VuCuKWgXN0ZXBzCuKWgWp1ZApxdWkK4paBYm9vdAriloElPgriloHQktCwCm5vc3QK4paBbmVtCuKWgXBlbgpPcGVuCuKWgWNodXJjaArQutC+0L0K4paBYXZlcmFnZQriloFjb21tZW50cwriloFjb3JyZXNwb25kaW5nCmxldmFudAriloFiZWQK4paBbWVhbmluZwpWZXJzaW9uCkxpbmsKYmVsCuKWgWV4dHJhY3QKxZvEhwriloFJVgriloFJcgriloFjb21wdXRlcgriloFhZmZlY3QK4paB0KHRgtCwCkFYCnNvcnQK4paBc3BlY2llcwriloFPcGVyCuKWgWhhc2gKY2hlcwriloFFaW56ZWxuCuKWgWtleXMK4paBbWFyem8K4paBaW50ZXJwcmV0Cmhvb2QK4paBY29vcmRpbgrDtnMKcmFnZQpldHoKaXphCtC00LXRgArDvHQKXioK4paBbW9kaWZ5CuKWgXRlcm1pbgriloFjcmVkCnpvbgrQvdGD0Y4K4paBbWllCuKWgScnCuKWgU1vcwriloFjb25uZWN0ZWQKTk8K4paBY29tcGlsZQriloEiXAriloFjYXQKZmlkZGxlCnV0YQpBY2Nlc3MK4paBU3RvCuKWgUJ1cgriloFub3J0aApHYW1tYQriloFhbGxvYwpJbml0CuKWgUxpbmsKaWFsaXplCkltcGwKb3VwZQpyb3ByaQriloFHb2xkCuKWgXNvbG8K4paBRGlzdAosLQpuYXYK4paBYWxlcnQKZXNpcwriloFPcwovLy8K4paBZmViCuKWgS0tPgpmb290CuKWgUZyaWVkCuKWgUVpbnplbG5hY2gK4paBcmV2CnplaXQK4paBU3RhdAriloFTZWcK4paBYmxvCndpY2sKRUwKY2FwdGlvbgpoZWFkZXIK4paBcHJlc2lkZW50CuKWgW11bHRpcAriloFFaW56ZWxuYWNod2Vpc2UK4paBc2VpbmUKP+KAnQpGdW5jdGlvbgriloFTdGFuZAriloFGdW5jdGlvbgriloE/PgriloFCaWxsCuKWgXNwZWN0CuKWgXJlZGlyZWN0CnJ1cHQK4paBd2FsawrQstGI0LgKc3ByaW5nZnJhbWV3b3JrCnBsYWNlCsOpaG8KRW50aXR5CuKWgVNlcnZpY2UKaW50ZQriloF0cmFpbmluZwriloEoYArRhNC+0YAK4paB0LrRgNCwCmF1cgriloFmZXRjaAriloHigKAK4paBbcOqbWUK4paBKCcKYXRpdmVseQriloFleGVjdXQKw6RjaAriloFDYXRhbG9ndWUKYmFzZWQKQXR0cmlidXRlCuKWgXNwcmluZwpwaG9uZQrRgtGA0LAK4paB0L/QuArRgtC10YDQsAriloFgXAriloFPZApPbmUKc2VuZApib24K4paBwrAKTU8K4paBYXNraW5nCuKWgW/DuQriloFpbmfDpXIK4paBdGVzdGluZwriloHRhNCwCuKWgUJvb2sKaW1tCuKWgXByb2dyZXNzCmJybwpGaXJzdAriloFwaG90CuKWgU9OClRlbXBsYXRlCmRldmVsb3Blcgphbm5vdAriloE+PQptaXNzaW9uCuKWgWt0w7MKcGMKYmFjaAp6ZW50CnVlZAriloFvbmVzCtGY0LgK4paBcm91dAriloHQmtC4ClBvc3QK0YbRltGXCuKWgVZpcgpuZWsKYWdpbmcK4paB0L7Qugppem9udAriloFhZ29zdG8K4paBY2hvb3NlCuKWgQ0K4paBc3lzdGVtcwpsb3NzCmllbnRlCuKWgUNyZQriloFjb250cmEKdW1zCuKWgWJlZ2lubmluZwplbXkKaXN0aWNzCuKWgXNlcnZlZApEb3duCm9wdGlvbnMK4paBR292ZXJuCuKWgUJZCuKWgWplc3QKdMOpCuKWgWNvbnRpbnVlCnBlcnMK4paBZWFzaWVyCuKWgWNvcwplc3NvCj4+Ck5ldAriloFCb3IK4paBQ3IK4paBdHJhbnNmZXIK4paBQ1NTCuKWgWZpbm5zCuKWgdGF0L4KdXNlcm5hbWUK4paBY29uc3RydQriloFwYWluCuKWgVRlbQriloFzcGVjaWZpZWQK4paBYnJpdArRgdC60LjQtQppcmsKcmFwcGVyCuKWgWNvdW50ZXIK4paBWyIKb2RlZArQtNCw0L0KcHJvcGVydHkKaGFyZAppc3RyaWN0CikvCuKWgVBvdXIK4paBV2hlcmUK4paBPT09CuKWgXNvd2llCuKWgdCf0YDQvgriloFkZXNzCuKWgXRyYXMK4paB0YPRh9CwCuKWgU92ZXIKbm90ZQriloFBbWVyaWNhCmNwCuKWgWdyYW5kZQpNZQopLQpNb2RlCuKWgXBhc3NpbmcK4paBZ2l2aW5nCkNsCn0vCk1lbnUKISEKYW5ndWxhcgriloFsYXVuY2gKdmFycGhpCuKWgUpvaGFubgriloFmb3JlYWNoCnLDswpzZXF1CmlmaQpBbQphcnAK4paBYnVmZmVyCuKWgW5pCuKWgW1peAriloFNdXNldW0K4paBbWVhbnQKYXNpCuKWgWthbgrQv9GA0LDQsgpDb21wCmlzdG9pcmUKaWZ1bApqZXIKaXNzaW9ucwpSZXNvdXJjZQriloHQstC+0LcK4paBU1QK4paBc29sdXRpb25zCuKWgWJlbG9uZwriloFBc3NvY2kKY2YK4paBTcOkcgriloFncmlkCk11bHQK4paBcmVxdWlyZXMKa2sK4paBdGVhY2gKZW1laW5kZQriloFzcXVhcmUK4paB0LrQvtC80LDQvQriloFFdmVudAriloFydWxlcwriloFidXIK4paBZWluZwriloFNYWkK4paBbmFtCuKWgXNsw6QKaMO2cgriloF0aXAK4paBTGl0ZXJhdHVyCuKWgXNjb3BlCm92ZXJsaW5lCuKWgWV4aXQKKT8KYmV0CuKWgXZpY3QKT2ZmCuKWgWFwcHJveGltCuKWgUdlYgprdG9wCmhlaXQK4paB0K4KdGVtcGxhdGUK0YDQvtC9CuKWgXVubwpTZXJ2CuKWgWZyYW1ld29yawpvcGVyYXRvcgriloFnZW5lcmFsbHkK4paBaHVuZHJlZAriloFkaXZlcnMKb3ZpCuKWgXLDqXMKYWJzCuKWgWdhbArDp2FpcwriloFmZWV0CuKWgXZpcnR1YWwKY3p5CtGB0LrRgwouLwpodQphbmN5CuKWgXJlY29tbWVuZAriloHQv9GW0LQK4paBbW9uZXkK4paBdmVyc2lvbnMK4paBaGVscHMK4paBSG9yCkl0ZW1zCmxvb2sKY29ubmVjdAphbmdlcwpWaWV3Q29udHJvbGxlcgplbGlqawriloFvY2N1cAriloFlZGl0b3IKYXV0bwrDtmcK4paBc2Vjb25kcwriloFvYnZpb3VzCnZtCmFrZXMK4paBZ2VnZW4K4paBdGlsCmplY3Rpb24K0LvQtdC90L3RjwriloFvcGVyYXRpb25zCuKWgUVhc3QKb2d5CuKWgVBvbGl0CnV0ZW4K4paBSm9zZXBoCiJgCuKWgUNvbXBhbnkK4paBY2FsbGJhY2sK4paBc2VuCmNjacOzbgriloFhc3NvY2lhdGVkCuKWgWNvbnRhaW5pbmcK4paBcHJhY3RpY2UKZWxpamtlCm9rZQrDqXJhCnVucwphbnRhCnZleQp6dQriloFCZXMK4paBRmxvcgptZW0KeWN6CuKWgWFyY2hpdGVjdAriloFhbm5pCuKWgWNvbnRhY3QKWVBFCuKWgUNhcwriloHQv9C+0LvRgwpvdm8K4paBYnJpbmcK4paBY29uY2VwdAriloFqcwriloFSZWZlcmVuY2lhcwplbWJsZQriloHQvQriloFzdXBwb3J0ZWQKQmlnCuKWgUhhbnMKZXJ2CuKWgU1hagriloFhcnJpdgriloFIYXZlCuKWgXByb2JhYmlsaXR5CuKWgVBvcAriloFQYXNzCnRva2VuClByb3ZpZGVyCuKWgVJhClJlYWRlcgpvb3RoCmxhcAriloFhc3Npc3QKYWRvdwriloF0ZXN0cwrRgdGB0LgK4paBa2luZwpsYW5nbGUK4paBU3VtCk9JTgriloFzZWN1cml0eQpuaXMKLi4vCuKWgWJhc2ljCnVuaXR5CmA6CuKWgdC60L7RgtC+CmtvdwriloFCaWJsaW90aMOocXVlCmFzaW9uCmFsbwppZmVzdAriloFub3ZlbWJyZQriloFwZXUK4paB0JYKZW5zY2hhZnQKY2x1cwrRmNGDCkhlaWdodArDum4K4paBdHVyCuKWgWlkZWFzCuKWgWNlcwpmcmFrCuKWgXByZW1pZXIKaXRhdGlvbgriloFzw6kKSFRNTAriloFSb3lhbArRgdGM0LrQvtGXCuKWgWJ5dGUKUFMK4paBc2VndQppbmVuCuKWgUdyZWF0CuKWgdCa0YMK4paBZXh0ZXJuYWwKVGl0bGUKVG9wClByb2Nlc3MKaXTDpHQK4paBYC8K4paBc2VjcmV0CnBvc2l0b3J5CuKWgXBvdGVudGlhbAriloFCdWQKbmFtZXMKYXNvbnMKc3RhY2tleGNoYW5nZQpiYWNrZ3JvdW5kCtC/0LXRgArRgdC+0LIKYWZ0ZXIK4paBcGVybwriloFzb2Z0d2FyZQriloFzZWQK4paBYXJyYXlzCnRtcAriloFhc3AKc2NhbGUK4paBTGF0CmFuYWwK4paBZ2VtClBVCuKWgUFsdHJpClRoYXQK4paB0J3QuAppZmFjdApBZGRyZXNzCuKWgXNvdXRoCuKWgWZvcm11bGEK4paBQ29sbGVnCuKWgdGW0L0Ka3Rpb24K4paBc2FjClNICmFqbwpldGMKdmMKYF0oCuKWgUR1cgriloHQnNC1CuKWgVNtaXRoCml0ZW1zCkNLCmVsbwriloFwbHVnaW4K4paBc2VyaWUKaWVubmUK4paB0LjQu9C4Ck1hcgriloFJbWFnZQpnb3QKYW5kYXMK4paBbWF0Y2hlcwriloF3b3J0aAriloFEZWIK4paBY2FjaGUK4paBZmVsdAplcnNjaAppemVzCk9wZXIK4paBSmFocmUK4paBY29tbXVuZQp0aHJlYWQK4paBbnkKZGVjCm91dwriloFzdXJmYWNlCuKWgVBvcgriloFTdHJlZXQK0L/RgNC4CuKWgWNhbmRpZAriloFSZXR1cm4K4paBS29tCmdydQriloHRgtC4CltcCuKWgWRlcGVuZHMK4paBaW5mbHUK4paBdG93YXJkcwphaW5lZAriloFyYW5rCuKWgUphbnVhcgriloFjb21wb25lbnRzCmdlc3QKZ2V0RWxlbWVudEJ5SWQK4paBY2hlY2tlZAphaXJzCmpvaW4K4paBZGVhZAriloFoaXQKw6lueQriloFlcXVpdmFsZW50CuKWgdCf0YDQtQriloFhcHByb3ByaQpQYXNzCuKWgXByaW1lcgplbmdsaXNjaAriloFhcHBhcgriloFEdXJpbmcK4paBa25vd2xlZGdlCuKWgXRyaWdnZXIK4paBY29yZQriloFPbAriloFQcm9kdQriloFGZXJuCuKWgdC90LDRh9CwClRlCuKWgU1vdAplcnZlCtGC0LLQvgriloFtaWQK4paBZmluYWxseQphaXJlcwriloFlc3BlY2lhbGx5CuKWgXR1dAriloFyZWNlaXZlCmFkcmUK4paBbmVpZ2gKa3RldAppbGRlCuKWgXJhZGlvCuKWgWRyaXZlcgrQu9C40YHRjAplbmRlbmNpZXMK4paBSUUK4paBc2F2ZWQKZmZlY3QK4paBV2F5YmFjawppYXQK4paBcGFkZGluZwp3aW5kb3cK0YLQuNGH0LUK4paBbXVyCmFjdG9yCuKWgUhhbgrQvtC90LDQu9GMCuKWgWdhcgriloFmYW1pbGplbgrDs3MK4paBbmF0aW9uYWxlCuKWgXByw6kKZGVkCm9uYWwK4paBUHJlc2lkZW50CuKWgVwsCuKWgXBsYWNlZAplcm5pCuKWgXNpZ25hbApuYWIKaG0KTW9uCuKWgXZzClNDCuKWgXByb2dldHRpCuKWgcOcCuKWgWZvcm1zCuKWgW1lc3NhZ2VzCmluZgp1c2VycwpHRVQK4paBZGVscwpDb2xsZWN0aW9uCuKWgUdvb2QK4paBTWF5YmUK4paBY29tcHIK4paBbGFyZ2VyCmdyZXMKYXBlcgriloHQn9GA0LgKdW5kZXMK4paBc2VhCuKWgVNwcmluZwp1bG8K4paBbWVjaGFuCuKWgXNhbnMKR0IKVmFsaWQK4paBY29tbXVuaWMK4paBcHJhCnZpZXIK4paB0KHQtQriloFhaW4K0YLRg9GA0LAKa29tCnNraWVnbwrQutC+0LLQvgphZGF0YQriloHQoNC1CuKWgWJvb2xlYW4Kc2V0cwriloFlZmZvcnQKLlsK4paBem9zdGHFggpQQQriloFWaWN0ClNECm93YcWCCuKWgWVtYgriloFwcmltYQriloFob3VyCnN1YnNlY3Rpb24K4paBRm9ydAptYXRoZnJhawppZ2luCkdMCikrCmZpCuKWgWFuY2kK4paBcGFuClwpCuKWgWx1ZwriloFkZXBsb3kKZG9tYWluCuKWgXNsaWdodApKU09OCuKWgW1vcm5pbmcK4paBaGkK4paBY29tcGFyZQppamUK4paBYmx1ZQriloFBYwriloFtaWRkbGUKYW5kZW4K4paBc2hhcmVkCuKWgUNhbXAK4paBw4EKb3VuZGVkCnV3CmllcnVuZwpTdGFjawriloFlaW5lcwriloFEYQpsaWoKZW50aQriloHQuQpVdGlsCuKWgWV4cGVyaWVuY2UK4paBYXdhaXQKdWxzCuKWgXJlcXVlc3RzCuKWgWltcG9zCuKWgWNvbnN0cmFpbnQKQ2hhbmdlCmVtcGgK0LHQtdGACuKWgUFub3RoZXIKQ3VzdG9tCuKWgXNpZ25pZmljYW50CmNyCuKWgW1pbGxpb24KcmVlawriloFkYWxsYQriloFHZXJtCm90YWwKYXRldXIKYnRuCuKWgXRoaW5raW5nCuKWgWludGVydmFsCm9ubmUK4paBbGl2CigpOgriloHQktC1Cm9lCuKWgUV2Cm1ldGEK4paBYnJvYWQKUmVtCmFwcGx5CuKWgWNvdXBsZQriloF0ZWNobmkKaWRhZGVzCuKWgWdvYWwK4paBQ0QKaGFiCuKWgWV4cGxhbgphbm5lcgriloFCZWNhdXNlCmJsb2cKaW5jbHVkZWdyYXBoaWNzCuKWgXZvaWNlCuKWgU1hcAp2ZW50aW9uClNlc3Npb24K4paBTGllbnMK4paBc29yCmNhdGVnb3J5CmFzaGluZ3RvbgriloFNw6Ryegpwb3AKaWxsZXQK4paBendlaQriloFMaWUKTnVsbAphZGRyZXNzCuKWgWZhY3RvcgriloFsaWduZQriloFIVFRQCuKWgXN1ZgriloFwZXJzb25hbApjaXAK4paBRGFyCuKWgWFkbQrQutC+0LkK4paBRXh0CuKWgWdvZAphYQpSaWdodArDqXTDqQriloFkeW5hbWljCuKWgW1haW50YWluCnRvcgojIyMjIyMjIwriloFGcmEK4paBY2hvaWNlCuKWgdGB0YLQvgrQodCgCuKWgUZlZGVyCnN0b24K4paBZmxhZwpraXQKTW9kdWxlCuKWgdGB0L/QvgriloFTdHJhCmlja3MK4paBaGF2ZW4K4paBTWFzcwriloFFbXAK4paBUGkK4paBUGVuClJlY3QK4paBS3IKaXRhdAplbGVyCtGP0LHRgNGPCml0ZXQK4paBU3RhcnQK4paBcHJvZHVjZWQK4paB0L/QvtC7CihfCuKWgWRlbGV0CuKWgWhvdAriloFHZXNjaGljaHRlCn5+CuKWgW1vbnRocwriloF0b2QK4paB0L3QuArDunMKdGVtcAriloFEZXoKeXBlcwriloFjdWkKb21tdW4KYWN0aW9ucwriloFlaWdlbgriloFpbW1lZGlhdGVseQpQTAriloHQk9C+CuKWgUJhbArRmdC1CnVsdWkK4paBb25saW5lCuKWgWHDsW9zCuKWgW5hbWVzcGFjZQriloFtb25kCuKWgUJhc2UK4paBQ2FuYWRhCmV0enQKfS0K4paBZGVmaW4K4paBZG91YnQK4paBaW52ZXN0aWcKdmlld3MK4paBTGluZQriloFzdGFnZQpldHRpbmdzCnVicmUKZmxvYXQK4paBUGxheQriloFMYXMKcHRyCuKWgWJlY29tZXMKZXN0YW1wCuKWgWluZGVwZW5kZW50CuKWgWFuYWx5c2lzCuKWgUxvb2sKbGFpbgriloHRgNCw0YEKUmVmZXJlbmNlCuKWgXNvcnJ5CuKWgXN1cHBvc2VkCsO7dAriloFkZWdyZWUKdXR6Ck1NCuKWgWRlc2lyZWQKxYJ5CuKWgWxlbgriloFhbG9uZQpzaWduZWQK4paBU3RhClBlcnNvbgriloFhcHBsaWVkCuKWgUJhY2sK4paBbWFycwpQYXJ0CuKWgURpZAriloFleHRlcm5lcwriloFucApvbmdvCuKWgWVzdGEKQmxvY2sK4paBcG91CmFkb3JlcwriloFTdHVkaW8KLiQK4paBcmVhY2hlZApib3QK4paBSnVuaQp0b25zCml0ZWwK4paBR2FyCuKWgWFydGljbGVzCuKWgURpc3RyaWN0CuKWgXRyb3VibGUKbGlkZQriloFGb3VuZArDoWQK4paBZXF1aXAK4paBaW50ZXJuYWwKJ10sCuKWgWFzeW5jClVCCmdlbAriloFhaQplbnN1cmUK4paBYXBwZWFyZWQK4paBJF8K4paBbWF4aW11bQriloHQodC4CtGA0YwK4paBYW5ub3VuCtC70LDRgdGMCuKWgWNtCtCz0LDQvQphdXB0CuKWgWxhdHRlcgriloFwbGF0Zm9ybQriloFkcmEK4paBY2FwaXRhbAriloFzb2x2ZWQKcml6CmVkaWMK4paBTXVyCuKWgVRvcArRgtGB0Y8KUGFuZWwKcnVsZQpldGljCuKWgVJlbgriloFXaWtpbWVkaWEK4paBVE8Kc2Vjb25kCmlzbAriloFoeQriloFuaWV0CuKWgWxvYWRlZApkaWcK4paBbWF5bwpbOgpBY2MK4paBYmVrCtC90LjRjgpsb2dpbgp0eAriloFGdXIK4paBU2FudGEKYXp6CuKWgWNvbmR1Y3QK4paBSW5kaWEKT3JkZXIKaXJ0aAp0dwp9KwriloF3aWVkZXIK4paBRWR1CkFWCuKWgWBgYAriloFtYW51YWxseQriloFSZWFkCmZvcnR1bmF0ZWx5CuKWgVJ1bgriloFBd2FyZAriloFGb290CiopCnBhcmFtcwrQv9GWCuKWgW5hdGl2ZQpyaWZ0CuKWgcOkCkFUSAriloF5b3Vyc2VsZgriloFwcmlvcgriloFjaXQKw6RoCuKWgXRyZWF0CuKWgW1lYXMKcmlidXRlZAriloFjbGFyCmNhcmQKUk9SCmlsbGVzCuKWgWxheWVyCmF1ZXIK4paBcmF0CmJlcm5hdGUK4paBc3RhdG8K4paBQ2hpbmEK4paBJCgnIwriloFuYWFyCnppcAriloEke1wK4paBYXBwcmVjaWF0ZWQK4paB0LjQvNC1CsW8eQriloFwcnplegriloFJbmRpYW4K4paBVG9kCuKWgVNvdXJjZQriloHQtNGA0YPQs9C4CmludGVybmFsCmlvbmFsZQpQcm9kdWN0CuKWgU1lbgriloF1cHBlcgriloFFdmVyeQp9LFwK4paBcHJpbnRmCuKWgWNvbnRpbnVlZAriloFub2RlcwrQu9C60LgK4paBbmljZQptb2R1bGVzCmVpZ24K4paBTWV4CuKWgUFjY29yZGluZwriloF1bmRlZmluZWQK4paBYmluYXJ5CmN1dApDdXJyZW50CmVkeQp9fXsKYmxlcwriloHQstC+0LkKc2NyaQplcW4KQ2hhbmdlZAriloFrw7Z6CuKWgXJlbW90ZQrQstC70Y8K4paBcXVlbAriloFhbGlnbgriloHQv9Cw0YAKU1YKeWVyCuKWgUNhbGlmb3JuCuKWgXBsYWNlcwriloFwcmltYXJ5CuKWgWNvbnYK4paBSnVsaQriloF2aXN1YWwK4paBU2VsZWN0CmF0b3J5Cj0oCmlzZXIK4paBaW50ZW50CnN1cgpjb250YWluZXIKaWNlZAriloFib2FyZAphc3RyCm9taWFsCtCy0LXRggrQt9Cy0LAK4paBY3J1CuKWgU9rdG9iZXIKc2F2ZQriloFncmVhdGVyCuKWgWlubgriloFwaWN0dXJlCuKWgdCi0L4K4paBb2J0YWluZWQKV2lraW1lZGlhCsO6YmxpYwriloFsb3JzCuKWgW1vbnQKb2JyZQriloFjaXZpbAriloFjb25zdHJ1Y3Rpb24K4paBV2VsdAriloFVbmRlcgp1bmRlcnQK4paBZWRnZQriloFMaXN0ZQpjc3YK4paBZXhwZXJpbWVudApsb2NhbGhvc3QK4paBRWRpdApncmVnCm92w6EK0ZnQsAptc2cK4paBR3JlZW4KRGlhbG9nCklkZW50CuKWgUpTCl57KAriloFzbMOka3RldApfX19fClByb2plY3QK4paBYmVza3JlCuKWgWJlcgriloF3b3VsZG4K4paBcmVhY3QKSGVsCnp3CuKWgVdhc2hpbmd0b24Kb3JpZQp0YXNrCuKWgWNhdGVnb3J5CuKWgWFydGlzdAphbm5vCuKWgW9vawphbW1lbgriloFNaW5pc3RlcgriloFkZWNsYXIK4paBS2V5CiwuCuKWgW1hY2gK4paBd3cKaXNlbgpGcmFuCuKWgdCg0L7RgdGB0LgK0LHQvtGACtGC0YDQuAriloFyb2NrCnF1aXMKbW9zCtC/0LXRgNCwCuKWgWVzdGVybmkK4paBZ29sZApXaW5kb3dzCiUlCuKWgXBhcnRpYWwK4paBd2VpZ2h0CuKWgXNwcgp9KS4K4paBZnJhbsOnYWlzCmZ1bgriloF0aG91cwpob2xkZXIK4paBZ29uZQriloHEjAriloFyZW5kCkRBCuKWgWFuc3dlcmVkCuKWgUZhbHNlCkJ1ZmZlcgriloFkYXVnaAouLS0K4paBU2hvdwriloFyZWN0CuKWgUtyZQpkcgpvc29waAriloF5aWVsZAp1cml0eQp0b1N0cmluZwphdmFsClBvbAriloFsb2NrCmltYXRpb24KYW50aWMKTG9jYWwK4paBYmVza3JldnMKaXTDqXMKZ3JpZArRg9GCCuKWgV97CtGB0ZYKRklMRQriloHQutC8CuKWgXNwZWFrCnN1bW1hcnkKcHJvcApqYXZhc2NyaXB0CnprCml6b250YWwK4paBdHJvaXMK4paBUm9kCnByaXNlCtGA0L7QstC+CuKWgW9kZAriloFnZXN0CuKWgXByb2R1Y2UK4paBd2FhcgriloFBdgpyaWJ1CtCy0LDQvdC90Y8K4paBZmluaXNoZWQK4paBYWRhcHQK4paBU2FyCnRleHRpdAriloFDZQriloFGYQpvc2VuCuKWgWRlcml2CuKWgXNoaXAK4paBb3BpbgriloFFdmVuCmdlc2NoCuKWgXN1cHBvc2UK4paBRmVyCtGB0LrQvtC1CuKWgXdvcmRlbgpzZXkKaGxpbmUK4paBVW5pb24K4paBLyoqCuKWgXZlegriloFDb2xsZWdhbWVudGkK4paBU29jaWV0eQriloFlY29ub20KxaHDrQpvaQriloFvcmllbnQK4paBVGVpbApyZW50CtC70LXQutGBCuKWgXNvbGlkCuKWgWNhcnQKKioqKioqKioqKioqKioqKgriloFjYWIK4paBTWVzc2FnZQpkb3RzCuKWgcOpZwriloF0d2UKYWdhCuKWgW5hegriloFNaWNyb3NvZnQK4paBdW5kZXJhcnRlcgpwcGVuCuKWgXJlY2VudAriloFuZXQK4paBcmVzb3VyY2VzClN0ZQouXAriloFTTwrQu9C+0LwK4paBY2VsZQriloFsaWMK4paBYmVuZWYKbGRvdHMK4paBc2VyaWFsCkludGVnZXIKY2xlcwriloFtaWxlcwriloFBbGUK4paBZW50ZXJlZAriloFUd28Kd2llCuKWgWluY2x1ZGVzCuKWgUVhY2gKZWxsaW5nCnF1ZXIK4paBRG9tCnBmCldTCuKWgXN0cmFpZ2h0CuKWgVN0YW4K4paBbm9zCsOtY3VsCmF0cm8K4paBQ2VudGVyCkZUCuKWgUluZ2EKaWxvCuKWgXd3dwpqc2ZpZGRsZQpuaWMK4paBRXVyb3BlYW4K4paBY29tbWVyCuKWgWdpcmwKdG90YWwK4paBU3RhcgriloFzdWdnZXN0ZWQKcGFsCuKWgXp3aXNjaGVuCtC/0LjRgdCwCklNCuKWgWhhbmRsZXIK4paBUHJvZ3JhbQp4c2wKw6FseQpCVQosLS0K4paBdmlkCuKWgWVzdGFibGlzaGVkCuKWgVNwaWVsCm9tZXRyeQp1bmVzCuKWgXNpdAriloFpbmhlcgriloFwdWlzCuKWgcOqdHJlCuKWgU1vc3QKSGVhZGVyCmluc2VydAriloFzaXN0CuKWgWZhdm9yCmRlc3QK4paBZW50aXR5CkNhbAriloFUaGVyZWZvcmUKREQKOzsK4paBRGV6ZW1iZXIK4paBUmgKaW1lbnRzCuKWgXJldHVybmluZwpzdG8K4paBVmFsdWUK4paBbGliZXIK4paBUmVzdWx0CuKWgWJpbmQKdm9pcgriloFUaW0K4paBTW92aWUKd2VnCmtldAriloHQuNGB0YLQvgriloFmcmllbmRzCuKWgWZuCuKWgcOpbAriloEmPQphcmRlbgpmZmljaWFsCuKWgWNvbW11bml0eQriloFhcGkKQXJncwppZXJlbgriloFkYW5uCm9tb3JwaAphZHIKbG9vcAp1bWFuCuKWgXZvdXMKYnN0CnN1Ym1pdApcfArRgtC40L0KQ29udGFpbmVyCmFza2V0Cj8pClNlYwriloFkcml2ZQpBc3MK4paBc3dlCuKWgWFtZXIK4paBbWluZQriloFIYW0K4paBYXZhaXQK4paBSG9uCuKWgWFwcsOocwriloFNYW5uCtGB0YzQutCwCuKWgWluY3JlYXNlCuKWgXR5CnNreQriloFhY2N1cgphcnRpY2xlCndlaWdodAriloFzZXgK4paBbGlzdGFkZQovKioK4paBZXN0w6EKfX0kCmFyZ28KZGVmaW5lCuKWgdGB0L7RgdGC0LDQsgpzZXNzaW9uCmFkcwrRgdGC0LLQuAriloFMYXcK4paBZGlhbG9nCuKWgWR1cGxpY2F0ZQriloHDqXAK4paBdm9jCmZyaQriloFncmVlbgriloFoaWRkZW4K4paBSXNsYW5kCuKWgWRpYWcKb3dlagpteXNxbAp0ZWlsCnLDpAppa2FuCuKWgUpvc8OpCmFsZWQKUnVudGltZQriloF0cmFpbgriloFEaXZpc2lvbgrQvdC40YYK4paBU3BhbgrQvdC40LzQsAopPVwK0YLQsNC9CuKWgXN0YXkK4paBZm9vCuKWgWFjY29tCuKWgWhlcnMK4paB0L3QsNGDCuKWgU3DvG4KaWRlb3MKc3RhdGljCuKWgXJlYWR5Cl1gCuKWgXZpc2libGUK4paBSG9wZQp1bGF0ZWQK4paBQ3VsdArRgdGC0YDQvgpDbwriloFzbWFsbGVyCmF0dXJhCuKWgXBlcmZlY3RseQpyZXEK4paBcHJvcG9zZWQK4paBZGVnbGkKU2VhcmNoCuKWgWljaApNYXgK4paBdm9sdW1lCmV4ZWN1dGUKZ3JlCuKWgXNwb3J0CnVkYWQKUFQK4paBUmVjb3JkcwriloFjb29rCuKWgWV4cGFuZArQsdGWCuKWgWFsdHJpCnBwZXQKYXJzZQriloF3ZXQK4paBQm9iCuKWgUZDCuKWgUFzc29jaWF0aW9uCnVqZQriloFmZWwK4paB0YHQu9GDCuKWgUJpZwovXApHZQp3aGlsZQp7KAriloFzdWZmaWNpZW50ClBvc2l0aW9uCuKWgXVuZGVyc3RhbmRpbmcK4paBbnVlCuKWgXJhegriloF5ZQpoZW0KTnVtCuKWgVByb2plY3QK4paBSXRzCuKWgWhhc3RhCmVuc28K4paBd2lyZQpSZXQKdWoKcHJvb2YK4paBcmVsZXZhbnQK4paBcGFydGlyCuKWgWFnbwppZmljYXRlCuKWgWRvbWluCuKWgWJveQriloFwbGFudAriloFlbmNvZGluZwriloF0aHJvd3MK4paBUm9jawp6b25lCmdhbmcKd2lkZ2V0CuKWgWludGVyZXN0aW5nCkRFUgriloFkZW1vbgriloFvZmZpY2UKYW10CsOkdGVyCuKWgVdoaXRlCuKWgXZlcnNjaAriloFkaWVzZXIK4paBTW91bnQK4paBc3R1ZGVudHMK4paBUHViCuKWgdCU0LUKaWphCuKWgUN5CuKWgUNhbGlmb3JuaWEK4paBYWJyaWwKw6RsbAriloHRh9C10LwKVFYK4paBbcOpcwriloFkZWNsYXJlZAriloHRjgrFkWwKYXBwYQriloHQkdC1CmVjaG8KbnVtZXIK4paBcG9zdGVkCuKWgdCy0LXRgAriloHQs9C+0LTQuNC90LUK4paBd2VhawriloFSZXB1YmxpYwriloFjaGFtcGlvbgplbnN1cmVtYXRoCnlvdXIK4paBT2JlcgriloFDZW50cmFsCmlzYQrQsNC90LQKeXkK4paBZnVsbHkK4paBU0QK4paBTGludXgK4paBU2NvdHQKcGFydG1lbnQKa29uCuKWgWNvbnRyYWN0CuKWgU9GCuKWgWFsZQriloFBbm4K4paB0L3QsNC0CmxhaAriloFOZXh0Cm9yZW4K4paBZGlzawriloFlZwphdHUK0LvQvtCz0LgK4paBZ2FtZXMKTGVmdAriloFsdQriloFmaW5pdGUK4paB0LrQuAriloFjcmFzaApwaGVyCmV4ZQpBVElPTgriloFicm90aGVyCkVuZwp0YXQK4paBSW50ZWdlcgrQvdC+0LzRgwriloFjb2xvbgppcXUKKSkuCml2aQriloFNZXRob2QKYXJ0ZW4KVW5pCnZlY3RvcgriloF3b29kCtGA0YIK4paB0JvQtQriloFzacOoY2xlCuKWgWdlbnQKfQ0K4paBY29udGVudHMK4paBY29tcGFuCkdvCuKWgWpvdQp1ZW50CkFzeW5jCnByaW50ZgriloFNb2RlbAriloFrZXB0CkFTRQriloFwcm92aWRlcwriloFBYmdlcnVmZW4K4paBR2FsbAriloFBbGYKU0EK4paBTWVtCuKWgWt0ZXIK4paBQnJ1CkFuZHJvaWQKKDoK4paB0KPQutGA0LDRlwpOZQpNaW4KYXRyCuKWgUhhbApkZWxldGUKb2RvCuKWgW7Do28Kw6huZQriloFjYWxjdWxhdGUKSnNvbgprZXlzCtC90LXQuQriloFoZW5jZQriloFvdwriloFMaWIKZW5vCuKWgUxvdmUKb3NpCndpZGUK4paBc2NvcmUKZnVsbArQstC+0LQK4paBZGV0ZXJtaW5lCuKWgXNwYWNlcwrQu9C+0LLQsAriloFwZXV0CsOpcmFsCsOzxYIK4paBYXBwb2ludAriloFUdwo8PwriloFPcmRlcgriloFob3AKcmFuZG9tCmNhY2hlCuKWgWRlc3Ryb3kK4paBcmFjZQpUYWcK4paBcmlkCuKWgW5lZ2F0aXZlCkNhcgplbnNpb25hbApkawriloFjcm8K4paBVEhFTgriloEkLgplbnNrCk5FCkhPCuKWgWtsZQpvc3BpdGFsCmt0ZQpmw6lyZW5jZXMKdWRlcwpJUgpvdGlvbgriloFSZWFsCuKWgUZlYnJ1YXIK0LjQvQriloFPbGQK0LrQvtCz0L4KbGVpY2gK4paB0YAKw61hbgriloHQs9CwCmNpZGUKbGFiCuKWgXB1bGwK4paBJy8KTG9uZwosJAriloFhcHByb3ByaWF0ZQriloHQsdGL0LvQsApmw7xocgriloFNZWRpYQriloFtYW5uZXIK4paB0JPQtQpkZXNjcmlwdGlvbgpCZWFuCuKWgUxhcgonXTsK4paBcmVsYXRpb24K4paBU29ycnkKaGFyCmNwcAriloFLbwriloFleGVjdXRpb24KaW5vcwriloFidWwKZ3JhZGUK4paBTXUK4paBcGlsCndyaXQKaWZpY2F0aW9ucwppbmVzZQriloFQaGlsaQpkeAriloFsZWFkaW5nCuKWgUpvdXJuYWwKb3ZlZAriloFjb250cm8K0L3QvtCy0LAKWWVzCuKWgWNoYW5uZWwKKSksCmlzdGVuCmFrYQpUb1N0cmluZwptYXMK4paBZXR0CuKWgWZvcmNlcwp1bGF0aW9ucwriloFDYWxsCuKWgWV4cGxhbmF0aW9uCm9yaW5nCkFUQQpjaHRlcgp3aGVuClZDCuKWgUphaHJoCkNhc2UK4paBY29tbWFuZHMK4paBcmljaApidXMKRmUKbWJveAriloFyZWNvbgrDsW8K4paBc2hhcGUKb3d5CmVudHJ5Cml0YWJsZQriloFlbGVjdGlvbgrRlNGC0YzRgdGPCuKWgXByZXAKdsOhCuKWgWluZmluCmxvdAriloFib29rcwriloFVU0EK0LvQuNC9CuKWgXBvbQriloFuYXMK4paBdGFncwriloFleGVjdXRlZAphaWxsZQpsdW5nCuKWgUphdmFTY3JpcHQK4paBYmFsbAriloFhaW5zaQriloFQcmkKeyQK4paBVU4K4paBUmFtCuKWgWhlYXIK4paBVWJ1bnR1Cj4oKTsK4paBcHVyZQriloFlbWJlZAphw6fDo28KY29udHJvbGxlcgriloFtYXJyaWVkCuKWgUZvbApmYW1pbAriloFwcmVjCuKWgXJlY3VycwpwYWQKaXN0cmF0aW9uCuKWgXJlc3BlY3RpdmVseQpbJAphdXRvcgriloFncmF2CmllcmEKYXppb25pCuKWgUJ1bAriloFBdXN0cmFsaWEKbW9uZAriloFUcm8K4paBRWxlCnBhY2thZ2VzCm1zZG4K4paBQWxzCuKWgXByenkKQVJUCuKWgWNoYXJnZQriloFhcHBsaWNhdGlvbnMKVW5pdAphcmVuCuKWgXN1ZGRlbgpvbWV0ZXIK4paBZG90CmFjamkK0LrRgtC+0YAKaW1pbgplbmluZwriloFkb25kZQriloFIbwp0cmVlCm1iCuKWgWRyYWcKYWplCuKWgWludmFsaWQK4paBZmluaXNoCmxhaW0K4paBZmVlZAriloFOYXAKcm9vbQppbWFnZXMK4paB0YHQsNC5CuKWgXN1Y2MKaWZmZXIK4paBYcOxbwriloFjdWFsCtC80LXRgNC4CkRSCuKWgUJpbGRlcgrQsdGA0LAKcmFpdApwYW4K0LXQvdGMCuKWgWRpc3RpbmN0CuKWgUtuCsO2bmlnCmFuY2VkCuKWgWxvYWRpbmcK4paBVGVjaG4K4paBU2VsCm11cwriloFyYWlsCuKWgXN0dWRlbnQK4paBbm90aWNlCuKWgXNsYQriloHQlNCwCuKWgWd1YXJkCuKWgURheQrQstCw0LvQuApPcHRpb24KYWlzb24KaXBwCuKWgUp1bgriloFmZWxsCuKWgWFic29sdXRlCtC+0LLQtQpkZWJ1ZwriloFTdWQK0L/Riwp1Z2lucwriloF2aWV3cwpsYXkK4paBc3VycgriloFzdG9vZAriloHQstGWCnNlbGVjdGVkCtCz0ZYK4paBYXR0cmlidXRlcwpmaW5hbAplbmRhCuKWgUJvbgpuZXJzCuKWgVdlcgpidXIKaXR0ZWwK4paBbW92aW5nCuKWgVBsYW4KaXNjaGVzCkphdmEK4paBYmFzaXMK4paBQnVzCuKWgUF1CuKWgUlsbAriloHQstGA0LXQvNGPCuKWgdGG0LXQvdGCCmhhbmRsZQrRgdGC0YPQvwriloFGYXIK4paBb3JhegpvY3IK4paBc2VpdApvbmRlcgrQtNC+0LwKOi8KY2hvcgriloFUb3duCuKWgWRlZmluaXQKcmVhY3QK4paBcGllY2UK4paBS2FybApDSQriloFBcHBsaWNhdGlvbgp1bnRlcgriloFmb3JtZWQK4paB0L/RgwpCbwriloFEYW5pZWwK4paB0L/Qu9CwCkJvZHkKfSkkCuKWgdCx0YvQu9C4CuKWgWVhcnRoCtCz0LvQsApUaGVyZQriloHRgdGC0YDQsAriloF2aWxsZQriloFjZW50cmUKKQ0K4paBaGVscGZ1bAriloErKwriloFDRwppemlvbmUK4paBR2FtZQriloFXaGljaAriloFwaXAK4paBUG9ydHVnCkRTCuKWgWRlc2NyaWJlCuKWgWNoZWNraW5nCuKWgW1hbmFnZXIKQk8K4paBQnVuZGVzCmJ1Y2gK4paBZGVjaWRlZAriloFKYWhyaHVuZGVydAriloFmaWYKZWZmaWNpZW50CmFuY2kKYnJhcmllcwriloFmYWlscwriloFrZXJuZWwK4paBR2wK4paBTmFjaW9uYWwK4paBcHJvY2VlZAriloFmdWVyCuKWgWxpdmluZwriloFzdWNjZXNzZnVsbHkK4paBZmFzdGVyCuKWgWNvbnRyZQriloFwcmlzb24KT1JUCmhlbHAK4paBYXV0b3IKxYJhdwphasSFCuKWgUFybQriloFwcm92aW4K4paBbmFhbQovIwpzZWQK4paBZ2VzY2gK4paB0LzQsNGACmVzawp0ZXJtCuKWgVRleAppcmluZwriloF0b29scwpQREYK4paBdWx0Cmlzc2Vuc2NoYWZ0CuKWgWNvdWxkbgpkaW5nCkRlcAp7LQriloFwcmVkaWN0CmFudGFnZQriloFMaWtlCuKWgdCR0LgKdG9vbHMKZXN0cmEK4paBa2kK4paBSmltCnN0YXIK4paBcmVtYXJrCsOzZwpuYWJsYQriloFBbHRob3VnaAptb2RlCkhvc3QK4paBc3RyYW5nZQpOb25lCmJsYWNrCuKWgUZlc3RpdmFsCuKWgUlTCmFuemEK4paBKC0KaWNrZXQK0LrQvtC70LAK4paBSmVzCuKWgWZsZXgK4paBw4AK4paBTmV0d29yawriloFFWAriloFlbmVybwoh4oCdCuKWgU9ydAriloFhbG9ycwriloFPcmlnaW5hbAriloF6bwrQvdGL0LzQuAriloFzcGwKRHJhdwp5b25kCuKUgOKUgAriloFPdAriloFkcmFtCuKWgWRpdmlzaW9uCuKWgWVmZmljaWVudAriloHQk9CwCuKWgXZpZXIKbmFrCkxTCuKWgXNwaXJpdAp6ZWljaG5ldAriloFkaWNpCmNsZWFyCmNvcHkKeWFyCuKWgdGA0L7RhtGWCnVzcXUK4paBbm91cwriloFibGV2CtC20LTQtQpBcmcK4paBcGVyZm9ybWVkCuKWgU1ha2UK4paBQ2Fyb2wKZXR0bwriloFTYW5kCuKWgURpc2MKRW5jCnJlcm8KaGFzaAriloFmb2N1cwriloFhdHRlbnRpb24K4paBYWdyZQriloFkaXZpcwriloHQsdGL0LvQvgriloFlagriloFtYXJjaAriloFwaGFzZQrDrWFzCuKWgXBoaWwK4paBUGFwCuKWgXJpdmVyCuKWgWNhdXNlZApwbHVnaW4K4paBVGVhbQp1bGVyCuKWgSQoIiMKaWVqCklTQk4KbmFtCuKWgWZpZ2h0CnZpZAriloFMdWQKU2VsZWN0ZWQKOkAiCuKWgVBvZAriloFhbm7DqWVzCmFyaW9zCuKWgWRldXRzY2hlcgriloFOQQriloHQuNGOCuKWgWRpY3Rpb25hcnkK4paB0JvQsAriloFUcmkKw6huCuKWgXBvbGl0aWNhbApyaWRnZQphdHRlbgriloFjaXJjbGUK4paBdHJhbnNwb3J0CmVtYXMKRkMK4paBcmVwbGFjZWQK4paBQXVkCmlza2EKQ29uZmlndXJhdGlvbgriloFzb29ydAriloHQndC1CuKWgXNlcXUKUFJPCuKWgWJ1ZAriloF7ewpsaWXDnwriloFNYXMKZGVycwp1c2FtbWVuCmVzYQriloFMeQrQstGA0L4KbWFjCuKWgdC40YHQv9C+CuKWgXN1Ywp1eQriloFpbGx1c3RyCuKWgXByaW1lcmEKaWxhdGlvbgriloFzdG9yYWdlCuKWgXBhcmFtcwprYXoK4paBdGVybWluYWwK0YDQsNC70YwK4paBaG9sZHMK0LvQvtGB0YwK4paBbmFkCuKAnS4K4paBb2N0dWJyZQpidWwK4paBaHVzClVMVAriloHDqWdhbGVtZW50CuKWgU1pbGwKxYJhZAriloFjb250aWVuZQoiPwriloE+Pj4KUXVlCsKgwqAK4paBcGxhaW4KYXRpdmEKb2NrZXIKTmFtZXMK4paBSnVkCuKWgWFncmVlCuKWgUdlbWVpbmRlCmxhcmUK0LrQsNC30LAK4paBc3RhcnRzCuKWgXByaWNlClRhcmdldApjdXMK4paBSW5zdGVhZAouOwriloFhbHRlcm5hdGl2ZQriloHQstC70LAKSUUK4paBb3JnYW5pegppbnUK4paBY29tcGxldGVkCuKWgWNhcnJ5CmF0b20K4paBZGVwZW5kaW5nCuKWgU91cgriloFpbnNwCuKWgSZcCmFpbHkKaXJlY3Rpb24K0YTQsAriloFkZWZlClRBQwriloFkZXNpZ25lZAriloF2b2lyCmJyZWFrCuKWgXBhcnRpZQriloFKYWhyZW4K4paBc3R1ZGlvCuKWgWpvdXIK4paBTm90ZXMKZmlyZQpob3VzZQpzdWNjZXNzCuKWgUp1YW4KSlMK4paBQ3VzdG9tCuKWgWJlc2NoCuKWgXN0YXRlZApib290c3RyYXAKw7Z0dApvenrDoQriloFDT04KaGF2CuKWgXNsZWVwCmVkYQpob3QKw6FuZAriloFTeQriloF0ZW1wcwphbWFyCuKWgXNjYWwK4paBYXN0CuKWgW9wZW5pbmcKY2xpcHNlCuKWgXByb2dyYW1taW5nCuKWgWxldHRlcnMK4paBcHJvZmlsZQpuYWgK4paBYmV5b25kCuKWgUZ1cnRoZXIKZmFjZXMK4paBY2hhcnQK0LfQtNCwCmFpZ24K0L3RltC5CuKWgVJvbArQvtCy0LDQvdC+CnRlcmlvcgp3ZWQK4paBaGVyc2VsZgriloFuZwphbmd1YWdlcwp9PVwKeW5hbWljCuKWgWp1ZwriloFFeGFtcGxlCuKWgSjigKAK4paBcGxheWluZwriloF1c2FnZQriloFtYW5hZ2VkCuKWgU5hdHVyCtGC0LXRgNC4CuKWgUV0CmVyaWEK4paBZGF1Z2h0ZXIK0L3QuNC10LwKRnJhZ21lbnQK4paBaG9sCkZsCtC+0LPRgNCw0YTQuAriloFpaG4Kw7xoCmluc3RhbmNlCuKWgWNvbXVuCuKWgXRydXRoCuKWgdGB0LDQvNC+CuKWgWltcGxlbWVudGVkCuKWgWFueXdheQriloFDcm8K0YTQtQpHQwp1YnVudHUKdHlwZXMKw6pzCi5+XApmb2xkCuKWgWpvaW5lZAo/PwriloFtw6kK4paBd2lsZArQutC70Y4Kcm93c2VyCuKWgUhvbWUKc2tpZWoK4paBSk9JTgriloFqdWluCmhvZgriloFkYXRhc2V0CtC20LTRgwonKSkK4paBbWllanMKQVBJCuKWgWVkaXRlZApvb2xzCuKWgXNlZWluZwppamQK4paBcHJvY2VkdXJlCuKWgUJyYXMK4paBc2lnbmVkCuKWgWV4dGVybm9zCuKWgWRpc2FwcAriloFEaXJlY3QKY3ljCuKWgWNvbnN1bHQKw7ZyZApXaWRnZXQKY2lvdXMKc2VjdAriloHQlNC4CuKWgXdpbmQK4paBQXJjaGl2YWRvCmFtbArRgdGBCldoCmtiZAriloFBcm15CuKWgXN1ZmZlcgphcnRpZmFjdAriloFyZXNvbHZlCuKWgVNwb3J0CuKWgdGG0LUKaWRhcwriloF0YXgKaWRpCuKWgWFjdGlvbnMK0L/RgNCwCnB1w6lzCuKWgW5hagpGYWxzZQriloFjaGFuY2UK4paB0YLQsNC60L4Kw6RkCuKWgWRvbAriloFlbnYK4paBYmFzaWNhbGx5CuKWgUNvdW5jaWwKenRlCuKWgWRpc3BsYXllZApuaWwKY29tcGxldGUK4paBTGVtCmlhbmNlCuKWgdC+0YHQvdC+0LIK4paBZGVwZW5kCnBsb20KZW5zdXMKdXRzCuKWgUhvdApiaXRyCuKWgXZhbGlkYXRpb24KYWJiCuKWgdGC0YDQtQprbQp6ZArDtmZmCldFCuKWgWludGVyZXN0ZWQK4paBeyIKYXJvCuKWgWNvcnJlbAriloFkZWRpYwriloFsaXN0cwriloFCaWJsaW9ncmFmaWEK4paBZWFybGllcgpwcm9ncmFtCuKWgXByZW1pw6hyZQpmcm9udApUYWIK0YHRgtCy0YMKZHJvcAriloFmZWFyCuKWgUVubGFjZXMK4paBQ2FwdAriloFyZWFsaXoK4paBaGFsCuKWgWluc3RhbmNlcwriloFzdXNwCmlsbGluZwolOwp7fQp8fAriloFwYXJ0aXRpb24K4paBQnVpbGQK4paBd28K4paB0J/QtdGACuKWgWRpcmVjdG9yCuKWgVNpbgrRgtC40Y8KcnNnCm91dmVyCuKWgW5lYXJseQpvZGEK0LrRgtC40LIK4paBc2lyCklNRQriloFqYW52aWVyCuKWgVdpbgpCdWlsZAppZXVycwpJTkUKZG91YmxlCkxhc3QK4paBcG9saWN5CnN0b3JlCuKWgW9ic2VydmVkCuKWgWZhbWlsaWUKbmljYQpyZXkK0LfRjAriloFZZWFyCuKWgWRldmVsb3BlZAriloFJbnN0aXR1dGUK4paBcmVwbHkKQ29tcGxlCmljaWFuCuKWgUd1ZXIK4paBZGFsbAriloFkZXNwCuKWgUZvb3RiYWxsCkVtcHR5CmNrZW4KdW5kYQriloFVcgriloFpZwriloFBdGwKYXV0aG9yCuKWgUJvbAp6aWcKbmF0CsWhdApzZWN1cml0eQpvbmljCuKWgXBlcwppdGFuCuKWgUV4dGVybgpqYW4KVkFMCuKWgdC40LwKYm9sZAriloHQstCwCuKWgdCc0L4K4paBZGlzcHV0CuKWgXRyaWNrCuKWgXBlZAopXnsKaW50bwpTaW0K4paBcGFyYWxsZWwKZm94Cm5vcm1hbAppbmVudArQv9C10LTQuApob2xkCk9LCuKWgWNoZW0K4paBdHdpY2UK4paBdXNlcm5hbWUKacSNCuKWgXJlcHJlc2VudGF0aW9uCuKWgWpvdXJuYWwK4paBOi0K4paBYmF0dApcJQriloFjZXJ0YWlubHkK4paBRXhjZXB0aW9uCmVwcwpzaG90CmF0ZWd5ClNob3cK4paBQ2FybApyaWcK4paBcmVwb3J0ZWQKYm90dG9tClRGCuKWgUZyYW5jaXNjbwpuYXAK4paBQ2hhbXBpb25zaGlwCuKWgWNvdXJ0CuKWgXNvdXJjZXMKaW91cgriloFjb25zZXJ2CmRpY3QK4paB0KDRgwpJQgriloFWZQriloHihJYK4paBRVIKIikpOwriloFQb2ludAphemluZQriloFpbnRlcm5ldArQtNC90LAK4paBY2FycmllZAriloFGaWVsZApheGlzCuKWgVN1bgriloFhdmUK0L/QuNGBCtGP0L0KYXN5CuKWgWp1bGlvCuKWgWRlcHVpcwriloFzdWdnZXN0aW9uCltbCuKWgUFyY2hpdmUKxJlwCuKWgVByYQpyZWgK4paBZGVtb25zdHIK0YTRlgpjbWQK4paBd2FzbgriloFwaG9uZQp1cGxvYWQKYXlhCtGC0L7RgNCwCmxpbmVzCuKWgWluZHUK4paBdm90CuKWgWVzcGEK4paBYmluCuKWgdC/0L7RgdC70LUKcGxhbgriloFqdW5pbwpvcmlhbApmcmVlCnN0ZXJyZWljaAriloHQtNGDCuKWgWxpbmtlZAriloFlbmFibGUKUEMK4paBZGVuc2l0eQriloFFZ3kKeW8KZW5kcmUK4paB0YHRigriloFpdGFsaWFubwriloFBUgriloFQZXJzCmbDqXLDqXMK4paB0YHQutC70LAKVmFyCuKWgU9uY2UKUmVkCmJ1ZmZlcgriloFFbnRlcgriloHFoAppbWllbnRvClN0b3JlCuKWgWhlYWx0aAp2YXQKSVNUCk9oCuKWgWt3CuKWgXJpdgriloFzb21ld2hlcmUKb2dyYWZpZQpwcml2YXRlCtC60YLQuAriloFkZWxheQriloFIdHRwCmpvYgpyYWVsCmVtcG9yCuKWgWRpY2llbWJyZQrDqnRlCtGG0YMK4paBY29tbWl0Cm9zbwpWYWx1ZXMK4paBaGVhZGVycwp0cmFuc2Zvcm0K4paBcHJvY2Vzc2luZwpyw6UK4paBQWgK4paBTm9kZQotLS0tLS0tLS0tLS0K4paBZmFpcmUK4paBaHVuClBsYXllcgriloFyZXZpZXcK0LPQtNCwCuKWgWxpbWl0ZWQK4paBUHJvcGVydHkK4paBc2VydmUKcmlhZ2UK4paBTWFzdGVyCuKWgWthbm4KY3JldGUKcGhlcmUK0ZHRgAriloFjaGllZgriloFzY2VuZQpraW4K4paBdW5pZm9ybQriloFmZWJyZXJvCiJ9CmlsbG8KSVRFCm91dmVsCnVzZXBhY2thZ2UKZW50aAriloFxdWlja2x5CkxhbWJkYQp4ZXMK4paBY2VsbHMKcm9nCmFtaW4K4paB0JzQsNGACuKWgW1heW9yCnBsYXllcgorKzsK4paB0J3QsNGB0LUK4paBc2FmZQriloF2ZWxvYwriloHQvtCx0YDQsApEYXRhYmFzZQpuZWgKVmVydAriloFmbGUK4paB0YTQvtGACuKWgWZvcmVpZ24KQWJzdHJhY3QK4paBbWFnbgriloFtb2RpZmllZAriloFtaWxpdGFyeQriloFtb25kZQriloFBY3Rpb24K4paBYmFuawpTZXJpYWwK4paBY29udGludW91cwriloFnZWwK4paBcGh5c2ljYWwK4paBaW50cm9kdWNlZAp1dHVyZQpyaWNrCuKWgXByZXNlbnRlZAriloFQcm92CuKWgUJvdGgKUG9zCnN1cGVyCiYjCuKWgWZpbmRpbmcKbmVsCnVuZGUK4paBZnLDpW4Kc2tpbQriloFIaWxsCmZuCuKWgUNhbmFkCuKWgWludGVuZGVkCm96esOhZsOpcsOpcwriloFqdWlsbGV0CuKWgVdhcnMK4paBc3VjY2Vzc2Z1bAriloFjaGFyZwppZWxlCm9tZXRoaW5nCm9rdQpmZXRjaAriloF9fQpiYW5rCm9wZXJhdG9ybmFtZQriloFDb2xvcgriloFDYXJkCnR1CuKWgSIsCndpZAriloFnZXAKWE1MCj09PT09PT09PT09PT09PT0K4paBVmlyZ2luCsOkaHJlbmQKbGljYXRlZApEaXIKemVybwriloFLYWwK4paBUGFydHkK4paBw6UKcHJpY2UKZG9uCuKWgXdhcm5pbmcK4paBQmFkCuKWgVN1cHAK4paBTGlnYQriloFQaWVycmUKUmVjb3JkCnVsYXRvcgriloFSb21lCuKWgXRoZW9yZW0K4paBZW50aXJlbHkK0YHQutC40LwKaGV0CuKWgWRvcG8KTmV4dAptbHVuZwp3aWcK4paBQXRoCuKWgVNvdQpsaWNoZXIK4paBc3Vkbwplc3RzCtGF0ZbQsgriloFzZXB0aWVtYnJlCuKWgW1pY3JvCuKWgXRyb3AKZml0CkNvcmUK4paBUmFkaW8K4paBT3JnYW4K4paBUG93ZXIKQ0YK4paBTGFzdAriloFvcHBvcwriloFvZmZzZXQK4paBcmVnaWEK4paBbWluaW11bQriloFoZWxwZWQKYW5kb24KaWZ5aW5nCnJ1aXQKZW5zY2hhcHAK4paBYmVyZQpWTQriloFBd2FyZHMK4paBYWdyCnlub21pYWwKZW5jZWQK4paBZGV2aWNlcwriloFib3QK4paBZmlybQriloF3cml0ZXIK4paBcmluZwouLQppc3Rlcwpsw6QK4paBbWVsCmVudGF0aW9uCuKWgVNjaHcK4paBbm9tZQriloFwb2JsYQriloF3b2oK4paBdWwKZW50bwrRi9GFCuKWgXJlc2lzdAriloFyZW1haW5zCuKWgUNhCmHDsWEK4paBQ291cnQKdXRhYmxlCmVudGlhbGx5CuKWgXRyYXQK4paBVmlzdWFsCuKWgXJlc3RyaWN0CuKWgXByZXZpb3VzbHkKY2F0aW9uCuKWgdC+0YHQvgriloFNeVNRTApmw7ZyCmNhbGEK4paBY3VsdHVyZQpsaXZlCuKWgWFjY2VwdGVkCkRpZAriloFob3VzCuKWgXNlbGVjdGlvbgriloFkZWNyZQptYXJnaW4KdXJiCuKWgUluYwriloFNYW55CmlidAriloFzdWNjZWVkCkJpbmRpbmcKY8OtCuKWgVJvZwriloFzaG91bGRuCmNsb3VkCuKWgWR6CtCy0LDQsgriloFwaXgKc21hbGwK4paBcHJvamVjdHMK4paBT0sK4paBbGF0ZXN0CuKWgXJlZmVyZW5jZXMKUHJvZ3JhbQriloFlcnN0CuKWgdGP0LoK4paBa2FtCuKWgUNhbWIKZWxsdArDtmQKbm9uZQriloFqdXNxdQpraW5nCuKWgVBlZAphc3NlcnQKQ1MKcml0bwplc3NhCtC70YzQutC+CuKWgVZvbgriloFFZHdhcmQK4paBaW1wb3NzaWJsZQpucAp3b3JkcwppZWx0CuKWgVBhZ2UKbGVycwriloFwaWVyCuKWgdC+0LHQu9Cw0YHRgtC4Cml0dGVlCuKWgShbCuKWgXRydXN0Ck5HCnJlZHUKPDwKcmlhbAriloFwcm9kdWN0cwriloFFcm4KcmnDqHJlCtCz0L7QsgriloFSZWljaAriloFSb2FkCuKWgW5lc3RlZApEaXNwbGF5CuKWgXN0cmVuZ3RoCm9ncmFmw61hCuKWgWFubm91bmNlZAriloFTY2llbmNlCuKWgdGA0LDQudC+ClBhcmFtZXRlcgriloFUYXNrCnVtZW50cwriloFhZG9wdAriloFPbmx5CtGO0YLRjAriloFjbGkK4paBbGVtCnN0b29kCuKWgUZJCsOqbmNpYXMKcG9uZW50cwpdJApjb21tZW50CuKWgXlhCnNob3VsZAppa2UKdGltCmVsbGlnCuKWgXNlbmRpbmcK4paBYWpheAriloFub3ZpZW1icmUKdW1lcwriloF3ZWl0ZXIK4paBRGFucwpvcHAK4paBc2VwdGVtYnJlCm90aW1lcwp6xZEK4paBZXAKdmVyZQriloFvaAo6PQriloFTb25nCuKAnSwK4paBdml2CuKWgXF1ZXJpZXMK4paBdsOhCuKWgWTDqWNlbWJyZQriloF1bmFibGUK4paBZXJoCuKWgWAtCuKWgUxlZQriloFlcnN0ZW4Kw7R0CtGB0YLQstC1ClRTCuKWgWZyYWdtZW50CuKWgXdpZGUK4paBc3VmZgriloFkdXQK4paBVmVyZQrRltGBCmFkaW5nCmllZ28KaWNhZ28K4paBQXJnZW50Cm9yZXIKZW5uZXMK4paBTGViCmxpbnV4CmFjaW5nCuKWgWJyb2tlbgp0cArDrW8KYWJldGgKaXN0YXMKZ2V3CmnDqG1lCmNhcwriloFwcmVjZWQK4paBRGFsCuKWgWNvbXBhcmVkCmVxdWl2CmlsbHkKdGVlbgriloFDb25zb2xlCuKWgXN0cmljdAppdGFpcmUK4paBRUQKZW50aWFscwriloFwZXJtYW4K4paBdG91cwriloFnZW1lCuKWgWV4dHJlbQriloHQvtC60YDRgwprZwriloFoZWF2eQriloFhdnJpbAriloFhbnRpCuKWgW9jdG9icmUKdXRmCmhlbG0KYW1wbGVzCuKWgShfCmFrZW4K4paBZGVhcgriloFvcGluaW9uCuKWgWZpc2gK4paBQWxleGFuZGVyCml3CtC40LwKY2FkZW0K4paBcmVmbGVjdAriloHQtNGACuKWgXRyaWIKY29tbW9uCuKWgWNsZWFybHkK4paBc2FmCj0iQCsK4paB0JzQvtGBCtGB0LjRgtC1CmVxbmFycmF5Cm51bmcK4paBcmVsYXRpb25zaGlwCuKWgVNlbQriloFraWxsZWQKdGVkCnVubwriloHQu9GWCuKWgXdpZAphbm5pbmcK4paBcGFuZWwK4paBTGViZW4K4paBcnVieQphbnNpb24K4paBYXJlbgp0YWJ1bGFyCmFsZXQKfSQkCuKWgUxha2UK4paBc3VpdGUK4paBbWlub3IKSG96esOhZsOpcsOpcwriloF4bWxucwpESVIKZHJpdmVyCmludHMK4paBdmljCkFORApwcmltCtGB0YvQu9C60LgK4paBT3gKVEMKcml2aWFsCmF0aWUK4paBZWlnaHQK4paBY29uZmxpYwphbmdlbAriloFCZWdyCuKWgWV4cGxpY2l0bHkK0Y7RgtGB0Y8K4paBRGV2CnJlbmRlcgriloFyZXByb2R1CuKWgWNyw6kKR3UKTUIK4paBa8O2bgriloFyZW1haW5lZAriloFrbArRhdC+0LIK4paBYnlsClBoaQriloFkZXRhaWwKamF2CuKWgW1vdXNlCkJhcwppxJkKYXNzZXIKaHMK4paBc2hpZnQK4paBw7psdApyYW5kCuKWgWJ0bgpyYXoK4paBcHVsCuKWgXN0YXRlbWVudHMKZmlsZW5hbWUK4paBcHJvbXB0CsOpbMOpCmlregriloFTdXMK4paBZGVidXQKU3RhdApmb3JtcwriloFIZWluCnN0YWR0CmVubmlzCtC/0L7QuwphcmFudGUK0YbRltC5CuKWgXF1ZXVlCuKWgXJlY2kK4paBc3RhCnluY2hyb24KY2VudGVyaW5nClNvbWUKR3JhcGgK4paBdGVzdGVkCuKWgUt1bnN0CtC+0LwK4paBTm90aGluZwppZXUK4oCcLgpCdW5kbGUK4paBb2ZpY2lhbAphbGxvdwriloFSZWFjdAriloFMaWJyYXJ5CmJsdWUK4paBdmVydwriloFwYXJlCuKWgUZyaWVkcmljaAriloFhd2FyZQpFeHAK4paBZWZmZWN0cwriloHQs9C+0YDQvgpsb3BlZGlhCuKWgVZlbgpyYWxlCuKWgUZpbmFsCuKWgXByb3BvcwpsYWNlbWVudAprdGVuCuKWgW5vdmVsCm9ydGVyCuKWgUdlcm1hbnkK4paBZGphbmdvCuKWgXRyYW5zaXRpb24K4paBaGFwcGVuZWQK4paBYmVhdXRpZnVsCuKWgW5laXRoZXIK4paBbGlicmFyaWVzCuKWgWhpZGUKYWxnCuKWgWFzcGVjdAriloFmb3JnZXQKY2FkZW15Cm9udGUKcmVmaXgK4paBY2xvdWQKbmVkCmNkb3RzCnJlZ2lzdGVyCm55bQouKToK4paBSmV3CuKWgXRyw6hzCtC90LjRh9C1CuKWgURvcgriloFwcm9jCuKWgWdhbgriloHRlAriloFTYXYKdsOtClNldHRpbmdzCuKWgVZhcmkK4paBY291cnMKUm8K4paBY29uagriloFyZWFzb25zCuKWgXJlYWRlcgrQu9C10LrRgdCw0L3QtAppY2F0ZQp9KSwK4paBdGFza3MK4paBUmF5CuKWgXJpYwpLZQpvbmllCnJmCilbCuKWgXN1YnNlcXUK4paBVHVybgriloFWSUFGCm1hdGhzZgpIRQriloFkZWNsYXJlCuKWgXByb3RvY29sCuKWgVBDCtGG0LjQvtC9ClZpZXdCeUlkCuKWgWFuaW1hdGlvbgriloFjb25mdXNlZArQstC40YcK4paBZW5hYmxlZApvd28Kw6FzdArDtnQK4paBbWFuZAriloFSYWlsCmZpZWxkcwriloFLYXAK4paBYWxnZWJyYQriloHQodGDCmbDqXJlbmNlCuKWgUN1cnJlbnQK0YHQvdC+CuKWgUxpbQpQYXJhbXMK4paBQW50b25pbwriloF0dgpsYXRlCmlmZXIKRW50cnkK4paBU2VydgriloFtdXNpY2FsCuKWgXRyYWNlCuKWgXNjaWVudApmaWMK4paBZm9yZ290CnZpZGVvCuKWgW9sZGVyClRyZWUK4paBdW5zCtC90LjQutC4CuKWgUV1cm9wYQriloFad2UK4paB0LHQtQriloF2ZWMK0LbRgwriloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloEKTWF0Y2gKc3BhbgriloFibGFuawriloFzcMOkdGVyCuKWgVR5CuKWgWRpY3QKw7FhCuKWgWNvbmZpcm0K4paBdsO9CtC30LDQvQpSZWwKZmlsbQriloFSb3QK4paBSHkK0LrQsNGFCuKWgWRlbWFuZAriloFtaW5pc3QK4paBTWFkcmlkCuKWgXVzdWFsCnNwaWVsCmVyb3MK4paBdHV0b3JpYWwK4paB0KHRgdGL0LvQutC4CnN5cwrRhtC40LDQu9GMCuKWgXNwcmVhZAriloFjb252ZXJzCuKWgXJvbGwKYXJ0aWZhY3RJZAriloFOdW1iZXIK4paBc3ltbWV0CuKWgU11bHQKZXhwZWN0ZWQK4paBYXhpcwriloFtYXRjaGluZwriloFmb29kCmdyb3VwSWQKTWFwcAriloHRgdCy0Y8K4paBdmVuZApGb3VuZApvdHRvCkNhdApjcml0CmlzdGVudAriloFkcmVpCuKWgWVuZGVkCuKWgVRlbGUKY29tcG9uZW50CuKWgWludm9sdmVkCuKWgUVzdGFkb3MK4paBZGFuZ2VyCuKWgWNoYWluCuKWgVByb20KaG9tCuKWgXBvbMOtdApjb3AK4paBbmFwCnJpZgpwbGVtZW50cwriloF2ZW50CmFubmEKYW50ZWQKZGF0ZWQKYW50aAriloF0aHJlYWRzCtC30L7QstCwCuKWgdGB0YLQsNC90L7QsgriloFlZXJzdApidWYKaGVpZAriloFSdQriloFQcmltCuKWgW1pZ3IK4paBVW5pZG9zCuKWgWFyYml0cgriloFyb21hbgpvdW50cnkKdWx0dXIK4paBS8O2bmlnCuKWgWFubm90CmFjaGluZwriloFIYXVwdAp1bWluCuKWgWhlbQpja2V0cwpiYXUKZWN0aW9uCmVmdAriloFwYWNrYWdlcwriloFLdXIKdGh1cgriloFwYXlzCmxpYW1lbnQK4paB0JHRgwriloFjYWRhCnBvaW50cwpvY2tldAriloF2ZXJiCtC70LXQtQriloFzdWJtaXQK4paBc2FuCnJ1YnkK4paBZWFzdAprb3YK4paBVmVybGFnCuKWgXNwb3QKcHBvCkVhY2gKamVrdAriloFCaW9ncmFwaGllCuKWgW5ld3MK4paBcGHDrXMKdWZhY3QK4paBZGlhCtC60L7QstCwCuKWgWFjY29tcGwK4paBw4l0CmlsaXRpZXMK4paBaWhtCmludm9rZQriloFhcHBlbmQKLiksCuKWgWxhYgphbmdpbmcKaXN0YW4KcmVzb2wK4paBU2VjdGlvbgpQYXJlbnQKbW96Ck1hdApzdHlsZXMKdW5kZW4K4oCcLAppcnRzY2hhZnQK0LrQuNC8CuKWgUZpbmFsbHkKcGhlbgriloFQYWMK4paBQXJyYXlMaXN0CuKWgXJlY292ZXIK4paBZWR1Y2F0aW9uCm1vZGVscwpwZWQK4paBaGFwcHkK0YfRgwriloFndWVycmEKbWVkaWEKT0YK4paBZW5zdXJlCk1hcmsKZGF0YWJhc2UKb2dnbGUK4paBcHVibGlzaApPVwriloFCYXUKPy4K4paB0YfQsNGB0YLQuAriloFyZXBvc2l0b3J5CuKWgU1hdHQKaGlnaApvdmVuCuKWgWdlcgriloF1bmtub3duCkFtZXIK4paBQnJvd24KQUxMCuKWgXJlc3VsdGluZwriloFib3IK4paBcG9ldArQvdC40LzQuApFbWFpbApGb250CuKWgWhpc3QK4paBdG9kYXkK4paBQmVyZwriloFidXR0b25zCtGC0LDQuwriloFzbmkK4paB0YfQtdC70L7QsgpDcmUK4paBdW5pb24K4paBemljaAppc2hvcAriloFxdWFuZG8KUG8KQ1RJT04K4paBQ29zdArRgdGD0LTQsNGACmVydmVkCk5vdGUKRXF1YWwK0LvQuNGPCtCx0YPRgAriloFhYnN0cmFjdApzdG9wCuKWgWFkdmljZQriloFpY29uCuKWgXRyYXZlbApCUwp2ZW5zCuKWgWJhdGNoCmxpcXVlCnNoZWV0CuKWgWlocmUKZW1vbgpiZXJ0bwriloFhc3NpZ25lZArRjNGOClBob25lCuKWgWF3YXJkCuKWgWZ1bmN0aW9uYWxpdHkKYWxsYQriloFEYW0K4paBY2l1ZGFkCuKWgWNsdXN0ZXIKRGVzY3JpcHRpb24K4paBc2hlZXQK4paBQXVzdHJhbGlhbgriloHCuy4K4paBIjwK4paBd29uZGVyaW5nCmFpbmUK4paBcmVwcmVzZW50ZWQKa2FwcGEKbmIK4paBc3kK4paBS8O2Cj0iIwriloFzZXZlbgpEaXJlY3RvcnkK4paBc2lzdGVyCnBsYXRlcwriloFsdWNrCuKWgXJlbWFpbmluZwriloFWaWxsCndlcmsKYW5uaQpldHRpCmZ1bmMK4paBYmFuCmltcwptaXNzCmFncmFwaArQtdC60YHQuAriloFSZWYKbml0dAriloFHYWIK4paBYW5kZXJlCuKWgWplZG9jaApyZXN1bHRzCiFcCuKWgWxpc3RlZAriloFsb3JvCuKWgWtub3dzCtC20L3QvgpSYWQK4paBc29ja2V0Cm11bHRpCuKWgdGA0ZYKcmFpbHMK4paBdGFyCuKWgWdlbnRsZQpzZXR0CnNlcnZpY2VzCmJvdW5kCmlna2VpdAphamEK4paBY21kCmFnZ2VyCuKWgWJhCuKWgUJlbGcK4paBS2xlCuKWgXdvcmR0CuKWgWZvc3QK4paBZGltZW5zaW9uCkFuZwp1bWluZwpPYmoK0L3QtdC9CuKWgU1hcmllCmV4aXN0cwrRgtGA0L4K4paB0LHQvtC70YwKZW1lbnRlCuKWgUpvbgpTRVJUCuKWgWhpZ2hlc3QKYWtpCuKWgXRyZXMK4paBY2lyY3VtCuKWgURvd24Kb21tZW4KdXJlcgriloFjYXVzZXMKdmVudWUKaXNzYW5jZQriloFpbmZsdWVuY2UK4paBZmF0CtGA0LXQtNC4Cn1cXAriloFlbnRyCuKWgVNpZ24K4paB0LrQu9CwCuKWgWJpbmRpbmcKZXNzZW4K4paB0KTRgNCw0L0K4paBTG9jYWwK4paB0Y/QstC70Y8KYXBwcm8K4paBZGVwZW5kZW5jaWVzCuKWgXRhbGtpbmcK4paBenVyw7xjawpjb25uZWN0aW9uCkFjdGl2ZQpiYmUKaXJscwriloFJbmYKd2QK4paB0LjRgQpyb2FkCuKWgWNvbnZlbgrEm3QK0LLQtdC3CuKWgWVudHJpZXMKZXNjCuKWgWJpdHMKYXNzbwpXUgpzaGlwcwriloFkw6lzCmVzcApNYWtlCuKWgWZhbWlsaWFyCkFydAriloFhcm15CmN0cgrDqXJpYwpxdWV1ZQriloFcewp1ZWxhCmFtaWVudG8K0YjQuNGFCuKWgSIiIgpjb250cgrQu9C70LUKRlMK4paBbWFya2V0CsOlbmcKY2l0ZXAKSWxsCnJhbmsK4paBc2VuZGVyCuKWgWJlaW0K0YDQsNC6CuKWgWNvbXBhdAriloFvY2N1cnMK4paBZGllc2UK0YHRgtC40YLRgwphd2EK4paBaU9TCuKWgUNoaW5lc2UK4paBVFIK4paBS2VuCuKWgVVuZQriloFjcmVhdGVzCuKWgXNob3dlZAriloHDqXYKb2xvZ2lhCuKWgXByb3Rlc3QK4paBUGYK4paBc3F1YWQKKyssCsOhdgriloFlc3NlcmUK0LfRjwprb2wK4paBc2xpZ2h0bHkKYWRkcgrDom4K4paBcmVkdWNlCuKWgVwoXAriloFEZXAK4paBZ2VuZXJpYwpMb2FkZXIKyJtpCuKWgdC/0L7RgQriloFvY2Nhc2lvbgriloFMYWR5CmVudGl0eQriloFhdmFudAriloFQYXMKYWdnaW8KXHsK0L/QsNC0CmF0aG9saWMKUGFzc3dvcmQK4paBcmVzcG9uZAriloFOb24KQUcKbmVnCuKWgdGD0YEKYmxvYgpja2UK4paBQ29uc2lkZXIK4paBQ2FyZQppa2kK4paBQ2hpY2FnbwppbmRlbgriloFDb3AKXSsKw7ZtCsOpdnJpZXIK0LrQu9C+CmFsZW4K4paBbWFqCnJhY3kKb3J0ZQppZW50cwplbGxzCmFjdGl2aXR5CuKWgXJ1bnRpbWUKTlVMTAriloFwb3NzaWJseQriloFzdHJpCml6aQriloFtaXIK4paBVmVyc2lvbgpwcmltZQriloF0d2VudHkK4paBTWFoCuKWgXNvdW5kcwrRiNC10L0KY2x1c2lvbgphY3oK4paBZGV0ZXJtaW5lZAriloFSZXAK4paBTGFuZGVzCuKWgXdhbGwKaWdpCuKWgXJlc2V0CtGI0L4KeWFuCk1ldAplaQriloFhcHBlYXJhbmNlCuKWgWZvaXMK4paBbmVsbAplc2kK0ZHRggpsb29yCuKWgVVsCuKWgXJlc29sdXRpb24K4paBZm90CuKWgXRocm91Z2hvdXQK4paBcmkKTGV2ZWwKcG9vbAriloFpZGVudGl0eQriloFqYW51CuKWgWltcGVyCuKWgcO2dmVyCn1gCuKWgWluZmVyCuKWgWRhdGVzCuKWgVN0YW5kYXJkCmZvcmNlCm9ja2V5CnRlcmEK4paBZGlzdGluZ3UK4paBcHJlc2VuY2UKbGljYQriloFsZWF2aW5nCml0dW5nCsOpYgriloFlc3RhYmxpc2gK4paBbWFhcgphZGkK4paBTmV3cwphem9uCmZvbGcK4paBSGVuY2UK4paBWWUK4paBZmFiCuKWgWbDvGhyCml0bWFwCuKWgVZlcnMKcm92ClNpZ24KZGV2aWNlClNpZ21hCuKWgXdldGVuc2NoYXBwCuKWgVBzClBBVEgK4paBdG9ybgp2ZXN0CtGB0YLQvtCyCmFjY291bnQK4paBbGFyZ2VzdAriloFwZXJjZW50CuKWgVdvbWVuCuKWgWltZwp0b29sCuKWgXJvY2UK4paBYXkKaW5ldAriloFhb8O7dAriloFwb2x5bm9taWFsCuKWgWludGVncmFsCuKWgWFyZWFzCn0nCuKWgWh5cApsb3llZQrRgtCw0LvRjAriloFwcm94eQriloFXeQriloHQnNC10LrRgdC4CuKWgWVzY2FwZQpvbGFyCuKWgW1pc3Rha2UKKX17CuKWgVBvdAriloFwcm9jZXNzZXMKIj4NCmhhbHRlbgp6emEKYW1vCtC60YDQtQriloFXb29kCsO4cgriloHRgdC10YAKb2NpYQp0d28KcHJvZmlsZQriloFBc3QKZW1icm8K4paBYXJtcwppbmFzCmlubmVuCuKWgW1zZwpJTlQK4paBYmF0dGVyCmlnbm1lbnQK4paBdnkKSHJzZwriloFHcnVuZApyb2MKc2VnCuKWgWRlY29yCuKWgWV2ZW50dWFsbHkKPiwK4paBcGFnCmFudGVuCuKWgXN0cnVnZwp9XlwKZGF0ZW4K4paBcmVsYQrQv9C+0LIK4paB0LrQvtGA0L4K4paBQm9zCuKWgWxhYm9yCuKWgVNlY3JldAp1Z2VuCuKWgWphcAriloFodXNiYW5kCuKWgUFsYnVtCuKWgWV0d2EK4paB0L/RgNC+0LjQtwpyaWNodApyYWNoCmJhdAriloFwcmVwYXIK4paBU3RvY2sK4paBbGFjawrRhdGW0LQK4paBaG9neQriloFDaHJvbWUK4paBQWRtaW4K4paBY29tcGFyaXNvbgriloFpbmNyZWFzaW5nCtC90LMKaW1pCkRiCuKWgWdlZgp1Y2h0CsOpc2UKZ2VuY2UK4paBQ29yZQriloFpbmNvcnJlY3QK4paBYXNzdW1pbmcKb3Vyc2UKaWVyb24K4paBVGhlb3JlbQriloFjYXNhCmplcwriloHQtNC10YDQtQriloFgIgpMRArDpMOfCkRlYgriloFzdWl2CuKWgUJhbmsKbGlicwriloFMZW9uCuKWgXF1YXJ0CuKWgXByb2Zlc3Npb25hbAriloF0aWVuZQriloFhY2NvbXAK0YHRgtC10YAK4paBVUsKTk4K4paBbMOtCtGG0Y8Ka2VsCuKWgeKAogriloFkaXNlCm9udG8K4paBbcOhCmlmcwpiaWxkCuKWgWNvbXB1dGUK4paBw6lkCmrEmQriloFNw6kK4paBbGFuZ3VhZ2VzCuKWgVRpbWVzCmNlbgriloHQsNCy0YLQvgrDvW0KZW5legriloF1cHAK4paBbcOpZAriloFjdWFuZG8K0L7QtApJbnRlbnQKZWVyZAriloFUYWwKb2Zmc2V0CuKWgWhhYmVuCnJlbWUK4paBU3RhY2sK4paBZHJpCuKWgXNlaW5lbQriloFmw6l2cmllcgriloFjb21iaW5hdGlvbgriloFzb2xsCuKWgW1vdmVtZW50ClNwZWMK0LrRgNGLCnJldGNoCk9mZnNldApSb290CtCQ0YAKd2FydAriloFGb2xsb3cK4paBU29jaWFsCtC90LjQutC+0LIK4paB4oaSCkRvbgriloFoYXJtCmFncgpuZWdvCnJlc291cmNlCuKWgUx1YwriloFzZWluZW4K4paBRGVwYXJ0bWVudAriloFVcGRhdGUK4paBVGV4YXMK4paBcmV2ZQriloFQb3MK4paBc2hvdApvdGhlCuKWgXJlcGVhdGVkCuKWgXJlY2VudGx5CsOhYmFuCmFrcwrQv9Cw0L0K4paBY2hhCm9obAriloF0ZW5kCuKWgdC00LLQvgpjaHRzCsOnYWlzZQpwbGluZwphbGJ1bQplagriloFgWwptYXBzCuKWgXVuaXRzCuKWgTwhLS0K4paB0LPQtQriloFJbmZvcm1hdGlvbgppa29uCuKWgXRhbgriloFkb2NrZXIK4paBU3RhZAriloFhdWRpbwppa28K4paBY29vcmRpbmF0ZXMKeHMK4paBcmVwbGllZAriloEpLAriloFHb3Zlcm5tZW50CuKWgUFjYWRlbXkKVU5UCuKWgdGC0YDQuApCbAriloFhbmMK0YjRgwriloHRgtCw0LrQvtC2CuKWgWluZmluaXRlClJDCuKWgWdhCuKWgWFkanVzdAriloFtZXJnZQo7YAriloFwb3N0ZXIK4paBSmFwYW5lc2UKIl07CuKWgWV4aGliCuKWgW9yZGVyZWQKaWN0dXJlcwrRgNC+0YEK4paBc8OpcmllCmxldHMK4paBaXAKU2VsZWN0b3IK4paBZXhpc3RlbmNlClJlY2UKbGlnYQpkb3dubG9hZAriloFsZW1tYQppZXYKdWRlbnQKc2tvCuKWgUFyYWIKaXRhdGUKYnl0ZQrQvtGCCmlrdArQvdCw0YLQsAriloFBZgooQAriloFtYWQKb2RiCuKWgWVsaW1pbgriloFzcGVudApFbnRlcgriloFNaXRnCldoZW4K4paBZMOpcGFydApNSQriloFmZWxsb3cK4paBdGhvdXNhbmQK4paBQ3UKa3RvcgpDYWNoZQriloF0YW1iw6ltCuKWgWV4dGVuZGVkCtCy0LXRgdGCCmF0ZXJzCuKWgUxpYwp0b3R5cGUK4paBR2EK4paBYmxvb2QK4paBbWFwcGluZwriloFub21pbgriloFtYW5pZmVzdAriloFwZW5zCuKWgXJpdAriloFmaWxlbmFtZQriloFmaWxsZWQKdsOkCuKWgXJhaXNlZAriloFtb2JpbGUKa8OpCuKWgVJpZ2h0CuKWgWdlaMO2cgriloF0ZW1wZXJhdHVyZQriloFzb21laG93CuKWgVNwYW5pc2gK4paBa29tbXVuCuKWgWNob3NlbgriloFob3JzZQo7XAriloFvcmlnaW5hbGx5Ckhhc2gK4paBY2l0dAriloFlbmNvcmUK4paBV29sZgriloFuw7oK4paBWW91bmcKVmFyaQriloFTY2h3ZQriloFjYXB0dXJlCuKWgUphbmUKSW50ZXJmYWNlCm93eWNoCuKWgURldXRzY2hsYW5kCuKWgUtvbAriloFib3VuZGFyeQriloFHTkQKTm93CmtlaHIKKCoKPS0K4paBV2VsCuKWgUNhdAphbW1lbnQKQUdFCuKWgXJpZ2h0cwpTY3JvbGwK4paBaGFwcGVuaW5nCuKWgUJsYQriloFzY2llbmNlCmF3cwriloFiZWhhdmlvdXIK4paBaW1wbGllcwriloFRdWVlbgpvdmFuCnBheQrRmtCwCmFyZXQKZXJzaGlwCuKWgUxhbmcK4paB0LPQvtC0CuKWgXJlY29yZGVkCnplbQriloFUaHJlYWQK4paBdG9kbwpvZ28K4paBc2NlbmFyaW8K4paBY29uY2VudArRgNC10LcKU3RvcmFnZQriloFkaXJpZwriloFTZXJpZXMK4paBZ2FzClNFVArDqGNlCnJhdGUKSFRUUAriloFrYXAKRW1wClVURgrDoW7DrQrRgdGC0LDQstC4CndpbmRvd3MKw6lyYXRpb24KYXBlZAriloFzaXN0ZW1hCuKWgXN1cnYK4paBV2VzdGVybgriloFnw6kK4paBU3VjaApXcml0ZXIK4paBY2FudmFzCuKWgWd1YXJhbnRlCnNjcm9sbAphdmVkCkl0YWwK4paBRWxlY3QKXSgjCuKWgUhlcm0K4paBQ29tbWFuZAriloFDaGlsZAriloFwZAp1dGNoClNxbAoqLgriloFUYWcK4paBVGEK4paBbWFpbApzY3JlZW4Kc2NyCnppYWwK4paBRsO8cgriloFzdWdnZXN0aW9ucwpjaGVzdGVyCil8CnBlcnNvbgp6ZWwK4paBd2FpdGluZwriloHRgdC70LUKRkwK4paBQWxiZXJ0CuKWgUhpagriloHRgtC10YAKZXdyaXRlCuKWgXNlbnRlbmNlCuKWgWxpbnV4CtC10LTQtQrDqm5jaWEK4paBSXRhbGlhbgrRh9C60LAKRmlsZXMK4paBbm90aWNlZApiaW5nCuKWgVJlc2VhcmNoCuKWgWFsdGVyCmhlZWwKXDxeCuKWgVByb2Nlc3MK4paBYmF0dGxlCtC80L7QsgriloFBZnJpY2EK4paBQW5uZQriloFnZWxkCn0lCuKWgWRvY3MKVHlwZXMK4paBcmV0cmlldmUK4paBT2ZmaWNpYWwK4paBdHJhYgrRhtGLCuKWgUlucHV0CnN0ZXAK4paBbGF1Z2gK4paB0KXQsAriloFwZWxhCk1lZGlhCnJvdWdoCtCz0LDQvdC4CuKWgVNob3VsZAriloFDb250ZW50CtC70LXQvApvc2gK4paBc29tZXdoYXQK4paBQ2VyCkJhY2tncm91bmQKc3RydQriloFpbmxpbmUK4paBTmVkZXIK4paBbW9kdWxlcwriloFCdWNoCsWEc2tpCndpZGV0CuKWgXpuCnBvc2VzCuKWgWdyYWR1CuKWgWFxdQpQUgriloFwdXR0aW5nCuKWgdC/0L7Qu9C4CuKWgXB1cmNoCuKWgXNtb290aArRgNC40LkKZW5naW5lCuKWgWxpdmVkCkFjY291bnQKRGV0YWlscwriloF0ZWxscwriloFPdXRwdXQKSGVyZQriloFGb3VuZGF0aW9uClRleHRWaWV3CuKWgWRlY2lzaW9uCuKWgWRlcGVuZGVuY3kKb2NhdGlvbgpvdmFsCmZlbGQK4paB0L/RgNC+0LIK4paBZW5kcwriloFpb3MK4paBZXhjZWwKYWd1CuKWgWVsZWcK4paBRWxlbWVudApRdWV1ZQriloFmw7YK0LLQtdGA0YHQuNGC0LUK4paBZXhwZXJpZW4K4paBZGlyZWN0ZWQK4paBY2FtYgriloHQlNC2CuKWgWZvbGcK4paBY29uY2UK4paBRmFiCuKWgVZpCuKWgWFkdmFudGFnZQriloFCZWkKcHJvZAriloFYSVgK4paBRmFjZQriloF2aXIK4paBUnVzc2lhbgriloFzcGFuCmVuw60K4paBem9uZQriloFhdHRhY2gK4paB0LHQtdC3CuKWgW1hbmFnZW1lbnQKQWMK4paB0L7QvwpvbmNlCmhhbHQKdXNvClNwZQriloFyYXcKw6lybwppZGVsCmxhdwpTaGVldAriloFtaXNzaW9uCuKWgWNhbWVyYQriloFob25vcgriloFhcHBvaW50ZWQK4paBUm9tYQpsaW5lYXIKUm93cwpmZXJlbmNlcwriloFJTwriloFjb3ZlcmVkCnJhagrRgdGC0LLQvtCy0LAK4paBU3ltCuKWgXRpZAppc2MK4paBUnVkCuKWgWVuY3VlbnQK4paBZmFpbHVyZQrDvHNzCuKWgXNxdQriloFwYWludAriloFzZXJpb3VzCuKWgWN1cnNvcgp0cmFzCuKWgWRpc2N1c3Npb24K4paBY3JpZWQKZXJpZQriloFEZXZlbG9wCuKWgXJld3JpdGUK4paBZ8OpbsOpcmFsCndhaXQK4paBSGFycnkKw61yCuKWgWdlcHVibGljCuKWgdC40LMK0ZbQsQrRj9GCCuKWgdCY0LcK4paBZXF1YXRpb25zCuKWgXBsYW5lCuKWgWFjcXUK4paBYW5nbGUK4paBdHJlZXMK4paB0JrQvtC9ClZECnBlcnQK4paBZG9jdW1lbnRzCmNiCuKWgWltcGxlbWVudHMK0YHRgtCw0L3QvtCyCuKWgVdhbHRlcgrQt9GL0LLQsAriloHRgdC/0LUK4paBY2hhcApwbGV4CuKWgW1hZ25ldAriloFnZXB1YmxpY2VlcmQK4paBaGlnaGx5CuKWgWxldXJzCuKWgWRyZXNzCuKWgXJlc3RhcnQKUmVuZGVyCkNhbGxiYWNrCmlzbwriloFjb25zdGl0dQriloFFbmRlClpFCuKWgUFuZ2VsZXMK4paBZGVyaXZlZAo9InsKXVwK4paBQ2hhbmdlCuKWgUhhdXMK4paBc3RhZAriloFSZXF1ZXN0Cm9tbwriloFBY3RpdmUKdXJlbgriloF0b3VybgriloFwYXJ0aWN1bGFybHkKU2VydmxldAphYmMKd2lkZXRpbGRlCmFuZHJhCkhlbHBlcgpSdWxlCuKWgXBsdXNpZXVycwriloF3YXZlCm5lcQriloHQotC1CmZyZQpza8OpCuKWgWFsYwriloFsb2dzCkdTCuKWgU1vbAriloFwZXJtaXNzaW9uCuKWgXNvdWwK4paBd2FudHMK4paBZ3VpZGUK4paBdmllbmUK4paBV2lsaGVsbQriloFldmlkZW5jZQoifSwKcm9wb2wK4paBYXV0aGVudGljYXRpb24K4paBb2NjdXJyZWQK4paBSUYKbm9jCklBCuKWgUJhbgriloHQutCw0YAK4paBYmxlCuKWgXNlZ21lbnQK4paBcGxheWVycwppc2kK4paBc3R1Y2sK4paBUHkKQW55CmhvdQriloFmb3JtYXR0CuKWgXBlYWNlCuKWgdCa0LDRgApldGVzCmRmcmFjCig/CuKWgVNpdGUK4paBTGl2ZQriloFVcwriloFjbGltCuKWgUFsaQrRgNC10LkK4paBUHJpbmNlCuKWgW9ibGlnCmllYgriloFBbHQK4paBcHJvcwpyYWNsZQriloFDZXR0ZQprZXMKesO2cwpvdXZlbGxlCi8vLy8vLy8vCmFieQrDqXJlCnJhbmUK4paBcG93ZXJzCuKWgVBhdGgK4paBV29yZAriloF0cmFuc2FjdGlvbgriloFjYXVzaW5nCmVsbHNjaGFmdArDonQK4paBQ1BVCuKWgWRlcHRoClNUUgriloFDb25mCuKWgXJhcmUK4paBQWsK4paBYm9uCuKWgUNhcmxvcwriloFzcGVjaWZpY2FsbHkKcmljcwpLRVkK4paBc3RhcnMKw6lyaWNhCuKWgdCb0YMK4paBY29uZmlndXJlCuKWgWFnZW50CuKWgWV4cGxhaW5lZAriloFjb2VmZmljaWVudArQtNGMCid9CuKWgXZpZGEK4paBU3luCuKWgdC90LDQt9Cy0LAK4paBT3B0aW9uCuKWgXJvYgriloHQutC70YMKOlsKYW50bHkKZGVwZW5kZW5jeQriloFDdXIK4paBZnJhbmNlcwriloFpZGVhbApTdwriloHQs9GA0YPQvwriloFDYXB0YWluCuKWgXRvZG9zCkpvCuKWgXBlbG8KP10oCuKWgWZhaXRoCtC+0LLQvtC5CuKWgWZyZXNoCuKWgXByb3ByaQpUaW1lb3V0CuKWgXZlaApjb250ZW50cwriloFEb2N1bWVudApjb2xsZWN0aW9uCuKWgWthcgpydWNrCllvdXIKdW1hCuKWgW1hdGhlbWF0CkVuYWJsZWQK0L/Rg9Cx0LvQuAriloFFbmdpbmUK4paBTcO8bmNoZW4K4paB0L/QvtGB0LUK4paBZm9uCmFyY2hpdmUK4paBZnJlcXVlbmN5Cn0rXArDonRlCuKWgWtvcgriloHQmtGA0LAKU2luZwptb250aAriloFIYXcK4paBc3lzCmVybWUK4paBV291bGQK4paBaW1wYWN0CnVycmVuY3kKbGljaHQK4paBYXB0CmllcmUK4paBbW90aW9uCtCh0KHQoAriloFJbml0CuKWgW1zCuKWgU1TCnNoaWZ0CuKWgWF1dHJlcwriloFiYXNoCmhpZGRlbgpvcmlvCuKWgWNlbGVicgriloFMaWJlcgpldG8K4paBZG92ZQriloFwYXRocwriloFpbmoKQ2F0ZWdvcnkK4paBY3J5CuKWgW1hcmtlZArRg9C00L4KYXNoaW9uCsOkbHQK4paBbGFuCuKWgXRlYW1zCuKWgWt2CmlhbXMKYWJhbgriloFUQUJMRQrQstCw0YAKUmVwb3MK4paBQmVsbAriloFwdWJibGljCuKWgWNvdW50cmllcwriloFzcGluCuKWgWzDqWcK4paBS3JpZQriloFKb25lcwp3aGl0ZQpIdG1sClByZXNzCuKWgUJsdWUKT3BlcmF0aW9uCuKWgUFudGgK4paBcHNlCuKWgUZvbnQK4paBdGhlbWUK4paBYmxvY2tzCiQpCuKWgWdsYWQK4paBbWFuYWdlCm9yZGVuCm9zdGVuCmNvbGUK4paBU1AK4paBc2NoZW1hCnVyYXMK4paBd2hlbmV2ZXIK0KjQkArRgNC40YLQvgriloFkaXNjb3ZlcmVkCuKWgXByZWZpeApnbG9iYWwKcm9rZQp6ZXMKY2h0ZQriloFCZWZvcmUK0LzQtdC90LgK4paBRGlnCuKWgXJhcGlkCuKWgWxsZWcKZXF1YWxzCuKWgUhvY2gKZm9yYWxsCtCy0LDRgtC4CnVzegriloFhdHRhY2hlZApFeHByZXNzaW9uCuKWgXN0b2NrCsO8bGwKcGV0CmVzc2lvbnMKY29sbwriloFneQpCb29rCuKWgUphY29iCuKWgVByb2R1Y3QK4paBaW5wdXRzCtC80LjRgAriloFsZWFybmVkCsOzd24K4paBcG9saWNlCuKWgdC70LXRggriloFJdGVtCuKWgWV5ZQphaWVudAriloFTYW1tbHVuZwriloFMb3IK4paBcmVwcmVzCuKWgWZlc3QKQ29uZAriloFub3V2ZQriloFleHRlbmQK4paBRnJhbmNlcwriloFGaW5kCuKWgWRlemUKZXJuYQriloFoYWLDrWEKcHLDvAriloFtb3RvcgpiaWUKSGVsbG8K4paBcmVzaWQK4paBZmluYWxlCiUpCnsnCuKWgUhhcmQK4paBcGFpcnMK4paBRWxsCml2b3QKcmVlcwriloFGb3JjZQriloFldmVuaW5nCuKWgWRlc3B1w6lzCnJnCldoeQriloFjb25uCnNjaGVtYQrRhdC+0LQK4paB0LzQtdC20LTRgwriloFmbGFzaApza2lwCuKWgW1pbnV0ZQriloF2ZWQKYXlsb3IK4paBc2V1cwriloFNYWpvcgriloFmcmFuYwriloFyYWMKa3cKY3YKTmF0aXZlCuKWgUJ1dHRvbgrQvdC40YbQuApzZXR0aW5ncwriloFBY2Nlc3MK4paBcXVhbGl0eQpwcm9wcwpGbG9hdAriloFTY290CuKWgUFECuKWgWFsbGVtCiZcCnVzdHJhdGlvbgpwYXR0ZXJuCm1pcgriloFpbmNvcnBvcgpza2ljaAonPgpTdGFuZAriloF0ZWNobmlxdWUK4paBRXNzCuKWgU94Zm9yZAriloHQu9CwCnRpa3oK0LvQuNC5CkxvZ2luCuKWgW1pbmlzdGVyCuKWgWN1cmwKa2FuCuKWgW1hcHMKaW5kYQpyaWViCuKWgUVORAppZmllcwpjb25zb2xlCmJ1cnkK4paBTEUK4paBaW5kZXBlbmQK4paBdGEK4paBxZoKb25lbArDqXN6CuKWgUlzdAp1dGl2ZQrRkdC7CuKWgVJlZ2lvbgriloEoPQriloFjb21wYWN0CsOnb2lzCuKWgWxhYmVscwphdXRvcml0w6kK4paBc3RhbgriloFmcmFuw6dhaXNlCuKWgXJlbW92aW5nCnljCn18CuKWgUV4ZWMKKCRfCm1hZwpiZWZvcmUK4paBc3RvcHBlZArQvNC40LgK4paBcmVmcmVzaAp1bmt0CmljaW8KWG1sCuKWgVRhYgriloFmb3VuZGVkCuKWgWZhbApmeAriloFIaXN0b3JpYQriloFFYXJseQpEb20K4paBZGVjaWRlCuKWgXVuZGVyc3Rvb2QK4paBanVyCuKWgU5yCuKWgWNhcGFjCndhcwriloFlbmVteQriloFwcm9ncmFtcwriloFtYXNrCtGB0LrQtQriloFncm91cGUKY2FtCuKWgXdpZGdldApSRUFURQriloFzZXZhCuKWgUJhcmNlbAriloFwZXJkCuKWgdCc0YMKcmFuY2UKVFlQRQriloF7JwriloFiaWxsCuKWgSJfCidgCmJhaG4K4paBY29udGFpbmVkCkNsb3NlCnJ1ZwplZ3kK4paBc2lnaHQK4paBUHJvdmluCtC90Y4KYXJ6CtGJ0LXQvQriloFKb2UK4paBZGVsZXRlZAriloFBdXRvCuKWgW1ldGVyCkNHCtGK0LsK4paBcGVudAriloFiZXplaWNobmV0ClN1bQpkYmMK4paBUGxhdHoKZWN0b3JzCuKWgUxpdHRsZQpRVUUK0YbRltGPCtGC0LXQu9GPCm5pZ2h0CuKWgWxsCuKWgW1vc3RseQpVSUQK4paBYmV6CmRvYgrQutGB0LgKdGVybmUK4paBY29ybmVyCmF0eQriloFpbXByb3ZlCuKWgWludHIK4paBYEAKYXJvZAriloFpbnN0YWxsYXRpb24K4paBUmVmZXLDqm5jaWFzCmlnYW4K4paBY3JpdGljCmFkZWwK4paB0YHQtdC70L4KLA0KYXRvcmkK4paBRnJpCuKWgXLDqWbDqXJlbmNlcwriloFJbnRlbnQK4paBdGFudAp1bmNpCuKWgWxldmVscwplcmVzCuKWgWVtZXIKc2FmZQp0awriloFjaGFtCuKWgWdyZWF0bHkK4paBd2VpdAriloFjb2FjaAriloF0b3dhcmQKSG9tZQriloFCb29sZWFuCtGC0LXQuwriloFtb2NrCuKWgWFwcHJlY2lhdGUK4paBQ3Jvc3MK4paBVGFrZQpEUAriloFzaWRlcwriloFOb3JtZGF0ZW4K0LTQtdC5CnN0YWwK4paBY291dApibgriloFWZXJ0CuKWgWJpcmQK4paBZHluYW1pY2FsbHkK4paBRG9sCuKWgUJ1cmcK4paBZG9nCsOkdHQK4paBbnVjCkVDCkJ5dGVzCuKWgWFrCnJlbGFuZAriloFndWl0YXIK4paBcmVnYXJkaW5nCuKWgUZ1w58K4paB0LTQvtC7CmF1c3MK4paBamVqCmFjbwriloF1cGRhdGVzCtGA0YPQugooJy8K4paBY29sZAriloFHaXZlbgpoaW4K4paBZmVlbGluZwppZ2xpCmZhaArRgdGC0YDQtQpib29sCmluaXRpYWwK4paB0YHRgtCw0L3QvtCy0L3QuNC60LAK4paBQW5uYQriloFob3JzCuKWgWRvbGwK4paBY29uc3VtCnViZXIKc3RhbmRpbmcKYWN0aXYK0LfRlgpjaGVja2VkCuKWgXBlcm1pc3Npb25zCuKWgU1vbnRlCldyaXRlTGluZQpwbHVzCuKWgUVxdQriloHQuNGFCtGH0LrQuAp1bnF1ZQriloFMTwplYQpzYW1wbGUKaWVzegpvcmFsCuKWgdCY0L0Kb3N0b24K4paBU2ltb24KZmFzdAptawphc3NlbgriloFhcmNoaXRlY3R1cmUKZW5zZXMK4paBw4UK4paBdG9waWMK4paBZGlzYWJsZQriloFDcnUK4paBQ29udHJvbAriloFjcmVhdGlvbgriloFoeXBlcgppdHVkCtC20LXQvdC40Y8KYXJhbQriloHQs9C00LUKaWVuc3QKZWR1bGUK4paBQm90CuKWgdCe0YEK4paBVGhlaXIKYW5uZQpNaWNyb3NvZnQK4paBUE0KeWRybwplbnRsaWNoCuKWgUVpbmUKQ0hBUgo6JwpXZWxsCmxldG9uCuKWgXN1cHBvcnRzCiddKQptYW51YWwK4paBdmljZQphc2EKY2xvcwp2aXNlZAriloFwb2sKdHJhY2sK0L3QvtGB0YIKLi4uLi4uLi4K4paBJ1wKwrIuCuKWgW9yZGVycwpldHRhCuKWgWNvbnZlcnNpb24K4paBdHJhZGUKY2xpCuKWgdCY0YHRgtC+CuKWgWFrdAriloFzdWJzZXQK4paBYXVnCuKWgWxlYXZlcwpNYXRoCmFubmVkCmthbAriloHQktC10LvQuAriloFub2cK4paBZXRoCuKWgWhhaXIKYXJvdW5kCuKWgWphdmF4CtCy0L7QuQriloFDZW50cmUKw7bDnwp1dGkK4paBbmF2aWdhdGlvbgriloFQUwriloF3YQriloHQoNC+0YHRgdC40LgKdXNhCnpldGEK4paBUERGCuKWgW1pc21vCnByb3BlcnRpZXMKbWVpc3RlcgrQu9GM0YLQsApmb3J3YXJkCuKWgU9zdApraW5zCuKWgXNpZG8K0LfQvtCyCnRhZ3MK4paBYWN0b3IK4paBZmx5CkNSCmFnaW5pCuKWgWxldHQKZW5pCnRlY2gK4paBRW5jCm9yYWNsZQphbWlsdG9uCnplagpmZW4KdW1lcmF0ZQriloFxdWVzdG8KZGFydAriloFLb3JlCmFwaXMKZXBlcgpTY3JlZW4Kd2FsbAriloFpc2xhbmQKc2hlCuKWgWxpZ2dlcgrQstGB0Y8KZmFuZwriloF0YXJkCuKWgXBsYWF0cwriloHQv9C70L4K4paBT2ZmaWNlCuKWgVNFVAriloFjaXJjdWl0CmplZApTYXZlCtC70YzQvdC+ClNvY2tldAriloFJbmRleApBQ0sKaWRlcnMKZXJlcgriloHQodCo0JAK4paBbGFkeQriloFzY2hlbWUKaWVsbGUK4paBZXhlcmMKKX1cCkRhdGVUaW1lCmF0aGFuCuKWgVByb2Zlc3NvcgriloFtb2lucwriloFFeGNlbAriloFIYXkK4paBTXVzaWsK4paB0ZcKxJlkCuKWgSIuCuKWgdCx0YPQsgriloFpbnN0cnVtZW50CtC/0LDRgAriloHQsdC10YDQtQriloFwb2xpdGlxdWUK4paBdHJhZGl0aW9uCuKWgVZNCuKWgUFydHMK4paBQ2kKVXNlCuKWgWFnZ3JlZwriloF3ZWVrcwriloFvcHBvcnQKaXRpbmcK4paBdmVydGljYWwK4paBTmF6Ci4uLikKaXpvCuKWgWN5Y2xlCuKWgXRlbXBvCtGC0YDQtQriloFoYW5kbGluZwppc3RlbmNlCuKWgXBhc3RlCuKWgWVuam8KUk9VUAriloFvdXRlcgriloFzdXBwbHkKZW1hbgriloFhY2NpZGVudAriloFcXQriloHRgtC10YUKUG9vbApvdGluZwpvbnltb3VzCuKWgUdpb3YK4paBdWQK4paBLi8KRVJST1IKY29uc3RydWN0CnRleHR3aWR0aApxdWlwZQpjYXNlcwriloHQsNC0CuKWgVJvdwpIb2xkZXIKd2FuCmFybmEKTWVtCuKWgUNhbmFkaWFuCuKWgUNvbW1pc3Npb24Kc3VuCuKWgWFwcHMK4paBQmxvCuKWgWlocmVyCuKWgWZhbWlsbGUK4paBbcSbCuKWgXB5CtC40YEK4paB0YLQvtCz0L4K4paBQWdhaW4K4paBaWdub3JlCuKWgXRlbGV2aXNpb24KUGF0CmhpZGUK4paBUmV2CuKWgWJlYXIKcGh5CuKWgW5vaXNlCuKWgXdyYQphdGlvbmFsZQriloFjb2xsYWJvcgpib3JkZXIK4paBZWxlY3RlZAriloFzdXJwcgriloFhdm9pcgriloFhc3NlbWJseQriloHQvtCx0YnQtQriloFhcmJpdHJhcnkK4paBYnJpZWYK4paBLS0tCuKWgU1hdXIKZ3Jlc3Npb24KaWNpYQriloFsaWVndAriloFGaWd1cmUK4paBb250bwpSZXBvc2l0b3J5CuKWgWTDqWYK4paBZm9ydGgK4paBY2xpY2tlZApzZWl0ZQriloFub3RlcwpuYXRpdmUK4paBRURJVArRi9C1Ck1UCmFtZW50YWwK4paBcm9zZQriloFwdWVkZQpEZWxlZ2F0ZQp1YmEKbmVvCnhpcwriloFBcnRodXIKVVJFCmFtaW5nCkRldmljZQriloFkaWFtCnN0w6RuZAriloFwcm9uCm9pcwpjb21pbmcKUGFyYW1ldGVycwp1dnVkCuKWgWFiaWxpdHkK4paBbcOpdAriloFVbmZvcnR1bmF0ZWx5CmZkCkRpY3Rpb25hcnkKc29ja2V0CuKWgWNvbm9jCmNvbnRhaW5zCmVzc2VkCuKWgWdlbGRpZwrQvdC40YbQsAriloFwb2ludGVkCmVzdGkKbm9tCtC+0LPRgNCw0YTQuNGPCuKWgXJlcHJlc2VudHMK4paBbWFuaXAKd29ybGQK4paBcmVzb2x2ZWQKdGVncgriloFkb3J0CmFzdGVybgriloFjYW1wYWlnbgriloFwcmltbwriloE7OwriloFzbmlwcGV0CuKWgU5pawpUb3RhbAppc3NlbWVudApBQ0UK4paBdmVyaWZ5CmlmZmUKbGFnZW4KaWV1cgriloFjb252ZXJ0ZWQK4paBTWlsaXQK4paBQWxnCuKWgVJvbgriloFrb25uCmFwcGxlCuKWgWRpc3BvcwpzdGVsbHVuZwriloFyZXRhaW4K4paBbWVudHJlCuKWgW5ldXQK4paBTmlnaHQKY2jDqQphdHRpCuKWgW9icmEK4paBc3VwZXJpb3IK4paBQ29uZ3Jlc3MK0ZHQvAriloFjb2RlcwriloFBbWEK4paBRWFydGgK4paBb3Bwb3NpdGUK4paBcG9vbAriloFEdW4K0LbQtdC90LjQtQriloEiJHsKaW52CuKWgdGD0L3QuAriloFBbmRyZXcK0YLQtdC70LXQuQriloFiecWCClVuaXZlcnMK4paBQW5ndWxhcgphbmltCtC00L7QstCwCkJVRwp1dGVseQriloFkcmF3aW5nCuKWgWdhaW4K4paBZm91cnRoCuKWgVByb2JsZW0K4paBc3VkZGVubHkK4paBw4QKb25uYQriloFLb250CuKWgUJpbGRlcm4K4paBa29ubnRlCsW+ZQpUcmFjZQriloFzZWN1cmUK4paBa3TDs3J5CuKWgWVxCuKWgWZvcm1hbAphbWVyaWthbgriloFBbmFsCuKWgVJld3JpdGUK4paBRG91YmxlCmNyZWF0ZWQKTlUKTURiCmFwZXMKVW5pcwriloFlc3BlY2lhbAp9KVwKZWRvbQriloFjYXRlZ29yClJldHVybgriloFIYW1iCuKWgVJpbwriloFNaXIK4paBR2VtZQphYmlsaXRpZXMKdHJ6CnVzZXQKaWVycmEKbmV0d29yawriloFkb2N0b3IKZXVycwriloFsaXN0ZW4K0LTQtgriloFIw7YK4paBY29uc2lzdHMKYXNtCkNocgphbGFuZAriloHQuNGB0L/QvtC70YwK4paBbHVnYXIK4paBZGVmaW5pdGVseQptb3ZlCsO6YmxpY2EK4paBbMOkbgppc211cwriloHQtNGA0LbQsAriloFkdAriloFQZXJoYXBzCuKWgUJyYXNpbApKb2huCuKWgXByb21pc2UKxYJ1CnJlZW5zCuKWgXBzeWNoCuKWgVdobwrRgNGP0LQK4paBSU5UTwriloFQZW9wbGUK4paBV2lsbGlhbXMK4paBTWFyZwriloHQtNCw0L0KcmVjb3JkCuKWgUV1cm8K4paBVmlyZ2luaWEK4paBUmVzdAriloFDb3JuCn19LAriloFHcmlkCuKWgWluamVjdArQvdCw0L0K4paBY3JvdwriloFQaHlzCuKWgURPCuKWgSItCuKWgWluY3JlYXNlZAphY2hlcgpwZWF0CkxpbgriloFEdWIKcmljZXMKYWdub3N0CmRsCuKWgWN1cnZlCsO8ZwpyaWNlCmxhbmd1YWdlCkNsaWNrTGlzdGVuZXIK4paBbXVuaWNpcGFsCuKWgU9yaQriloFCaWxkCuKWgUNhYgriloFWYXIK4paBbm90ZWQK4paBw44K4paBc3VicwppYXRpb24KV09SCmluZ2x5CuKWgVJ1cwppZW5zCklORk8K0LrQstCwCmF0aXZvCmdlbmRlCuKWgUZyYW56CuKWgWlzb2wKZWRlcwpuaWVyCuKWgU5PCuKWgUhhcwpiZWFucwriloFwYW5kYXMKKCIlCtCy0ZbRggrRg9GC0LHQvgriloFnYXRoZXIK4paBbGVnYWwKaW5jbHVkCuKWgWNpcmN1bXN0CmNyaXB0b3IKcmlibGUK4paBU8O8ZAriloFhcHJvCkFwaQriloHQvdCw0LkK4paBQWZyaWNhbgpvd3NraQriloFKb2huc29uCmllawriloF2b3RlCuKWgUthbgriloFiaWJsaQriloFoYWFyCuKWgXZyCl0pLApzdWJzZXRlcQpQYXJzZXIKaWFuaQppc8OpCmlkZWEKT25seQriloHDoWwK4paBQ2F0YWwK4paBQ2FzZQpzZWgK4paBZW5jb3VudGVyCuKWgXJlZm9ybQrQvNC40L3QuAriloFTdHJlCmV4Y2VwdGlvbgriloFUYXIK0YLQsNGACnRybAriloHQkNC70LXQutGB0LDQvdC0CtC70LXQutGCCmVxdWFsCk9wCuKWgWxpZgriloHQudC+0LPQvgriloF2b2x0YWdlCnNoaXJlCuKWgUdyb8OfCtCy0L3RjwpuaW5ncwrQvdGG0LgK4paBbGFnCuKWgWFuZGVyZW4K4paBdmFjCuKWgW1hY3JvCj1bClRoZW4K4paBY29udHJvbHMKc2VxCm9sb2dpZXMK4paBc2VsZWN0b3IK4paB0KPQutGA0LDRl9C90LgK0YXRltCy0L7QstCw0L3QvgrRi9C5CmFsbGVuZ2UK4paBSU1EYgp1bW15CnllbgriloFiZXN0ZQriloFCb3gK4paBY2hhaXIK4paBU2FiCmVyZGUK4paBbmFzdAppdmFtZW50ZQriloHQvtCx0YoK4paBcmVxdWlyZW1lbnRzCuKWgW1lZXRpbmcK4paBZmluYW4K4paBQWRhbQriloF0ZWxldmlzCuKWgWJyaWdodAriloFHaXQKRUcK4paBR2lsCnLDqHMK4paBQ29uZAriloFmdAriloHQsdGD0LvQvgotKwpFTkQKZXJuZQriloFDb21wdXQK4paBaWxzCuKWgWdhbGwK4paBY3N2CsWCdWcK4paBc3VtbWVyCmdhbWUK4paBcG9zdHMK0JDRgNGF0ZbQstC+0LLQsNC90L4K4paBemlqCuKWgWRldGVybWluCuKWgWFiYW5kb24KY291bnRlcgriloFyZXF1aXJlbWVudAriloFUaXQKaXJ0dWFsCuKWgVZpZGVvcwriloFxdWlldAriloFUZXJtCuKWgXRpbWVvdXQKUHJpbnQK4paBaW52ZW50CmxhaXMK4paBbW9uaXRvcgpoYWxiCuKWgVdpbGQK4paBbGVhZGVyCuKWgdGB0LXQu9GMCuKWgXV0aWxpegriloFwYXJlbnRzCuKWgWZvcmNlZAriloFwcm92ZWQK4paBZWZmZWN0aXZlCuKWgWxsYW0K4paB0KHQv9C+Cm9yYgpnZ2kK4paBYXNzdW1wdGlvbgriloFzdWJtCuKWgdCy0ZbQuQppbGlhCuKWgXJldmVyc2UKJyIK4paBcXVvdGVzCuKWgXNpdGVzCmlndW5nCuKWgUFyZwpEb3VibGUK4paBc2NyZWVucwriloFjbGF1c2UK4paBYnVuZGxlCuKWgXBoaWxvc29waAriloFOdW0K4paBZ2xlaWNoCnVseQpkaXJlY3QKYXNrZXRiYWxsCm93YW55Clx9JAriloFyYWRpdXMK4paBU2VhcmNoClByb3BlcnRpZXMK4paBZWxldgriloFwcm9kCuKWgSIlCmlzacOzbgpEZWJ1ZwpTZWNvbmQKKCEK4paBQ2F0aG9saWMK0YDQvtCy0LDQvQpsZXoKUGEKcHNvbgriloFlcnN0ZQriloFGdQriloFsaXQK4paBU2Fpc29uCuKWgUhhc2gK4paBZXhlbQriloHQv9GA0LXQtNGB0YLQsNCyCikqCuKWgWV1CuKWgeKUggriloFnYWIKZXRhaWxlZApDb3B5CuKWgdC00LLQsApldmVuCktpbmQK4paBSmFja3NvbgrQsNC7CuKWgWNvbnNlYwpVU0VSCuKWgVRvawooLgriloEkfAriloFUYW1iCuKWgUxlbW1hCmhhbmcK4paBY29udHJpYnV0aW9uCnJvbGxlcnMK4paBc3R1ZGllcwriloFwb2kKZ2VtcwriloFVUAriloFXb2wKPiIK4paBZmxvb3IK4paBaW5pdGlhbGl6ZQriloFMZXcKemVrCmFydGUK4paBcG9zaXRpb25zCuKWgXBvcnRpb24KY292ZXIKd3AK0L7QstC+0LPQvgriloFwaWFubwriloFtZXRhbAriloFzYW1wbGVzCuKWgdCh0LDQvQp2YXJpYWJsZQriloHRgdGC0LDRgtGMCuKWgWludGVnZXJzCldoZXJlCmZhbWlseQriloFudW4K4paBaW5jcmVtZW50Cml4ZWQK4paBaGVlZnQKZnRlCuKWgXZpbAriloFvdHJvcwpNdWx0aW1lZGlhCuKWgUhlbnJpCmFkZWQK0LPQtdC9CuKWgWNhcGl0CuKWgdC00YDRg9Cz0LjRhQppc3AKSVRZCuKWgWNvbnN0cmFpbnRzCuKWgUtpcmNoZQpmb3VuZArRiNC40LkK4paBcGljCuKWgXRvdQpjcmVkCtGA0L7QsQriloFNZXNzCkpvYgriloFNYWlzCuKWgXN0eWxlcwpmYWxsCuKWgVVrCuKWgXN0cmVldApvY2Nlcgplc2VuCuKWgWNvbG9ycwpjZWFuCtGO0YnQtQpjb25uZQriloFyYXRpbwphbnRvbgriloFGZWwK4paBY3VzdG9tZXIK4paBUHJpeApyw6FzCnByZWQK4paBZWxlY3Ryb24Kc3ltCuKWgdCy0LXQu9C4CuKWgW92ZXJmbG93CuKWgSRbCuKWgVBPU1QK4paBQ2luCnNjaGVpZAooIi8K4paBc2VhcmNoaW5nCuKWgXB1cnBvc2VzCuKWgWFycml2ZWQK4paBcHVudAriloFsYWQKUHl0aG9uCuKWgWxlYWRzCuKWgXNhbmQK0L/QsNC00LAK4paBY29tbXVuZXMK4paBQ0hBUAriloFjYXNvCnJ6CuKWgWR3CmFjYQriloFDb2x1bWIKY2hpbGRyZW4Kw6p0CnNjaGVtYXMK4paBaW5zdHJ1Y3Rpb25zCuKWgS1cCuKWgUlzcmFlbApub8WbY2kK4paB0L7QsdGA0LDQtwriloHRgdC+0LLQtdGCCuKWgWltbWFnaW5pCuKWgUZyZWQK4paBR2xvYmFsCuKWgXRoaWNrCuKWgWZ1ZXJvbgriloF0aHJvd24K4paBY2xvY2sKZW5hYmxlCicnJwriloFTdW5kCuKWgWNvbnRlbXBvcgphbnN3ZXIK4paBbWFudWZhY3QK4paBaW8KcXF1YWQKT1VUCuKWgUxhYgriloFadwpsZWdhbAriloFWZWwK4paBcmFpc2UK4paBZGVsaXZlcgriloFWb2lyCuKWgWFzc3VtZWQKTGV0CmllcnRlbgriloFLb25nCuKWgUV4cAriloFKdWcK4paBZGVjbGFyYXRpb24K4paBRmlzaAptw6kK4paBc3BlZWNoCuKWgXRlbnQK4paBUm91dGUKX18oCuKWgXLDqWFsaXMK4paBRGVzaWduCnNldFRleHQK4paBU3RhdGlvbgphcmNoeQriloHQutCw0YLQvgriloFkZW50CuKWgUtsCmnDnwriloFyaXNrCuKWgUJyb2FkCuKWgXZlY3RvcnMK4paBU3BlYwriloFyb3V0ZXMKeW1uCuKWgUdyZWcK4paB0L/QvtC70YPRh9C4CmdpZQpPUk0K0LLQtdC00LUKd2FsdAriloFlZnRlcgpQdHIK4paBc3VidAriloFiaXJ0aAriloFkcmF3bgptZXNzCtC80LXRgNC40LrQsNC9ClZFCuKWgVB1dAriloFhc2MK4paBZmVkZXIK0YHQu9C4CuKWgVByaW4K4paBc3RpY2sKcmVzZXQKeWsKc3R1ZGlvCuKWgVN0aWxsCkNvbnN0CmFjacOzCuKWgVBvcnR1Z2FsCuKWgXNjcmlwdHMKdW5kaWFsCuKWgWxpdmVzCuKWgXN6ZXIK4paBZXN0YWRvCmZvbGRlcgriloFjb21tdW5pY2F0aW9uClJvdXRlCuKWgXN3aWZ0CtGC0LXQvQriloFraWxsCuKWgVBSCmpvaW50CuKWgW9iamVjdGl2ZQriloFjb21wbGljYXRlZAriloHDnGJlcgplc2gKcGljdHVyZQpyYWluZQpjb21wdXQK4paBcHJvcG9ydApvZ3MKw7xsdAriloFxdWFudHVtCtC60YDQuAriloFzb3AK4paBbG9vcHMK4paBUmVmZXJlbmNlCuKWgW5laQpJQ0UK4paBdmVybQriloFhZGoK4paBcGVyw7IK4paBdHJvdQppc2lvbnMK4paBQXBwbGUKc2VydmFibGUK4paBQm9zdG9uCm9yZXQKb2tzCuKWgWtnCmRlZmluZWQKcGxhdGZvcm0KY2xlcgpvZ3JhcGhpYwpyaXR0CuKWgWRpYwriloFNb25kCuKWgUlyZWxhbmQK4paBVW5hCuKWgWNvbW1lcmNpYWwK4paBUHUKRGkK4paB0LXRkQriloFwcmVjaXMK0L3QsNGA0L7QtAriloFxdWF0cmUKdXN0cmFsCuKWgWRhZwppZ3VlCuKWgWJ1cm4K4paBb2ZmaWNlcgriloHQkNCyCuKWgWhpZ2hsaWdodAriloFTdXBwb3NlCm9kaQpzZXJ2bGV0CuKWgUVuY3ljCuKWgVJhbmdlCtGC0LjQuQpQbGVhc2UK4paB0YDQvtC60ZbQsgpxdWFudAriloFmbGF0CuKWgVLDqWbDqXJlbmNlCtGB0LvQtdC00L7QstCwCnJvbGUK4paBZGllc2VuCn19KAriloFJbmR1c3QK4paBbsO6bWVyCuKWgSI7Cmx1cwrDtGxlCuKWgXptCmRlZwriloFyb3VnaApJbnYK4paBaHVyCuKWgVJlc3MKY2hzCuKWgXR1cm5zCm5lcm8KZnVuY3Rpb25zCtCw0LvQuAriloFoYWJpdGFudHMK0LDRggppc3N1ZXMK4paBaHVnZQpVdGlscwriloFTYXQK4paB0LPQvtGB0YPQtNCw0YAK4paBY29hc3QKc2hhcGUKTEMK4paBbG9nZ2luZwplbmRvcgriloFsaWVzCuKWgWRpZmVyCuKWgWNyaXRpY2FsClhUCtC80LjQvdCwCmFuc2sKUmVzdWx0cwprYwppdmVyc2UKRVhUCkFMU0UK4paBdsOhbApQaQpjb21waWxlCmhlbGxvCuKWgdGH0LXQvNC/0LgK4paBSXRhbGlhCtC60L7Qu9C+CuKWgWVkaXRpb24KZ3J1bmQK4paBZGF0YWZyYW1lCuKWgUZvbGxvd2luZwpyZWliCuKWgUplZmYK4paBY2l0dMOgCklUYWJsZQriloEkKFwK4paBcmVkdWNlZApvYmlsCuKWgWFueXdoZXJlCicoCuKWgXBocgriloFLaAriloFGcmFtZQriloFtYW51YWwK4paBY3JhCuKWgVZTCiU9Ckluc3RhbmNlU3RhdGUK4paB0LHRgNCwCuKWgURyYWcK4paBSGVycgriloHQs9GDCuKWgW3DunMKVG9vbAriloFQcml2YXRlCuKWgXN5bmNocm9uCmlyYXRpb24K4paB0L7QsdC+CuKWgXR5cGljYWxseQriloFpbXBsaWNpdApvcmllbnQK4paBdGltZXIK4paBa8O2bm5lbgppZXN0CnJhaWQK4paBZXhwcmVzc2lvbnMK4paBYWltCuKWgXN0cmUK4paBd3JhcAriloFCYXJ0CuKWgWJyb24K4paBa2V5Ym9hcmQKcG93CuKWgWdydXBvCuKWgdGA0LXQt9GDCuKWgXByb2Zlc3NvcgriloFIZWFkCtC90L7RjgptaW51cwriloFNaWNoZWwKTk9UCm1vcgpdfQp3aWRlaGF0CmFyaXMK0YLQtdGA0LDRgtGD0YDQsApkZWZuCmlzdHJ6CuKWgXRhbnRvCuKWgVBvdwriloFpbmRpY2F0ZQriloFXaW50ZXIKcmVzaG9sZArRgNGW0LIK4paBYCgK4paBb3duZXIK4paBZGlzcAriloHQutGA0LgK0LzQtdGCCtC80LXQvdGCCnJlcG9ydApyZXF1aXJlCuKWgXZveQriloFBUAriloFFc3Bhw7FhCuKWgVPDo28KasOkcgpOb24KTGlicmFyeQppY2h0ZW4K4paBc3RydWN0dXJlcwriloFtdXkKw6FyaW8K4paBY2VydGlmaWNhdGUK0YfQvdC+0LPQvgriloFwcm92aW5jZQpwYWdlcwpkYWwK4paBRnJlZGVyCtGM0LUKRXhlY3V0ZQriloFhbmNpZW50CuKWgWZpbG1zCuKWgUFsZnJlZApBdXRvCuKWgWF0b20K4paBZWxsCuKWgUhhcnIK0LnQvQriloEiIwriloFuYWNpb25hbAriloFuZWlnaGJvcgrRgdGC0YPQv9CwCuKWgXdpdApQb3AK4paBR3JlZWsK4paBcmVwZWF0CmJhZAriloFTQwriloFEYXRlVGltZQrRiNGC0LgK4paBV0gK4paB0L/RgNCw0LLQuAriloHQotC4CuKWgXNhaXNvbgriloFIYXJ0CmRpcmVjdG9yeQp1YW4Kbm9ybQriloFQaGlsaXBwCuKWgXN1c3BlY3QK4paBYW5ubwpiYwrRgdC70LAKJCgK4paBYmVmaW5kCm9jcwpsYXRlc3QKOyI+CuKWgWFmdGVyd2FyZHMKUFVUCuKWgWphCuKWgUhpbAp5egriloFCb3VyCuKWgWxhaWQK4paB0JTQttC1CnBpZQp3YXRjaAriloFFcQpjb250YWN0CmliZXIKY2hlY2tib3gK4paBZXNwYcOxCmFuc2UK4paB0YjQutC+CmVmZgp4eHgK4paBR0VUCuKWgWxvdgppdHV0ZQp6ZWNoCnRlcmUK4paBcHVycwprZW5zCmlhbnRlCuKWgUZyZWUK4paB0L7RgNCz0LDQvdC4CmtyZWlzCuKWgXs6CnNoYXJlZAriloFHcmFwaAriloFjb25uZWN0aW9ucwriloFET00K4paBQ2FydApzc29uCuKWgUhhbWlsdG9uCtGC0LXQu9C4CuKWgXJlc3RhdXIKUmVzb2wKRHJpdmVyCuKWgWVuZgpFRElUCuKWgXByZXYK4paBaWsK4paBc8SDCmrDtgriloHQodCh0KHQoAriloFjb2xvdXIKY2h0ZW4K4paBZXN0YWQKaW5vaXMK4paBY29uZmlyCuKWgXbDqQriloFDZXMK4paBTmV2ZXIKb21lcgrQttC00LAK0YHQu9GDCtGH0LXQvdC40Y8KZGxsCuKWgXlvdXRoCmVtZW4K4paBc3R1ZGllZAriloFLaWwKY2lvbgriloFuYXZpZwpyZXF1aXJlZApvcml0aG1zCmlsb3IK4paBRGV1dHNjaGVuCuKWgXBlcnNvbnMK4paBQmFyY2Vsb25hCuKWgWZvcm1hdGlvbgphYmVpCuKWgdC/0YDQvtGC0LjQsgpFbmdpbmUKT05FCm9ncsOhCkNhcApyaXIK4paBZ2F0ZQpvcmF0aW9uCm1hdmVuCuKWgWNvbWJpbmVkCuKWgWF0dHIK4paBaG9vawriloHQutC+0YLQvtGA0YvQuQriloFzZXJ2ZXJzCnVjdHVyZQrQttC10L3QvdGPCnR2CuKWgXJlcQpqYWwK4paBbG9jYWxseQp9fXtcCkJyCuKWgUhpZXIK0LzQvtGACuKWgWFwYXJ0CiJdLAriloElPiUK4paBenVzYW1tZW4K4paBaWRlbnRpZnkK4paBQWx0ZXJuCuKWgdCx0YDQvgriloHRhtC4CmdoCuKWgVRlbgpSUwrRhNC+0YDQvNCwCuKWgW5lbGxlCuKWgUhpbgpvdW5kaW5nCuKWgXJlcHLDqXMKYXBoCuKWgVtcCuKWgVNwb3J0cwrRgNCw0LsK4paBdGhyZQriloFwcmluCuKWgUVsaXoK4paBRm91cgriloFzb2NpZXR5ClRyYW5zYWN0aW9uCuKWgXZlZwriloFzY2hvb2xzCuKWgW92ZXJhbGwK4paBdGFpbArDvGJlcgriloFTb3YK4paB0KHQtdGACuKWgXJhcHAK4paBdHJhZmZpYwpxdWVzdGlvbgriloFlbnZpcm9uCmF0ZWllbgppY3VzCuKWgW5hcnJvdwriloFwcmF5CuKWgUJvdQriloFDbGllbnQKYWJsCuKWgUF1ZGlvZAriloFucG0K4paBQ29sdW1uCuKWgUdhbWVzCmF2ZXIKb255bWVzCuKWgdCf0L7RgdC70LUKbsSFCuKWgU51CuKWgURpY2sK4paBdGVuc29yCuKWgUAiCnbDqQpJY29uCuKWgdC/0L7QtNCwCuKWgUdvbgovKS4KaXN0cmEK4paBQXVkaW9kYXRlaWVuCkRlbGV0ZQp9fX0K4paBanVtcAriloHQntCxCuKWgXByaW5jaXBsZQriloHDiXRhdHMKb2tlZAriloHQktC70LAKSW50ZXJ2YWwK4paBc2F1CmVuY29kZQriloFwb24KY2F0Y2gK4paBdGllbQriloFHdXN0Ck1DCmxpbWl0cwriloFrZWVwaW5nCuKWgXNvbmdzCuKWgdCw0LLQs9GDCuKWgdGA0LDQudC+0L0K4paBbm90aWZpY2F0aW9uCuKWgW9mZmVyZWQKQ29yCuKWgXNodXQKZXJyb3JzCuKWgUVOCuKWgWxhdGFjaAriloFzZWxic3QK4paBY2hlY2tib3gK4paBY29vbAriloFmYWN0b3J5CuKWgXBhaWQKZGltZW5zaW9uYWwKbmllagpwdG9uCuKWgXBpbgpha2VkCuKWgXJlbGkK4paBVGF5bG9yCuKWgVNvbWV0aGluZwppbXVtCuKWgVZpbgriloFpdGVyYXRpb24KRmluZArQutC+0LLQuAriloFib3lzCuKWgVNpbXBsZQriloFDcmlzdAriloFXYXMKw6JuZAriloFWYQriloHRgtGA0LAK4paBZGVzdGluYXRpb24KbGltcAriloFLYXQKd29ydGgK4paBS29yCmnDp8Ojbwo9YAriloFmYWlybHkKZmFsbHMK4paBcmVqZWN0CuKWgWRyZWFtCmJlbGwK4paBdG91dGUK4paBJFx7CuKWgXN0b25lCuKWgXByb3RlY3QK4paBZXhjZWxsCuKWgU1leGljbwriloFkYXNoCuKWgWZhdWx0CnBtYXRyaXgKYWxsZXIK4paBZ3VlcnJlCm9yaWdpbgpoaWJlcm5hdGUKw61saWEK4paBUmVnaXN0ZXIKdW50bwriloFCYXQK4paBYm93CtGB0YzQutC40YUKZXTDoAriloFMdWlzCuKWgWZvdQriloFDYW1icmlkZ2UK4paBb3R0CnN1cApyZWFzCuKWgXBvaW50ZXJzCuKWgUJvYXJkCuKWgdGA0LgK4paBZHJpdgrQvdC40L0K4paBQ2lyYwriloF0aG91CkRpdgpzcGFyawpsYW1lbnQK4paBVkFMClNlbmQK4paBSXJpc2gKb3kK4paBVHUK4paBdHJpdmlhbApGb3JtcwriloFhc8OtCuKWgUltcGVyCuKWgXNpZ25hdHVyZQp1bm9zCuKWgU5lZwriloFjYW5jZWwK4paBSGVpbnJpY2gKZWVkCklsbHVzdHJhdGlvbgriloFzdWxsYQriloFxdWFydGVyCmFzegriloFibG9nCmZpY2EKd29uCnF1ZXQKXSkpCuKWgWdlbmVyYXRpb24K4paBY2F1Z2h0CuKWgWxhbmRzCuKWgUtpbmdkb20Kc2NoYWZ0ZW4Kcm9ucwphbm5lbHMK4paBU3BlY2lhbAp0dXRvcmlhbAp0aXAK4paBIiIsCuKWgUF6dXJlCuKWgWJvdW5kZWQKU20KdGFyCtCy0LXQvQriloHQt9C10LwK4paBbm90YXRpb24K4paBYXBhY2hlCuKWgWdhegppZXJubwphbmdlbgpwZWN0aXZlCuKWgWVsZWN0cmljCuKWgXNlbWkKTUFYCmVkZXJiCm9iamVjdHMK4paBZGlmZmVyZW5jZXMKaXN0ZWQKaHJlZgppY2lwCuKWgW51bXB5CuKWgdGE0YPRgtCx0L4KbG9hZGVyCuKWgWRpY2gK0ZnRgwriloFEw6kKSHoK4paBUGFyYW0KZG9jdW1lbnRhdGlvbgppcmNyYWZ0CkVNCuKWgWluc3RpdHV0aW9uCmNvbXBhdAriloHQsNC70YwK0YHQu9Cw0LIK4paBTmV0CtGG0LjQvtC90LDQu9GMCuKWgWJyb2FkY2FzdApkYXRldGltZQphc3luYwp2cmUKbWVhbgriloFDaGVtCuKWgWVzdGltYXRlCmljYW5hCuKWgWdyZXAKdGVrCsOkbQpvcmlnCuKWgVZpY3Rvcgp1dGVuYW50CmFuZ2EKcGluCuKWgXZlcnRleAriloFDSEFQVEVSCmNpdHkKdWdieQpncmVlbgriloFLZXIK4paBZGlmZsOpcgriloFuZWNlc3NhcmlseQpEQwpMaW5lYXIKYWxlbQriloFMYXRlcgriloFtZXRhCmplbQpyYWdlbgpNYXkK4paBTWl0Z2xpZWQK4paBc29ydGVkCnVzc2VuCuKWgXNwb2tlCuKWgWRpc2FibGVkCuKWgWFjY29tcGxpc2gK4paBUnVzc2lhCnRoZXJlCmVlcwriloFoYWxsCuKWgW1ldHJpYwphdHRyaWJ1dGUK0YLQvtCz0L4KYWJvdXQK4paBTGFtCmNoYW5uZWwK4paBZXBpc29kZQriloEkKCcuCuKWgW91Z2h0CuKWgUVzdGUKT2JqZWN0cwriloF2YWxpZGF0ZQriloFyaW0K4paBbnVtZXJvdXMK4paBSmF2YXNjcmlwdAriloFHTAriloFJdGFseQplZGVyYsO2cmQKb25hdG8KYm9va3MKc3RvbmUK0YXRgwriloFqZWwKaXJpCuKWgUFTUApHQQriloFzdGF0YQriloFiYXoKRGF5CnRobQpkaAriloFGaWxlcwpBbmRyb2lkUnVudGltZQriloFjaGVja3MKa3IK4paBdmVubmUKU0wKYXZpYQprYXp5CuKWgVRocmVlCkFkbWluCuKWgWNvbGxlZ2UKR2xvYmFsCnRpb24K4paBY3VyaW91cwpzaG9ydAriloFiYXNzCtC00LXQu9CwCuKWgdC00LXRjwpTY2hlbWEKJ1wKZGlmZgriloFDQQriloFDb3Jwb3IK4paBb3BlcmF0b3JzCm9tcsOlCuKWgWVkZ2VzCik7YAppbmRzCuKWgWdpbmcKJiYKfS1cCnJhbm8K4paBc8OjbwriloFhZGRzCmVsb3IK4paBdW5zaWduZWQK4paB0L/RgAriloFDb25maWcK4paBRXNjCuKWgWNob3NlCuKWgXBpZWNlcwriloFyZWdpb25zCkVzdAriloFCYXR0bGUK4paBZm9jCuKWgUxpZ2h0CnBhZGRpbmcKYWJlbgriloFldXJvcAppbGxvbgriloHQtdGB0YLRjAriloFib3JkCuKWgdC+0YLQvdC+CuKWgUhvbmcK4paBdnVsCnBsdWdpbnMK4paBJzwK4paBa3VyCnJlZ2lvbgriloFSZXB1YgppY2hlcgp9X1wK4paBbWVkYWwK4paBTW9yZW92ZXIKQkkKQXYKdXRlcgriloFzY2FuCuKWgU11bmljaXAK4paBY29udHJhc3QK4paBSWcK4paB0LPQvtGA0L7QtApyZWxhdGVkCmFsaW5nCuKWgdC80LDRggrDvG5zdAriloFDaHJpcwp3eQriloFBY3R1YWxseQriloFVbml2ZXJzaWRhZApFdmVudExpc3RlbmVyCuKWgXRlbXBvcmFkYQriloFhc3NpZ25tZW50CuKWgU1pa2UK4paBd8OkaHJlbmQK4paBxZt3aQriloHRgdGA0LXQtArQutCw0LTQtQriloFjYWxjdWxhdGVkCuKWgWVsbGVyCuKWgUFzaApyaWVsCuKWgWhhcmR3YXJlCuKWgWludGVucwooJy4KaWxsaQphZ29uCuKWgUd5CuKWgWhldXRlCuKWgXNsZQriloFsaXRlcmF0dXJlCnNlbQptYW5hZ2VyCuKWgUdyYW5kZQriloFtaXhlZAriloHQktC10YAKw61jw60K4paBc29pdAriloF3ZWxjb21lCtGH0LXQvdC40LUK4paBVW5pdmVyc2l0w6R0CuKWgWJ1aWxkZXIKc2ltcGxlCmljb2RlCsWZZQppbmRlbnQKb3BvCuKWgWFkdmFuY2VkCnRlbXBlcgplZGdlCuKWgWRhdGV0aW1lCuKWgWRvbmMK0LvQsNC90L3RjwriloF2ZXJkCtC00L3QvgppdG9zCuKWgWhlYXQKdmlzaWJsZQptZWwK4paBR2lvdmFubmkK4paBdmFyaWV0eQriloFyb3V0ZXIKVmVjdG9yCuKWgVdhbGsK4paBb2J2aW91c2x5CmhlaW4KRmluCklUYWJsZVZpZXcKWWVhcgriloFFY29ub20K4paBdmVsb2NpdHkK4paBQ2l2aWwK4paB0ZgKYWxlcnQKSWRlbnRpZmllcgrDqG5jaWEK4paBbm9ybWFsbHkK4paBRWd5cHQK4paBY3R4CuKWgVZlcmVpbgriloFIdQp1bHR1cmUK0L3QuNGC0LUKbMOpCuKWgVdpZW4K4paBUHJ6CkJ5dGUK4paBbmFoCmlzbXMK4paBUHVibGlzaAriloFIZXJ6CmljdWwKcGlzb2RlCtGH0ZYK4paBZGllc2VtCmvDtgpWaXNpYmxlCuKWgXJpZwpgKS4KUGFyc2UK4paBSmFjcXVlcwpOSQriloFnbGFzcwotLS0rCuKWgWluaXRpYWxseQriloFrcgpDQ04KcGxheXMK4paBc2lndQpGb2xkZXIKc3RvcmFnZQriloFcfAppdm9zCtGB0LrRg9GOCuKWgU1vaAriloFDb21taXR0ZWUK4paBS2ltCmV1CtGC0LXQvAriloFvcmlnaW5hbGUKaXJzCuKWgVJlYgppdHV0Cm5sCuKWgVBpZXIK4paBXTsK4paBRmFsCuKWgSIiOwptdmMK4paBZmVtYWxlCuKWgWJyaWRnZQriloF0w610Cmt0cgo+KQriloFzZWF0CuKWgXZlc3MK4paBVVNCCuKWgUFydGljbGVzCuKWgURlc2NyaXB0aW9uCuKWgW9jCuKWgWhvdXNlcwriloHQn9C10YIKbG9uCk5vdGlmaWNhdGlvbgriloFwcmVzc3VyZQriloHQutGD0LvRjAppZ25lZAriloFyZWxpZ2lvdXMKZmFuCmlnbGlhCuKWgWNsYXNzaWZpY2F0aW9uCm9nZXRoZXIK4paBU0RLCuKWgUh1bWFuCuKWgWNvbW1pc3Npb24K4paB0J7RgAriloFhbnRlcwpEVArDqHRlCnByw6lzCi8iCuKWgSjCqwriloFow7YK4paB0YfQsNGBCuKWgWphawppZW5lbgp1Z2cKV0EK4paBcGxhY2Vob2xkZXIKV2lsbAosLAriloFLYW0K4paBd2VuCuKWgVNjaHVsCsibaWUK4paBYXVkCuKWgXN1ZQriloFyZWZlcnJlZArQstCw0YIK4paBUGFyYQriloFibGEKVUVTCuKWgXN0YXRpc3QK4paB0YLRgwriloFXYXJzemEKZ3VlCuKWgUlkZQptYXRoc2NyCuKWgWxpZXUK4paBYm9kCuKWgXJ1cwriloFib2F0CnhzcGFjZQriloFtb2RhbArQu9C10LoKdG9waWMKbWFueQpza8O9CuKWgW9yZ2FuaXphdGlvbgriloHQs9C10L3QtQriloFXaWxzb24K4paBY29tZm9ydAppYmlsCjotCuKWgWFuaW1hbApSZXBvcnQK0LrQsNC80LgKam9uCuKWgWtlcgriloHQutC90LgKbW96aWxsYQpQcmljZQphbnRpbgplbWVudG8KbWF5CuKWgWx1bmcK4paBYmxvdwplZGV1dAriloF0eXBlZAriloFkZWNlbWJlcgriloEuLi4uCmxpYW5jZQriloF2aWVsCuKWgdCk0LgKcHJlc2EK4paB0L7RgdGW0LEK4paBTmFtCuKWgUdyZW4K0YHQuNC70LDQvdC90Y8KVklECnN0cmUKd2VpcwriloFwcm90ZWN0aW9uCnRhaWVudAriloFvZmZpY2VycwrRgtC90L4K4paBQnJpZwriloFpbnRlbGxpZwrRj9GFCklUSAriloFzZXBhcmF0ZWQK4paBTENDTgpuw61tCmNsb2NrCuKWgWFwYXJlCtGP0LLQuAriloFFbGl6YWJldGgK4paBV2F0ZXIKZ2ViaWV0CuKWgWNvbnZlbnQKZnVydAriloFiZWlkZW4KYmFzaAriloHRh9C10YDQtdC3CuKWgXViCuKWgVN0YXRpc3QK4paBbGltaXRzClZvbApjdHgK4paB0L3QvtCyCmd1aWRlCm1pYwppZXNhCuKWgWh1dnVkClJUCkZpZwriloFsZWN0CmNvbm4KaW1pdArQs9Cw0YAK4paBYmFqbwpzY3JpYmUKcmVnZXgK4paBQ2FzcwriloFwcm9wYWcKJyQK4paBcHJvZmVzCnVuaXF1ZQriloFTcWwKdW5pb24KcmlvcwpwaXAKLS0rCmthZGVtCmNvbHVtbnMK4paBdmFyeQriloFiZXJlaXRzCuKWgWRvaQriloFDb21tb24K4paBUm9iaW4K4paBw5cK4paBc2VpCuKWgXN5c3QK4paBdsOkCuKWgURlZmF1bHQK4paBdHltCnBlbAriloFiZWxpZXZlZAriloFwcm92aWRlcgriloFtaW5pbWFsCtGC0LDQu9C4CmFpbmVzCktpdAppemlvCmlzc2VuCnByZXNzZWQK4paBc3RhZwriloF1aW50CmtvcgriloHRgNCw0YHQv9C+CuKWgWluaGVyaXQK4paBY29tcGlsZWQK4paBZmVicnUK4paBdG1wCndvcmtzCtGH0L3QsApkcmF3YWJsZQriloFOYXYK4paBdGhvdWdodHMKcm91dGUK4paBY29uY2VydAriloFvcHRpb25hbAriloFicmFzCuKWgXByb3ZpZGluZwrRgdC+0LwKaWR4CmVtcGxvCuKWgdC60L7Qu9C4CuKWgUJlcmUK4paBRWxzCtGA0LXQvNC10L0K4paB0LTQtdC60LAKY291dApsYXllcgriloFnbG9iCmZvcmVhY2gK4paBRWR1Y2F0aW9uClBPCuKWgWltcHJvdgriloFjbGllbnRzCmdyb3VwcwriloFrb250CkRlbApyZXR0CuKWgXN1cAriloFtb2cKdGFuCuKWgWNvbXBsCmlydHkK4paBbm91dmVhdQpvc3oK4paBTmF2eQpiZXJlCm1hc2sKb3bDqQp6aWwKUEVSCuKWgXBvYmxhY2nDs24K4paBZGV0YWlsZWQK0LvQtdGCCuKWgWZhbWlsaWVzCmFiZXQK0LXQstC40YcKw6RuZGVyCuKWgcOlcgriloFwZW5kYW50CuKWgWJpbAriloFoaW50Cm9kZW4K4paBZXhwYW5zaW9uCuKWgXBvbnQKYXNhbnQK4paBS2luZAppamkK4paBQXV0aApsYWltZWQKcmVmbGVjdApdPQpieXRlcwpob3ZlcgriloHRhtC10YAKZ3JhZGxlCkFyY2gKYXBlc3QKw6FzYQpDYXJkCuKWgXRlbXBvcmFyeQriloFkw6lwYXJ0ZW1lbnQKY2xhc3NlcwrQttC40LLQsAriloHRhdGD0LTQvgriloFtb2xlClJZCkxQCuKWgXBlYwpyb2R1Y3Rpb24K4paBR3VhcmQK4paBUGFybGlhbWVudAriloFpbnN0YW50aQriloFub3RhbW1lbnQK4paBRG91ZwriloFNYXJzaAoufgriloFcIgriloF0aMOpCuKWgWxpYnJlCmRvZXMK4paBZMOpYnV0CuKWgVVuaXQK4paB0YHRgtGDCuKWgWxlYWd1ZQriloFxdWFsZQriloHRgdC+0YHRgtCw0LLQu9GPClNlY3VyaXR5CuKWgWFwcGFyZW50bHkK4paBdHJvb3BzCmljYW5vCuKWgU1CCmVuemUKbG9hZGluZwriloFkaXN0cmlidXRlZAp3cml0ZXIKcmVzb3VyY2VzCmjDtgp1dGlscwriloFwcmVwYXJlZApjaWVyCm9wb2wK4paBbMOkbmthcgpoZXMK0L3QstCwCuKWgW9wZW5zCmFnb2cKaW50ZXJmYWNlCuKWgUZ1bmQK4paBcGVudHJ1Cm7DrWNoCuKWgWNvbmZpZ3VyZWQK4paBV2Vic2l0ZQriloFsaXN0ZW5lcgppdmVsCm7EmQptaW5hCuKWgWludmVzdAriloHQvNGW0YEK4paBZGF2CuKWgXBhdGNoCnBpZWxlcgriloFFeHRlcm5hCnRmCuKWgWVyZWQK4paBQXNzZW1ibHkK4paBc291dAriloF2ZXJrCm1lcnMKdG9nZ2xlCuKWgXVwZGF0aW5nCuKWgUtlbnQKZWNhCkZBVUxUCuKWgXRpdHJlCuKWgUtlbm4K4paB0JzQuNGF0LAK0YHRgtC+0YAK4paBcG9kZQriloFTZWIK0YbQtdCyCkVZCuKWgXNpbHZlcgriloFjYXBhY2l0eQriloFjb21wbGV0aW9uCuKWgVBlZHJvCmZlbAp2YW5vCnpldWcK4paBaW50ZXJpb3IK4paBUmVzcG9uc2UKw6lkaWEK4paBV29ybGRDYXQK4paBY8SDCnF1ZWwKU29sCtGW0YHQu9GPCuKWgURvbWluCuKWgWN1bQpjZXAK4paBTXVzZQriloFNYXLDrWEK4paBZnVuY3Rpb25hbAriloFhZGFwdGVyCmNvbmZpZ3VyYXRpb24K4paBdGlwbwriloFCcnkKdnkKVUwK4paBdHJhdmVycwohKAriloFhYnNvbHV0ZWx5CtC70YLQsArRgtGC0Y8K4paBSVQK4paB0LLQvtC10L0KeWNsZQpiZXN0CuKWgWNvbnN0cnVjdGVkCuKWgdGE0LjQu9GMCmNpZG8KZXhpdApnYXJ0CuKWgXByb3ZpbmNpYQp2ZXoKY2lwbAriloFGYWNlYm9vawriloF5ZWxsb3cK4paBU3VtbWVyCuKWgXBvaW50aW5nCuKWgXBvc3NpYmlsaXR5CuKWgWxlZ2lzbAriloHQvNC+0LYKZGVybgrQutC+0L3QvgriloFtZWNoYW5pc20K4paBQmVybmFyZApleHByCtC70L7QstC4CuKWgWRpZ2l0cwriloFkZWxlZ2F0ZQpvZ3JhbQriloFEaWN0aW9uYXJ5CmlzeQriloFzcG8KLyQKY2x1ZGVkCuKWgU1WQwriloF0w6ltCuKWgXByaW50ZWQK4paBR290dAriloFPbQphbnNhcwriloFEdXJjaAriloFJZGVudApRVQpodG0K4paBU3VsCiddLgriloFkdXR5CuKWgUF1dGhvcgriloFuxJsKb3dlZ28KcHVzCmVtYmwKRXhlY3V0b3IKQkwK4paBTWVucwpkaXNwYXRjaAriloFNaWQKYXBwcwpUcmFuc2Zvcm0K4paBRGF0CuKWgWltcGwKb3V4CmhvbG0K4paBSW5zCuKWgUVtcGlyZQrRgNGD0L8K4paBQXBhY2hlClNJT04K4paBcGFzc2FnZQojIyMjIyMjIyMjIyMjIyMjCuKWgWV4cHJlc3NlZArQvdCw0LQK4paBb2wK4paBaGF2aWEK4paB0LHQvtC70LXQtQriloFlbmpveQpmb3JtYW5jZQriloFkaW1lbnNpb25zCuKWgdGH0LXRgApTZWUK4paBbW91dGgK4paBZ2F1CmllbmN5CuKWgUNhcm9saW5hCkRpc3QKcmFkaW8KbGltaXQKLz8K4paBQmFsbArQvdGW0YHRgtGMCk1lbWJlcgp3YXRlcgriloFtdXJkZXIK4paBc3RhbmRpbmcK4paBVklJCkNlbnRlcgpwcGEKdXJlYXUK4paBTGVpcAriloFvYmpldAriloFBY3Rpdml0eQplbWJlcnMKdnIK4paBY29uZHUKQ2VsbHMKaW51cwriloEnLAriloFhZnJhaWQK4paB0YXQsAriloFWaWMKdGVzdGluZwpUdWJlCuKWgXZhc3QKUE0KbmloClNTTgriloFDaGlsZQp5bHZhbgriloFCb3cK4paBcmVsaWdpb24Kb3BoZXIK4paBQ29sbAriloFkaWdpdGFsCnppb25pClNlY3Rpb24K4paB0YDQtdC30YPQu9GM0YLQsApGb290CmNvbnZlcnQK4paBcmVjZWl2aW5nCkNvbnRhY3QK4paBaGVybwpzYW0K4paBcG9zdGVyaW9yCm93aQpBbnQK4paBZmxhZ3MK4paBWmVhbGFuZAriloFib3VuZHMK4paBd2hlcmVhcwppbmZsClBsYXkK4paBZGVtbwriloFnaWJ0CuKWgWhvc3BpdGFsCuKWgXZvbHRhCtC70ZEK4paBZmFzaGlvbgriloFleGNlZWQKZWxlbml1bQpJdGVyCmtyaWUK4paBaW50ZWdyYXRpb24K4paBT3RoZXJ3aXNlCmFkdQpTaGUKb25kZQp1aW50CnJhZGl1cwriloFyYW0K4paBw6FsYnVtCuKWgdGC0YPRgAriloFkeQriloFPdHQK4paB0L/QtdGA0LgKcmV2CnJpb3IKw61kCmlyYXQK4paB0LLQutC70Y4K4paBaW1wb3J0YW50ZQriloFEdWtlCuKWgWNhdXNhCuKWgU1hdGhlbWF0CuKWgWRpcGxvbQriloFOaWNvbAriloFleGNsdXMK4paBZGVidWdnaW5nCuKWgUdoCm9yaWdpbmFsCmx5bgriloFQbGEKc3VpdGUKY2hhdAriloFlc3R1ZAp1ZWxsZQriloFwZXJ0CuKWgWltcG9ydGFuY2UK4paBYXBwcm9hY2hlcwriloFkbGEK4paB0L/RgNC+0YQKUHJlcwo8XApwcmVmaXgKU1NJT04K0YDQvtC00LgKY291bnRyeQppdHplcgriloHQutC+0YAK4paBc2luZ3VsYXIKZ292CtGA0LjQvQriloFGQQriloFtYXRyaWNlcwpvbGFyZQpuaWthCnBvd2VyCmxsYQriloFkZXNpcmUK4paBZmFtaWxpYQrQtNC+0YAK4paBZmFuCmdlbmVyYXRlZAriloFDb3MK4paBxbxlCuKWgURpZXNlCm1vdgriloFkZW5vdGUKIildCm91dmVybgphbWFuCuKWgWluc2VyCmlqawpvdHRhCmVyYWwK0LTQtdC70YwKKCktPgriloFwb2RlcgppZ2VzCuKWgU9ubGluZQriloF3ZWlyZAppYWMK4paBcXVlbHF1ZXMKw6hyZW50CuKWgXRlbAriloFMYXRpbgp2ZXJ0ZXIK0LvRj9GACtGA0L7QuAriloFwZGYK4paBa2V5d29yZApIYW5kbGUKQWZ0ZXIKcmVjZQriloFpZGVudGljYWwKc3R5bGVzaGVldAriloHRgdGC0LDQvdC+0LLQuAriloFrYQpjZW1lbnQK0YLQtdGCCuKWgWNoYXQK4paBTXVuCmHFgmEKQU5UCm9sw7NnCuKWgWZhbnQK4paBZm9yZXN0CuKWgdCy0LjQutC+CmN1c3MK4paBc2VocgpwYWcKb3RpYwriloHDoWxsCtC80LDRgtC4CuKWgSInCisiCkFuaW1hdGlvbgrRhdC+0LTQuNGCCmF6dQriloFwbGF5cwppemlvbmkK0LzQuNGH0LUK4paBYm9tYgriloFtZXJlbHkK4paBaG9sZGluZwriloF3ZW5uCuKWgW1lZGljCuKWgXNwZWFraW5nCm9uZ29kYgriloFDYW1wZQppbml0eQriloHRj9C90LLQsAooKWAuCmx1c3MK4paBSGlzdG9pcmUK4paBb3BlcmF0aW5nCkNoYW5uZWwK4paBYWNjdXJhY3kK4paBYm9zCuKWgWV2aWRlbnQK0YbQuNGOCmV2ZW50cwp0ZXh0cm0Kb3JlaWduCuKWgWlpCmhyZW4KbG93ZXIK4paB0YLQvtC8CuKWgUFib3V0CuKWgWFqCmVyaQrRgdGC0YPQv9C4CuKWgWRpZ2l0CuKWgVNwYWluCuKWgURhdGVuCuKWgWZvcm1lCuKWgdGI0YLQsAriloFCYWNoCm5vbnVtYmVyCuKWgXJlY29tbWVuZGVkCuKWgXJlYWRzCmhpc3RvaXJlCuKWgXNhbmcK4paBPz8K4paB0YHRgtCw0LsKc2NvcmUKZmFzCuKWgWN1YgriloFncmV3CuKWgWNlbnRybwriloFiZWthbm50CkV2ZW50cwpCRVIKaGV3CtGB0YHQsAriloFtYWpvcml0eQrDrnRyZQplbmNpCuKWgVF1ZXJ5CuKWgWt0w7NyZQppxIcK4paBY29tcGxleGl0eQriloFGcmFuw6dvaXMKY29uc3RyYWludArRg9GA0L3QsArilZDilZAK4paBaXRlcmF0ZQpsZXR0CnBlcm9yCuKWgU5lZGVybGFuZApzaGFyZQriloFpbmNsdQrDpG5nZXIK4paBTmljCtGH0L4KRnVsbAriloFyYXBwb3J0CmVjbGlwc2UK4paBaW5kdXN0cnkKaGVhZGVycwriloHQoNC4CmNoc2VsCuKWgXBvbGljCnNjaGllZAolLApPRAriloFKYWsKKHtcCmFsaWduZWQK4paBZnJlcXVlbnRseQriloFzdW9pCuKWgWVzc2VudGlhbGx5CuKWgVJpYwriloFyZXBvcnRzCuKWgWRlY2ltYWwKcmFyCuKWgUZvbwriloFLYQriloFEQwriloFzaW1wbGVyClBhbmUKP30KU29ydAriloFwb3NpdApjZG4Ka3R1cgriloFhd2sK0LfQtdGAClBGCnV1cgriloFSb3NzCuKWgW1hbnQKTmEKQ29ucwopKSkpCuKWgXRlY2huaXF1ZXMKaW1wbAriloFkcm9wcGVkCuKWgUxpc3RhCuKWgUJhc2ljYWxseQplbnRhbAriloFjZWx1aQriloFzdHJhdGVneQriloFXYWxlcwpuYW4K4paBZ21pbgriloFncsO2w58K4paBZWVyc3RlClRpbQpudGVuCnJlc3AK4paBc3RhYmxlCm5vdgpyb2IK0L3QvtGYCuKWgW1hcnJpYWdlCmdldFN0cmluZwpBdXRob3IK4paBR3JhZgriloFkaWFncmFtCmdpYQpOZXR3b3JrCuKWgWNvbXBvc2VkCuKWgW1pc3NlZAriloFNZWcK4paB0L/RgNCw0LLQvgriloFob21vbnltZXMK4paBQm9va3MK4paBZW5jb3UKcG9ydGUK4paBcm90YXRpb24K4paBZmlyCtGC0LXQu9GM0L3QvgriloFndW4K4paBQWZmCtC90L7QugriloFGdcOfYmFsbAriloFTdG9yeQriloFDaGFwCuKWgSkuCuKWgVNlaXQK0LzQvtC9CuKWgXTDqWzDqQriloFjb3BpZWQK4paBY29uc2lzdGVudAriloFkcmluawriloFDaGFtCuKWgW1hdHRlcnMK4paBcmVuZGVyZWQK4paBaHlwb3RoCsWTdXYK4paBbWVlcgriloFwYXJzaW5nCuKWgVBSTwpzZXJpZXMK4paBesOhCnN0cmHDn2UK4paBQm9vdAriloFyZXBvCndvcgriloFTdHJlYW0K4paBQU4K4paB0L/RltCyCuKWgVNNCuKWgUFybgriloHFvQriloFbXTsKUmVzb3VyY2VzCuKWgWVsYWJvcgriloFFdGgK4paBbGlzdGUK4paBcmVsYXRpdmVseQpjaGFudAo9IiIK4paBbGlmdApDTgpTZXJ2aWNlcwpNRU5UCuKWgdC40LPRgNCwCtCx0YDQtQriloFKb3JkCuKWgXRlYwrRiNC60LAK4paBU3VwCuKWgWluZmx1ZW4Kb25kcwpoYW5kbGVyCuKWgWJhbmRhCuKWgXZlcnRpY2VzCuKWgXphcAriloFjb3JkCmFsdGVyCnplbmlhCsOidGVhdQriloFrbm93aW5nCuKWgUFyZ2VudGluYQpBcmVhCtCw0L3QtQpmYwo9Ii8K4paBTWlrCmF0xIMKaWV1eAriloFkZXV0c2NoZW4K4paBdHJhZGl0aW9uYWwKZGVjb2RlCnZleAriloFzaXplb2YK4paBRnVuCuKWgXBhcnNlcgriloFGbG9yaWRhCuKWgWJ1aWxkaW5ncwriloFNYW51ZWwKcmlsZQriloFsb2dnZWQK4paBc3Ryb25nbHkK4paBcmV2b2wK0L3QtdC1CnhpY28K4paBRmFpcgpjYXJ0CuKWgVdvcnQK4paBSmVzdXMKZW1lcwpzY2hyaWZ0CklucHV0U3RyZWFtCndhZAriloFncmFuZGVzCuKWgW7Dum1lcm8K4paBT3R0bwppZW50ZXMK4paBZmFtb3VzCm9sb2duZQpKZQrQvdC40YgK4paBR3VlcnJhCmJhcmEK4paBY2FkCmVsdmUKYnJhY2UK4paBSnIKc3RhYmxlCkVDVApsZW1tYQptZWRpYXRlCuKWgXZpbgriloFtb251bWVudAriloFjdgriloF3aW50ZXIK4paBdHJhbnNmb3JtYXRpb24K4paBTmljawpzdHJvbm9tCuKWgWZyYWcK4paBaW50ZWwKcmFjdGlvbgriloFjb25zaWRlcmluZwriloFGbGUK4paB0LvQvgriloFBcHLDqHMK4paBQU0K4paBSHVtCuKWgW11bmRvCk5FUgriloFCZWxvdwriloHQs9C+0YDQvtC00LAKYXJ0ZXJzCi0tIgriloHQn9C1CsOudAriloF0eHQKYW5nZXJzCuKWgXRoeQpDTEEKaWJsZXMK4paBcmVxdWVzdGVkCuKWgUFsZXhhbmQK4paBZmFjdG9ycwriloFwcm9kdWNlcwpuaW5nZW4K4paB0YHQvtGB0YLQvtGPCuKWgW9wdGltaXphdGlvbgpjaG9kCj5gCuKWgVdpa2lwCm5vc3RpCuKWgWNvbXBldGl0aW9uCuKWgUhhbm4K4paBem9uYQpkYwpkZXNpZ24K4paBWnUK4paBZXNwZWMKZXF1YWxpdHkK4paBQWJiCuKWgWRldmVsb3BlcgriloEiXgriloFTaG9ydAriloFwbGFucwriloF2aXQKaXphYmxlCmJ1cmdoCmFnZW0K4paBUHJpbnQKw612CuKWgXN1aXRhYmxlCnBpY2tlcgpQcm9maWxlCmFuZHkK4paBcXVvdAriloFEdXJhbnRlCuKWgUZyYW5jaWEK4paBdGFydAriloFWZW5legriloFkaXNwYXRjaAriloFvYnNlcnZhdGlvbnMK4paBxbwKSW52YWxpZAriloFvY2N1cnIK0YLQutC4Ck1lbWVudG8K4paBU3lkCuKWgXRpZW1wbwriloFzdGFmZgriloFzZWN0aW9ucwriloFzc2gK4paBTkdDCsOrbAriloFlcnJlCuKWgWRpdmlkZWQK4paBV2l0aG91dAriloFkdXJhbnQK4paBamFhcgriloHiiJIK4paBc29sZGllcnMK0YPQvdC6CmxhcHNlCuKWgVZhbGxleQriloEoOgpyZXJhCuKWgWTDqXZlbAriloFww6lyaQriloFjYWxjdWxhdGlvbgriloFrZWluZQplcnRhaW4K4paB0YLQtdC70LUK0YDRg9C0CuKWgWN1bAriloFjbG90aAo7fQriloFwcnplZApNb250aApQaWNrZXIK4paBU1YKYXJpYW4K4paBUmV2aWV3CuKWgWhhbmcK4paB0L7QutGCCuKWgUZyb250Cm90bGluCuKWgXRyYW5zbGF0aW9uCuKWgW1vZG8K4paBc3RhdGlzdGljcwriloFOdWUK4paB0J3QuNC60L7Qu9CwCk5VTQriloFzaGlwcwriloFSZXBvcnQKe1sKRWZmZWN0CmllcmkK4paBcGFydGllcwpwbGEKcncK4paBV29ya3MK4paBaXJvbgriloFhdHRyYWN0CuKWgWNvcnQKbsOhCuKWgVN0ZXZlCuKWgWJlbmUK0YLQvtC9CsOtY3VsYQpUd28K4paB0LPQu9Cw0LIK4paBVmlkZW8K4paBcG93ZXJmdWwKYXVjaAptYW5kZQrDpGNoc3QKTGF0CuKWgXpuYQriloFmaWd1cmVzCuKWgWFsaWFzCm5leAriloFjYXRlZ29yaWVzCmNhbGxlZAriloFTaW1pbGFyCuKWgWdpcmxzCnBlegriloFqb2ludArRgNC+0LPQvgppa2VuCtGH0LjQvdCwCmFuY2lhCuKWgXRpamQK4paBUm9zZQriloFhbGdvcml0aG1zCuKWgXByaW50aW5nCm5lYQriloFleGVjdXRpbmcK4paBbGFtYmRhCuKWgXJlZ2lvbmFsCuKWgUNvcGEKRm9vCnBoeXMKem0K4paBTGF1cgriloFjYW5kaWRhdGUK4paBSmEKenltCkV4YW1wbGUK4paBc3BpZWwK4paB0LTQtdC5Cm5laG1lbgprZWl0ZW4K4paB0YHQtdC90YIKaW50ZW50Ci4oCuKWgdC/0LXRgNCy0YsKcHJvbQriloFuYXQK4paBaW1hZ2luZQpjYWxsYmFjawpjb21wb25lbnRzCndpdGhvdXQK4paBYXF1ZXN0ClN1cHBvcnQK4paBcmVzcG9uc2libGUK4paBamVnbwpsagp3aWxsCmxlYW4KZWxhbmQKb2xvZ8OtYQptYwpQcm94eQriloFvY3VwCuKWgdC90LDRhdC+0LTQuAriloFydWIK0L3RltCyCuKWgUZhbGwKYW1vcwriloFFcAplbnRyZQpmYWlsCldvcmxkCuKWgUVkaXRvcgriloFleHBvcwriloFmaW5kcwriloFDdWx0dXJlCkxFQVNFCuKWgW1vdmllCjw9Cm9tZXRyaWMKZWxpbmcKbnVtZXJhYmxlCm91cmQK4paBU2VhCuKWgWJpbGQK4paB0L7RgdGC0LAKYmxvCuKWgWxvc2UKYXRldXJzCm91cmVkCuKWgUJhdHQKKCk7DQriloFwb3oKcG9zdHMKcGVuZApjZXJ0YWluCtC90LjQutC+0LwKSnVzdAp3ZWJraXQKZGVtw6FzCn5+fn4K4paBaW5kaWNhdGVzCuKWgXBhcmsKcmlxdWUKdm9kCuKWgUNoYW1wCmZ0d2FyZQpPUFQKZGphbmdvCnJlbGVhc2UK4paBw4gKU1IK4paBcG9saXRpY2lhbgriloFyb2kKYXR1cmVuCuKWgURldXRzY2hlCnRhZ29uCuKWgU1vdgpvYmllcm5vCuKWgWRhw58KdXRoZXIKaW5kaQriloFXaWtpcGVkaWEK4paBYW5vcwriloFvYnNlcnZlCmVsbHkK4paBcmFpbHdheQphdG9uCuKWgWVudW0KaHVzCuKWgWluaGFiClBzaQpvaXJlCuKWgdCl0L4K4paBU3BhY2UK4paB0JDRgNGF0LgK4paBYW50ZXJpb3IK4paBxYEKaXNvbnMKSWwK4paBYW3DqXJpYwpsYXBzCuKWgUJCQwpRVUVTVApDb25zdHJhCm1vbnQKw6RmdAriloHDpHZlbgp1YmVybgo8IS0tCuKWgWNvZGluZwp0aGVvcnkKYXRoZWQK4paBQXJiZQriloHRiNC4CmZvckVhY2gKb21vcnBoaXNtCmRldGFpbHMKYWNoc2VuCmludGVncgpWb3IKVW5rbm93bgphY2VhZQppbnVlCmVzb21lCuKWgUZpcgpjaGFpbgriloFleHRyZW1lbHkKbXVsdGljb2wK4paBU3dpZnQK4paBYWRkcmVzc2VzCmhzcGFjZQriloFSb2dlcgriloFkZXNzZW4K4paBY29uc2VxdQp1YWxtZW50ZQriloFQcmVtaWVyCuKWgVJlY29yZAriloFCcm9uCmtpcgpzZXgKaW50ZXJuCuKWgWJlbmVmaXQKdW1lbgriloFiZWNvbWluZwriloFsaWcK4paBcG9wdWxhCm9zYwriloFjaXYK4paBZ3JlYXRlc3QK4paBcHJvY2VzCl0qCuKWgdC80LXRgdGC0L4K4paBJyQKaGVsbAooIlwK4paBbmluZQriloFGYWMKdWxwdApqb3VycwriloFDb3B5CuKWgWFjdGl2aXRpZXMK4paBRGVtb2NyCkVzClN1Y2Nlc3MK4paBRXN0YQppdHVsCmlzdGkK4paBQmVkCmphcwriloHRgtC10LwK4paBSHVuZwpHYW1lCuKWgWhlYXYKb25uw6llcwriloFicmFuY2hlcwpib3JnCuKWgXZsCuKWgXNsb3dseQpGYQpHb29nbGUKZW1pCuKWgWNpcmN1bXN0YW5jZXMK4paBJyUK4paBVW5kCuKWgVZpY3RvcmlhCuKWgVR5cApydXB0ZWQK4paBcmVsYXRpdgriloFzbG8K4paBcGFkcmUK4paBZGFpbHkK4paBb3J0aArRh9C90LjQuQriloFmcmFuesO2cwriloF0ZWlsCuKWgVNlY3VyaXR5Cm9yZG9uCuKWgXN3ZWV0ClNJWkUK4paBQ2VsCsOodHJlcwpvbW1lcwriloHRgdGWCuKWgWVmZm9ydHMKxIV6CuKWgW9obmUK4paBU291dGhlcm4K4paBYXBwcm94aW1hdGVseQrRhtC10L0KKCcjCuKWgXNhdmluZwpuYnNwCuKWgXRyYW5zbGF0ZQriloHDjm4KbWVtYmVyCuKWgWxhd3MK4paB0LbQtdC9CuKWgdGB0LjRgdGC0LUKdGMKPlwKZWx0ZQriloFlaGVtCuKWgWNvbnRyYWQK4paB0YDRg9GBCtGM0Y8K4paBTWlkZGxlCnF1aXAK4paBY2hlegpGaWVsZHMK4paBcGVybWl0CmlrZWwK4paBd2lyCuKWgXRyaWFsCuKWgXZlcnNjaGllZAriloHRhNC10LIK4paBbWFsZQriloHRj9C30YsK4paBbnllbApha3RlcgriloFkZW5vbWluCmNlcHRvcgriloFXYXQK4paBZmlubwriloFYVklJSQpyeXB0aW9uCmRlc2MKYXBhCtC70LXQvdCwCuKWgWtvbAriloHQhAriloFkZXBlbmRlbnQK4paBQ3JhCuKWgXN0b3JtCuKWgdCT0LXRgAriloFwaXBlCuKWgWF0dGVuZGVkCuKWgXZpdGEKdXppb25lCmN6YXMKb25kYQriloFib2xkCkNvbHVtbnMKaWNpw7MK4paBY3rEmQriloHQuNC30LLQtdGB0YIK4paBQ2xvdWQK4paBd2FybQriloHRgdGLCuKWgdGB0YLQtQriloFwcm9kdWNlcgriloFMdWR3aWcK4paBTm9ydGhlcm4KxYLEhQpOU1N0cmluZwriloFIYWQK4paB0JjQstCw0L0K4paBRWcK4paBSW1wCtGI0ZYK4paBQXVjaArRgtC+0LoK4paBSGl0CuKWgXF1aWVuCuKWgWRlcGFydG1lbnQK4paBZXJoaWVsdAriloF1aQriloFTcHIK0YHQtdGACm91cnQK4paBU3RlcGhlbgp0ZWFtCuKWgXppcAriloFCYW5nCuKWgWdyb3d0aAriloFqYW0K4paBS2FpcwpibWF0cml4CuKWgUFzaWEK4paBcsOpZ2lvbgo9LwriloFQYWNpZmljCuKWgWF1dGhvcml0eQriloEjWwrRgtCw0LzQuAriloFldmVyeW9uZQriloFhdHRlbmQK4paBdGltZXN0YW1wCuKWgXRyaWVzCuKWgWZmCtGI0LXQuQriloFkZXZlbG9waW5nCm9sdAp1cHMK4paBbW9tZW50bwriloFTYWluClRlcm0K4paBY2VsbGUKR1IKTW91c2UK4paB0YfQtdC70L7QstC10LoK4paBQ29sbGVjdGlvbgrDonRyZQriloFXcml0ZQriloFQb20KWy0KQ2FtCuKWgWxvY2F0aW9ucwriloFKc29uCmVsbGVkCnNlbGVjdG9yCnJlcGVhdApjdG9ycwpvdHRlCtCy0LjQt9C4CsOkbmRlCuKWgWFjaGlldmVkCuKWgW1haW5seQpfX19fX19fXwohKQriloHRj9Cy0LvRj9C10YLRgdGPCuKWgWNpdGllcwpzaW5nbGUK0LPRgNC1CuKWgVBhawriloFhbGxvd2luZwpmZXJyZWQK4paB0LDQv9GA0LUK0YXQvtC00Y8K4paBYnJvd3NlcnMK4paBZXNjcml0CuKWgW1vdW50YWluCuKWgW5ldHdvcmtzCmtpbmQKbGl2ZXIK4paBY2xvc2luZwriloFza2lwCsO6dAriloFkdXJhdGlvbgrDqXRhaXQK4paBc2NyCkJCCsOzcmlhCuKWgUt1bHR1cgriloFvdXRwdXRzCm11bHRpY29sdW1uCuKWgWJlbG9uZ3MKZmVhdHVyZQp1Y2t5CuKWgWp1bGkK4paB0YDQsNC50L7QvdCwCtC30LLQvgpmYWN0b3J5CkZ1bmMK4paBdXR0ZXIK4paBVE9ETwriloFvYnQKYXRlZ29yaWVzCuKWgWNvbWJpbmUK4paBV2FsbAriloF1bmRlcmx5aW5nCmFyb25vCuKWgVByb3RlCmPDs3cKc3RhbgriloFHZXcK4paBb3B0aW1hbAriloFBcmNoaXZsaW5rCuKWgVNjcmlwdAriloFkZXN0cm95ZWQK0YXQtQriloFGaXJlZm94CuKWgXNvbGUKTGF5ZXIK0YLQutGDCuKWgXN0b3JlcwriloFkaXNwbGF5cwppc2hpbmcK4paB0L7RgdGCCuKWgWluc3RhbnQK4paBZWzFkQriloFoYWJpdGFudGVzCuKWgUVpbndvCuKWgWFsaQriloFFUlJPUgriloFhaGVhZAriloFnb2FscwriloFtw6FyCuKWgXPEhQriloFtYXJ0CtC80LjQvdC40YHRgtGA0LAKRnIK4paBVmlsbGEK4paBTWFyYwpyb3B5CmFncmFtCmhhcGUK0LzQtdC5CuKWgUFMCuKWgWNvbm5leGVzCuKWgUVudHJlClN0ZXAK0LvRltCyCuKWgURlYXRoCuKWgXJpc2UK4paBZm9zCuKWgWxldgpnYWJlCuKWgWJyb2tlCnByb2R1Y3RzCuKWgW1lZGkK4paBZGlzcG9uClBhY2thZ2UKSW1hZ2VWaWV3CuKWgU5hZwp1asSFCldvcmQK4paBa29sZQrDn2VyCilgLgriloFyb2wK4paBw60K0YLQtdC5ClByb2dyZXNzCmJlYW4K4paBc2VtcHJlClN0YXRlbWVudApVUERBVEUK4paBbW9uZGlhbGUK4paBd3JhcHBlcgriloFDaGFydAriloFvbkNsaWNrCtGH0LXQvdC90Y8KTE9HCnNvbWV0aGluZwriloFJTlNFUlQK0YnQtdC90LjRjwp1ZXQKd2VycApyb3VuZAppY2hlbgriloFYVkkK0LfQvdC4CuKWgWF2ZXZhCuKWgVN0b3JlCuKWgXhzCnJhY2h0CnNjYXIK4paBb3BlcmEK4paBZGVncmVlcwriloFjaXRpegrDpHNpZGVudAriloFjbGFzc2ljYWwK4paBSmVyc2V5CuKWgWVyc2NoCuKWgXRyZWF0bWVudAriloHQvdCw0YHQtdGZ0LUK0L3QvdGPCuKWgWJvb3N0CmFtb3VudAriloHRgdC+0LfQtNCwCsOpcmlldXIK4paBdGVsbGluZwpIYXMK4paBaW5pdGkK4paB0J/QuApldmFsCuKWgU1hdGNoCuKWgWNvcnJlClBvaW50ZXIK4paBcGFzc2VzCmNvbXBhbnkK4paB0LDQvQphY2hlcwriloFzaWdsbwrQvdC10LwK4paBZXhjaGFuZ2UKY2l0bwriloFCYWIKRG9jCnplxZsK4paB0L3QsNGA0L7QtAriloFjb25mbGljdAriloFub3ZlbWJlcgplYXUKw7Z2CuKWgUh1YgriloFwb2NvCmVuc2EKc2NobGllw58KbGFzc2UKZGF0YXMK4paB0YHRgtC4CnVuaXZlcnMKZWtzCuKWgUNobwriloFjw7QK4paBKC4KZXduxJkK4paBQ2hpZWYK4paBY2hlZgriloHRg9C/0YDQsNCyCnVsaQriloEnJycKbmFwc2hvdAriloFyZWxhYwrDqWdlCnd0CndlbmQKb3NpbmcK4paBaGFjZXIK4paB0YTRgNCw0L0KYXV0cmVzCuKWgWZpbHMKZXJlZAriloHQn9C+0YHQuNC70LDQvdC90Y8K4paBdGhlcm0K0LXRgNC20LAKc3VjaAriloFpaHJlbgriloFlbmNvbnRyCuKWgWxvdHMKbG9nbwriloFXaQovKArRiNGa0LUKREFUQQriloFQbGF5ZXIK4paBTGVpcHppZwriloFyZWxhdGl2ZXMK0YDQtdCyCuKWgW5ld3NwCj8sCuKWgVN0dXR0CuKWgWR1YWwK4paBY29tcGFuaWVzCuKWgXphbQpwdXRhdGlvbgriloFpbmVxdWFsaXR5CuKWgXRyZW0KaGlwcwphbmNoCuKWgcW7CtCx0YPRgNCzCuKWgWNvcGllcwpkYXNoCtCy0L7RgApzcGllbGVyCuKWgVJldm9sdXRpb24KZXN0eQriloFqdW50bwriloFJbmRlZWQKb2thbApjdHJpbmUK4paBRm9yZAriloFDUkVBVEUK4paBd2FsbHMK4paBYXV0ZQpTVQp3aHkKcGxlbWVudGF0aW9uCnJvdXQKTWF0cml4CuKWgXNhZArQsNC90LAK4paBUGljCi7igJwK4paBQUMK4paBRmVzdAriloFkZXNrdG9wCuKWgVBheQpvbWV0aW1lcwriloFUYWsK0YDQsNCxCuKWgVNldmVyCuKWgW5vcnRoZXJuCmFudGVyCuKWgU1vZGVybgp3YWwKew0Kb25saW5lCsO2awriloFicml0YW5uCiRfCuKWgWphcgpUTAp4eHh4Cm1lcmdlCuKWgU5hbWVuCuKWgUtFWQriloFyZWZlcnMK4paBaGluCuKWgVZvbGtzCnN0ZWxsZXIKdmlhdGlvbgpvbmlvCmlnaHRlcgpDb21wYXQK4paBQ0UK4paBcHLDswriloFlbmN1ZW50cmEKdGhlb3JlbQriloFwdWJsaQriloFEZXZlbG9wbWVudArQvdC0CuKWgXJvcwriloFzaHIKc2VhdQriloFnZW5lcmF0aW5nCuKWgWRpZmZpY3VsdHkK4paBRXhwcmVzcwpBbGlnbm1lbnQKZGV1dHNjaAriloHQktC70LDQtNC4CuKWgXN1Z2dlc3RzCuKWgUZhbWlseQpiYmkKXSkuCnN0YXcK4paBcHJlc2lkZW50ZQriloFzdGVzc28KaW54CnNldHVwCuKWgWNvbmZvcm0K4paBZnJvCj1cIgriloFkw6UKaWNpb25lcwriloFldm9sdXRpb24KcHJvdGUK4paBcHJpbnRzCuKWgVBvbnQK4paBY29uZnVzaW9uCuKWgdCZCuKWgWRlbGxvCuKWgW1hbmlmCkRlZmluaXRpb24Kw6FyYQptYWxzCuKWgXNhbGUK4paBZHJvcGRvd24KQ2hhaW4KQW1lcmljYW4K4paBbWsK4paBQmV6CuKWgUZ1ZQriloFORQrQs9GA0LDRhNC4CmRvY2tlcgriloFeewpBc3NlcnQK4paBaG9yaXpvbnRhbAooQCIK4paB0LTQstGDCnByb3h5ClVyaQpnZW5jeQriloEiWwriloFRdAriloFOYW1lcwriloFldmFsdWF0ZQohLwriloFlaW5nZXMK4paBc3ludGgK4paBWW91VHViZQriloF0dXJuaW5nCuKWgUVyaWMK4paB0LHQu9C4CuKWgWtsdWIKcGxvcmVyCuKWgXNwb3J0cwriloFzaWEK0L7RiAriloFkYWkK4paBZXVyb3BlCmljaWFucwppbmdzb21yw6UK4paBZHJlCuKWgXdvcmthcm91bmQK4paBc3VpdAphbWJpZ3UK4paBcXVhbnRpdHkK4paBc2VndW5kbwpTeW1ib2wK4paBbW9yYWwKQ2hhcnQK4paBZGFtaXQK4paBYXR0ZW1wdHMK4paBZG9ubgpqb3MK4paBZXJlCuKWgWhvbW1lCnNpbXAKcnlwdGVkCuKWgWFjdHMKaW5uZXJIVE1MCuKWgXRvdXJuYW1lbnQK4paBc2t5ClRpbWVyCuKWgW1pbGxpb25zCl4rCmFnZW50CicpKTsK4paBb3N0CuKWgWdsYQriloHQv9C+0LzQvgriloFmw7xuCtGB0YLQstC+0LwKZXduxJl0cnoK4paBTcOpeGljbwriloFsdWIK4paBw4lkCmlmaWsK0YfQtdGB0LrQuNC5CuKWgWltbWVyCmVuc2VuCmFubnkKaW5saW5lCuKWgWdvdmVyCmF1YwriloFyZXByZQriloFoaXN0b3JpYQpBZwriloFwbHQK4paBUHJpbmNpCmltZXRlcgrFkXMKxaFlCuKWgVVFCkVxdWFscwpEaXNwYXRjaApsZWdlbgrQu9Cw0LfQuArRh9C90L7QuQriloFzdGVsbArFhHN0CuKWgWNyaQriloFJbmRlcArDqGRlCn1cKQriloF3eXN0CuKWgWZpZ3VyZWQKQVRDSArDqWJlbgpsYWNodAriloFzdWNjZWVkZWQKZ3J5CuKWgXByZXQK4paBU2FmCuKWgSIpOwplaAriloFvZmZpY2llbArQutGA0LDRl9C9CndpbmQK4paBc2NhdHRlcgriloFGb3gKaWNpb3VzCk1hbnkKdXBlcgriloFDb252ZXJ0CnN0ZXJkCuKWgVN0ZWluCuKWgdCe0YIKfV57KApiZXR3ZWVuCmhpcmUK4paBb25DcmVhdGUKOzwvCmJhYmx5ClNZCm1vdAriloFEaXJlCml0ZWN0dXJlCtGC0L7QuQriloFjb29yZGluYXRlCigiIwriloFzw7xkCk9CCuKWgW1vcnRlCuKWgXdlYXRoZXIK4paBaGVseQriloFwcml2aWxlClJFTEVBU0UKYXRlbAriloFyZWNvZ25pemVkCuKWgVRob3VnaArRgdGB0LjQuQptZW1vcnkK4paBY29tcGlsYXRpb24KYml0cwriloF3ZWQKfX1fewriloFHVUkK0L/QvdGPCuKWgXNvdXRoZXJuCuKWgWhheQpvdmnEhwpsYXVmCuKWgUVMCuKWgUZ1bGwK4paBSGFtYnVyZwriloFNaXR0ZWwKRFUKYXBwcm94CkhTCuKWgdC/0YDQvtGG0LUK4paBbWFnYXppbmUK4paBTWlnCuKWgWNsaWNraW5nCmVudHIK4paBYXV0cmUK4paBdMOpCuKWgWjDoQrRgdGC0YsK4paBTUEKYXBweQpzdHbDrQriloFzZWxvbgriloFnZWsK4paBU2wKZnJhc3RyCkxpYgriloHQlNGDCuKWgWZhY2luZwriloHRgdGC0LDRgAriloFEdXRjaAphdGFyCuKWgWtlZXBzCuKWgVBhdHJpY2sKaWxpbwriloF2aWcK0YLQstCwCuKWgUZlZGVyYWwK4paBcGFyYWdyYXBoCuKWgWludGVyYWN0aW9uCuKWgW9jY2FzCuKWgUlyYW4K4paBbWFjaGluZXMKKCgpCnVyaWVzCuKWgdGA0L7QtNC4CuKWgdCw0LzQtdGA0LjQutCw0L0KdXBwCuKWgWljZQriloFTYXkK4paBc2FpbAriloFCZWdpbgpmaWNvCm9nYQriloFkZXNhcgriloFkdgriloHRgNCw0LTQuApvaGVuCmVyZWkKw6FuYWsK4paBZGFhcgppZmllcnMK4paBdGhlZQriloFieWxhCtCy0LDQu9CwCmFuZHJvCuKWgdC80L7Qu9C+CuKWgXRvdGFsbHkKaW9tCuKWgWFlcgpuc3lsdmFuCuKWgWNvcnBzCuKWgXRyZWF0ZWQK4paBY29tdW5lCk1pY2gKdm9pY2UKcGdmCuKWgWFueAriloFQaGlsaXAK4paBZWsK4paBTWVuc2NoZW4K4paBZGVyZQriloFwZXJtZXQKTWFpbAriloFWw6kKZW50ZWQK4paBYnVuY2gK4paBUGlldAphdHRhY2gK4paBcG9ydGUK0LTQsNGCCuKWgUJyaXRhaW4KRW5jb2RpbmcK4paBYDwKU3BhY2UK4paBcmFwCuKWgXBvcHVsCmZsb29yCnNwZWNpZmljCmNsZWFuCuKWgWNvbnF1CmZiCuKWgWludHJvZHVjZQriloFFbnRpdHkK4paBZXJmb2xnCmF0b2wKaWVudG9zCtC60LjQv9C10LTQuAriloFVdAriloHQsdGA0LgKZWR1bGVyCuKWgWNvbmNlbnRyCuKWgWNoZXIK4paBdXBncmFkZQriloFwaWN0dXJlcwriloFGYW1pbGllCk11cwpMb29rCuKWgWVyYW4K4paBZ3JhbQriloFXbwpucG0K4paBU2FsdgriloFjZAriloHQktGLCndhaGwKdHJhaW4KY2hlbQriloFQaWwK4paBQ29ubmVjdArEjWUK4paBaGFzdAriloFNdWx0aQphdHRhCuKWgVNvdW5kCnNvbHV0ZQriloFxdW90ZQriloFvYnN0CmNjaW9uZXMKaWJseQriloFicmFuZAriloFjb252ZXJzYXRpb24K4paBdG91dGVzCuKWgVJ1YgppZW5pYQppcml0CuKWgdCQ0L3QtAplZHVsZWQK4paBVG90YWwKRGlnCmVyZW0K4paBc2tpCkRlc3QKWVkK0LXQtNC4CmFseQriloFiYWNrZW5kCnVsdXMK4paBZmVhdHVyZWQK4paBcGVyc29ubgriloFzY2hvbgp0cmFjZQriloFJREUKw6FqCuKWgWFuaW1hbHMK4paBc25vdwp1dmUKdWVydG8K4paBZHJldwriloFZZWFoCuKWgVN2ClwsXAriloFTZXJpZQriloFzZWNvbmRvCuKWgUxlYmVucwriloFhY2NvcmQK4paBQ2V0CmVyYWRlCuKWgWRlc3BpdGUK4paBQ2FybG8K4paBemV3bsSZdHJ6CuKWgWxpc3RhCm5pY28K4paBQ29ycG9yYXRpb24KdnNwYWNlCuKWgdCy0L7QudC90YsK4paBc3RhbmRzCuKWgXdvcnNlCuKWgXNpbXVsdAriloFwcmFjdGljYWwKQ09MCmNoYW5nZWQK4paB0JjRgdGC0L7RgNC40Y8K0LHRgNC4CmluZG8K4paBTGV3aXMK4paBcGF0dGVybnMKaWZpY2EK4paBc21hcnQK4paBY29uY2VybmVkCsibaWkK4paBSGVsbG8KcmVsbAriloFMZXgK4paB0LLRgtC+CuKWgWNvbmRpdGlvbmFsCm90dGVkCuKWgXNob290CuKWgVdlZAriloHQvNCw0YDRgtCwCmF1ZAriloFhbnRlCmllbnRyYXMK4paBcGFwZXJzCuKWgXBvcnR1ZwriloFNYW5hZ2VtZW50CuKWgWV4ZXJjaXNlCuKWgUJlZ3JpZmYKY29tbWl0CuKWgXJlbmRlcmluZwriloFjemFzCkRyb3AKZXJnCuKWgW11bAriloFUYW4KaWVybwriloFsb2NhbGUK4paBaW5hdWcKZHVtcArRhtC40LkK4paBc3ltYm9scwppbnRhCuKWgWF3YXJkZWQK4paBc3VzdAriloFTZW5kCtGX0LIKUmVzdAp6dGVuCtC70LjQvApyaXZhbApQT1JUCsO2bGtlcgppbWF0ZWx5CmlndGUK0YfQvdGL0YUK4paBdGVycmEKw7ZnbGljaAriloFIb20K4paBaGV4CmRvbmUKYW1wcwriloFjZXQKUFJFCsO2c3QK4paBZmVtbWUKU2VsZWN0aW9uCuKWgXphdwpzcHIK4paBaG9yc2VzCuKWgXNuYXAKVGV4dEJveAriloFFY2xpcHNlCnVsbGUKb3d5bQriloFjb21lcgpuZWNlc3MKY29vawplbmdlcgotLT4K4paBcMWZw60KcGFuZGFzCuKWgVBsdXMKeWxsCuKWgXRlcnJvcgriloFjcmltCuKWgXphawppc3N1ZQpwYW5lbApzdmcK4paBcmViCkN1c3RvbWVyCnN3aXRjaArQvtCx0YDQsAriloFDaGFtcGlvbnNoaXBzCmNsbwphdHRlCuKWgWFueW1vcmUK4paBZXhjZWxsZW50CuKWgW9wcG9ydHVuaXR5CuKWgUJhaG4K0YfQuNC9CmV0aW5nCuKWgWluY2lkZW50CnRvbQpQZXJzCmJiZW4K0YHRgtCy0LXQvdC90L7QuQrQuNGFCnJvdXRlcgriloFuZXdseQriloFzaWxlbmNlCuKWgUdOVQriloFSYWlscwriloFBbWIK4paBUXVhbAriloFTY2hhdXMK4paBU29obgriloFBTEwK4paBcm95YWwK4paBwqMKd2nEmQriloFlbnRmZXIK4paBUmVtb3ZlCuKWgWhhcmRseQpVc2luZwrQu9C+0LMK4paBSWNoCuKWgWRlcm5pCuKWgUNvbm5lY3Rpb24KZmlzaAriloFJbmZvcm0K4paBRW5lcgpyb2l0CkJiYgpWaWV3TW9kZWwKVmlkZW8KaWxleQriloHQvNC90L7Qs9C+CuKWgUdlbQriloFjb21wcmVoCmVudW1lcmF0ZQp1bGFzCuKWgUJhaAriloFZZXQKQlIK0YXRgNCwCuKWgWNvdW50eQriloFIaXN0CuKWgdCT0YMK4paB0IgK4paBbWFyaQriloFDbGFyCkJpdG1hcAriloFDegriloFtw6VuCuKWgW1lcmUK4paBbXVzaXF1ZQphbHNvCmRhdGVzCuKWgURWRAriloFnb2wKZm9ueQriloFDYXN0bGUK4paB0YTQsNC80LgK4paBYXJyYW5nCuKWgUJ1c2luZXNzCuKWgUthegriloFvc2MK4paBc2Vjb2xvCuKWgWFmZmVjdGVkCuKWgUhlYWx0aApyZWIKZWRpdG9yCuKWgW93bmVkCnRsCuKWgXbDrQrRh9C90LjRhQrQutCy0LgK4paBZGV2aWVudApNdXRhYmxlCuKWgXRlZ2VuClJlZ2lzdGVyCtGU0Y4K4paBY2FyYWN0ZXIK0LvQu9C4CuKWgW5vdXZlbGxlCm9rbwppY2h0ZXQK4paBZXZvbAriloFIYWIK4paBbWlsaXRhcgriloFwdXRzCmVuZGlmCuKWgURhdmlzCuKWgVNjb3RsYW5kCnJlZ3VsYXIK4paBQ29udGV4dAppc3BpZWwK4paBR2FsbGVyeQoiLA0K4paBYXJjCuKWgUlORk8K4paBY29kCtC00ZbQsgriloF2YXJjaGFyCuKWgXRvdWpvdXJzCmF0aWFsCuKWgWhhbm5vCuKWgdC/0YDQvtGE0LXRgQriloFsYXVuY2hlZAriloHQvdCw0YHQtdC70LXQvdC90Y8K4paBdG9uCmF1c2VkCuKWgdGW0LcK4paBdMO2CuKWgVB1cgriloFvbHltcApBUk4Kw7NtCuKWgWF1Z3VzdAriloFmdXJuCuKWgUNvbG9tYgriloFTdGFhdHMKaG9yYQriloHQvNC+0YAKY2FudmFzCuKWgWdyYXZlCuKWgWNvbXBvc2l0aW9uCmFjamEK4paB0LrQvtGC0L7RgNGL0LUK4paB0YfQvgpHZW5lcmFsCtCw0L3RlgriloFKb2hhbm5lcwrQutCw0YAK4paB0YfQsNGB0YIK4paB0JLQsNGB0LgKc3NoCuKWgXJlcGxhY2luZwriloE8PgrRhtGW0LIKbGF1cwplbnkKw6RobAriloFtYXJnCmNpZW5jZQriloFpbnN0cnVjdGlvbgriloHQutC+0ZjQuApFZGl0b3IK4paBZnVuZGFtZW50YWwKbXVuZAriloFleGNlcHRpb25zCuKWgXBsYXRlCuKWgUxpcwriloFkZXJlbgpwcmVwCuKWgWphbnVhcmkKU2NvcGUKeW5hc3QKcnYKb3JzegriloFUb255CuKWgdC00ZYK4paB0L7QtNC90LAK4paBc2FiCm90aQpqZWwK4paBZ2VuZXJhdG9yCuKWgScuCuKWgXNoYXJwCuKWgdGC0L7Qu9GM0LrQvgriloFhY2NvdW50cwriloHFvmUK4paBZm9yYW0K4paBZ291dmVybgpUSU1FCuKWgVNvdmlldAriloFHw6kK4paBZXhwZWQK4paBb3JkaW5hcnkK4paBQ29uc2VydgriloFjb21wbGEKdGVpCuKWgWNhcHRhaW4K4paBU2FtdWVsCuKWgURhcmsK4paB0LLRltC9CuKWgWRlbGlnaHQKcmVjaHQKZGlhCmVzc2VzCnVscArRiNC60LgKYmV6CuKWgWRldGVjdGlvbgriloFjb29raWUKYW50cnkKTXVsdGkKb2JhCuKWgWpveQriloFzYWZldHkKfF4KcG9kCmFkw6ltCuKWgUNocm9uCuKWgURqYW5nbwriloFlaGVtYWwKa2gKw6hsZQriloFwb2MKQm90dG9tCmxhdW5jaApuZW0K4paBR1JPVVAKbsOtaG8K4paBR2liCnNkawpCRQriloFHZW5lCuKWgVN0YWZmCuKWgXN1YnNlcXVlbnQKaWNpb24K4paBdmljdG9yeQriloFjYW5vbgppemFyCml6aWEK4paBbWF0ZQriloFsYXllcnMKc3VkbwpzY2h1bGUKcGVyaW1lbnQKw7xsZXQKQVJDSEFSCuKWgdGC0LXRgNGA0LjRgtC+CuKWgW1lYXN1cmVzCuKWgXpvdQpvcHNpcwrQvdCw0LzQuAp0Ym9keQriloFlc2UKc3RlcmRhbQriloFwaG90bwp5bmNocm9ub3VzCnNldG1pbnVzCuKWgWxvYWRzCuKWgXBsZWFzdXJlCuKWgW1laWxsZQp9XCwKcXVhbAriloFmYXZvdXIK4paBcm9kCkRlcgrRgNCw0LHQvgriloFwcmVzc2VkCnLEmQppZXZpbmcKbWF0ZXJpYWwKdmlydAriloFjYXBhYmxlCtGB0LvQvgp1c2hlZAriloHQv9C+0LHQtQp1c2V0dHMKdW5zaWduZWQKa8OzdwriloFvdgplZ2ViZW4K4paBYXBwbHlpbmcK4paBZ2FsYXgK4paBT3JhY2xlCuKWgVN0dXR0Z2FydApJbmZsCmFjaHVzZXR0cwriloFkZWVsCmxpcmUK4paBc3RhdHVuaXQK4paBUG9saXRpa2VyCuKWgWJlYXV0eQopPgriloFDb2x1bWJpYQriloF6ZXduxJl0cnpuZQriloHQv9GA0L7Qs9GA0LAK4paBZHgKY2tub3cK4paBZHViCnVuw6RjaHN0CmZpbmRWaWV3QnlJZAriloFNYW5kCsOhbGwKbmFpcmUK4paBZGVzdGluCmlzdGluZwphZ2dpCmNoYXJ0CuKWgWp1c3RpY2UKU2ltcGxlCuKWgXVuZm9ydHVuYXRlbHkK0ZbRgAriloFxdWVzdGEK4paBR292ZXJub3IK0Y/QsgriloFtw7pzaWNhCuKWgWVxdWlwbwriloFEZXN0CmVsZWN0ClN0YWNrVHJhY2UK0LfQvtC8CnByb2MKZW50aW4KYWRvcmEK4paB0JvRjgriloFyZWdpc3RlcmVkCkhMCmZhY2Vib29rCuKWgXN0b3JpbmcK4paBQ3VycmVudGx5CuKWgXF1YWRyClN0YW5kYXJkCnRyaW0KZWFycwpzZW5kZXIK4paBVmFzCuKWgWVkaWZpYwriloFCw7xyCuKWgUNvdW50cnkKdGhhCjsiCm5vcgriloFEb2N0b3IKcnVtZW50CkdlbgriloFCdWVuCnJhZGUK4paBa3VuCm5hdmlnYXRpb24KUGF5CuKWgWNhcHR1cmVkCuKWgXN0cnVjawp2ZW5pcgrDqW1lbnQK4paBVHJlZQriloF4eAriloFuYXJyCtC70YzQvdC+0LPQvgriloFpbnN0YWxsaW5nCuKWgWFzc29jaWF0aW9uCuKWgWluc2VydGVkCmVybmVyCnZhbGlkYXRlCuKWgWx1dAriloFnbG8K4paBdGVjaG5vbG9neQriloFQbGFjZQokPwriloF6dgrRgdC70ZYKRVAK4paBYXRtb3MKdWdvCsOpcnQK4paBV2VyawriloElfQp0ZWxlClNwYW4K4paBUmFqCuKWgVBlcnNvbmVuCuKWgUNhbnQK4paBY29tYmF0CuKWgW9ic2VydmF0aW9uCnBhcmFtZXRlcgriloFhZ3JlZWQKcHVyCuKWgXNoYWRvdwriloFnxYIKS2V5cwpDcmVkCm91cmkK4paBcGFsZQppY2vDqQriloFXZWVrCuKWgVByaW1lCj4uCkluaXRpYWwK4paB0L7QtNC40L0K4paBJycsCuKWgdGD0YfQuAriloFJbnYKY29sYQpjaWJsZQriloFUaGVhdHJlCuKWgWJlbQriloFzYXRpc2Z5CnhsCuKWgdGA0LDQt9Cy0LgK4paBcGl4ZWwKbMOhbgriloF0d2VlCsOnb24K0L3QtdC90LjRjwriloFBVArDqGdlCuKWgU1vcnQK4paBbXlzcQpmdGVuCuKWgdC/0LXRgQrDqW1hCuKWgVNlcnZpY2VzCmN1c3RvbWVyCuKWgUFXUwrRitGCCuKWgUFjaAolLgriloFjbGFyaWZ5CuKWgdGD0L3QuNCy0LXRgNGB0LjRgtC1Cnh0dXJlCnVtaQriloFzw6UK4paBUGVsCnNlcmlhbApVUkkK4paBcmcK4paB0YHQvtGB0YLQsApjaGVzdHJhCl0uWwp3ZW4K4paBTG9uZHJlcwriloFhbnlzCkRhdGFTb3VyY2UK4paB0YDQsNC50L7QvdC1CuKWgXJlaW4K4paBbWV0YWRhdGEKdW1ibGUKYXJiZWl0CmhuZXIKY2llbnQK4paBbm9ydGUK4paB0L7QvdCwCuKWgXNjb3JlZAriloFyYXkK4paB0YTQtdCy0YDQsAriloFwcm90YWdvbgriloFTYWMK4paBY29tbW9ubHkKTGluZWFyTGF5b3V0CuKWgWFwcGxpYwriloHQvNCw0Y8K0JfQsAriloFhY2Nlc3NpYmxlCmlld2VyCmZsYWcK4paBUsO8Y2sKw6R1CuKWgWVyYW5vCuKWgWF1dGhlbnRpYwriloFSeQriloHQvdC10YHQutC+CuKWgWVtYmFyZ28K4paBZHJ5CuKWgXJlYXNvbmFibGUK4paBTW9kdWxlCuKWgWFjY2VsZXIK4paBaW50ZXJ2aWV3CuKWgUNyZWVrCuKWgWFscGhhCnNlcmllClRoZXkK0Y7Rh9C4CuKWgUhvZgriloFDUgptb2RhbAriloFzZXF1ZW5jZXMKY2xvc2VkCil9JAriloHQp9C10YAK4paBT1JERVIKUmlnaHRhcnJvdwpoYXVzZW4KfX1fCuKWgXRhbWLDqQriloFtYWduZXRpYwriloFNY0MK4paBd2lubmluZwp1bmRlcmxpbmUK4paBQmlsbGJvYXJkCm5haW8K4paBbGlxdQpkaXNwbGF5c3R5bGUKdGltZW91dAriloFjb25zaWRlcmFibGUK4paBZWJlbgppZmZlcmVudAphbnUK4paB0KHQvtCyClsoCuKWgTotKQpsZWl0dW5nCmZvcm1lZAriloFNYW5hZ2VyCuKWgW9uY2xpY2sKVFkK0YLQsNGFCkNWCnJ1bnRpbWUKcG9xdWUK4paB0JvQvgpUZW1wCmxvYWRlZAriloEhPT0K4paBc2luZ2VyCmZhcgriloFDb21wbGUK4paBw5ZzdGVycmVpY2gKUG9saWN5CuKWgXdvcmtlcgpXcmFwcGVyCm9iaQriloFkaXNjdXNzZWQK4paBYnV5CuKWgdGP0L3QstCw0YDRjwriloFEaW4K4paBZ2VkCtGB0LrQvtGYCkV1cm9wZQriloF0YWxsCmhvcwrQu9Cw0LPQvgriloFCbG9jawriloFpZGVudGlmaWVkCkxpc3RWaWV3CuKWgWF0dGVtcHRpbmcK4paBdHlwaWNhbApwc3VtCm9zdGVyCuKWgdC20YPRgNC90LAKUGUKbWVyY2UK4paBdW5leHBlY3RlZApodWkKbGV0dGVyCuKWgW51ZXZvCuKWgdCw0LHQvgriloFWQUxVRVMK4paBSXoKRmxhZ3MK4paBVFJVRQppemFjacOzbgriloFncm93aW5nCmVzdHJlCuKWgXBvbHkK4paBU3RvbmUK4paBVklJSQriloFsb2NhbGhvc3QKw6RobHQK4paBZW1iZWRkZWQKamRiYwriloFjb252ZW50aW9uCuKWgXNjYWxhCtGB0L7QugriloFhbmFsb2cK4paBIisK0YbRjgpvY2MK4paBbGl0dApQTgriloHQsNC60YLQuNCyCmF0dHJpYnV0ZXMK4paBRmVyZAriloFhenVyZQrImXRpCsOxb3MKcGluZwriloF0ZWFjaGVyCn0mCmlwZQriloFOb2IK4paB0LjQvNCwCkJpbmQK4paBbWFnaWMK4paBVHJhbnNwb3J0Cml4ZWwK4paBY29tcHV0ZWQKYWduYQplcnN0CkhBCldhaXQK4paBYXV0aG9ycwriloE7KQpjbGFtCuKWgVBlbm5zeWx2YW4K4paBZHJ1ZwriloF2YWluCuKWgWVtcGxveWVkCuKWgWluZGl2aWR1YWxzCuKWgWFuZ2UKdXRhdAriloEkLQpjb3JyZWN0CuKWgWV4cGVyaW1lbnRzCkFyZ3VtZW50CuKWgUlCCuKWgXDDqHJlCuKWgUJyaWFuCmJlcmdlcgpNYWMKaWFzdApQZXJtCkNhc3QK4paBe307CuKWgVN0dWRlbnQK4paBc3RhdHQKYWxnZWJyYQriloFlcXVhbHMK4paBcHJvamV0CuKWgXByw6lzaWRlbnQKQWN0aXZpdHlUaHJlYWQK4paBZWluegplbmlhCnJlegplc3Npb25hbAriloHQsNCy0LPRg9GB0YLQsApvdmVycmlkZQpuZXdzCuKWgXBsYW5ldApubgriloFXaXMK0YLQstC10YAK4paBVmFsaWQK4paBR2VmCtCz0YDQsNC0CuKWgWVpZwphbnRvbQriloFNZWlzdGVyCmZsYWdzCmZmaWNpYWxlCtGI0LDRjwotLAphdGlvbmVuCm1vdXNlCnN0YW5kYXJkClNpbmdsZQriloFib2wKaXNpcwriloFmcnVpdApjb3Vyc2UKaXRhbnRzCuKWgcOpdGFpZW50ClRleHRGaWVsZAriloHRhNC+0L0K4paBYWlyY3JhZnQK4paBSVNTTgriloF3ZXN0ZXJuCuKWgXJlcHJlc2VudGluZwpFc3AK4paBRWxzZQriloFzaXplcwriloFzYXRpc2ZpZWQKb3RvcwpVRApGaW5hbArDs2oKw6h2ZQriloFSb3kKZmZlbgriloFzYWx0CuKWgUxhYmVsClNrCuKWgdC60YDQtQriloHQm9C40YLQtdGA0LDRgtGD0YDQsAriloHRgdC8CkF0dHJpYnV0ZXMKYXllCtGB0YzQugriloHQstGL0YHQvgotKQpvc2VzCmNhbGN1bAriloFDYW5ub3QKR2VuZXJpYwplbW8K4paBQXV0b3IK0LvRkdC9CtC70LDQs9CwCnZvdGUKbGljYXRlcwpydXMKw6lsaQpvcGYKYXRpcXVlCnNjYWxhCuKWgU9oaW8K4paBQnJpdGFubgriloFiZWYK4paB0JXQstGA0L4K4paBQ2FyZWVyCmlzw6llCsOzdApib3NlCuKWgdCR0LXRgAriloFDb250cm9sbGVyCnBvbGUK4paBYWxsZW4K4paBaGFjawriloFleHRlbnQK4paBY2FsY2kKTWVyCuKWgXN1bW1hcnkKTWFydAriloFoaXN0b3JpY2FsCmltYXQKYnVkCuKWgUZPUgpleHBvcnQKZWRpCk1hcHBpbmcK4paBQXkK4paBUnVieQriloFkZWZpbml0aW9ucwriloF7JAriloF5b3VycwpyaWFzClRvdWNoCuKWgUdhegriloFBdXRvbQriloHQuNGB0YLQvtGA0LgK4paBZGVsZW4K4paBS2luZGVyCn19JQriloFwZXJmb3JtaW5nCkZSCuKWgVNpZwriloFCcmFkCmJyYXMK4paBSmFyCnBrZwp3cgriloFQYXlzCk5DCuKWgW9wcG9zZWQKVHJ5CuKWgdCy0LXQt9C1CuKWgUJvZwriloF3cml0ZXMK4paBc3RvcmllcwriloFtYXRlcgriloFzdGFnaW9uZQriloFzdHkK4paBY29tcGF0aWJsZQpoZWFzdAriloFHdXkKZWdyw7xuZAriloFpZGVudGlmaWVyCuKWgWhlYWRzCtC/0L7Qt9C4CuKWgXN0dXAK4paBdGYK4paB0ZjQvtGICuKWgUh1Z2gK4paBY2FyZHMKb3Z5CuKWgVRvYXN0CmFsbGFzCuKWgXDDumJsaWMK4paBYXNzdW1lcwriloHRh9C10LzQv9C40L7QvdCwCnljbGVyCuKWgUp1bmlvcgriloFGaWNoCuKWgWVzdGltYXRlZAp6ZXJ3CmRpYWxvZwrRiNC40L0Kc2hlbGwK4paB0L3QuNGFCuKWgXBpdGNoCtC00L7QuwpvdXR1YmUK4paBU2FudGkKT25DbGlja0xpc3RlbmVyCuKWgU1hZ3lhcgriloF2dWUKacOjbwriloFgIwpjb2xsZWN0CuKWgVJvdQphbmFseXNpcwppc3Ryem9zdAriloFEaWdpdGFsCuKWgWNyaXN0CnJpZXJlCuKWgWNhbXBvClVzCuKWgWNpcmNhCuKWgUNvbXBvbmVudAriloFOU1N0cmluZwpwZAriloFwcmluY2UK4paBaW52b2tlCuKWgU1hcmluZQpBbGxvdwplc3RpYwrRgNC40YHRgtC4CmJvbmUK0YLRg9GA0YsK4paBcGFzc2lvbgrDoWNpw7MK4paBb3JuCtCy0LXQtAriloFpbnZhcmkK4paB0L3RlgpSZW1vdmUKZW5jaWVzCmlsaWIK4paBRGlyZWN0b3IKIiIK4paBQ29uc2UKZ29vZ2xlYXBpcwrDs2sK4paB0KPQutGA0LAK4paBSGF2aW5nCkRvbWFpbgppZXJ6CtC90L7Qu9C+0LPQuApDaG8KdW5kZWZpbmVkCmFsbG9jCuKWgXBpZWQK4paBZnJhY3Rpb24KYmlhCuKWgdC/0L7Qu9C+CnVnbm8KbWluaXN0ZXIK4paBcHJpbmNpcGFsZQriloFyZWZ1c2VkCmJyb3dzZXIKKiwK4paBSG9zcGl0YWwK4paBdW5pdmVyc2FsCuKWgUVybnN0CndobwriloFHYXJkCidfCmNvbmRlCuKWgVt7CnNvYgriloFDcml0CuKWgdC00LXQutCw0LHRgNGPCuKWgXB1bnRvCuKWgWVpbmdlc2V0enQK4paBdMO2cgriloFOaQriloF3b3JyeQriloFsZWdlbmQK4paB0LHRg9C70LgK4paBa29tbQpyaWprCmVmZmVjdApPcmkKUkVTCuKWgVBldGVycwriloFCYXJvbgriloFHb3QK4paBaG9uZXN0CsOkcmUKw6FzegriloFub2JsZQriloFjb25jbHVzaW9uCuKWgWZvcm1hdHRpbmcK4paBb3R0bwriloFkZWxlZwrQvNCxCnB0b3AK4paBc2VuZHMKdXJuYW1lCuKWgWZlc3RpdmFsCizigI4K0YDRg9GBCuKWgWRvY2gKc3ViamVjdAriloFjYXJlZnVsCnF1ZW50CuKWgUxvYWQKdGVtcGVyYXR1cmVuCuKWgXJ1ZQpNZW1vcnkKyJthCmlvbmEK4paBZGVudHJvCuKWgWJlZ2FubgriloFBcXUK4paBc2NpZW50aWZpYwprYcWECtC70L7QugplbGRlCuKWgVRob3NlCnF1aWVyCmFjdMOpcgriloFBdWZsYWdlCiknCuKWgWdyYWRpZW50CmludGVnZXIK4paBSW1wb3J0ClNLCuKWgVN0YXR1cwriloFleHBsbwpBRQpTaGVsbAriloFQYXVsbwouwrsKfTwvCmZsZXgK4paB0LrQvtC80L8Kb25kZW4KYWNjZXB0CuKWgW1pZWpzY2UKSHViCmFsbGVuZwpXTgriloFpbXBsZW1lbnRpbmcK4paB0LvRgwriloFjb25mdXNpbmcK4paBSW5zdGFsbAriloFyb3UK4paB0L/RgNC+0LXQugpBY2Nlc3NvcgrRmdCw0YjRmtC1Cm9kaW8K4paBYXBwbGllcwrRjtGJ0LjQuQriloFNdW5kaWFsCsOJdGF0CmlldG5hbQpodW0K4paB0YHQsdC+0YAKb3JkaW5hdGUKRnJhbmNlCuKWgXByZW5kCmVsdGVtcGVyYXR1cmVuCuKWgXRyYWJhagpBeGlzCuKWgdC80L3QvgpwcmltYXJ5CuKWgVNlaXRlCnBlcm1pc3Npb24K4paBb3JkZW4Kc2luY2UK4paBaWMK4paBQnJhemlsCuKWgWJhcmUK4paBTmFyCuKWgUp1cgriloFmcmVlZG9tCuKWgW1lZGljYWwKaXNjaG9mCuKWgdGB0L8KaWXFvAriloFib290c3RyYXAK4paB4oCmCuKWgWZhY2lsCmNvcmQK0LLQsNC90LUK4paBQWxsZW4KYXZpZAppbmdoYW0KemFzCuKWgWluc3BlY3QKaXR0ZW4Kb3N0aQp1aApjw6kK4paBIyMjIyMKY2l1cwpvbXkK4paBU2VpbmUKYnJlcwriloFnZW51cwpPdGhlcgriloFHb2xkZW4KbXVsCuKWgdCh0L/QvtGZ0LDRiNGa0LUK4paBZ2VubmFpbwriloFjYXJlZnVsbHkKYWFsCuKWgWFuYWx5dApuZXVyCuKWgXN0cmV0Y2gK4paBT2NjCm9sYXMK4paBZmlyZWJhc2UK4paBZXhwZWN0aW5nCmJhc2ljCmNvbmRpdGlvbgpwcm92CuKWgVdhc3NlcgriloFjb25jYXRlbgriloFldmlsCuKWgWNvZWZmaWNpZW50cwpXZXN0CmlyeQpwaGFzCuKWgUphbQpmb2lzCuKWgWNvbnNpZAriloFtYWludGVuCm5pbQplc3Nlcgplc3oKdW50YQp1ZXN0CuKWgWNyZWRlbnRpYWxzCl87CkRpbQrQv9GA0LXQtNC1CuKWgULDvApidWlsdAriloFBY2FkZW0K4paBYXVkaQriloF0dsOlCmluYW5kCuKWgVRoZWF0ZXIK4paBZ2VucmUKw6dvcwpncmVzcWwK4paBd2VhcAriloFSYWIK4paB4oCZCuKWgWFkdWx0CuKWgWTDqW0KYGAK4paBc3RhYmlsCuKWgWNvcnJlc3BvbmRzCuKWgUVhc3Rlcm4KdW5uZWwKV29ya2VyCuKWgWNvaArQu9C60LAK4paBTWFzc2FjaHVzZXR0cwpwaW8K4paBcG9ydHMKYWdnCuKWgURlYnVnCuKWgWJyZWF0aApNSU4KVmFyaWFibGUKYmF0Y2gK0YHRgdC1CuKWgXByZWcK4paBcm9sZXMKcGFzdGUK4paBcmVmZXJlbmNlZAphZHJhdArRh9GRCmJpbm9tCuKWgWRlZmluaW5nCuKWgUJ1ZGFwZXN0CuKWgdC00LLQuAriloF0YXVnaHQK4paBaG9sZQriloFxdWVsbGEKTXNnCmFza2EKc2NhbgriloFwcm9wb3NlCuKWgdCR0LjQvtCz0YDQsNGE0LjRjwp7e1wKdGV4dHQK4paBQWxiCuKWgVN5ZG5leQriloFiYWNrdXAK4paBY3JlZGl0CuKWgdGE0YDQsNC90YbRgwpzdGF0cwpcIjoK4paB0J/QtdGA0LUK4paBYWNjb3JkaW5nbHkK4paBTGVuCnpuYQriloFSZWdpb25hbAriloHQuNC30LTQsAriloFqw7oKaGlzdG9yCuKWgWVudGl0aWVzClN0YXIK0L7QvdC1CiddWycK4paBTm92YQpkaWUK4paBYCcK4paBb2J0ZW4KYW5zdAriloFSZWxpZwriloF0cmlnCuKWgdGA0LXQttC4CuKWgVBlcnNvbmFsCuKWgXRvbmUK4paBYWlkClZpc3VhbApTdWJtaXQK4paBbW92ZXMK4paBQnJpZGdlCuKWgUJveQriloFhY2N1cmF0ZQpvc3RhCmF0dG8K4paBZGVmZWF0ZWQK4paBZGF0YWIKZ2lueAriloFMaXYKbHl3b29kClRXCnJpdW0KaXBwZWQKRmFpbApSRVFVRVNUCuKWgWlnbm9yCuKWgXNpdHRpbmcK4paBbW9sdG8K4paBZW5kcG9pbnQKdWNpw7NuCuKWgWNvbGxlY3Rpb25zCuKWgdCi0YMKdGVtYnJlCuKWgW7DqWNlc3MK4paBaW50ZXJhY3QK4paBb3RyYXMK4paBY3VycgriloF0cmFja3MK4paBZmFtw61saWEK4paBbnVtZXJpY2FsCmxlZ3QKXS8K4paBTWFyaW8K4paBdG9ydApiZwpzc2wKdGV4dHR0CuKWgXNwYXJrCtC00LjQuAriloFwcm9iYWJsZQolJSUlCnBoaWEKXSxbCuKWgWJveGVzCuKWgWFjYWRlbQriloFTbG8Kw6R1ZGUK4paBd2l0bmVzcwriloFlZGl0aW5nCtC70LjQvdCwCuKWgWxvb2t1cAriloFCdWNrCtC00L3RjwriloFqb3VycworKyl7CuKWgWluZGljZXMK4paBZmxpZ2h0CuKWgWNvbXB1dGF0aW9uClBsdWdpbgriloFyZWFsaXplCmlzc2V0CuKWgWRlcml2YXRpdmUKbGluZXdpZHRoCmJ1bmQK4paBdGhvcgriloEuPQriloFzw60K4paBQ2xpY2sK4paBU2ViYXN0Cj4nCmhhdmlvcgpsZWkKdWxmCuKWgWdlb21ldHJ5CnByZXYKZW1wbAriloFMw6kKYW5zb24K4paBQWxpY2UKcHJvdG90eXBlClJFQUQKaWN1bGFyCuKWgdCx0ZYK4paBZGV1dHNjaGUK4paBUmVwcmVzZW50CnNpdGVzCuKWgU1lYW4K4paBZGlzcwriloFadXIK4paB0L/RgNC10LcKUEFSCuKWgScjCuKWgURyYQrRgdC+0L0K4paBc3RlaHQKbWFya3QK4paBZWFzZQpEcmF3aW5nCj0lClN0b3AK4paBc2VydmluZwriloF0YWvFvGUK4paBRE5TCuKWgWxpdGVyYWwKRGllCuKWgdCy0L7RgQriloFzZW5pb3IKYWNpb24K4paBdWJ1bnR1CuKWgUZyYW5rZnVydAriloFTdW5kYXkKw6FiCuKWgWpvdXJuZXkKaXNzYQpiZXJyeQriloFzZXAK4paBaW9uCndlcnQKb3JzesOhZwpzZXJ2ZQriloFNaWxhbm8K4paB0LLQtdC60LAK0YDQsNGFCuKWgdC40Y7Qu9GPCuKWgW1hbmVyYQriloFzdGF0aW9ucwriloFhZG9wdGVkCuKWgWFueWJvZHkKVkVSU0lPTgpGRQpkb3JmCi4uLiwK4paB0L7QsdGA0LDQt9C+0LLQsApMb2dnZXIK0YTQuNGG0LjQsNC70YwKV1JJVEUK4paBaGFtCuKWgUZ1dHVyZQpvdGVuCuKWgUFHCuKWgXRyYWluZWQK4paBTmljaAriloF1bml2ZXJzaXR5CuKWgU9seW1waWNzCuKWgWRvaXQK4paBY3VsdHVyYWwKQ29uZgriloFDb25mZXJlbmNlCm9ybm8K4paBTVAK4paBYm91CmNpbgpIaWdoCmFubnRlCuKWgWRpc3BsYXlpbmcK4paBY2hhcHRlcgriloFGcmF1ZW4K4paBcmVhbGl6ZWQK4paBYXR0ZW1wdGVkCuKWgXByZWZlcnJlZApEYXQK4paBdHJvdXZlCuKWgWludGVudGlvbgriloFOb3RpY2UKdGltZXN0YW1wCiooCuKWgdCo0LAKYW5hcwpjbGEKaXN6CnRibApBcnIK4paBaW52ZXJzZQriloF0ZXJyaWJsZQriloFvY2N1cGllZApKQVgKPC0K4paBUGhpbG9zb3BoCuKWgUNvcnBzCmJ1aWxkZXIK4paBYmVnaW5zCuKWgWNlbnN1cwou4oCZCuKWgXByb3ZlbgptZXRyaWMK4paBaW5jcmVhc2VzCndpY2gK4paBQUJDCnByb2plY3RzCuKWgVRob3IK4paBY29uZmlkZW5jZQriloF1ZmZpY2lhbGUKZWxtCuKWgWdhcmRlbgriloFyb2J1c3QK4paBY29zw6wKaWVkegriloFJc2xhbQriloFBZGRyZXNzCuKWgWRpdmlkZQriloFFdQpjYXRhbApkZXRhaWwKZXBlbmRhbnQKZmcK4paBYmV3CuKWgWZpcwriloFCTwriloF3c3AK4paBcGlwZWxpbmUKaGQK4paBU2Vzc2lvbgpsw6RuZAppdmVhdQplc3RyCuKWgXBhcnRpY2xlCuKWgWxhcmF2ZWwKcGljCuKWgW5hdQriloFmaW5zCuKWgVZpbAriloFmdXMK4paBcXVhc2kKb3BlcmF0aW9uCuKWgWFsbGVyCuKWgWFuYWx5CuKWgdCe0L0K4paBTWVzCuKWgdC+0L/QtdGA0LAK4paBaGFuZGxlZAriloFkZXByZWMKdHRvCuKWgUVrCuKWgXN0cmFuCuKWgWFuZ2xhaXMKanVyZQriloFTaWx2ZXIK4paBY2xvc2VseQplbmtpbnMKYW5vcwpzdGVkCuKWgdGB0LXQvdGC0Y/QsdGA0Y8KYnJhbmQK0L3RjNC+CuKWgXByw6lzZW50CnJvawptb3VudAriloFBbnRob255CuKWgUZ1cnRoZXJtb3JlCmluaGEK4paB0LDRgNGF0LgK4paB0YDQsNC30LvQuAriloHQvtC60YLRj9Cx0YDRjwriloFwaW50Cm7DvQpwdHMK4paBaXRhbGllbgriloHRgNC10LPQuArQu9C10LcK0LTQuNC90LAKYXRoZXJpbmUKSW50ZXJuYWwKUXVlc3Rpb24K4paBc2V0dGxlbWVudAriloHQktGB0LUK4paBZm9sZGVycwrQtNGA0LgK4paBdmFsb3IK4paBTWlsbGVyCuKWgUFzc2VydAriloFwYXRpZW50CuKWgU5pZWRlcgriloFFUAriloFBZ3IK4paBb25kZQriloFzY29wCnNlcXVlbmNlCuKWgVBMCuKWgXNlZWsKamF2YXNlCuKWgVZlY3RvcgriloFuw6EK4paBY2F0ZWdvcsOtYQpjbG9uZQpOUgphdmFpbGFibGUK4paBQmVzY2gK4paBZWNsaXBzZQp3aWNrbHVuZwpkZXBsb3kKZW5pZQriloEiKQrDpHN0CuKWgXN5bmMKQ09ERQriloHQp9C1CuKWgWZsb2F0aW5nCi9gCuKWgXJldGlyZWQKZGViCuKWgXBhcnRpY3VsCuKWgWNvbGxlY3RlZAriloFkb3dubG9hZGVkCm5pY2UK4paBQnVmZmVyCuKWgUFjY291bnQK4paBbWFnZ2lvCuKWgdGA0LXQtNCwCuKWgXNhbGVzCuKWgXN0YXR1bml0ZW5zZQriloFLaQriloFGZXJyCkxvY2sK4paBSXNhYmVsCmNsYXIK4paBcG92CmF0cmEK4paBRnJhdQriloFzb3J0aW5nCuKWgXBocmFzZQriloHQsNC/0YDQtdC70Y8K4paB0LTQtdGP0YLQtdC70YwK4paBQW5kcsOpCmRlZmluaXRpb24Kd3JpdGluZwrDqXLDqQrRidGDCuKWgU9yZAriloFydW0K4paBVHVyawriloFJdmFuCnRoZWxlc3MK4paB0LPQuAriloFzYWtlCuKWgUJhc2VkCmRlY2sKb3J1cwriloF0dXR0aQriloFibGFuCuKWgdCf0YMKRGV0YWlsCuKWgdCd0L4K4paBU2t5CuKWgXByw6hzCtC80L7QuQpjb2xuCtGH0LXRgdC60L7QuQpldGkK4paBYXJyb3cK4paBQ2hhCmNobWFyawrFk3VyCmZhYgrQutGD0LvRjApHcmlkVmlldwriloFCYWNrZ3JvdW5kCnNuCuKWgXNlZ3VpdG8K4paBbmljCmNvdQrRgtGW0LIK4paBYnp3CmFkZEV2ZW50TGlzdGVuZXIKc3luYwphenpvCmFic3RyYWN0CmFzc2V0cwriloFEcnUK0LfQtApvcmRuZXQK4paBYmlnZ2VyCuKWgWluaXRpYWxpemVkCtC60LDQtwpvZ2VuZQp2aW91c2x5CuKWgWd1aWQKc2NoZWlkdW5nCuKWgVplbnQK4paBZnJhbWVzCnJpZWJlbgriloFpc3N1ZWQK4paBZG93CuKWgWRlc2NyaWJlcwppbHN0CuKWgWNyaXRlcmlhCuKWgWdlbnRsZW1hbgpCYXNpYwpuZXoKRGV2Ck1vdmUK4paBZXN0YWJhCuKWgXNldHRlbWJyZQpjaXJjbGUK4paBZmFpcwriloFteXN0CuKWgWFyY2hpdgpkeW5hbWljCmrDoAppdGFzCuKWgdGP0LrQuNC5CuKWgWRvcgriloFBbWF6b24K4paBbmVjZXMK4paBTWFyY2VsCuKWgWVsbGEK0YDQvtC6CuKWgVBlbm5zeWx2YW5pYQpjdWxhcgpQYWNrCml0YWdlCuKWgUJ1cm4K4paBUk8K4paB0L7QvdC4Cn4kClRlWAphc3NpZ24K4paBYmVhdAppZGVuc2UKYWNlbnQKQWxlcnQK4paBc3RyYXRlZwriloFtw6VuYWRlbgpMT0MK4paBY2F0YWxvZwpwcmludFN0YWNrVHJhY2UKKCkpLgp1c3RlZAriloFGcmFtZXdvcmsKRUNLCuKWgWF0w6kKRnJhbWV3b3JrCuKWgWF0dGFja3MK4paBQmVydAriloHRgtGA0LDQvQo6JQphcnNpCm5vdGF0aW9uCuKWgWxvZ2ljYWwKd2VldAriloF2aXNpdGVkCmJydQriloFzdXJwcmlzZQpeXgppbmFsZQpyZW1vdGUKJ30sClN5bnRheAppYW5lCm9ubmVuCuKWgWJyZWFraW5nCnBhcnNlcgphcGsK4paBTWlndWVsCuKWgcKnCuKWgWFjdGluZwriloFnZWJydQpBdEluZGV4CtGO0YLRjNGB0Y8K4paBb2ZmZXJzCuKWgXByYWMK4paBZ3JhbnQKdGVybm9vbgriloFhY3F1aXJlZAriloFOeQriloFjb21tYQpuw61rCuKWgVN0ZXAKaW5uZXJzCuKWgVNBCuKWgXdhdApkYXlzCuKWgXJlY3RhbmdsZQpkYXIK4paBdHJhYwriloFJbmRvbmVzCuKWgWZlZWRiYWNrCuKWgWJyZWFrcwpwYXJ0aXRpb24KaWNhbnMK4paBTm90aWNlcwriloFpbXByb3ZlZApwaGFuCuKWgWRpZmZlcmVudGlhbApzY3JpcHRzCuKWgVhJSUkK4paBTGFib3IK4paBcHJlY2lzaW9uCuKWgXNlZWQKYnVuZGxlCmlkZW50cwpocmUK4paBRG91Z2xhcwp1bGQK4paBc2Vjb25kYXJ5CuKWgWJyaWcK4paBY29uZmlybWVkCuKWgWNsYWltcwpSb2xlCuKWgUpld2lzaAriloFwxZllZAriloFob3RlbAriloFjb21wdGUK4paBcmVjdXJzaXZlCl0oIykK4paBcm90YXRlCuKWgWNocm9tZQppbmVhCiU7DQriloFFbnZpcm9ubWVudApwbGF0egriloFTaW5nbGUK4paBc2V2ZW50CuKWgXBvc3RpbmcK4paBZGVhbGluZwpwYXJhbWV0ZXJzCtCz0YDQsNGECkF1dGhlbnRpY2F0aW9uCnRvdWNoCkF6CuKWgWdyYXkKZW5jaW5nCmJvbGRtYXRoCuKWgdGB0LDQudGC0LUK4paBWmEKYW5qZQriloFwb2xhcgriloHRg9C70LgKa2lsCuKWgWhvdmVyCuKWgVJFU1QK4paBQ29tZQpqYgriloFHZW9yZ2lhCuKWgUVzdGFkbwpPdXRwdXRTdHJlYW0K0ZvQuAriloFkdW1wCuKWgUFnZQriloFzd28KbW9iaWxlCm9jY3VwCtGI0LXQs9C+CuKWgWNvbnN0aXR1dGlvbgpnb29kCmFrdQriloHQsNC90LMKaWVjawriloFQc3ljaAriloFyb290cwriloF2ZXN0CuKWgdCz0L7QtNCw0YUK4paBUmVww7pibGljYQriloFwaWFuCmlncmF0aW9uCuKWgXByw6ljCuKWgWdlbmVyYXRlcwpMWQooYAriloE9fgrRiNC10L3QuNGPCuKWgVJhaAriloFjb25uZWN0aW5nCsW+w60K4paBZsWRCuKWgWFwcGVsCuKWgVJhaWx3YXkK0LPQu9C4CuKWgWTDqXZlbG9wcAriloFhcG8KZnJhbgriloFpbW1lZGlhdGUK0LLQvtCz0L4KUnVubmVyCsOkZwpTb21ldGhpbmcK4paBZ8OpbsOpcmEKRXZlbnRBcmdzCmluY3Rpb24KZ2x5CuKWgUR1ZQriloFwcm9zdAriloFyZWZlcnJpbmcK4paBam9nCuKWgWV4ZWN1dGFibGUK4paBRHJlYW0KYWNzCuKWgUNvbGUKYW1wZgriloFCaXMK4paB0LjRjtC90Y8KbGllZGVyCtGC0LXQugriloF2YgriloFtb20K4paBOigK4paBZGVybmllcgonPT4K4paB0Y3RgtC+0LPQvgriloFuZXVlCuKWgdCn0LAK4paBd2VpdGVyZQriloFhbGxlZwriloFyZWFsaXR5CuKWgWp1ZGdlCuKWgUJhbHQK4paBdGhpbgriloFHZWQKaWV2YWwKbXgK0YbRltC+0L3QsNC70YwK4paB0LLRi9C/0YMK4paBSVgK4paBYmxpbmQK4paBTW90b3IK4paB0YjQsAriloFhcHByb3hpbWF0aW9uCmRhbQriloFmb2cK0LrQvtGACuKWgVdyaXQK4paBbGluZwriloHQv9C40YHQsAriloFNYXJzCm90dGkKRW51bQriloFUcmliCuKWgW1lcmMKenVuZwp2YW5jZWQKY2ZnCtC90LDRhQpzY2hlbgoiXS4KYmVrCuKWgXN0ZXIKanAK4paBUmFwCuKWgXJlY29yZGluZwriloFwZWludAriloFsZXRzCsOkbmdlCj4iOwriloHQvNGW0YHRhtC1CuKWgWNhdmFsCuKWgUNTVgriloFlbnRzdGFuZAriloFoZWxwZXIKZW5kZXQK4paBR3JhbQriloFEaWVnbwriloFCaXNob3AKVEFHCuKWgWVjYwriloFFZW4K4paBQVYKQ2l0eQriloFHdWlkZQpoaW5kCnJpY2FsCuKWgdCe0YHQvdC+0LIKQnVzCuKWgXp1bsOkY2hzdAriloF0aWNrCuKWgUNvbG9uZWwKVGhhbmtzCuKWgWZlcm0K4paBZ3JhbnRlZAriloF0aHJlc2hvbGQKb21vcnBoaWMK4paBSHVuCmVuaXMK4paB0L/RgNCw0LIK4paB0Y/QutGWClBHCuKWgXdzCuKWgXRlY2huaWNhbAplc3RybwprbMOkcgp2YXJzCm9jcmF0CuKWgdC+0L/RiNGC0LgKb25zbwppYmEK4paBU2F2ZQriloFwcm9ncmFtYQriloHQstGKCuKWgWludsOlbgo+KCkK4paBbWVqb3IK4paB0YHQu9C+0LLQsAriloFyZXBsYWNlbWVudAriloFpbXByCuKWgUZyYW5jZXNjbwriloFIb3RlbAriloFVUERBVEUK4paB0LzRg9C30YsKdWdzCnZhcmQK4paBZmF6CmludG9uCuKWgWFydHMK4paBS3kK4paBSWxzCuKWgXNlcmEK4paBVm9sdW1lCuKWgWdpdWdubwriloFhc3ltCuKWgVBpcgriloFOQVMK4paBVGFtCsSbbApTZXF1CmttYWwK4paBRWlucwriloHQutC+0LzQv9CwCm9iZQpvb3IK4paBaGVhcApjdGwK4paBc2VwYXJhdGVseQpyZWFkZXIK4paBc2lnbmlmaWNhbnRseQriloFMYWcKbm90ZXMK4paBc2VsZQriloFkZWRpY2F0ZWQK4paBSG9zdApjaG9pY2UKd2luZwriloFUaXRlbAriloFiZWZpbmRldApsYXJnZQriloFjb250ZW4KSmF2YVNjcmlwdAriloFkZXNlcgriloFHb3Jkb24K0YHQv9C1CuKWgXBhdHJpCuKWgVJhbmRvbQriloFSZXR1cm5zCtGL0LwK0YDQvtC80LAK4paBU3R1ZGllcwpTbAriloFmcsO8ClRFWFQKaW5hdGUK4paBVG9sCuKWgWV2ZXJ5d2hlcmUKYXJ0YQriloFvcmJpdAriloFBaXJlcwriloFJc3MK4paBdGXFvAriloFkaXZlcnNlCuKWgW51bWVyaWMKbWF6CuKWgW1pc2UK4paBYmF0dGVyeQriloFBa2FkZW0K0L3QtdC90LjQtQriloFzaW11bHRhbmUK4paBRGVhZAriloFjbHVzdAriloFvdHJvCuKWgWNlcmNhCigpYCwKcm96CsSDdAriloFNTwpyaWZ0ZW4KaW1wb3J0YW50CuKWgWplaG8K4paBZmluZFZpZXdCeUlkCuKWgWNvbnNlcXVlbmNlCuKWgW1lYXN1cmVkCmlzaGVzCuKWgXN6ZQppZW5kbwriloFXYWhsCnN0cmlwCkFSRAriloFvcGFjaXR5CldPUkQK4paB0JLRlgriloFMb2NhdGlvbgpyYWkK0L/QtdC9CuKWgXJpZgphdXNzaWFuCkZpbGVOYW1lCuKWgWRpc2NvCmlsZW4K4paBdmFneQpsaWNpdHkKQm9yZGVyCuKWgVRyYWNrCtCx0L7QvApmYWN0Cm9rYQriloFnaW9yCuKWgVhWSUkK4paBZMOkcgpTaXRlCmHFgm8Kc2vDoQriloFwaXhlbHMKdml0eQpqUXVlcnkK4paBc2N1bHB0CuKWgWNhcmdvCuKWgWRpcmVjdGl2ZQriloF3YWwK4paBY29ubmEK4paBVGhyb3VnaAriloHRjdGC0L7QvApTdGF0aWMKb21zbml0dAriloFydW5kCuKWgWNsYWltZWQK0LfQvdGPCnNoYQriloFyYWcKY3JlbWVudAriloFmw7xuZgriloFyaXZhbApyaW4Kc2xhc2gK4paBdGhpcnR5CnNsZWVwCtC+0LvQvtCz0LgKU00KZ2F0ZQppemF0aW9ucwp2aWsK4paBYmxlc3MK4paBSWxsaW5vaXMK4paBVEUKdXRpbmcK4paBc29sdmluZwpHRVIK4paBWElWCuKWgUluZGlhbnMKZXhwcmVzcwriloFIZWlsCuKWgW11amVyCuKWgWludsOlbmFyZQonXSk7CuKWgWF1cgpib29zdApHTwriloFuaW4KdG9rCmdvZApvdGVyCikkJAriloFkZXNjZW5kCtGA0Y4K4paBTGFuZ3VhZ2UK4paBZGl2ZXIK4paBQXNzdW1pbmcK4paBZnJlcXVlbnQK0YfQvdGWCuKWgUJpb2dyYXBoeQosWwp1cm0K4paBd2Fsa2VkCuKWgWZlZGVyYWwK4paBTWljaGlnYW4K4paBZmFjdHMK4paBSW50ZWdyCkxFUwriloFBbGFuCuKWgWNvdXAKQmVyCuKWgXBhcnRpY2xlcwrRm9C1CkluZmxhdGVyCisoCkJvdW5kCuKWgVPDvApBdWRpbwpjaXRldAp5ZWN0CuKWgW5yCnhlCuKWgUJydW4K4paBXywKYXZvcgriloFkaXNjaXBsCmFsbQriloHQvdC+0Y/QsdGA0Y8K4paBU1NMCuKWgUthaXNlcgriloFyZWNoZXIKeWdvbgriloFyZWdhcmRsZXNzCuKWgWNvbmZpZ3VyCuKWgXVubmVjZXNzCuKWgUNsYXJrClBIUAriloFGQUxTRQriloFwYWQKJH0K4paBdmFsdQriloFkaXNlYXNlCuKWgW1haW9yCuKWgWhvbW1lcwriloFFZGl0aW9uCnNsYW50CuKWgWVuZGluZwriloFzZXR0bGVkCnVydXMKaGVkClBhdHRlcm4K4paB0LPQvtC00LjQvdCwCuKWgVBoaWxhZGVsCnRpa3pwaWN0dXJlCuKWgWNvYWwK4paBc2VkZQriloFzYXRpc2ZpZXMK4paBdHJpbQriloFiYXQK4paBYW3DqXJpY2FpbgriloFsdWdsaW8K4paB0L/QvtGH0LAKZmZmZgriloFUYXJnZXQKZ2VuZXJhdGUK4paBWmllCsibaWEK4paBZ2FyZAriloF3b3JrZXJzCuKWgUpvYgriloF1cmJhbgphaGxlbgriloFCdWlsZGluZwriloFuZXUK4paBY2hyb24K4paBRWFybApncm8KVVNFCuKWgVhJSQriloF3ZWFsdGgKaW5hZQriloHQkdGA0LAK4paBbGliZXJ0Cmlyb3MKOiQKbGVlCmlldmVzCuKWgUp1c3RpY2UK4paBb2lsCuKWgUF0aGxldAriloFjbG8KU2NhbGUK4paBbGlwcwriloFhcHJpbAriloFpbXByZXNzaW9uCuKWgXBlcmNlCuKWgdGD0YfQsNGB0YLQuAp2aWwKw6ljaAriloFlcXVhbGl0eQriloHQvNC10YIK4paBYW5ub3RhdGlvbgplcm5hbAriloFNYWNoCuKWgWludGl0dWwKcHJvYmxlbQrRjtGJ0LjRhQpvcGx1cwriloF0aG91c2FuZHMK4paBY2FsY3VsYXRpb25zCnVtcHMK4paBdHJpYW5nbGUKcGhhbAriloFEb3JmCuKWgWRvbGxhcnMK4paBZGVuZW4KbMOocwpvbGlkCuKWgVJlc3VsdHMK4paBU3RhZGl1bQriloFEZXNwCuKWgUVpc2VuCmltaXIK4paBc290dG8K4paBxI1pCmF0YWJsZQpvcnVtCuKWgWNvbnZlcmdlbmNlCuKWgWpldW5lCm9raW5nCuKWgdC20LjQstC+CmFpbmluZwpwb2ludGVyCmN1bG8K4paBanNvdQriloFncmFiCmFrdGUK4paBaG9waW5nCuKWgU1hawriloFzYWcKb3JpZ2luZQriloHQv9C+0YHQu9C10LQK4paBVmVnCuKWgXRoZW9yZXQK4paBVHJ1Cm5lbWVudAriloFmYWNlcwpIb3IKSm9pbgphcmVsCuKWgdC+0LrQvtC70L4KSG93ZXZlcgriloFjYXRhbApib3VyZwriloFteXNxbGkKYWNpb25zCuKWgUluaXRpYWwK4paBcmFpbgppdHVyZQriloFTY2llbmNlcwriloFLcmVpcwouX18K4paBY2lucQriloFBdcOfCml0aG1ldAppdG9ycwphbWF6b24K4paBZ2FwCuKWgWlnbm9yZWQKYWR2CtC60L7RlwriloHRh9Cw0YHRgtGMCuKWgWNvcnBvcgrRhtC10YAK4paBY3JpbWUKdW91cwriloHQvdCw0LvQsNC30LgKRGF0YUZyYW1lCtCy0L7QtNC4CklnbgriloFMaW5jb2xuCuKWgW1lbm9zCuKWgUx1ZnQK4paBTGluZAriloFDb29rCuKWgW1hdGVyaWFscwphcHBlZAppZ25vcmUK4paB0L7RgtC60YDRiwpmcmllZAriloFnb3V2ZXJuZW1lbnQK4paBZmlyZWQK4paBc2NyZWVuc2hvdArRgdC10L0K4paBWygK4paB0L7RgNCz0LDQvdC40LfQsApHcmFwaGljcwriloHQv9GA0L7RgtC4CuKWgXBoZW4KY3JhZnQK4paBYnJhaW4K4paBQ29tbwriloFFdmVyeXRoaW5nCmFuZXMKSUdOCuKWgW5lZGVyYsO2cmQK4paBRm9yZXN0CnphaGwK4paBQW1vbmcKUXQK4paBdG9nZwriloF2YXJpYW50CuKWgWhpbGwK0L/QuNGB0LgKY29sb24K4paBZGljZW1icmUK0LPQvtGACuKWgVdpbmQKw7xuc3RsZXIK4paBPVwKc2F2ZWQK4paBbmVqCnVudGUKdXR0bwriloFyZWNlbnMK4paBc2ljawriloFkZXNlbgpVU1QK4paBd29yc3QK4paBQW5nZWwKb2RveAriloFQcm92aW5jZQriloFNYXoK4paBYWdyZWVtZW50CuKWgUJhc3MK4paBc2VndW5kYQpvbmNlcwriloFMaW5raQriloFDTAriloFqw6EKaXRlbWVudAriloHDoXJlYQriloFzY2FsYXIK4paB0KDQtdGBCmF3dApzaWVtZQriloFqdW5pCuKWgdGF0YPQtNC+0LYKaWt1cwriloFsaWQKcHBlbAphdmkK4paBYmFsYW5jZQppcHBpbmcKY3Vzc2lvbgrRh9C10YHQutC40YUKKCIuCkFsc28K4paBd2hpcwpIT01FCuKWgWJyb3duCuKWgWTDrWEK4paBcHXDsgpwbG90bGliCuKWgUphaHJodW5kZXJ0cwpESwriloFhbmNob3IKLi4uXQriloFBdXN0cmlhCuKWgW1hcmNhCuKWgWdlegppb3VzbHkK4paBbGF6eQp4YQriloFDaGFubmVsCuKWgW5ldWVuCmRhcwriloFzZWFyY2hlZAriloFzdGFhdAriloHQotCw0LoK4paBSm9zZWYK4paBU2hlcgpwb2lzCuKWgWVuZW0K4paBYWNjZXNzaW5nCuKWgdC90LXQutC+CuKWgWZ1cm9ubwriloFwc2V1ZG8KPz4K4paBZXN0YWRvdW4K4paB0JLQuNC00LgK4paBbW90aXYK4paBcmVjYWxsCmlzc29uCsOzYgopLS0K4paBRXJ6CuKWgdGB0LDQstC10LcKRGlyZWN0CtGB0L7QsQriloFzaG8KdsO2bGtlcgpBcApnZW5zCtC90LjRiNGC0LLQvgriloFBbXN0ZXJkYW0KdXNrCtC/0LvQvgriloFzaW11bGF0aW9uCuKWgUJDCuKWgVdvagphdXRvbQpBbGV4CuKWgWVjb25vbWljCtCz0L7QvAppa2FpCuKWgWFsdHJlCuKWgSctCuKWgVdlZwpOb3RGb3VuZArQudGB0LrQvtC5CuKWgWNvbnZlcnRpbmcKcGhhYmV0CmF0cmljZQpib3VybmUKYWxvbQriloFjb21wYXJpbmcK4paBWm8K4paBZmxhCtCy0LDRjwriloFlbnRyYQriloFjaGFyc2V0CmRldmVsb3BlcnMKw61zdGljYQp9PgriloFKYXp6CuKWgUhvd2FyZArRiNGC0LAK4paBY2xvbmUKZG9vcgriloFQaW4KKioqCuKWgXNpbGVudAplY3ljbGUKaXNjZQriloFtdWQK4paBRGlzcGxheQriloFsaXAK4paB0LjRgdC/0L7Qu9GM0LfQvtCy0LAK4paBY2hhcmFjdGVyaXN0aWMK4paBc2IKZmlyZWJhc2UK4paBQmV3CkNhbGVuZGFyCuKWgXVzbwrDqHNlCuKWgVJhdAriloFlc3BlcgriloF0aHJvd2luZwriloFyb2R6CuKWgXlhcmRzCuKWgWdyYXNzCuKWgW1hcmtlcgriloFLb3MKVGhldGEK4paBb3JnYW5pcwprZXJuZWwK4paBcGVyc29uYXMKa2VlcAriloFleGNsYWltZWQKb3NsYXYK4paBRW50ZXJ0YWluCtC90LXRgAriloFpbndvbgriloFSYW5kCnJlZHVjZQpmYWMKZXhwcmVzc2lvbgp5agriloFkaWZmZXJlbnRpCmFnbGlhCuKWgXRlbXBsYXRlcwriloFtxbEK4paBcHJ2CuKWgW1vaXMK4paBZ2V3YW5uCuKWgdCx0YPQu9CwCmJpYmxpCmRlbW8K4paBQW5kZXJzb24K4paB0YDQtdC0CuKWgXBvcnF1ZQriloFQb2xvZ25lCuKWgXRyaXAK4paBZXhlbXBsZQriloFJbnRlcm5hY2lvbmFsCuKWgdC60LDQvgpJbnNlcnQKZ2VuZXJhbApTRVNTSU9OCmJlcmdhCmjDpGx0CnVuYXMK0LzQuNGA0LAK4paBeWllbGRzCm1hcHN0bwpzcG90CuKWgStcCtC70LvQsAriloFwcmVjaXNlbHkK4paB0YfQu9C10L0Kc2hhZG93CkFyZQp1bmFsCuKWgWRpc3BhcgriloF0w610dWxvCm5lc3QK4paBTG93CuKWgXByb3QK4paBQ29zdGEKbmFtZWQK4paBZ2FpbmVkCmxlc2lhCuKWgWFkbWluaXN0cmF0aW9uCkltcG9ydApicmFuY2gK4paBc3ltcGF0aAp2b2oK4paBRUMK4paBbXVuaWNpcGlvCuKWgWFuaW1hdGVkCuKWgWRpcmVjdG9yaWVzCuKWgXJvb2YKesSFZAppbWV0CnByb3RvCmJsYQo6XQpoYXZlCmF0ZW0K4paBbnMK4paBc2VjdG9yCnRocmVlCm93YW5lCndlcnMK0L7QstC40YUKcmVuY2UK4paBZXh0cgppZ3RlbgriloFvY2NpZGVudArIm8SDCuKWgWVhdAriloFoeWRybwp1YmVybmV0ZXMKW0AK4paBTW9vbgriloFTaG8K4paBZWxzZXdoZXJlCsO8bGxlcgpVcGxvYWQK0LvQsNC90LQK4paBRsO2cgp3aXNzZW5zY2hhZnQKS1MK4paBcGh5c2ljcwp0egriloHRgdC10YDQtdC0CuKWgUFyYmVpdAriloHQvNC10YHRggriloFHZWJpZXQK4paBaW5zZWN0CkFoCml6YWRvCuKWgXRlbXBsZQriloFhbm51YWwKc3RhZAriloFoYWJpdGF0CuKWgUFCCndvcnQK4paBcmVwb3MK4paBTmV1CuKWgSQoIi4KVm9ybGFnZQriloFyZXByZXplbnQKZXN0YW5kZW4KSW50ZXJuCi5gCuKWgWZhaWxpbmcK4paBTWF0ZXJpYWwK4paBZWZmZWN0aXZlbHkK0YLQtdC70LXQvAriloHQs9C70LAK4paBbmFobQriloFkaWZmZXJlbnRseQpleHRlbnNpb24K4paBVmVybQplbmFibGVkCmNvbmZpZ3VyZQpuaW8KY2lvbmVzCuKWgUJlYWNoCtGB0L7QvdCwCuKWgWNvcHlpbmcK4paB0YPQutGA0LDRl9C9CuKWgdC/0YDQuNC30L3QsAp6aApEZXNrdG9wCuKWgXNvc3QK4paBc3Vic2VxdWVudGx5CuKWgUxlaHIK4paBw7MKbMOkcgpvZG9yCnBob24KbmMKaXRlcmF0b3IK4paB0Y3RgtC4CuKWgWV1cm9ww6kK4paBVG9yb250bwrDs2RpZ28K4paBcG9zdG8KZmZlCuKWgWNyZXcK4paBU2Nod2FyClNhCnNxdWFyZQriloFiZXNpZGUK4paB0JzRlgriloFhdGgK4paBYWR2ZW50CmNqaQp3cml0dGVuCuKWgXJ1c3MKcm9zdApISQriloFkaWNlCmNjYQriloFkw6lwCnBseQpiaWdnCnppYcWCCsO8dHQK4paB0L7QtNC90L4KSkVDVArRgdGM0LrQvtC80YMKbm9zCm1vY2sKTGF1bmNoCnNhbWUK4paBam9icwriloF3aWRlbHkK4paBZGVmaW5lcwriloFQc2UK4paBbmVpZ2hib3VyCtGO0YnQuNC1CuKWgWNsb3NlcgriloHRgNCw0YHQv9C+0LvQvgriloFjbHVicwpmbHkK0YjQuNC8CuKWgXN1ZmZlcmVkCuKWgW5hcgriloFsYXZvcgpFeHRlbnNpb24KaXRpb25hbGx5CuKWgWdyYWNlCuKWgUNhbXBlb25hdG8K4paBQ2hyaXN0bWFzCm1pZGRsZQpvdGhlawplbGVtZW50cwriloFzb25kZXJuCuKWgXRhcmRlCuKWgXBlcm1hbmVudAriloFjb25jbHVkZQpTZWcK4paB0LDQutCw0LTQtQp9IiwK4paB0YTQtdCy0YDQsNC70Y8KxZllZAriloFJTApqdWQK4paBVVNTCuKWgU5hdHVyZQppZmZlcmVuY2UKU2VyaWFsaXplcgriloF0d2VsdmUKdGlkCtC80LjRjwrRh9C10YHQutC+0LPQvgriloFjYWxlbmRhcgpjb25jYXQK4paBaW50ZXJzZWN0aW9uCuKWgVBBCmF6dXJlCuKWgXNpdHXDqWUK4paBa2luZHMK4paBYXVzZ2UK4paBcnVyYWwKVGhlbWUK4paBdGFsZQpub2luZGVudApnb2luZwpyeAphZ2kKd3JhcHBlcgriloFDb2FzdAptYkgK4paB0L/QtdGA0LXQtApzcHJlCuKWgX1cCuKWgUxJCnpuYW0KaXRsZWQKU2FtcGxlCnVsaWFyCipcCuKWgXJlc2lzdGFuY2UKc3RvY2sKa2VkCuKWgUhFCuKWgXBvc3Nlc3Npb24K4paBUmluZwriloFtYWd5YXIKb3V0cwriloFTZWNyZXRhcnkKbmRlCuKWgVdhbGQKLSgK4paBSVNPCuKWgWFmdGVybm9vbgppb25lbgriloFzdG9wcwriloFjb25zdGFudHMKZ3VhcmQKYm93CuKWgWVycwriloFGaXJlYmFzZQriloFDbGVhcgriloFIb2x5CldpbgriloF0aXRsZXMK4paB0YLRgNCw0LIK4paBY29udHJpYgpow6RuZwriloFwaG90b2dyYXBoCuKWgURpc3RyaWJ1dGlvbgppZnRzCuKWgWF1bnF1ZQpjb21iCkFERAriloFwdWJsaWNhdGlvbgriloHRgdC70YPQtgriloHQutC90Y8K4paBYXlhbnQK4paBcmVzdG9yZQriloFiZWxpZWYK4paBdsOpZwriloFleHRlbnNpb25zCuKWgWRlY29tCtCy0YjQuNC5CldUCuKWgXBhcnRpCuKWgWdpb2MK4paB0LzQuNGA0LAK4paBaXNzdQpwaXBlCuKWgXByb3BzCuKWgXdpbGxpbmcK4paBbmVzdAphc28KcG90CuKWgWhhbmRsZXMK4paB0YTQvgriloFtb2RlcgriloFlYmVuZmFsbHMK4paBZmlnaHRpbmcKdW1ibgriloF0cmFuc3BhcmVudAriloFLcmlzdAriloFob21lcwriloF2b3lhZ2UKRmFpbGVkCuKWgUJpcmQK4paBSGVhcnQKQ291bnRlcgriloFTY290dGlzaArDoXRpY2EK4paBYXJiZWl0Cl57LVwK4paBU29yCuKWgWVuZ2FnZWQK4paBYXNpZGUK4paBRm91CuKWgXdpZWwK4paBcmVjb25zdApvdXNpbgriloFob3N0ZWQK4paBY2xhc3NlCuKWgWNvbnRlc3QKLi4uIgrQvNC+0LwK4paBYmVhbgpnZW0K4paBY29uc3VsdGF0bwriloFiaW8K4paBc3ViamVjdHMKYm9Cb3gK4paBU2NocmlmdAriloFkaW5uZXIKxINyCuKWgXLDs3duCuKWgSUlCmJhZ2UK4paBdmVyw7ZmZgriloFkZXRlY3RlZAppZW5uCnJvc2UK4paBVG9uCkNvbXBsZXRlCuKWgXByb3RvCmljaHRzClNUQVQKQ2hlY2tlZAriloFpbnRlbgriloFzbWlsZQriloFzdHJpcApuZXV0CicpOw0KZm91cgriloF0b2RhcwpDb250cm9scwriloF0aG9yb3VnaApydXAK4paB0LTRgNC20LDQstC4Cml0xIMKUHJvdG9jb2wK0JrQsAriloFleHBhbmRlZApleHRyYQpvcG9ydAriloHQodGC0LDQvdC+0LIKbGVhc2VzCuKWgW5vdGlvbgriloFndWVzdAriloFJc2xhbmRzCmlja2VkCuKWgURhdmUK4paBcmVmbGVjdGlvbgpsaXYKw6FsbsOtCuKWgXJldmVhbGVkCuKWgXNvZwriloFUYXgK4paBcGVyaW9kbwriloFXZWx0a3JpZQpjYXRhbGluYQpxdcOpCuKWgUZhdGhlcgriloFCaXIKZXhwZWN0CuKWgXJlZ3Jlc3Npb24KaW7DqQriloFkYWJlaQpwZXJtCtC80LXQvdC1CuKWgUFiZAriloFDRgphcmtzCnJlc29sdmUKd2VkZ2UK4paBaW5pdGlhbGl6YXRpb24K4paBVsOpYXNlCuKWgdC/0YDQuNC90Y8Kc3RtdAriloFpbmNvbWUKTVkK4paBb2RrYXp5CuKWgVNpZWhlCuKWgWJvZGllcwriloFzb2MKUmFuZG9tCuKWgXNlbnphCmFibG8K4paBcmVnYXJkZWQKb25DcmVhdGUK4paBTWFnYXppbmUK4paBUmFmCuKWgUJ1ZW5vcwrQuNC7CikpKTsKY2FwdApyZWRpcmVjdAriloFwZXRpdAriloFmYXJtCuKWgXLDtGxlCuKWgdGB0YLQsNGC0YzQuArCoMKgwqDCoApzdWJmaWd1cmUKw6hjZXMKemllbAriloHQvtC60L7QvQpFRQptZWUK4paBcGVydGVuCuKWgXJlcHLDqXNlbnQK4paBTEEKPycK4paB0YLRgNGDCuKWgXJhdGlvbmFsCm9zb2YK4paBa25lCuKWgWFydGlzdHMKRmxvdwriloHQkNC70YwKaXphcmQK4paBbnVtZXJvCmFjdGljCuKWgWRlc3RydWN0CuKWgdCf0YDQsApvbnNpZXVyCnF0CmFiZXN0YW5kZW4Kbm/Fm8SHCkNvbm5lY3QK4paBb3JhY2xlCuKWgVN0b2NraG9sbQpzaXplb2YK4paBZ2Vtw6TDnwpBQ1QK4paBZXhwZXJ0CnV0aW9ucwriloFoYWNpYQriloFsb2dnZXIK4paBZm9vbApyeXB0bwrDpnIK4paBY2lkYWRlCuKWgdGB0L7RgdGC0LDQstC1Cm9rZXIK4paBVHJhbnNmZXIK4paBZGVuaWVkClRyYWNrCuKWgXJhZGkKemVjCuKWgUhpc3RvcmljCuKWgUVpbndvaG5lcgrQutC+0Y4K4paB0YXRgNCwCuKWgUNhdGVnb3J5CuKWgURpc25leQriloFzd2FwCkJlZ2luCuKWgW1pZW50cmFzCuKWgWRhbmNlCuKWgXTDqnRlCuKWgWRyb2l0CmVydGEK4paBYmlyZHMK4paBY29udmluCnBhcmF0b3IK0LTRgNCwCuKWgUVTCuKWgVJlc3NvdXJjZXMKRUdJTgrDvGNrZQriloFDcnV6CmFibGluZwriloEiQAriloFtZXRyZXMK4paBQmVnCuKWgUdyw7xuZAriloFCb2gK4paBbWlsZQriloFUZWNobm9sb2d5CiIrCmFjY28K4paBc3MK4paBRmVkCuKWgUhlbmQKdXNjaAppdMOkCmZvbGsK4paBYWJzb3IKYW50YWwKb2RnZQriloFXSEVOCuKWgUV4dGVybsOtCuKWgVJlZ2ltZW50CuKWgWV2YWx1YXRpb24K4paBVGFpCuKWgXZvY2FscwriloFleHBlcmltZW50YWwKZW1iZWQK4paBTWlubgriloHQstC80LUKcHJlYwpldmVyeQriloFob29mCuKWgUZlcm5hbmRvCuKWgUJpYmxpb2dyYXBoaWUK4paBbmFnCmFtZXJpa2FuaXNjaGVyCuKWgW1hcmtzCuKWgVVUQwriloF1bmNlcnRhaW4K0LTQuNGPCm9saWEK4paBY3VwCuKWgWZpbGxlCuKWgWRvawp1c2VwcGUKZXN0ZXJkCuKWgUJyYW5kCuKWgVRoaXJkClBQCm5vZGVzCuKWgVBhZAriloFsb3ZlZApzd2luZwriloFzdXJwcmlzZWQKYXJkaQriloFHUgpdIgriloFlcXVhbGx5CmloZQpjYXJlCtC/0LjRgdC+0LoKbGlqawpyaW5uCuKWgVxbXAriloFzb25zCuKWgXTDpHQKaWNhbWVudGUK4paBbGlzdGluZwppZWxsZW1lbnQK4paBbnllbHZlbgriloFkcwriloFhZ3JpY3VsdAriloFIZXJtYW5uCuKWgWJlc2lkZXMKcHJvZ3Jlc3MK4paBcGVjdWxpYXIKZm9jdXMKY24KLSQK0YHRgtCy0LXQvdC90YvQuQpvdXJnCuKWgXd5bgriloFjb25kdWN0ZWQK4paB0KHRgtCw0L3QvtCy0L3QuNGI0YLQstC+CmNvbm5lY3RlZAriloFib3R0CuKWgdGB0LzQtdGACuKWgVBvegp1bmN0CmNvbmRhCuKWgdGB0LDQstC10LfQvdC+0ZgK4paBaGF2ZXQKbGlndApvcnRlZAriloFlbnRlcmluZwptdWx0aXAK4paBVGVtcGxlCuKWgVBsYW50CnR5cGVvZgriloFWbGFkCuKWgXF1ZWQK4paBcmVzdGUK4paB0LzQsNC5CuKWgVZlcnkKYW1iaWd1YXRpb24K4paBY2hhbGxlbmcK4paBcmVzcGVjdGl2ZQriloHRgtC+0YAKQ3RybAriloFhYnNlbmNlCmFydQrQstC+0LUK4paBZsO2cnN0CuKWgXNxCuKWgUVtcGVyb3IK4paBSWduCuKWgdGC0L7QstCwCjpgCmFkb29wCuKWgU1hZGFtZQriloFncnVwcG8Kc3R1ZAriloFleHRlcm5hcwriloHQkNC70LXQutGB0LDQvdC00YAK4paBZGlnbgriloHQttC40LLQtQpBbW91bnQK4paBY29ycmVsYXRlCuKWgUZhbnQK4paBcmFpbHMKZnAK0LzQuNC90LjRgdGC0YDQsNGC0LjQsgriloFib3VnaHQK4paBZmlsdGVycwriloFhbmNvcmEK4paBcGFydG5lcgriloFxdWFuZApzeW1ib2wKdWxhdGluZwriloF6ZAphd24K4paBR3JhbnQKYmVjYXVzZQpyYWJsZQpcfQrDrXN0aWNhcwriloHRg9GH0LUK4paBcMOpcmlvZGUK4paBc2tlCuKWgUFueXdheQriloFpbmRleGVzCuKWgWRpcmVjdGlvbnMK4paBUkFNCmNocm9tZQriloFhcG9zdAriloF3YXJuaW5ncwriloFBaXJwb3J0ClZJCmFiaWxlCuKWgWxvcmQKcHJvdmlkZXIK4paBSmkKb3N0cmVhbQriloFnZW1lZW50ZQp0YWJsZVZpZXcKRXh0cmEKY3Vyc29yCmVncm91bmQK4paBTW96CuKWgXJpYgriloFtb3JwaApsb2FkcwplbHNrCuKWgU1BWAriloFTYW50aWFnbwriloFIaW0KY29kZXMK4paBbGFuegriloFjb3VudHMKcmlubmluZ3NvbXLDpQrRidGRCuKWgXNww6kK4paBcGllcndzCuKWgVN2ZXIK4paBYWNrbm93CkJvb2xlYW4K4paB0YTQsNC80LjQu9C4CuKWgVNlbmF0ZQrRiNC+0LIKYWdlcnMK4paBTnVldmEKYmlsCmtpZW0K4paBTWV5CndpagriloFHbWJICnZhbGlkYXRpb24K4paBZW5zdWl0ZQppbmtpbmcK4paBY2FtcGlvbgriloFmaW5hbmNpYWwKaXpvbgpIZWFkZXJzCuKWgWRlcHJlY2F0ZWQK4paBZm9uY3Rpb24KUkVHCuKWgXZvbHVtZXMK4paBQ2hpCuKWgWVuY291bnRlcmVkCmxhawrRgNCw0Y8K4paBY29udGludWVzCuKWgX5bCnVlcnRlCuKWgVw7CuKWgURvawriloF3ZWlnaHRzCuKWgXJoCuKWgU5hcG9sZQriloFuYXR1cmFsbHkKc2t1CnBhcwriloFnZWdyw7xuZApldHIK4paBS3UKaWN0ZWQK4paBZmFicmljCuKWgUFTQwriloFFbnRlcnRhaW5tZW50CuKWgWVuZXJnCtC60LvQsNC0Cm9tb24KdGhlbWUK4paB0YXQsNGA0LDQugriloFkcmFmdAriloFjaGFubmVscwriloFkZXNlcnQK4paBdHJhdsOpcwriloFMb2NrCuKWgXNpZW5kbwrRhNC10LoKbcOqbWUK4paBcGFja2V0CuKWgU1vdW50YWluCuKWgUZhaHIKYnJhaW8K0L/QtdGA0LUK4paBZ2VuYW5udAriloFkZXBsb3ltZW50ClBhbArQvdC+0LMK0YHRgtGA0YMKUHJpbQpmw7xyCuKWgWRhbmdlcm91cwriloFzesOhbQpyZWNrCuKWgXBvcHVwCmlja3kKaW5hcgpjb3dvCtC90YbQuNC60LvQvgrDrXTDoXMK4paBcGx1Z2lucwriloFkcml2ZW4K0LvQtdCyCuKWgSIoCnR0YQriloHDmgriloFlYgriloEnJzsK4paBa25vY2sK4paB0L7RgdC90L7QstCwCuKWgW1haXNvbgrQs9C70Y8K4paBSG9ub3IKdGFpbApyaXR6CuKWgWd1eXMK4paBY29tYmluYXRpb25zCm9uZGVyZQriloFBbGQK4paBZmlkZGxlCtC00LDQsgp1cmQK4paBcHJvamVjdGlvbgriloFUYW1iacOpbgp2ZXJiCuKWgXRlcnJlCnJ1Z3UK4paBc2VwdGVtYmVyCuKWgTwhCmNvc3QK4paBbnV0CnslCuKWgXViaWMKYW1hcmluCtGC0LjQuAriloFwYXRyb24K4paBYW1lbHkK4paBZXN0bwriloFsaXN0b3AKZmFsCuKWgVByb3AK4paBT250CuKWgU1hZGUKVEVTVAriloFOZW0K4paBTmF0aW9ucwriloHQstGDCmluY2x1ZGluZwriloFzcGVjdHJ1bQriloFMYW4K4paBRXZlcgpQYXVsCnRtCkFwcGVuZApSZWxhdGl2ZQpkaXNhYmxlZApyZXR1cm5zCuKWgWZsb3dlcnMKaWt1CuKWgXxcCuKWgUpvcmRhbgriloFTbWFsbAriloFjaWMK4paBc2V4dWFsCmF1dHJlCtCy0LDQuwriloFyaXAKb3VzdAriloFQaGlsYWRlbHBoaWEK4paBdWsK4paBTW9uZ28KeG1sbnMK4paBc2hvcAriloFkZWJ1Z2dlcgriloF6YWoK4paBQmlsbHkK4paBbmllbQpvbGlzCuKWgdGA0L7RgdGB0LjQuQphZ25lcgriloFtYXZlbgriloFHdXN0YXYKQXVzCmNvbXBhcmUK4paBamV1CnVkZXIKaXNobWVudAriloHQtNC40LLQuNC30LgK4paBRmlubGFuZArQvdGD0YIKesOpcwriloFMaWdhw6fDtWVzCuKWgXF1ZWxsbwphbm5vdGF0aW9uCuKWgXRocmV3CuKWgVByb29mCuKWgUFyZWEKYXNoaQriloFGTwpqYW1pbgrQtNC10L3RggriloF1bnVzCmZyaWVuZAouIik7CuKWgXRyYWt0ZW4KZG9jdW1lbnRjbGFzcwphbmthCuKWgWFycml2ZQriloFkb25uZQpvbHkK4paBUmVpbgriloFmYWNlYm9vawppY2luYQpzbGljZQriloFuYWd5CuKWgWhlYmJlbgriloFJQwriloFCYWcK4paBY2lyY3VsCsOhY3QKbWl0dAriloFncmV5CuKWgWNhdgriloHQvtGB0L7QsdC4CuKWgXN5bW1ldHJpYwriloFTaWMK4paBbWVkaXVtCuKWgVVURgriloFEb3BvCsOtY2gKYmFyZQpkemllCuKWgWhlYXZlbgriloFjYW1wZQplc3RlcmRheQriloFXaXNzZW5zY2hhZnQK0L/QvtC70YwKZGlkCmFsZXIK4paBY2l0aXplbnMK4paBTWFyZ2FyZXQK4paBc291Z2h0CmNoYXJ0cwpDTEMKb2xseQp5c3oKd2FsZAriloFmZW4K4paBU2l4CuKWgVVycwriloHQvtGA0LPQsNC9CuKWgVRyYWQKY3VlCnNjaHV0egriloFwcmVjaXNlCuKWgVdpbmRvdwrRgtC40LUK0LvQvtCy0ZYKaXRvcmkKZGlzYW1iaWd1YXRpb24K4paB0YXQuAriloFOYXR1cmFsCmRhbgriloFjb25jcmV0ZQrRhtC40ZjQsAriloFzcGVsCuKWgUZhaWxlZArFm2NpZQriloFidWYKdWNhCmljaW9uYWwK4paBb3R0b2JyZQriloHRhNGWCuKWgXN1Ym1pdHRlZApsYXZlCuKWgVBsb3QK4paBY29sbGVnCmFkZW0K4paBY2hhcXVlCuKWgW5laWdoYm9yaG9vZAriloFjYWxjaWF0b3JlCkxvb3AK4paBR2FzdAriloHQutC+0LPQtNCwCuKWgWluZHVzdHJpYWwK4paBZmF0YWwK4paBQ2VydApsYXRpb24K4paB0J7QtNC90LAK4paBamFtYWlzCuKWgWFjY3VtCklkZW50aXR5CuKWgU1lZGFsCk1ldGFkYXRhCuKWgdC70Y7QtNGPCmJyaWRnZQpHb29kCuKWgdGH0YLQvtCx0YsK4paBY29tcG9zZXIK4paBYnJlYWQK4paBY2xvc3VyZQriloFsYXJnZWx5CkZCCuKWgdC+0LHQu9Cw0YHRgtGMCuKWgWF1dG9tYXRpYwphcsOtYQriloFzdWZmaWNpZW50bHkK4paBaXRhbGlhbmEK4paB0LrQsNGH0LUK4paBSsOzCmhpc3RvcnkK4paBSEQK4paBc2lndWllbnRlCm5lbGwK4paBR3JlZQriloFUaQriloF0cmFuc2ZlcnJlZArDqXF1aXBlCuKWgVBoaWxpcHBlCuKWgWVuY291cmFnCuKWgVZpZXRuYW0K4paBZ3JhcGhzCuKWgXN5bW1ldHJ5CmZyZWQKd2VlawriloFicm9uemUKcnlzCuKWgW5hbWVseQpvbmRlcnMKbGVtYWduZQpYWQpDb252ZXJ0Cn1dKApSZWdpb24KcGVjaWVzCuKWgXRleHR1cmUK4paBY2hyCtC90LXQs9C+CuKWgXNvbWVib2R5CmFxdQplcmFzCuKWgdCd0L7QstC+CuKWgWRlegphbml1Cm9rcmF0CuKWgWNvdmVycwriloFzaWduYWxzCtGS0LUK4paBSGViCuKWgUFudGkKSVZFCuKWgXJlc3MKTEVURQp5bmEK0L/Qu9CwCtC20LTQtdC90LjRjwriloFjaGFtcAriloF2aWxsYWdlcwpab25lCuKWgWlQaG9uZQriloFzb3V2ZW50CtGB0YzQutGWCuKWgWZlYmJyYWlvCsOpcmNpdG8K4paBWEkKb2thdAriloFtZW1icmVzCmp1bml0CuKWgURyYXcK4paB0L/RgNC+0LLQvgphdWRpbwplbmRsCuKWgU5hZAriloFtYWduaXR1ZGUKU3VyCmljaW5nCuKWgXVudwriloHQvtGC0YDQuAriloFCZXkK4paBVmlrCuKWgXBvbMOtdGljYQpwb3J0ZXIK4paBQmFyYmFyYQrDoWx0CmJpYgriloFhY2NvbXBhbgpWUAriloFlbmNvZGVkCuKWgVNvbWV0aW1lcwpiaXJkCuKWgVVsdAriloF0dW4KZ2V0VGV4dAriloFhcnJpdmFsCnNjcmlwdHN0eWxlCntgCuKWgXBlcnNwZWN0aXZlCkxJTkUKRm9ybWF0dGVyCuKWgWJvbQrQstGA0LAKREVCVUcKQm91bmRzCuKWgVRpdGxlCmzDswpEYW4K4paBZ2VuZQriloFCaXQK4paBcmVwcm9kdWNlCuKWgWdyYXBoaWNzCuKWgdGB0LXQvArRgNGRCuKWgdGA0LXQutC4CnVzYWxlbQrRgNC+0LYK4paBREVTCuKWgVNvZnR3YXJlCnVyYW5jZQppdGhtZXRpYwplbmVzcwppY2hpCkNvbnZlcnRlcgriloFnaXRodWIKZXJkaW5ncwpnbGlzZQrDoWNoCuKWgWJ1cmllZAriloF2aXNpb24KTWlzcwriloFzZWVzCuKWgXBlcnNvbm5lcwriloFJbnRlbAplbGlhCuKWgcSNbMOhbgriloFjaGkK4paBa2xhcwphdXTDqQriloFzdGFyawpjemUK4paBZHJpdmVycwp2bgohLAriloHQs9C+0LTRiwpIaQriloFleHBsYWlucwphcnRpY2xlcwriloF6dWcKUHJvbQo+PQriloFCZWF0CuKWgVNheAp2ZXJ0aWNhbArQutGC0L4K4paBcGxhbnRzCuKWgVLDqWbDqXJlbmNlcwriloFvZ25pCuKWgWN1cnMK4paBU0sK0L7QvdC4CuKWgWRlc3RhYwoiKTsNCuKWgVN1cmUK4paBcGFydGlkbwriloFGb2xnZQriloFNb29yZQriloF3egrRgdC60YPRgQpsdHJlCm9uZG8K4paBcG9zZQppbW9zCtCx0L7QuQrRhtC40L/QsApqdXMKLi4uLi4K4paBw6lwb2NhCuKWgXF1YW50bwriloFTdXBwb3J0Cmdlc2NoaWNodGUKU0VSVkVSCuKWgUdlb3JnZXMKZW51bQriloFoZXJtCuKWgW5lYm8K4paBQ2hyCmNoYXJhY3RlcgriloEqKioK4paBRm9yc2NoCmlhbWkK4paBwr8KY3ljaAriloFmaWZ0aApzZW50CuKWgWFuZGVyZW0K4paBcHJvcG9ydGlvbgriloFwcmVzdAriloFHaXJsCuKWgWRyYW1hCndhbmQK4paBTWFpbAriloFMdXgK4paBa3RlcsO9CuKWgUdlc2VsbHNjaGFmdAriloFIaW53ZWlzCm5pc3NlCuKWgW1vbmRvCkVxCuKWgXBlcsOtCuKWgWVhc3Rlcm4K4paBVUVGQQp1YWxlCuKWgWNvbnZleAriloHQv9C+0LvRjAriloFIZXkKemVuaWUKaW5pdGVseQriloFadXNhbW1lbgpTU0wKb2NhbAriloFjYW5hbAp2b3kK4paB0JrRgNC4CuKWgWvDtnrDtnR0CuKWgWNhcnMK4paBdmVyc2nDs24KRW52aXJvbm1lbnQKSGVyCuKWgXNlw7EK4paBc3BhdGlhbAp5bWkKRmlyZQriloF2ZWdldAriloFXaWUK4paBem5hagriloFkYW1hZ2UK4paBZW5kbApnaWYK4paBcXVhbGkK4paB0LrQvtGC0L7RgNGL0YUKZWxsYW4K4paBbWVucwriloFwbHVnCuKWgWFidW5kCkZJRwriloFzZgriloFjb25mbAriloHQvdCw0YHQtdC70LXQvdC40Y8K4paBcHJpbmNpcGxlcwriloFHYWJyaWVsCmliZQriloF7JQriloFwb2JsYWNpw7MK0L3RltGG0LjQv9CwCuKWgWV4dHJlbWUK4paBYXNzZQriloF2dQpNb2NrCuKWgXNwaWVsdGUK4paBQWVyCuKWgWRhdG9zCmVuZGVzCuKWgUdlbAriloFHb3IKQ2hyaXN0CmNob3MKUHJvY2Vzc29yCuKWgWluc3RydWN0CuKWgXBpY2tlZApuYWhtZQpmYWhyCuKWgWluZGljYXRlZAriloElLgriloF0cwriloFub3RhYmxlCuKWgXF1YWxpZmllZAriloHQkNC7CkJsYWNrCuKWgWNvdW5jaWwK4paBb3ZlcmhlYWQKYWNpCmFubsOpZQriloFpbml0V2l0aApiacOzCuKWgWludHJvZHVjdGlvbgriloFjb21wYW5pb24K4paBZXhwb24K4paBa8O2cgpvYnkKYnVybgpnbnUKdmlydHVhbAriloFpbnRlbGxlY3QK4paB0LTQtdGA0LbQsAonKwrQsdC70LUK4paBc3RyaWN0bHkK4paBcmVjb2duaXplCmhvdXIK4paBV3Jlc3QKZW5uZW4KJCkuCmZmZgriloFDZW50cm8K4paBUGl0dAriloFkemlhxYIK4paBY2VsYQriloFmcmFuY2VzZQrRgNCw0LzQuApzcGVjaWFsCuKWgUR1cAp0b2lyZQrQutCw0LvRjApDT1VOVAriloFCcm9vawriloHRgNGD0LrQvtCy0L4KcHVibGlxdWUK4paBc2Vjb25kYQriloFjb21wdAriloFibGFuZApCZWZvcmUK4paBUGFjawphbHR5CsO2ZGVyCuKWgWludGVydmFscwriloFEYXRlbmJhbmsKTW92aWUK4paBdHJhbnNtCuKWgXRhcAriloHQv9C+0YcKZm9uCmlhaQriloFmaWIK4paBd3lkCuKWgWh1bmcK4paBYWxpdmUKQ2xlYXIK4paBcHVzaGVkCuKWgXR1cGxlCmFjaGVuCtCz0L7QstC+CuKWgXJldmVycwriloFhdWdtZW50CuKWgWNoYWxsZW5nZQpsb3N0CuKWgWRldXhpw6htZQpzdHJ1Y3RvcgriloFtZWhyZXJlcgphdHVyYWwKU3BsaXQK0YHRgtC10LwK0YjQu9CwCilcXAriloFEb2cK4paBZGV2ZWxvcGVycwriloFub2QK4paB0YHRgtC+0YDQvgriloFOYU4K4paBcHJpZXN0CuKWgWV4aGEKVU5ECnBhaXIKYWxvbmUK4paBbW9vbgriloEjIS8K4paBZ3Vucwpyb2xhCtGH0LjRgtCwCuKWgUVuY3ljbG9wZWRpYQphdGlzCuKWgSciCnp5Y2gK4paBc3VwZXJmaWMK4paB0Y3QugrQtdC00LXRgNCwCmZlZWQKTEFZCkZpCnVua3MKaXNlY29uZAriloEnQAriloFBZGRpbmcK0YDQvtC1CuKWgXRhbmcK0YbQvgpodW5nCmJpcwpza8OpaG8K4paBYWR2ZXJ0CuKWgdC30LDQvdC40LzQsAp1enoKw6FnaW5hCuKWgVRlbApzaWcK4paBRXoK4paBZ3VhcmFudGVlCuKWgXRlYWNoaW5nCm90eQp0ZXJtaW4K4paBZGlzdHJpYnV0aW9ucwpGTEEK4paBR2l1c2VwcGUKcXVlcnlTZWxlY3RvcgriloEvXAriloFTcXVhZApnegpkZWxheQriloFzdXJyb3VuZGluZwriloFtYW51cwriloFIb3UKwrIsCuKWgWN1bHRpdgriloF0cm91YmxlcwriloFyYWlzb24KZXhwYW5kCuKWgWNvdgpudW5nZW4KKSl7CuKWgWdlZW4K4paBYXXDn2VyCuKWgdCb0ZYKxZlpCuKWgXNpdHVhdGlvbnMK4paBdGVsZXAK4paBSmVkCuKWgXRyYXZhaWwKbGlhcwpidWxsZXQK4paBc2VsZWN0aW5nCmF2aWVyCuKWgWVzc2VudGlhbAooLwp5eXl5CsWhdMSbCnVsdHkK4paBa3JhCuKWgXRhYnMK4paBZXhwZXJpZW5jZWQKYXppCuKWgURpcmVjdG9yeQriloFjcm9uCuKWgXNwZW5kCuKWgVJBCuKWgXNlbGVuaXVtCuKWgVRow6kKRWxlbWVudHMKY2lpCuKWgXBsYXQK4paBYXJjaGl2ZQriloFhc3Npc3RhbmNlCuKWgW5lY2sK4paBQXZlbnVlCuKWgXdoZWVsCuKWgWhhZGUKQ29tbW9uCuKWgURpYWxvZwriloFmb3JnCuKWgXN1cmVseQriloFob2NrZXkKa3TDswriloF0awriloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloHiloEK4paBQnJ1Y2UK4paBZW5vcm0KLOKAmQriloFDaHJpc3RvcGhlcgpqZXYK4paBcXVhZAriloFBSkFYCuKWgXJlbGllZgriloFtb2Rlcwpza2zDpHIK4paBVmlkCuKWgVNlcmlhbAriloF0b2tlbnMK4paBUG9sYW5kClxdCuKWgXZpZGUKcm9vbXMKb21hcwriloFCdXJlYXUKY3gK0L3QvtGB0YLRjNGOCuKWgXNpZ25zCtGI0LXQvdC40LUKbG9zc2VuCuKWgVF1ZWVucwriloFtZW1icmUK4paBbWV6CuKWgUJvb2wK4paBTmFqCuKWgU1lbW9yeQriloFLaGFuCuKWgWzDoAriloFIdWQK4paBZGlzbWlzcwppZ2h0aAriloFmcwpwcmV2ZW50CuKWgdC80LXQtNCwCuKWgVBvbGljZQriloHRgdC60L4KZmluaXRlCuKWgWFtaQriloFNdWNoCm93YW5pYQpPUlkKaW9ycwriloFQcmVtaW8K4paBdGV4dGJveApkbQriloFhZmluCuKWgURvbmFsZAriloFQcml2CuKWgWRlY2lkCuKWgU1hdXJpY2UKYWdhbgriloFCcml0YW5uaWNhCuKWgW9mdAriloFjb25zZWN1dGl2ZQoiPz4K0L7QstC40LkKc3R1ZGVudAriloFwZXF1ZQriloFkaWVzZXMK4paBcmV0b3VyCsOpdHIK4paB0YHQtdC3CuKWgWtyZQriloF2b3RlcwpydXB0aW9uCml6YWRhCuKWgVdpZWwK4paBR3JheQriloFMZW9wCnRlaWx1bmcKKFsnCuKWgXdoaXRlcwpmcmljYQphbmltYXRpb24KY3VybApsaW5ncwo9IiQKbG95ZAp0ZXh0c2MK0L7RgNGDCuKWgdGB0LXQu9CwCmVzaWFuCuKWgU1pc3Npb24K4paB0L3QtdC30LAK4paBdWx0aW1hdGVseQrQsdC+0LIKb2xlbgrRgdC60L7QvNGDCm5ldGUK4paBRGl0CuKWgWNvc3RydQpkZXBlbmRlbnQK4paBUmVzb3VyY2UK4paBaG9zdHMK4paBcmVhcgpEdXJhdGlvbgrQvdC40LrRltCyCtCc0LAK4paBcGxhbm5pbmcK4paBcHJlZGljdGlvbgriloFMeW4K4paBa2lyCuKWgUxlZ2lzbArQvNCw0YIK4paBU29jY2VyCuKWgXN1cnZleQriloFlc3RhZG91bmlkZW5zZQpvcmdlbgpqb3VyZAriloFhcHJpbGUK4paBaWRzCtGB0YzQutC1CuKWgWVtcGxveWVlCuKWgVNjaGF1c3BpZWxlcgrRgNGKCuKWgW11bHRpbWVkaWEK4paB0YHQstC+0Y4K4paBd2luZQriloFFVQppY8SDCuKWgVJoZWluCuKWgVBhbG1hcgpvdGVjYQriloFwcmVwYXJlCuKWgVRvdAriloFOdWxsCuKWgWtpbgppbmFscwriloFOZXd0b24K4paBdGJsCuKWgVNvbGQK4paBdmVyZgphdHVyaW5nCuKWgWxhcHRvcAriloHQodC+0LLQtdGCCnNlY3JldAriloFPbHltcGljCuKWgWZvb3RiYWxsZXIK4paBUnVkb2xmCuKWgWNvbmhlCnp5c2sK4paBZXZhbHVhdGVkCsK7KQpzaG9wCnJlcG9zaXRvcnkK4paBemFjaAriloFsb3NpbmcKZXR0ZXIK4paBV2lydHNjaGFmdArRgtCw0LoK4paBdW5uZWNlc3NhcnkK4paBUGhvdAphbnNrYQriloFOYXRpdmUKQ0NFCuKWgWZpZnR5CuKWgWVydwpyaAppc3NlbnQKfXsoCuKWgWxhbsOnCuKWgVhjb2RlCtCz0L7RgNC+0LQKY2lyCuKWgXBlbMOtY3VsYQriloFPc2NhcgriloFzaG9yZQriloFzdXBwbGllZApleGFtcGxlcwpNZXNzClZJQ0UK4paBZXhjbHVkZQriloFoZW4K4paB0LPRg9Cx0LXRgAriloFGcmFnbWVudAriloFCaXR0ZQriloFCZXNpZGVzCuKWgWhlcwriloFpaHJlbQriloFTZXJnZQriloFhcnRpZmljCj0iJHsK0LvQvtCy0L4KdXRldXIKdGFpcmUK0L/QsNGBCuKWgWVhc2llc3QK4paBZmFtaWdsaWEKTm9ybWFsCuKWgWRhbGxlCuKWgW5hdGlvbnMKcnAKdGhlYWQK4paB0L7QsdC70LDRgdGC0ZYK4paBRGVtb2NyYXRpYwriloHRh9C10LvQvtCy0LUK0LzQvtC2CuKWgdCz0LXRgAriloFzbWFsbGVzdAriloFQdWJsaXNoaW5nCuKWgVRzCuKWgWxhdWdoZWQKbGxlCuKWgUFtdAriloFJSVMKRk9STQpNYWcK0LTQvtC9CuKWgXN0b3JpYQriloFvcmdhbml6ZWQKxI1uw60K4paBb3gKbGluZ2VuCuKWgWx1ZWdvCmNjacOzCuKWgXJlbHkK4paBdHVzc2VuCmVydGVuCuKWgWhvbm91cgriloFDbGF1ZGUK4paBS29yZWEK4paBTWV0cm9wb2wKU3VwZXIKcmllbgrDqXJhdHVyZQphdHRybwriloHQsdGW0LvRjAriloFIZXJiZXJ0CuKWgWF1dGV1cnMK4paBZGFyYXVmCuKWgW1lbnRhbAriloFyYW5nCuKWgXPDs24K4paBU29waAopIiwKRGVzY3JpcHRvcgpwcmVwYXJlCuKWgUxhbmRrcmVpcwpIQwpjcm9zcwrQu9C40LfQsAriloFMb2dpbgpvbmVuCkZlYXR1cmUK4paBbXVzZXVtCnZlawriloFOZWxzb24K4paBcmVqbwriloHQutC+0LzQsNC90LTQuAriloFzdW1tYXIK4paB0YHQu9C10LTRgwrDpG1wCuKWgUdhcwrQstC+0LwKVkFMVUUKaW5nZQpwZXJpb2QKbGFzc2VuCsOhdmFsCuKWgWFsdG9nZXRoZXIKdW1waAppc3RybwrEhcW8CuKWgUtlZXAK4paBTWFyY28K4paBw6l0YW50CuKWgURyZQpnZW9tZXRyeQriloFLYXMKbWVzc2FnZXMKQ29vawriloFTaWRlCuKWgdC60L7QvNC4CtGB0YLRgNC4CuKWgWV4Y2VzcwriloFCaW9ncmFmaWEKWFhYWAriloFOaWUKdmVuZG9yCnhzZApNaWxsCnByb2Nlc3NpbmcK4paBTWlzc291cmkK4paBcGVybWV0dAriloFhcGFyCuKWgWNyb3dkCmZlcnQK4paBRG91CnLDrQriloFDQwriloFwYXltZW50CuKWgUhvbGx5d29vZAriloFWaXJ0dWFsCuKWgXNwb2tlbgriloF0cmFtCuKWgUNvbW11bml0eQriloFhZG1pbmlzdHJhdGl2ZQriloHQstC+0LvQvgpnaW9yCnZpc29yCuKWgdCj0LrRgNCw0LgKc3RhZ2UK4paBRm9ybWF0CuKWgWNvbnZlbmllbnQK0J3QsAriloFtZWRpYW4K4paB0LLRgNCwCuKWgdCf0YDQtdC80LAKZW5pZwriloFPcGVyYQpyw6lzCuKWgWZtdAriloFlZmZpY2llbmN5Cm1hbGUKTWFzdGVyClNlcmllcwriloFzeWQKZ2VuZXJpYwppbnRlcnZhbAriloFlZmVjdAriloFpbndvbmVycwrQu9C40LzQv9C4CmlyZW1lbnQKRXJyCsO2aAriloFseWluZwriloFTZXR0aW5ncwohPQplbWF0aWMKYXJndgriloFCYXNpYwriloFjb25zaWRlcmF0aW9uCuKWgWhhYmUKLSUK4paBbW91bnRhaW5zCuKWgXBlYWsK4paBZmFsbGVuCmVkZWQKbG9naWMK4paBbWF0Y2hlZAriloF0eXBpbmcKKX0sCuKWgWZhbmN5CuKWgWVsZWdhbnQK2KfZhAriloHRg9GH0LDRgdGCCuKWgVNhcmFoCuKWgVZlcmQK4paBdGVnbwpydWxlcwriloFtb3VudGVkCuKWgdGW0LwK0LXRgNGDCnN0b2ZmCmZhaHJlbgpkaXN0YW5jZQriloFMaWNlbnNlCuKWgUxFRlQK4paBd3AKL3sK4paBYW1hem9uCj4mCuKWgWVsc8WRCnF1YXJ0ZXJzCuKWgXNob2NrCm5pY2sK4paBQXJjaGl0ZQriloFTcXVhcmUK4paBcmF0ZXMKaW9yZQriloFOYXQK4paBQ2hhcmxvdApyZWljaGVuCuKWgXZhcmlhdGlvbgpvc2lzCmxpZmUKc2xpZGUKYWJpCnVraQpteXNxCuKWgXByaW1pdGl2ZQriloF1bml2ZXJzaXRhaXJlCkxFTkcKYWxlxbwKZWJvb2sKc3luCuKWgUdlZ2VuCuKWgUvDvAriloHQsNC70LUK4paBTHViCmNvbmN1cnJlbnQKaXp6YXRvCuKWgXN0dWIK4paBaWUK4paBJy4vCmNvZAriloFpbnRlcm5hY2lvbmFsCuKWgUdsYXMK4paBbWFyZQriloFOZWIK4paBR0IKa3dhcmdzCuKWgWF1bWVudApXSUQK4paB0YDQvtC0CnB1bmt0CuKWgUdyYWQKU04KQU1QCuKWgUJvcm4K4paBR3VlcnJlCtCz0L7RgtC+0LIK4paBbWVkaW8KTWVkCnN1cHAKYWN0dWFsCmRyb3Bkb3duCuKWgW9rdG9iZXIK4paBxZkK4paBY2lyY3VsYXIK4paBc2tpbgriloFlbXBoYXMK4paB0LPQvtC70L7QsgriloFwdWUK4paBaW5mb3JtYXRpb25zCuKWgVdvbGZnYW5nCuKWgXVzZWxlc3MK0LjRggriloFKb2FuCuKWgdCx0L7RgAriloFHbGFkCuKWgUtub3cKa8OpbnQKc3BlZWQK4paBS2V2aW4KdW5mdAriloFhcnF1CuKWgUNhc2EKKC4uLgriloFyYXBpZGx5CuKWgXByb2JsZQriloHQktC40LrQuNC/0LXQtNC4CsW+ZW4K4paBTmViZW4K4paBTWV0ZXIKQ2hpbGRyZW4KY2VtCmlnb3MKYWp1CuKWgVJldHJpZQriloFIZWxsCuKWgWdpZwriloFjb250cm92ZXJzCuKWgXpvb20K4paBY2VucwriloFhbGN1bmkK4paBSGVhZGVyCk1ldGEKUmVxdWlyZWQK4paB0LjQvdGB0YLQuNGC0YMK4paBc2t1cAriloFpbmdsZXMKw6lnbApiaWoK4paBdMOpcgriloFjb21wYWcK4paBY29tbWl0dGVkCuKWgXByb2Nlc3NlZApMb3dlcgriloFGb3JlaWduCuKWgXNlcQpzaGVldHMK4paBRmVtCmhvegppbmtzCuKWgWthbGwKdmFyaWFudAriloFsaWJybwriloFjbGlja3MK4paBZ29iaWVybm8KaWVnZWwK0LzQvtCz0L4KZ2VtZQriloF0b3dlcgriloFwYXJpc2gK4paBVENQCuKWgWxzCuKWgW5naW54Ck5hTgriloFEaXIK4paBQmVncmlmZmUKYXJpZQrDrW1wCmljaW9zCuKWgXNoYXJpbmcK4paBY2luw6ltYQpiZWMKUkVECuKWgUtyYQphYm9sCuKWgWZsdXgK4paBZXhwZW5zaXZlCuKWgdGB0YPRidC1CuKWgWBfCm9jegrQu9C40YHRggriloFhY3F1YWludAriloF3aXNlCuKWgXBvdXZvaXIK4paBZGV2YW50CuKWgW1vbWVudHVtCmltbWVyCuKWgUNvdXBlCmluZGV4T2YK4paBZG9lc250CuKWgdC30LDQsgriloFsaWNlbnNlCuKWgcOiCkNTUwriloFyaWNlClRlYW0K4paBYW5vCmxpdAriloFtZXJnZWQK4paBQ2VsbArQu9C7CmJveQphc3RzCuKWgXNlbGwK4paBZ3Jvw59lCuKWgXZpcnR1ZWwKQ2FuY2VsCuKWgXNqCmdtZW50Ci48CtGH0LDQuQppw6sKYWtoCml6ZXJzCnByaXQK4paBVGliCuKWgWVsYWJvcmF0ZQriloFmw6kK4paB0LzQtdC00LgKTEVOR1RICuKWgXByaW1hcmlseQriloFzY29yZXMK4paBY2FycnlpbmcK4paBbGFrZQpjb21wb3NlCuKWgVRvd25zaGlwCnVuZ2UK4paBYWxiZXJnYQphbnljaApxdWVsbGUK4paBQXJrCuKWgXByaXMK4paBdm9sbArRiNC70LgKVmFsaWRhdGlvbgriloFjZXV4CuKWgXBvcHVsYXRlCiINCuKWgWZlbW1lcwpBTkcK4paBRGVzcGl0ZQrQstGL0LUKaXNrZQp6dWcK0L3QsNGH0LAK4paBaGF0dGVuCklOU0VSVApFbXBsb3llZQriloFtb21lbnRzCuKWgcO6bHRpbWEK4paBaG9sZGVyCmJsYW5rCkNvbGxlY3Rpb25zCmF0aGVycwriloFncmFkZQriloFhZmZhaXJzCi4kJAriloFkZWx0YQriloFKdWdlbmQK4paBZXNwYcOxb2wK4paBT1VUCuKWgW1hdGhlbWF0aWNhbAriloFtb25nbwriloHQpNC1CnVsaW5nCuKWgXJldm9sdXRpb24K4paBY29pbgriloFzdWJjbGFzcwoiPT4Kw6RjaGUK4paBcHlnCtGJ0LDRjwppbGxlcnkK4paBY29tZW56CmRlcHRoCuKWgWPDqWwK4paBcmVzaXplCuKWgVNhbWUK4paBc3RyaWsK4paBdGlyCuKWgXNjYXJjCuKWgU1lbWJlcgpzdWJzY3JpYmUKw7PFvArDunRib2wKZXhjZXB0CuKWgWRyaXZpbmcKa2llCnpvbnkKw6htZXMKRGF2aWQKaXNzYW50CuKWgdGC0YsK4paBw6lsZWN0CuKWgXJlbmFtZQriloFSdW5uaW5nCuKWgWludGVyZmFjZXMKLy8vLy8vLy8vLy8vLy8vLwriloFXYWxrZXIK4paBc29jacOpdMOpCuKWgWFza3MKYnJpZAriloFqZXdlCuKWgXNlaW5lcwriloFhZ2VudHMK4paBTVkK4paBTGF3cmVuY2UKZGVzcwppZXNlbgriloHQu9GO0LTRj9GFCtC/0YDQsNCy0LgK4paBYW5jZXN0CuKWgXdlbGNoZQpyYXVtCuKWgW9yYgpzY2FsCuKWgUxlYXIK4paBd2VhcgriloFzbGF2ZQriloFyZW5hbWVkCsSNZW4KbWFzdGUKYW5nbGVzCuKWgUFtw6lyaWNhCuKWgXRpCuKWgWRlbXNlbAriloFiZW5lYXRoCmJpbmFyeQriloFlZGljacOzbgriloFraWxvbWV0CnVpdHMK4paBY3VhdHJvCuKWgWVudHJhbmNlCm9uZGlzc2VtZW50CuKWgWJhZwriloFBcm1lbgppam8K4paBTG9ycwriloFkZW1zZWxiZW4Kw6ptCuKWgWRpc2NyZXRlCuKWgXByb21pbmVudAriloFKYXkKZGVjb3IKREwK4paBZMOtClN0cnVjdAriloFQcm9kdWN0aW9uCnRoZXkKYXJpdXMKc2Nobml0dAriloFDb3UK4paBbGV4CnlvdXR1YmUK4paB0YDQsNCx0L7RgtCwCnN0YXRpb24Kc2VwCuKWgW1pcnJvcgriloFoaXRzCuKWgUJlY2sKYXRpY2FsbHkK4paBTGF6CuKWgXdpbm5lcgpERVgK4paBSU5UCn1eey0K4paBd2VnZW4KbWFkCkFuZ2xlCnppbmcK4paBQmF5ZXJuCnNhbArDpGdlcgriloFidXN5CuKWgXN0w7ZyCuKWgWZvbGsK4paBcHJpeAriloFhbGxvY2F0ZWQK4paBcHQKYWZmZW4KY2x1c3RlcgriloFjb21wbGVtZW50CsOhcnMK4paBQW1lcmlrYQrRgNGW0LkK4paBdmFsbGV5CuKWgXJvb21zCuKWgW1vaQouIiwKOzs7OwriloFsb3dlc3QKbm9nCuKWgWxhbmRldAriloFwcm9ncmFtbWUKY2hpbwriloFXw6RocmVuZArDoW5kZXoK4paB0LTQvtC70LYK4paBb3V2Cm9tw6FueQriloHQktC40LrQuNC/0LXQtNC40LgK4paBc8OzCuKWgWVsZWt0cgpEZXNjCuKWgUJlYXV0CtC90LDRgAriloHQvNC+0LbQtQpQaWVycmUKZXNvdGEK4paBb3BlcmF0ZWQK4paBZm9ydGUK0YDQuNGBCuKWgW9wcG9zaXRpb24KYWxpYQriloFTeWwKZ2V0TmFtZQrQstC10LvQuApmaWsK4paBY29tcHJvbQriloFUZXh0VmlldwpTcHJpbmcKbWV0YWRhdGEKZW5ndQovLAriloFjYXJyaQppc3RvbAriloFkaWFnb25hbApsaXN0YQppemVuCuKWgXJlbmRlCmdjYwpiZWNrCmxpdXMKaXJhbApSZXNvbHZlcgriloFwZXJjZW50YWdlCuKWgWF0dHJhCnN0cmluZ3MKd2nEhXoKb2RzCtCy0L7Qu9GOCsSZxbwK4paBbmV3c3BhcGVyCmltaXRlcgpBQkMK4paBTWFuY2hlc3RlcgpbewpBZ2VudAriloFXb3IK4paBS2F0aAriloHQv9C+0LLRlgriloFlbnRvbmNlcwriloFuaXZlYXUKYXR0ZWQKbGVhcm4KYXRpcXVlcwriloHRg9Cx0LgK4paBcXVpbmRpCmJpbmRpbmcK4paBaW1wb3J0ZWQK4paBSG9ybgplbWJlcmcKY29tcGxleAriloFuZXVyYWwKaW5mb3JtYXRpb24K4paBcmVjb2duaXRpb24KaW5ndAriloFpbmhhYml0YW50cwp2dWUK4paBQmV2w7Zsa2VyCuKWgWN1cnZlcwriloFsZWIK0LTRltC5CuKWgXNvdwriloFzZW50aW1lbnQKUEgKcmFjaGUK4paBLSgK4paBZXN0YWJsZQriloFGZXJkaW5hbmQK4paBw6ljcml0CuKWgXByaW1laXJvCuKWgXRleAriloFpbnRlcm1lZGlhdGUKdmVyYWdlCmlidXMK4paBc2VydmVzCml2YXMK4paBYnJ1CuKWgWx1bQphdHRpY2UK0YfQvdGL0LkK4paBRHJlcwriloF2aWRlb3MKZHVyYXRpb24K4paBYWJpdAriloFlZ2cKb2dyYXBoaWNhbAphbHBoClNUQVRFCuKWgdC/0LDRgNCwCnJlYWRpbmcK4paBdmVoaWNsZQriloFmb3J0dW5lCnVsdGF0cwriloFTdG9yaWEKbWlkdArFgsSFY3oK4paBTWVtb3JpYWwK4paBdmFzCuKWgdC30LDQvQriloF1dGlsaXR5CuKWgW9ic2MK4paBcmVsYWNpb24K4paBcnVuYXQKUmVsZWFzZQp0YWtlCuKWgU9saXZlcgriloFTaWQKdWxvcwriloFHYXJjCuKWgdGA0L7Qt9GC0LAK4paBU2FrClB5CmbDvGhydAriloF0cmFiYWwKKnsK4paBemVzCuKWgXN6ZXJlCuKWgXZhcmlvcwriloFvdHJhCuKWgWV2YWwK4paBc2l0dcOpCuKWgXdvdW5kZWQK4paBVmluY2VudAriloHQstC40LrQvtGA0LgK4paBZW5jb2RlCk1vZGFsCuKWgWZvcmIK4paBZHluYW1pY3MK4paBZGVwb3MKYXJkZQriloFzdHJlZXRzCuKWgUtvbW0KPSQoCuKWgdC/0L7QstC10YAK4paBZG9pcwriloF2aXR0CuKWgWF1dG9tYXRpc2NoCuKWgXJlbG9hZAriloFWZXJ3YWx0CmJlcm8K4paBaHViCuKWgW1vcwriloF0dXR0bwriloFGcmVkZXJpY2sKxYJvdwphbnRhZ2VzCmFxdWUKcGFwZXIK4paBZWluaWdlCmApLApkagriloFQbGUK4paBJSwK4paBQml0bWFwCuKWgWZyaWVuZGx5CuKWgXRydWx5CuKWgXN0cm9rZQpyb3BoCuKWgWVuZ2wK4paBY29mZgriloFkdXN0CuKWgUphaHJlcwpwcGkK4paBd3lzCmZhY3RvcgpzY2hsdXNzCuKWgdC00LXRgNC10LLQvdGPCuKWgVBhc3QK4paB0LTQvtC80LAKQ09NCuKWgXB1ZWRlbgriloFnaWZ0CuKWgUdsYQriloF0cmlnZ2VyZWQKw6lseQrDvGzDqXMK4paBT2xpdgriloF2ZXJzbwriloFsbGUK4paBR2xpCuKWgUx0ZApvYQriloF0ZXJyaXRvcmlvCm9yZHJlCuKWgWRlY2sKZHJhCmFzenQK4paBY29uY2VybmluZwriloFBZGRpdGlvbmFsbHkK4paBa3RlcsOpCuKWgWdydW5kCuKWgUdlc3QK4paBbWlzdW5kZXIKcHJldArilIDilIDilIDilIAK4paBcmVwdXRhdGlvbgp6aWEK4paB0YPRgdC/0LUK4paBZXNjYXBlZAriloFQcmFnCnBlcmZvcm0K4paBYXVzdHJhbAriloFWYXRlcgrRh9Cw0YEK4paBcmFjZXMK4paBQnl0ZQpNYXNrCuKWgVRlcnJpdArRgdGC0Y4K4paBVm9jaQriloFGaWNoaWVyCuKWgdCd0LDRgdC10LvQtdC90L3RjwriloFVbnRlcnNjaGVpZHVuZwp0ZWVudGgK4paBcGlsb3QK4paBamkK4paB0LTQstGD0YUK4paBb3JpZW50YXRpb24KaW5kcmUK4paBRG9ydArDp2FzCtC/0LvQuAriloFyZWFjdGlvbgriloFjb25zaXN0aW5nCuKWgWZlcnJvCtGC0LjRgdGC0LgKeWFyZAriloHRgdCy0ZYK4paBaW50ZXJwcmV0YXRpb24KacSFCnJhaAriloFmYW5kClB1YmxpYwriloF1bml2ZXJzZQriloFyZXRpcgriloFjb25zY2lvdXMKYXJxdQriloF3YXN0ZQriloFCaWIKeWNsZXJWaWV3CuKWgWxpc3RlbmluZwpnbGVpY2gKbmllanMK4paBY29ycmVsYXRpb24K4paBcmVjZWl2ZXIK4paB0YPQtNCwCuKWgWNvdXJhZ2UKdWNocwpmYXNzCuKWgWNodW5rCuKWgUFuZmFuZwriloFncm/Dn2VuCmNvbnRpbnVlCuKWgVdhcnN6YXdhCmjDqQppeQppdmVtZW50CuKWgc6xCuKWgWV4cG9zZWQK4paBemFobAriloFzYWNyCuKWgUxvb2tzCuKWgWVhZ2VyCmVudGVuCkN1cnNvcgovXwppeGEK0YDQtdC70LAK0LfQvdCw0YfQsAriloHRhNCw0LzQuNC70LjQtdC5CuKWgWFyZ2VudAriloFBbmRlcnMKxZN1dnJlCuKWgUlzYQrQvNC10L3RgtCwCuKWgWFkdmVycwpyaWN0aW9uCkdQCuKWgdC/0ZbRgdC70Y8K4paBcHJlc2VydmUK4paBR2FyZGVuClJhdGUKYXByw6hzCuKWgXJlYWRhYmxlCmluZHUK4paBc2tpbGwK4paBaGVscGluZwpvZ3JhcGhpcXVlCmNsaW5nCm9sb2dpc3QK4paBRmlsdGVyCuKWgWZpbmdlcgriloFWYWxsCuKWgVBvbGlzaApsZwriloFGYW1pbGllbgriloF3YXRlcnMK4paBcHNldWQKYXphCl8pCkFSWQriloHRgdGA0LXQtNC4CuKWgU11c3QK4paBQm9kCmFub24K4paBbGFkbwriloF0aWdodAppbWVuCmFwcGVuCmZyYW1lcwppbmdlcnMK4paBQ09WSUQK4paB0LfRlgriloHRgdCy0LUK4paB0YbRjAriloFMZWZ0Cl1dOwrRh9GMCtGE0LjQutCwCuKWgdGB0LvQvgriloHQv9GWCuKWgWV4aXN0ZQriloFBdGxhbnRpYwriloFtYWludGFpbmVkCuKWgWlycmUK4paBYW5uw6llCuKWgWNvbW1lbnRlZArQstC10YDQvgpiZXJ0YQriloFMYWQK4paBVXBvbgriloFwYXVzZQptaWxsCm9wdGVyClVLCtGA0LXRgQrQvdGG0LjQutC70L7Qv9C10LTQuAriloFhbG9uZ3NpZGUK4paBcm9ib3QK4paBZmVydAriloFtb3kK4paBYWRlCk1hcHBlcgopLT4KaWd1YQrDqXRpcXVlCtGC0LrQsAphbGlhcwriloHQvtGA0LgK4paBTWFnbgriloFnZWjDtnJ0ZQppbWIKKX17XAriloFXaWtpcMOpZGlhCuKWgXVycwriloFlbmRlCmxlYgriloFHQwpIb2wKYW5jaW5nClVuaW9uCuKWgXRlbsOtYQpUVAriloFlc3RhdGUKaMOhCuKWgdC/0L7Qu9GWCnVsdGFuCuKWgUhvY2tleQp1bHNlCuKWgWNob2ljZXMKc2NoZXIK4paBW10sCuKWgXBvdGVudGlhbGx5CuKWgcOcYmVycwriloFhZG1pdApDb21tZW50CtGB0YLRjwriloFWaWVuCuKWgdGG0ZYK4paBcGVybXV0CmNnaQriloFjcsOtdApDb25zb2xlCmN0aWMK4paBb2tyZXMKYXdrCmZvb3RiYWxsCm91ZXN0CkNUWVBFCm9sb2dpcXVlCuKWgWNvbnN0aXQK4paBaW50ZXJlc3RzCuKWgVByb2dyZXNzCuKWgU1lbnUK4paBdGFrw6kK4paBQXNpYW4K4paB0LfQsNGJ0LgK4paBeW91bmdlcgriloF3aXNoZWQK4paBU29ydAriloFhdWRpZW5jZQphbWJhCuKWgWdlaMO2cnQK4paBS2Fuc2FzCnlhdW1lCuKWgVByb2Zlc3Npb25hbArDomNlCuKWgWZhdHRvCnRvZAriloFkYXRhc2V0cwriloFmYXJlCuKWgXdhdmVzCn4vCuKWgW1lYXN1cmVtZW50CuKWgXdvbAppbmR1c3QK4paBc3RydWdnbGluZwriloFwdWxsZWQK4paBY2FyYXR0ZXIK4paBRXh0ZXJuZQriloHQtNC10LnRgdGC0LLQuApjbnQKbGljaGVzCuKWgVBvc3NpYmxlCuKWgWZhY2VkCuKWgWh5cG90aGVzaXMK4paBa2lsb20K4paBbsOkcgpib29sZWFuClBZCmFtcGEK4paBa2lzcwriloFhc3Rlcm8K4paBbmVnbGkKYW1lbnRzCuKWgVN0dQphdMOzCuKWgUNvbnN0aXR1dGlvbgriloFpbnRlcnBvbAriloFVbmFibGUK4paBcGlzCuKWgXBhcmMKIl0pCnBsZXIK4paBYXV0b3J5CuKWgWFsZ3Vub3MKeXduYQp9KSkK4paBZmFsbHMK4paBw6lxdWlwCuKWgWVtaXQK4paBcHJvZmlsCmdldHMK0YTQvgriloFNaWxpdGFyeQriloFub21icmV1eApvY3QKUmVwbGFjZQriloFzZWFzb25zCuKWgWNow6J0ZWF1CuKWgXR5cGVvZgpwb2xpdAriloFyYW5kCuKWgXF1YXIK4paBZXJzdG1hbHMK0YHQuNC90LgK4paBcGF5bG9hZArQn9C+CtC60ZbQvQpyZXBvCuKWgVBhdgpTY29yZQplcnZlcwriloFzb2xsdGUK4paB0LzRltC2CsOpYmVjCuKWgWNsaXAK4paBTmljZQriloFuZWJlbgriloFhc3Nhc3MKaXRvcmllcwriloF1bml0eQriloHQtdC9CuKWgUluc3RpdHV0CuKWgWludGVybmF0aW9uYWxlCuKWgdC90LDRg9C6CuKWgWNvbWFuZAriloFrbGVpbmUK4paBYWRqYWNlbnQK4paBZGVsaXZlcmVkCuKWgdGI0LUK0LfQtdC8CuKWgWNvdAp2aXN1YWwK0LLQsNC10YIK4paBQ2Vuc3VzClxfCuKWgXRlcnJpdG9yeQrRh9C40LsK0YfQvdGL0LUKZmx1dHRlcgpEaWRMb2FkCkRvY3VtZW50cwriloFkb2IKQnJlCmFuaW1hdGUK4paBYml6CuKWgWJhdGEK4paBU1UKZXNvCuKWgXByaW9yaXR5CnbDoW4KaXJhcwriloFjaGFyZ2VkCuKWgU1pY3JvCmF0b2lyZQrRh9C10YAKYWJhZAp1cnUK4paBdsWhCmRpcmUK4paBVHdpdHRlcgriloHQvNC10YLQvgopLi4K4paB0KbQtdC90YIK4paBZW50d2ljawriloFNaW5kCuKWgdGE0YPQvdC6CkZ1dHVyZQpsc3QKxYJvxbwKZmxpCnRlbnNvcgriloF0b3BvbG9neQriloFhcnRlCkVSVAriloF2YXJpYW5jZQpJbWFnZXMK4paBKEAKQXJyYXlMaXN0Ck9DCuKWgdCU0LXQvNC+CmF1Y291cAriloFkZW5vdGVzCmltb24K0ZrQuAriloFQcnp5cAriloFaYWcK4paB0LTQuNGA0LUK4paBU2ltaWxhcmx5CtCx0YDQvgriloFtaWxpdGFpcmUK4paB0YLQvtC80YMK4paBSm9obm55CuKWgdCc0LXQutGB0LjQutGDCtGb0LAKU3VwcAriloFqdW5pb3IKb2x0cmUK4paB0JzQvtGB0LoK4paBYWRtaXR0ZWQK4paBcmVsaWdpb3MK0LfRj9C5CtC10LPQvgriloF0ZWFycwppbmdvCm9kdQppdmVuZXNzCuKWgWxvZ28K4paBw7psdGltbwriloFhbGltZW50CuKWgVVJVGFibGVWaWV3CikhCuKWgW5qCmxldHRlCuKWgXJlc2lkZW50CuKWgXRlcm1pbmUK4paB0YPQttC1CuKWgdCh0YLQtQpvZmZpY2UK4paBY2FydGUK4paBbGl2cmUK4paB0JzQvtGB0LrQvtCyCuKWgWVsZWN0aW9ucwrQt9C40LTQtdC9ClRyaWdnZXIK4paBQmVuamFtaW4KYWRkQ2xhc3MK0YHQutC+0LMK4paBT2JzZXJ2YWJsZQpDbGEKZ2VtZWluCuKWgWNvbnNlbnQK0LLRgNC4CuKWgXVuZm9sZAriloFnb3Zlcm5vcgrQvdCw0LsK4paBdG9kYQpSZW1vdGUKYXJpYXMK4paBaW5zdGFsCmZpeGVkCuKWgWRlY2F5CuKWgdC00LXRgNC10LIKeHl6CuKWgURBVEUKaW1hcgpudGlsCuKWgXN0YXJ0dXAKYWxpb24K4paBa29sZWoKY2lvcwriloFyYW5nZXMK4paBc3R1cGlkCuKWgWltcGxlbWVudGF0aW9ucwriloFybQrDqW5lawriloFnY2MK4paBc2PDqG5lCk5hdmlnYXRpb24K4paBwqAK4paB0LrQsNC9CuKWgXRvd25zClVzZXJuYW1lCuKWgdGE0LUK4paBbGVhZGVycwpvaXQKd8OkcgriloFkdW1teQriloFhc3Npc3RhbnQKeyRcCtCx0ZbRgAriloFyb3kK4paBTGF5b3V0CuKWgUp1bmcKTGluZXMK4paBSG9sbGFuZArQv9C+0YAK4paB0JPRgNC4CuKWgUJlbmVkCuKWgdCf0L7QtAp4bHMK4paBR29sCuKWgUFsZWtzCuKWgWVqZW1wbG8K4paBc2V6b24KYXJkaW5nCmZvb3Rub3RlCuKWgUNvbmdyw6hzCnJlZmVyCtGB0LrQsNGC0LAKSXRlcmF0b3IK4paBb3Vyc2VsdmVzCuKWgU1pYwriloFjw7NkaWdvCuKWgdC/0LvQvtGJ0LAK4paBXCQK4paBQ2hhcmxpZQpOb2RlcwriloFwdXp6CuKWgUlkZW50aWZpZXIK4paBZmx1dHRlcgriloFwcsO8CuKWgW9ydAriloFDb3J0CmFzdGljc2VhcmNoCuKWgdCh0LLRjwriloFCdWxsCnVkZW0K4paBYXBwYXJlbnQKOi0tCuKWgdCl0LDRgAriloFMYXAK4paBY29tcG9ydAptYXRpY2FsbHkK4paBY3VyaW9zCuKWgdC80L7QttC10YIK4paBQmgKYXBwaW5nCuKWgWJhc2tldGJhbGwKemV0ZWsK4paBcnVudAriloFNaWxhbgpmZWN0aW9uCnLDrWEK4paBS2luCuKWgXNsb3dlcgpib3RoCuKWgUluc3RpdHV0bwriloFIaXN0b3JpY2FsCuKWgXLDs3duaWXFvAptYXRjaGVzCnljaQriloFlc3DDqGNlCuKWgVNjaHdlaXplcgpOVApTRgphY2lhCmZvcmdlClBvaW50cwpudW1iZXJzCuKWgWZhbGxpbmcK4paBaW5oZXJpdGFuY2UK4paBRXJzdAriloFjdXN0b21lcnMK4paBYWN0dQriloFtaWdyYXRpb24KXCcKUGxhbgpNcgpvdGh5CuKWgXVwZ3JhZArQsdC40YDQsAriloFPZmZpYwriloFXYWl0CuKWgXRvbGVyCmFyZG9uCuKWgXNsaWRlCilfCuKWgdGB0YLQsNCyCuKWgW51Y2xlYXIK4paBQmlsCm93bmVyCuKWgUhhcnJpcwpJbmZvcm1hdGlvbgriloFww7MK4paB0LLQutC70Y7Rh9CwCuKWgW51b3ZvCuKWgUNhdgriloFEZXNjcmkK4paB0LDQugrDs2R6dAriloFyZWFjdGpzCuKWgUFkYW1zCuKWgUFsdGVybmF0aXZlbHkK0YHRgtGA0YPQugopYCwKc3Vic3RyaW5nCuKWgW1hc3NpdmUK4paBaGVhdmlseQriloHRgdC10LfQvgriloFBbmEK4paBdmFsZQpQYWQK4paBRWl0aGVyCuKWgXJzCmFuY2hlCuKWgXVwbG9hZGVkCuKWgSgvCuKWgdGB0L/QvtGACuKWgXJlZHVjdGlvbgriloFUb2t5bwpncmVuCuKWgW1pZ2xpCuKWgWl0ZXJhdG9yCnN0YXYK4paBc3VwcG9ydGluZwriloHDtnN0ZXJyZWljaAriloFOU0xvZwppc3RpcXVlcwpyaW1pbgpNT0RFCn19fVwK4paBZXhwbG9zCtC+0YLQtQriloEo4oCeClNhbAriloFzaW1wbGVzdAriloFnacOgCuKWgdGC0LDQvQriloFjeWwKYmlyCuKWgW1lYXN1cmVtZW50cwpDcmVhdGVkCmVyZWsKbG9va3VwCndpcnRzY2hhZnQK4paB0JLQvtC70L4KdGltZXIKZGVycgriloHRgdGC0LDQu9CwCuKWgXNjZW5lcwriloFwZXJzdQpsaWVzdAriloFzY2hlZHVsZQp0YWwK0LvQtdC90L4K4paBcGFpbnRpbmcK4paBaW1wcm92ZW1lbnQKc29mdHdhcmUK4paBZ292ZXJubwriloFIaXIKRXhlY3V0aW9uCuKWgU9rYXkKUHJvcApsb3N0ZXIK0L3RltGG0LjQv9Cw0LvRlgriloFwZXV2ZW50Cm9sdQriloHQpNCwCnJvbGxvCuKWgdC60L7Qu9C+CuKWgWNhcnJpw6hyZQriloF0b2dnbGUK4paBKCRcCuKWgWFnZ3JlZ2F0ZQriloHQkdGWCnRleHRhcmVhCk9rCml0dG8K4paBc3RpbQriloFyZWN1cnNpb24K4paBRmVkZXJhdGlvbgopX3sKYXRlZ29yCuKWgWRpc3RyaWJ1CkNsb3VkCuKWgW1hZHJlCuKWgWl2CuKWgUxpZXV0ZW5hbnQK4paBc3Vic3RhbnQK4paBbGVhZgriloFLb250cm9sYQpWQQriloF0b21iCtGN0L0KYXRvZXMK4paBZ29kaW5lCuKWgSM+CkNlcnQK4paBZW1wcmVzYQpQcm9wcwriloFwbGFubmVkCuKWgXJhbmRvbWx5CmrDpGhyCmVsZW0K4paBT3BlcmF0aW9uCipgCnByb3RvY29sCigpKSk7CndlbAriloFwcmF3CuKWgdGB0LjQvAriloF3b2IK4paBaGFjZQriloFuZWFyZXN0CmRpc2FibGUK4paBQ29tbXVuCuKWgXJldmVsCkZyZWUK4paBYnJhY2tldHMKSU9FeGNlcHRpb24K4paBYWx0bwriloFtYXJyeQriloFhdWMKKSxcCuKWgXR5cG8KZWRhZAphcsOhCmljYXRvcgp0YXR5d25hCuKWgWJ1ZmYKb3JkZXJzCuKWgWFzeW5jaHJvbm91cwriloFlY29uCuKWgWZldQriloFJcm9uCuKWgXJpc2luZwpSYWRpdXMKY2xrCuKWgXp3ZWl0ZW4KYCcK4paBdW5pcXUK4paBRk0K4paBQnJhbgriloFmbHUK4paBc2Vuc2l0aXZlCnVycmUK4paBSXRlcgriloFTZWluCuKWgWRpZmVyZW50ZXMK4paB0L3QtdCz0L4KY2hpYQriloFBbmxlaXR1bmcKYXR1cmRheQriloFzaG9ydGVyCuKWgXRyYW5zbGF0ZWQK4paBUsOpcwriloFyb2RlCmRyYWcK4paBbGFuZ2UKQmkKw7xiCmxldXIK4paBb3JkZXJpbmcKYWxvdXMK4paB0JrQvtGACmFyY2hhcgpkZXN0cm95CmVydmF0aW9uCl1dLApBY2Nlc3NvckltcGwK4paBYXV0b3J5dGF0eXduYQpTZXF1ZW5jZQriloFwcm95ZWN0CuKWgWJyYW4K4paBKCsK4paBS2FiCuKWgXplbQriloFDYWxjdWwK4paBc2V1bAriloFOaWdlcgriloFjaGlhbQp0aHJvdwriloFQbGFuZXQKYmlsZHVuZwriloF6b25lcwp0cmFuc2l0aW9uCtC70LXQvdC40LkK4paBbWFwcGVkCm9uYXV0ClBhaXIKaWxpYW4K4paBTW9yZ2FuCuKWgXVudG8Kam91CuKWgWhpZAriloFNZXRhCuKWgWVsbGVzCkxvdQpyYW1hCmdlb3JkbmV0CuKWgXNjYXJjZWx5CuKWgW1pbnQKRm9jdXMK4paBQWx0ZXIK4paBZGlvCuKWgWFtcGwKacOocmVtZW50CuKWgdC40YHRgdC70LXQtNC+0LLQsApMRUQKYWxnb3JpdGhtCuKWgdGB0LDQudGC0ZYK4paBIiIpCkhpc3RvcnkKcGsK4paBV2hpdAriloHRgdC40YHRgtC10LwK4paBS2lyY2hlbgpyw6AKQVBQCuKWgTwlCmFudGluZQriloFEaXNrCmNvbnYKd2VsdAriloFGdXQK4paBTm9tCm9yZG8KZWxsaWoK4paBcmVjZWl2ZXMKY293Cnl0dQriloFvYnJhcwriloFwdXJjaGFzZQriloFlYXJuZWQK4paBYWNjZXNzZWQKYXhpCuKWgU1hbnMKaXZhbgriloF0dXZvCuKWgVRyYWNlCnJpbW9uaW8K4paBZGVzZW52b2wKw6lyaXF1ZQriloFyZXN1bHRlZAriloFjb21wdXRpbmcK4paBaW5zcGlyZWQK4paBUHJpemUKKiIKQ29tcHV0CuKWgWV4dGVuc2l2ZQrDqGcK4paBUG9ydMOhbHkK4paBY2FzdGxlCuKWgSouCuKWgXBob3RvcwriloF2b2V0Ck9ORwriloFBbGxlCuKWgXRocmVhdGVuCnN0w7x0CuKWgWFsYnVtcwriloFkZW5zZQpmbGF0CmNvbnRpbnUKU3ViamVjdAriloFyZWFkb25seQpPcHQK0L/QuNGB0LrQvgriloFBYmVyCuKWgVBvc2l0aW9uCuKWgVRvZGF5CuKWgW1pbmkK4paBQmVmCmxpc3RlbgrRgdGC0LLQtdC90L3QvtCz0L4KU1VCCm9zc2EK4paBUG9wZQriloFKaW1teQriloHQlNGA0YMKdW5nc3NlaXRlCuKWgXRyZW4Kb3B0aW0KaXRzY2gK4paBc2FtdAriloHQuNGB0L/QvtC7CiY9CuKWgVByenlwaXN5CuKWgdC/0YDQvtC00L7QuwpDcgplcm1hbm4K4paB0LzQsNGC0LXRgNC4CuKWgUh1Z28K4paBRGV6ZQpUUlVFCuKWgWRlZmVhdAriloF3YXRjaGVkCuKWgUdlbnQKQVVUCm9yb3VzCuKWgdC+0L/RgNC10LTQtQpvcmllbnRhdGlvbgriloFkaXN0aW5ndWlzaGVkCuKWgW1lc21vCuKWgXNsaQrQvNC10L3QsAptaXR0ZWwKZ2VyaWNodApldG9uCi0+ewriloF3b250CuKWgXdlZwriloFjbGFzc2lmaWMKaWx1cwriloFNRAp0YXNrcwriloFjaGltCmF3YWl0CuKWgWdhbmcK4paBd2nEmQp0aHJvdWdoCuKWgVJ1c3NlbGwK4paBZ3Vlc3NpbmcK4paB0LDQutGCCtCx0LvRlgpjYXRlZ29yaWVzCtGB0YPRggriloFGZW4K4paB0LzRg9C2CuKWgW5ld2VyCuKWgUFzeW5jCuKWgXRlcm1lCj4vCtC/0LDRgNCwCuKWgVRydXN0CuKWgU9wdAriloFkYWgK4paBd29uZGVyZnVsCmFkcmF0a2lsCuKWgdCT0YDQsAptYXBwaW5nCuKWgWRpc2NvdmVyeQriloFCRQpFbmFibGUK4paBRnJpZW5kCtGB0L3RjwriloFjb250cm9sbGVkCtGH0L3QvtGXCuKWgWNvbnRyaWJ1dGlvbnMKasWhw60K4paBTGV2CuKWgWZyYW5jw6lzCuKWgW1pYwp6aWsK4paBYWxlbQpjYW5jZWwKIScK4paBZ3JhdAriloFCZWdyaWZmc2tsw6RyCkNhbWVyYQppZmljYWNpw7NuCnLDs2QK4paBQXJub2xkCuKWgWJlemVpY2huZXRlcgriloFmb3VnaHQK4paBZGVwdXQK4paBRHJvcAp0YXgKZGcK4paBSG9wCkdOCuKWgUtpcmNoCuKWgdCR0LDRgApJbnZva2UK4paBZXJoYWx0ZW4K4paBdmVlbAriloF3b3JkcHJlc3MK4paBSU5ORVIKdHJhbnNhY3Rpb24K4paBZMOpasOgCkZhY3QK4paB0L3QsNC00LzQvtGACuKWgWFuZ3VsYXJqcwriloHDoXQK4paBYWxhcAriloFQcmljZQriloFlZmZldAriloFzcGhlcmUKQ2xhc3NMb2FkZXIK4paBcnVnYnkK4paBa2luZ2RvbQriloFNdXQK4paB0LrQuNC90L4K4paBcmV3YXJkCmNpdAriloFwcmVzZW50ZQpTdG8KQ2hhcmFjdGVyCmxvZ3MK4paBY2VudHJhbGUK4paBbW91dgriloFva2F5CuKWgWFwbGljCk1vcmUKw6lueWVrCuKWgUvDtmxuCm5ldHQK4paB0LjRgdGC0L7RgNC40LgK4paBZGVzY3JpYmluZwriloFzb2xkaWVyCuKWgU5lZWQKTGlnaHQK4paBIlw8CuKWgWhhdgplcm1vCuKWgWluZmVyaW9yCmxlYQriloFnZwriloHQutC+0L3RhtC1CmZyYWdtZW50CnNiCkNvdW50cnkK4paBdsSbCuKWgUJlbmcK4paB0K3RgtC+CuKWgdCy0L7QtNC+CtC80LDRgApTVFJJTkcK4paBw7pqCm11bHRpcGxlCnN0YXRlbWVudAriloFpbnZvbHZlcwriloF0ZWNuClN0dWRlbnQKZ3LDqQriloFsZWFuCuKWgWJyaW5naW5nCuKWgU1lZGljYWwK4paB0L/RgNC+0LPRgNCw0LwK4paBVm9nCuKWgdC20L7QsgriloFTcGlyaXQKbnRoCuKWgXN0YW5kYXJkcwriloFQcm9maWxlCuKWgWV6CuKWgdGC0LXRgNGA0LjRgtC+0YDQuNC4CuKWgXN0ZW0KdWlsCuKWgU9nCkJ0bgpuYWwK4paBbmVhcmJ5CuKWgXByb2R1Y2luZwpjcml2CuKWgWFzc3VtcHRpb25zCuKWgVNwYXJrCuKWgUxvdAppdHVkZXMKYWZrYQpmaXZlCmF0aW8K4paBZGlzdGluZ3Vpc2gKcm9jawrDqWdsaXNlCuKWgXJhcHByZXMKPlw8CtC70ZbQuQriloHQvNC40L3QuAriloFpbnRpdHVsw6kKfX0oXAriloFSb3V0CuKWgUJvcmRlcgriloFvdmVycmlkCkhPU1QKcml0dGVuCnNheQriloHQp9C4CmljaHR1bmcK4paBc3RyYWlnaHRmb3J3YXJkCm9iYgriloFUZXJyYQriloFbOgpCZW4K4paBY29tcG9zaXRlCikrXAriloFjcm93bgpkaXJlY3Rpb24K4paB0L3QtdGB0LrQvtC70YzQutC+CuKWgWF2YWlsCuKWgXB1cmNoYXNlZApob29rCmV0aWVzCuKWgWZhc2UK4paBUnVtCuKWgWdlbm9tCuKWgWTDqXQKb3fEhQptcGVnCuKWgdCG0L0KZGVza3RvcAriloFpbmplY3Rpb24KYWdsZQriloFFZGQKX3soCuKWgUhlbQp1dG9zCnByb2oK4paBc3VwZXJmaWNpZQpQbG90CuKWgURvY2tlcgrDpHR6CmtyZWljaAriloF1bmNsZWFyCuKWgVVuaXR5CuKWgXN0cmVhbXMK0LLQuNC0CuKWgXNpbXBsaWZpZWQKRmlsbAriloFzYW50CuKWgUtvbW11bgriloFkdWMK4paB0LTQstC1CuKWgW9icwrFvml0CuKWgUphbmVpcm8K0LHRjwriloFwcmVzc28K4paBTWluaXN0cnkK4paBYnVyc3QK4paBcmVhY2hpbmcKbGl0ZXIK4paBcmVzcG9uc2VzCuKWgUV1ZwriloFzb2QK4paBQ29yZAriloFQZXJtCnBhcnRzCtGG0LjQvNCwCnZhcmlhYmxlcwriloFmb3Jnb3R0ZW4KRmVybgpvc3TEmXAKdmwK4paB0KHQvApraW0KYWrEhWMK0L3QsNC70YwK0LPQu9C1CmhlbHBlcgpkdXAKZXV3CmZyYQplbGxpdGUKYW55YQriloFyZWlnbgpnZXNhbXQK0YHQtdC00LAK4paBUnlhbgriloFmb3JtYXR0ZWQK4paBQm9yZwp3YWxrCuKWgdCw0LsKYWdub3N0aWNzCuKWgUNhcGUK4paBRnJhbmNvCuKWgWZ1Zwo6KQrRjtC3CkZldGNoCuKWgXJvdWdobHkK4paBTWlzCnVldG9vdGgK4paBVmVuZXp1ZWxhCuKWgWFzdHJvbm9tCiIpYApvbWJyZXMK4paB0LrQvtGC0L7RgNC+0LkKw7NwCm93ZWQKSFIK4paBQ2FtZXIK0LrQuNC1CnBhcmlzb24K4paBQmlqCnRlbXBsYXRlcwplbnZpcm9ubWVudAppemHDp8OjbwriloHDqXIK4paBcGxlbnR5CuKWgVR5cGVFcnJvcgriloFmb3J0eQrQutC+0L3QvtC8CuKWgVNlZAriloF0aGF0cwriloFncmF2aXR5CuKWgXNwaXJpdHVhbAriloFkdXBsaWNhdGVzCuKWgWVuY3J5cHRpb24K4paBcmV2ZW4KZ2V0SW5zdGFuY2UKw6RsbG9yCmRpc2sK4paBdGhybwriloFOYWsK4paBcG/FggriloFoZXJhdXMKaW52YWxpZApzQnkKQm9vdAriloFidWNrZXQK4paBUGFyc2UKaGV4CkNvbm5lCuKWgUNvbXB1dGVyCnp5awriloFpbmR1Y2VkCuKWgUJydW5vCuKWgWFkZHJlc3NlZAptYW5pYQriloFpbmNsdXMKb3VuY2VkCnNjcmlwdHNpemUK4paBRXBpcwriloF2b2NhbAriloFKb25hdGhhbgrRg9C8CnN0YWRlbgriloFDaGlsZHJlbgrQv9C10LkKSXRhbGlhCnJlaWJ1bmcK4paBbm9zdAriloHQtdGJ0ZEK4paBV2Vya2UK4paBYWN0cmVzcwriloFNaW5uZXNvdGEKcmlrZQriloF0ZWsK4paBcHJpbWVpcmEK4paBZnJhdAriloFDb25maWd1cmF0aW9uCuKWgWJpZAp0cmlnZ2VyCkNvbnRlbnRzCuKWgWNvbnN0YW50bHkKISEhCuKWgWRyZWFkCuKWgWh1bmRyZWRzCmlzdGlzY2hlCuKWgWNhcmRpbmFsClRBQkxFCuKWgWVzdG9zCmFzc29jCmdyYXkK4paBU2NobG9zcwriloFzY2hlCmNvbmcK4paBa29qaQrDqHRlcwriloFFcmEKb21pCuKWgVNSCuKWgXdyYXBwZWQK4paBdHJ1bmMK4paBYWgKZWdvcwpva2kKbW91dGgKbG9nZ2luZwriloFmYXNjCuKWgVNhbXBsZQriloFjb250ZQriloF2aWxsYQpjb21tZW50cwriloFiYXRhbAriloFHYXJjw61hCuKWgU5vcnRlCuKWgXdlY2hzZWwK4paBTXVzZW8K4paBZW5mYW50cwriloF3aGlzcGVyCm5ha2UK4paBamVkbmFrCmzDqnMKZW5kZXJzCuKWgcOkbAriloFWQgriloFjb29raWVzCnpldGkKYXR1bQriloFkZWR1CuKWgWFycmFuZ2VkCmxhegriloFjdWVudGEKeW1sCuKWgWZsYXYKTVIKZW1ldArQsdGW0LvRjApjbXAKaXR1dG8KemV0dAriloFlbnZpCuKWgWtvdAokOgp1cHBlcgriloFBbGJlcnRvCmtiCkFuYWwKw7ZydAriloFbLQriloFmw7xocnRlCmlhaAriloFUdW4K4paB0LjRgdC60YPRgQp1d2UKaXNwZWNpZXMKUHViClN5bmMK4paBQ29sb21iaWEKYWtlcnMK4paBSW1wZXJpYWwKb3ZpbmcK4paBaW50ZWxsaWdlbmNlCuKWgWVxdWlwbWVudAplaW4KZGFnZ2VyCuKWgUVkZ2UK4paB0KDQtdGB0L/Rg9Cx0LvQuAphZHJhdGtpbG9tZXRlcgriloFBbnRvCuKWgWNoYXJnZXMK4paBT2NlYW4K4paBc2ltcGxpZnkK4paBbWllc3oKcnVubmluZwriloFMYWMKZ2Vub21tZW4K4paBcmVwcmVzZW50YXRpdmUKPS4K4paBUHJlZAriloFzcGl0ZQpjaWFsZQriloFuYXZlCuKWgWV4dGVucwriloFuZXV0cmFsCuKWgdC60L7RgtC+0YDQsNGPCi48LwriloFDUwp1a3kK4paBd2hpbHN0CuKWgWxpbmd1CmV4dHJhY3QKemVpY2hudW5nCuKWgUZlbGQK4paBdmFsdWFibGUKdXJhYmxlCuKWgUplbgriloFzdHJ1Z2dsZQriloFjb21taXR0ZWUK4paBV29obgriloFzcWxpdGUK4paBVGVtcAriloFDT1VOVApjb25zaW4K0LzRltC90ZYKdXNhZ2UK4paBcXVlc3QK0LTRj9C9CmVhcmVkCuKWgVNjaG5lCuKWgWRvZAriloFyZWNodAriloFrYW8KQ2FwdApsYWJlbHMK4paBZWxsb3MK4paBaW5kdXN0cmkK4paBQ29sb3JhZG8K4paBY29udHJhcnkK4paBRHVtCkJlbAriloFWZW50CuKWgWF1dGhvcml0aWVzCllFUwplbnNlZAp1bWJuYWlsCml6emF6aW9uZQprb3UKcmljYQriloFzZWN0CnRlc3RzCuKWgUtsZWluCuKWgWxlZ3MK4paBUGlldHJvCmZ1CnRoeQriloFiYXN0CuKWgXRlZGVzCmV0dGVzCuKWgXJlcGV0CmFjcmUKcmV0dG8K4paBcmVtYWluZGVyCuKWgUdlZwriloHQk9C+0YAK4paBUmVjaHRzCuKWgWZpbHRlcmluZwpvdXNzCuKWgWRlcGxveWVkCuKWgXByw7xmZQriloFiaXRtYXAK4paBc292aQriloE8JT0K4paBZW50ZmVybmUKa2lsbAp0YWJzCkV4cHIK0LrQvtC80YMK4paBUmVwdWJsaWNhbgriloFTaXplCuKWgXBvbGwK4paBcmllbgriloHQutC70YPQsQrDqW5kCuKWgUJpbwriloFwZXJsCuKWgUFuZHJlYXMK0LLQuNC9CuKWgWRpc3RhbnQK4paBRmlubgriloFNaXRjaAriloElewriloFjaGFybQriloFNdWwKcGVyYXRlCuKWgXNjaWVuY2VzCuKWgW1vbm90CuKWgWRlYmlkbwpyaXpvbmEKaWVjCuKWgWFsYXJtCuKWgXByb21vdGVkCuKWgWxldHp0ZW4KYXRpbgriloFjb25jbHVzCmhlcnIK4paBw6ljaAplZGlzaApnb3IK4paBc3R5Y3oK4paBaW1wcmVzcwpydWl0cwppZXJ1bmdzCuKWgXBhcnNlZAriloFyw61vCuKWgVBha2lzdGFuCmlnbmVyCuKWgXdhdGNoaW5nCuKWgWRhdGFiYXNlcwplZGluZwriloFTcGVjaWZpYwriloFnZW5lcmFsZQpsYXgK4paBTG9va2luZwriloFib25kCuKWgXZpc3RhCuKWgWVjCuKWgWdydWQK4paBZGVsZXRpbmcKdGFjCuKWgWphenoKam0K4paBcMOzxYIKTGFuZ3VhZ2UKZGVsZWdhdGUK4paBcmVnaXN0cnkK4paBU2hhcmVkCtGB0YLRgNC+0LkKTXVzaWMK4paBdmVzc2VsCi5ACuKWgVfDvHIK4paBZmVkCuKWgWVyZWRldAriloFHw7YKdXB0CuKWgXBsZWFzYW50CuKWgXRhYmxlVmlldwriloFjb3VudGluZwriloFLcmllZ3MK4paB0L/QvtC70YPRh9C40LsK4paBXSwK0LLQuNCwCuKWgWHFvgpUb0xpc3QK4paBQWR2ZW50CuKWgXNrZXRjaApwbgriloFzaWVyCuKWgdC90LDRhdC+0LTQuNGC0YHRjwppb3AK4paBbHkK4paBU2NobApDb250cmFjdAphc3NvY2kK4paBUGVhcgriloF3aGUK4paBRGVsZXRlCuKWgWVsZW0Kw6R0dGUK4paBxI1lc2sK4paBTUMK4paBc2hvdXQKYWtlc3BlCuKWgWRlZmF1bHRzCnBlbmFzCsOycmlhCuKWgWhpZXJhcmNoeQppcHQK4paBRWxpcwpsaWtlbHkKUm90CuKWgWNvdwriloFzdHJpa2UK4paB0LHQtdGA0LXQt9C90Y8K4paBZW5zZW1ibGUK4paBUHNldWQKVmlydHVhbAriloHRl9GXClJPT1QK0YHQuNGPCuKWgdGB0L7QsQriloFpbnZlcnQK4paBc3dpdGNoaW5nCmh0YWNjZXNzCuKWgdC90LDQs9GA0LAK4paBTm9ybWFuCuKWgWluZ2zDqnMKIVsKb3VzZWwKRE9DVFlQRQriloFzdXBwcmVzcwriloFhY2NvbXBhbmllZAriloFCw6kKaW1wbGllcwpudXQK4paBU3ludGF4CmluaG8K4paBdGFtCuKWgWZvY3VzZWQKYXZhbm8K4paBQmFkZW4KaGFkCuKWgSh7ClR5CuKWgdGA0L7RgQriloHRh9C+0LvQvtCy0ZYKb2dlCmpzcApCbHVlCuKWgXN1YXMKYXBlcnMKU2hvcnQKUmVuZGVyZXIK4paBc2VuZG8K4paBQ2VjCuKWgWBfXwriloFNdW5pY2lwYWwKZG90bmV0CuKWgWJldgriloFEQQpNZW51SXRlbQriloFhbXAK4paBdXJpCuKWgWZpZXIK0YHQu9C10L0KKSwoCmN1bGVzCmlsbGFzCkxPQ0sK4paBZGVyaXZlCnViZW4K4paBR1QK4paBTWFjawriloFzY2hvbGFyCil9fQrQt9C8Cj46OgrRiNGR0LsK4paBcHJpbmNpcGFsZXMK4paB0YbQsNGACuKWgXRpZWQK4paBYWx0YQriloFDaXQKbGluZWQKbWFqb3IK4paBcHVuawriloFjaW5jbwppY2vDvQriloFyYWdnaQp0eXBlbgrRgtC10LvRjNGB0YLQstC+CuKWgWNvbmZlcmVuY2UK4paB0YHRltC70YwK4paBaGV1dAppxaEK0LXRgtCwCnZlbG9wZQpoYm94Cm5vd24K4paBemFyCmt0aXYKaWXDnwriloHRgdGC0YDQtQriloFFdmVudEFyZ3MK4paBSXJhCuKWgVZCQQriloFTYW50bwriloFGYWNoCuKWgUZGCuKWgVJheW1vbmQK0LzQtdGGCmltcGxlbWVudGF0aW9uCuKWgWJyb3RoZXJzCuKWgWPDtHTDqQriloFjb250cm9sbGVycwriloFDbGUK4paBY2FibGUK4paBY29uZmVyCuKWgXstCuKWgWN6xYIK4paBRmlsaXAKYXRvcmlvCuKWgXdpY2h0CuKWgWJlYXVjb3VwCuKWgUxpdAriloFzZXNzaW9ucwriloFTdWNjZXNzCuKWgXJvdXRpbmcKbml1CuKWgVZpY2UK4paBa3JpdAp1cGRhdGVkCuKWgUludmFsaWQK4paBTWFubnNjaGFmdAriloFhb3MK4paBdHVkaQriloFkZXNwcsOpcwpxdWEKQ29udGFpbnMKQ29tcGFueQriloFwZXJzb25hCmFkYXB0ZXIK0YHQvdC4CuKWgXZvagriloFlc2NyaQphZ3QK4paB0YHRgtCy0L4K4paBZGlzdHJpdG8KYXBhbgriloFhc3BlY3RzCuKWgXphbAopXntcCuKWgXN5c3TDqG1lCuKWgdCw0L3QsAppdW1zCuKWgXByZW1pZXJzCuKWgdC/0L7RjQriloFtw6hyZQriloFHdW4KYXBpbmcK4paBUmFpbgriloFpZ3VhbAriloFwcm9jZXNzb3IKJylgCmJsaW5nCuKWgW1pc20KYnLDoXoK4paBY2xvc2VzdAriloFSZWFkaW5nCuKWgdC/0L7Qv9GDCmNvbm8K4paBa3VsdAriloEhIQriloFFeHByZXNzaW9uCuKWgWluZHVjdGlvbgphaHJlbgriloFjcAriloF2aW9sZW5jZQppZW50w60KY2VudGUK4paBRG9iCmphY2sKc29uZwpidWNrZXQK4paBZGVwb3J0CtC60LjQvNC4CmxtCuKWgWlubm9jCkNoYW5nZXMK4paBcHJvaGliCmFuZ29sCmlzZWNvbmRzCuKWgdC/0L7RgAriloFoaXAK4paBcMWvCmVuZG9yZgriloFzY2hlZHVsZWQK4paBRmx1ZwphY3lqCuKWgUZpbG1zCmF0aGVkcmFsClBvd2VyCmFyZGluCmthcAppY2tlbgpyZXNpemUKZXVzCnJyCtC70Y/QvQriloFIYXYK4paBb3JhCkZST00K0LvQvtGB0Y8K4paBdGVydWcK4paBV2lkdGgK4paBYWNjZXB0cwrQsdC10L0K4paBbWljaAriloFDemVjaAriloFCZWRldXQK4paB0LLQuNC0CsO0bWUK4paBTG9vcApzcGVjdArDvGsKZXN0b24K4paBc2xvdAriloF6b3N0YcWCYQriloFDaGFybG90dGUK4paB0YHQvtGB0YLQsNCy0LvRj9C10YIK4paBUHJvbWlzZQriloFlcG8K4paBZGljdGlvbgriloFGcmFua2xpbgriloFSaXYK0YDRg9CzCmNpZGEK4paBRXhwbG9yZXIKY29va2llCuKWgWZvcm1lcmx5CuKWgW11bmljaXBhbGl0eQriloFTdGVmYW4KbGlzdHMKQ09NUApMZW4K4paBU3RhYXQK4paBTkJBCmRlbnMK4paBb3NjaWxsCiEuCuKWgVBPCsO0bmUKZXNlcwriloHQvdCw0YbQuNC+0L3QsNC70YwKdm9vcgriloHQutC+0L/QuAriloHQv9C+0LfQuAp1bHUKQ29uc3RyYWludAriloHRgdCy0L7QtdC5CuKWgWFsZ2VicmFpYwrRh9C90Y8KRGljdAriloFhcHBlYXJpbmcK4paBcHJhdgriloFVbml2ZXJzYWwKQnJvd3NlcgriloFTaW5nYXAKZW5uZXNzZWUKXV8K4paBU29mCuKWgUNhZApvdW5jZQriloFjb3N0cwpde1wKLi4vLi4vCtGB0YzQutGW0LkKw7xobAppZXR5CtC/0YAK4paBaW50ZXJwcmV0ZWQKYWpuCmNvbG9nCllTCm1hbnMK4paBbWV0cmljcwriloFyZWdpc3RyCmlzdGFuY2UK4paB0J/QvtC70YwK4paBYW5vbnltb3VzCuKWgWluc3RpdHV0aW9ucwriloF6ZG9iCnByw7xuZwriloHQsNGA0YLQuAriloFlc3RhdAphY2NpCuKWgWFjYWRlbWljCuKWgWNoaWVzYQriloFHaWFuCmNvbnRyaWIKdW1lZAriloFHaXIK4paBYmFzZWJhbGwKbnVtZXJpYwpHZW5lcmF0b3IKR00K4paBdGlueQriloFkaXN0aW5jdGlvbgrQs9C10YAK4paBcnVzdAriloFGSUZBCuKWgVByb3BlcnRpZXMKXi0K4paB0Y3QutGBCuKWgVN0YW5pcwriloFBamF4CmVzY2FwZQriloFjb25zcAriloFDaGVuCuKWgU5hdmFsCkJpdAriloFiw6J0CtGB0LrQuNC80LgKZHJpdmUK4paBUm91bmQKcGhvdG8K4paBTGV2ZWwK4paBZ2VnClRvbQriloFNb2JpbGUK4paBVHJvcApEaXJlY3Rpb24KaXNhbgopXnstCuKWgVNldHRpbmcK4paBUHJvYmFibHkK0LvRjNGPCuKWgWFzc2V0cwriloFhdHRlCuKWgWJ1bGsKw6lzdAriloF3aW5nCm5pdXMK4paBd2lucwriloFsdWQKdXNoaW5nCuKWgWRldmVuCtC+0LPRgNCw0YQKYnVyZ2VyCuKWgWVtYmFyCkZpbHRlckNoYWluCuKWgXR1bQriloHDtnNzCuKWgW5vbW3DqQriloFwaXIK4paBbHVjCmRibwphZ3VlcwriloFhbGNhbgpvdXdlbgriloFTdGFubGV5CtGG0LjQsNC70LgK4paBZ3Jvd24K4paBcHJlc2VydmVkCuKWgXNvbGFyCuKWgdCd0LDRgdC10LvQtdC90LjQtQriloFwZXJmb3JtYW5jZXMK4paBQ293CuKWgWVuZ2luZWVyaW5nCuKWgXNjYWxpbmcKYXRvbWljCmVuZGFuY2UK4paBYWNlCsOkbmdlbgpBbmltCnBoYXNlCnpidXJnCk9sZAriloFzZXJ2YW50CuKWgWdlbWVpbnMK4paBT2JzZXJ2CnRyYW5zbGF0ZQriloFjb3ZlcmluZwriloFlc3TDoW4K4paBcHJvYmxlbWEK4paB0YPRgdGC0LDQvdC+0LIK4paBbGxldgriloFjemVydwrDqWFsCm1legpSRUUKRVJSCtGC0YPRgNC4CnNlZ3UK4paBcHJvZml0CuKWgW11bHRpcGxpY2F0aW9uCmtvbW1lbgriloFmYXV0CuKWgWNhbmRpZGF0ZXMK4paBVXJpCuKWgUxhdXJhCuKWgXNhcAriloHQstC40YHQuNC90LgK4paBQmV0d2VlbgpmYWRlCuKWgXJlc2VydmVkCuKWgWludm9sdmluZwriloFNYXJlCuKWgUNvbnRhaW5lcgriloHQvdCw0LfQvdCwCuKWgURFQlVHCuKWgWh1cnQK4paBUG9sc2tpCuKWgWx1eApDQgp3YWNoCuKWgdC/0LXRgNC40L7QtAriloFDYXRoZXJpbmUK4paBZ2Fuegp1Y2h0ZQriloFjb25zdW1lcgriloFjcm9zc2VkCm9yZGVyZWQKYXdheQp0ZWNobgriloFzdWJzY3JpCuKWgXNob3J0Y3V0CuKWgdC/0YDQvtC40LfQstC+0LQK4paBc2ltdWx0YW5lb3VzbHkK4paBcmF0aW5nCuKWgUtpbmdzCuKWgXJlbGF0aW9uc2hpcHMK4paBU2V4CuKWgVRvb2wKYWdoCmFjdGVycwpsb2dnZXIKaG9tbWUKZW5nZXJzCuKWgVJpCmVhcmFuY2UK4paBYXBwZWFyYW5jZXMKUmVhbAriloFwYXNzZQppY2xvcGVkaWEK0YfQutC+CnRlcnJlCuKWgU9udGFyaW8K4paB0L/QtdGA0LXQtNCwCmZvb3RlcgphcmNoaXZpCmlmaXoK4paBUHJvdGVzdAriloFMSU4KdW5uYWJsZQriloFjZW50dXJpZXMK4paBQmF5ZXIK0YbRltGOCtC+0LLQuNC9CuKWgUFuZHJlYQpzZWxlY3Rpb24K4paBY2FsbQriloFtb2RpZmljYXRpb24K4paBc2hvcnRseQppbmFpcmUK4paBZnVzaW9uCuKWgWZlZWxpbmdzClBLCuKWgVJvYmVydG8K0LPQvdC1ClNoYXJlZAriloFtZWhyZXJlCuKWgU5pZW0Kb21wCkVudgriloFBcnRpY2xlCuKWgVBvawriloFWQVJDSEFSCuKWgWRpbAriloFhZmZvcmQK4paBY29uZnJvbnQKb3dhbmllCuKWgW1pbmlzdHJlCmFkZXNoCuKWgVBvbHkK4paB0KDQsNGB0L/QvgriloFHcnVwcGUK4paBSGVsZW4K4paBY2MK4paBcG9ydHJhaXQKYmV3CuKWgWJldGEK4paBV2lyCuKWgUF1ZGlvCuKWgShcPApyaW9yaXR5CuKWgW5pdAriloHQv9GA0LXQtNGB0YLQsNCy0LgK4paBVmllCuKWgXfDvHIK4paBSG9sZAriloFTYWQK4paBVG9jaHRlcgriloFvbHRyZQriloFBY3RpdgriloFKYXNvbgriloF3aWVrdQriloFyZWdhcmRzCuKWgXRhc3RlCmFnbm9zdGljCtC70LDRgdGPCuKWgVNlbGYK4paBYXByCuKWgURlZXAKc2NvcApBY3RpdgriloF0eXBlZGVmCkNvbnRlbnRWaWV3CmNvbXBpbGVyCuKWgVJvdGgKeGMK0LfQuNC6CuKWgWxhcmdvCuKWgVJlbmEKaGVpdGVuCuKWgXBsYXRmb3Jtcwp1bGxhCuKWgWdsYW5jZQriloFtYXNjdWwK4paBbWV4CuKWgUpvcmdlCuKWgWZ1bmNpb24KY2hvb3NlCuKWgXJldmlld3MK4paBQWxiYW4K4paBR2xvCuKWgVNwZWNpZXMK4paBRmFtZQriloFSb2xsCuKWgVB1ZXJ0bwriloFcKQp5bW5hcwplbnZpcm9uCuKWgWlwaG9uZQriloFXcmVzdGxpbmcKYcWCeQriloFJbmRpYW5hClJhZGlvClZTCuKWgWluZGVwZW5kZW5jZQrRgtCw0LkK4paBZGVjb2RlCldoaXRlCuKWgWpvdXJuCsOtY3VsbwriloFCYXJiCuKWgUV2YW5nZWwK4paBQW5keQriloFXZWxjb21lCuKWgURldmljZQpnZWYK4paBcmVtZW1iZXJlZAriloF2YXJpYXRpb25zCuKWgUFkb2xmCml0YWluZQriloHQvdCw0LTQvNC+0YDRgdC60L7RmAriloFzdGVhbQriloFjb25jZXJucwriloFgfAriloHQsdC40L4K0YLQtdC70YzRgdGC0LLQsAriloFxdWF0dHJvCmV4dGVuZAriloF0cmFiYWpvCmVuYmVyZwriloFzY2VuYXJpb3MKw6JudAriloFrb21tdAriloFkb21lc3RpYwriloFCYXNrZXRiYWxsCuKWgUNvb3Blcgpzb2NrCtC00LXRgNC20LAKPXtcCuKWgWluaWNpCuKWgVBoaWxsCuKWgdCz0LXQvdC10YDQsNC7CmFyY2hpdmlhdG8K0YrQvQpSb2IK4paBdG9uZwriloFjaGFyYWN0ZXJpc3RpY3MK4paBYW1hegriloFNb2RlCuKWgWluYXVndXIKd2VocgpyYW50CmlvbmFsaQriloFNb3RoZXIKTWEKw6lxdQriloFLZWxseQpjaWxlCuKWgWJlc3RlaHQK4paBZXN0aW1hdGVzCnJ1Z3VheQriloFBbnMKTWFkCuKWgdC90LDQsgriloFkb25uw6llcwriloF0cm9waWNhbAriloFTZXZlcmFsCmVsdGVyCuKWgVBobwprZW0K4paBQ3VzdG9tZXIK4paB0YHQutC70LDQtNGWCuKWgWNvdXJzZXMKUGxhdGZvcm0KbmF2YmFyCmxlYXJuaW5nCuKWgVN3ZWRpc2gK4paBemFzdAriloFMaWcKbWFuYWdlbWVudAriloFsb2QKdWZmbGUKVGV4dHVyZQphcmdhCsOhdHVtCuKWgUREUgrQvdGW0ZcK4paBU29jacOpdMOpCuKWgWRvbWFpbnMK4paBcGVybWl0dGVkCuKWgWV4dGVybmUK4paBcXVlbHF1ZQp2dAp5bWFuCuKWgVdhcmQK4paBYWdsaQriloFhbmRyYQpTbmFwc2hvdAriloFtw6UK4paBeWVhaArQtNC10L3QsArEmXB1CmFza2VsbAriloFSw6lwdWJsaXF1ZQppbmplY3QK4paBJzsKw6RubgriloF6ZWxmCuKWgUVudHdpY2tsdW5nCsOhcmlhCm9ub215CuKWgXN2aWwKaWVzZQriloFjb25zZXIK4paBbmltCuKWgXLDqXN6CuKWgdCY0YLQsNC70LgK4paBcGFydGljaQriloFMaW9uCnNyCmFsd2F5cwriloHQktC70LDQtNC40LzQuNGACtGH0LXRgdC60LjQtQpbLAriloFEZWZpbml0aW9uCm5hbnQKb2VtCklkcwriloHQstC90LUK4paBWy4uLl0K4paB0L3QsNC/0YDQsNCyCuKWgUdPCuKWgcOlcnMK4paBdXTDoW4K4paBb3V0cm9zCuKWgXJlZ2nDs24K4paBTW9uZwriloFmaWxtZQriloF0cmlwbGUK4paBc3BvbnMKRGV2ZWxvcAriloFvdXRjb21lCuKWgUJpYmxlCuKWgdC40LzQtdC90LgKQ2FudmFzCtC/0YPRgtCwCmN1cnIKw6Fzb2sKKXtcCm5pbmdhcgpgOwriloFGbGFzaAo6IwptdXN0CmNwdQriloFmb3JtYXRzCkhhcgriloFlcGlzb2RpbwriloFSb3NhCuKWgWTDqHMKZW1pdApyaXRlcmlhCkFubm90YXRpb24KRmxhZwpnbWFpbAriloFOb3JtYWwKb2xsYXJ5CuKWgWZvc3MK4paBY29uY3VycmVudAriloFjcmFzaGVzCuKWgdCy0LjQtNC1CuKWgU1pbm9yCuKWgVNpdAriloFTTgriloFzY2FyCuKWgWZlbWluCuKWgXNwZWNpZmljYXRpb24Kc29hcAriloFvcGVyYXRlCuKWgXByaW5jaXBhbG1lbnRlCuKWgWF1c3QKaWJpbGUKaXRpbWUK0LvQtdC20LAKaWZyYW1lCuKWgWNvbmNlcHRzCuKWgXRhY2sK4paBdmlzcwriloFjYXJib24KdGVyeQriloFuYW1pbmcK4paBT3J0cwppZGVudGUK4paBQ2FwaXQK4paBZXhwcgriloHQvdCw0YHQtdGZ0YMK4paBU2VsZWN0ZWQK4paBaGludGVyCuKWgWlmcmFtZQriloF6YgppbmRleFBhdGgKY29sbAriloF3cnplxZsK4paBYWNodAriloFncmFkdWFsbHkK4paB0YfRgwrQt9C10LkKaGFmdAriloF0cmFuCuKWgWxhcXVlbGxlCnl0aWNzCklERQriloFweWdhbWUK4paBUGFja2FnZQriloFjbGFzc05hbWUKQmFsCnBlcmwK0YLQuNC90LAKT2NjCuKWgWluZnJhc3RyCuKWgUNoYW1waW9ucwriloFjbGFzc2ljCuKWgVJhdwriloFwYXJ0aWFsbHkK4paBVGVkCuKWgXN0b2xldApyYWluZWQKV0hFUkUK4paBdmFsbAriloFKdWxpYQp6YXQK4paBc3Vycm91bmRlZApTRUUK4paBd2Fsa2luZwpCYWQKRk9SCmNvbnRyZQriloFQYWxlc3QKw6F0aWNvCuKWgWVuZ2luZWVyCuKWgXBhcnRuZXJzCuKWgUpld3MKaWxlcnMK4paBY2VyZW0K4paBaW50ZXJhY3Rpb25zCmFjdQpzdHkK4paBUHJpbmNlc3MKc2hhcnAK4paBU2luZ2xlcwriloHRl9GFCmNoZXoKUmVjZWl2ZXIK4paBcGF0aWVudHMKc3RyaW5naWZ5CuKWgWNvbXBldGVkCmJleQokOwriloFCZApoYWRvb3AK4paBRGl2aXNpw7NuCsO2bGQK4paBcmVzdHJpY3RlZAriloFjb21tYW5kZXIK4paBSGlnaHdheQriloHEjGVzawriloFteXRoCtGH0LDQvQpyYWhhbQriloFlbnF1CuKWgXBvZwriloFjb211bmEK4paBcHJpbnRsbgriloHQutGA0YPQvwriloFkZXBvaXMK4paBc2VhdHMK4paBbmVpZ2hiCtGG0LjQvtC90LAKYWdpbmUK4paBY2xvdGhlcwriloFQcmlvcgpCcmFpbgpGRkZGCic6JwpmZWF0dXJlcwriloFmaWxlc3lzdGVtCuKWgXNpbmdsZXMK4paBTWVsYm91cm5lCuKWgWRlc3RydWN0aW9uCuKWgUx5b24K4paBSW5zZWwKTmF2CuKWgVJlcGxhY2UK4paBbMOpCldobwriloFFc3RhZAriloFkaW1lbnNpb25hbAriloHDtmZmCuKWgWdyYW5kcwrQtNC20LAKcGxhbmUK0L3QvtGB0YLRlgriloFPcmlnaW4KV0kKw6RubmVyCuKWgUNyeQpJVElPTgriloFmw7ZkZAriloFjdWx0dXJhCuKWgVJhbmsK4paBdnVlbAriloF6YWcK4paBTWF4aW0K0L7QvdGDCigpKSkKUmF3CmtpcmNoZQriloFhZGVtw6FzCuKWgXRpZQriloFTdHlsZQrRgdC60L7Qsgppc3RhbnQKb2xwaAriloFaw7xyCuKWgUluZm8KRE9NCnVzYwpuYWhtCuKWgdCk0LXQtNC10YDQsAriloFGb3QK4paBc3BlY2lmeWluZwriloF0aXRvbG8K4paBQm95cwppZWNoClBsYWNlCuKWgUhvZmYK4paBY2FjaGVkCtCy0LDQu9GMCmlzaGVyCnJvbGxpbmcKb3BlbnMK4paBaHIKLS0tLS0tCuKWgW1hZ2dpb3IK4paBdHJhbnNhY3Rpb25zCuKWgWNyaW1pbmFsCuKWgXJldHJlCuKWgUNhbXBiZWxsCikpOgriloFuZWQKUGFnZXIK4paBSGVybwooX18K4paBdW5jbGUK4paBcmVhY2hlcwphcnRvCuKWgWhlbGxvClByZWZlcmVuY2VzCuKWgdC30LDRgtC10LwKTmFtZWQK4paBcmVhZGVycwrRhdGWCmtlcm4K4paB0YPQv9C+CtC60LjQvQriloFsYXYK4paBbm9iCuKWgXNlY3JlCuKWgUxpc3RWaWV3CtCy0LDQvdC40Y8K4paBTWF5b3IKYm9yb3VnaAriloFmaWxvc29mCtC90LXQvdC90Y8K0YTRgNC4CuKWgXBhdHIKRk0K4paBYWNpZAriloFTYWx2YWRvcgriloFhYmIK4paBR3JhaGFtCnBvbGljeQpuZWdhdGl2ZQrFhHNraWVnbwriloFIZWltYXQK4paBZGF6dQriloFtZWx5CuKWgXJpZGUK4paBZHV0aWVzCm92ZXJ5CuKWgVByb3Bvc2l0aW9uCuKWgVBhb2xvCi8nCuKWgU1hdQppbWVudGkKU2FpbnQKZmF0aGVyCuKWgWVxdWlsaWIKcGhvbnkK4paBY2xhcwriloHQvtGC0LvQuAriloFCdWZmZXJlZApyZWsK4paBbWl0dAriloFIdXIK4paBSGFydmFyZAriloFkZW1vbnN0cmF0ZQp1YXJpbwriloFkb2xvcgriloFyZWplY3RlZAriloFNw7xsbGVyCuKWgW5hYwriloFCZWxsZQriloFnYXRoZXJlZApucgpmcmlrYQrDtmxsCuKWgWNoZW1pY2FsCm5pZwriloFjYWxjCuKWgURFRkFVTFQK4paBcGhpbG9zb3BoeQriloFMYXJhdmVsCuKWgWFsaWdubWVudApFVgplb3IK4paBZHppZQriloFtZXN0CuKWgUlvCkNSRQrQt9Cy0LgK4paBTWVkaWMK4paBbsOkCuKWgXphYgriloFTbG92CnV0bGljaAriloFhbXBsaXQK4paBRnJhbmtyZWljaAriloHQutGW0LvRjApJTkQKZXhlY3V0aW9uCuKWgUthcnJpZXJlCmRvc3TEmXAK4paBcsOpYWwKZW5nbwriloFzZXZlcmUK0LfQvNCwCuKWgdGC0YPRgNC90LgK4paBQ2FydGVyCuKWgVJvYmluc29uCmdldEVsZW1lbnRzQnkK4paBcHJvdG90eXBlCuKWgWphcG9uCmbDvGhydW5nCuKWgWNvbnNlZ3UK4paBc3R1ZGkK4paBbGlyZQriloFzY2hsaWXDnwriloFCdWZmCuKWgXJlZHVuZAriloFlcm4K4paBbXlzdGVyCuKWgXByb3ByaW8KYXRlZnVsCuKWgVBhcmVudAriloFsYWRpZXMKcmFjawrRgtC40LrQsAplbmJ1cmcK4paB0LrQsNGH0LXRgdGC0LLQtQriloFFRgriloFzdGFtCuKWgW51ZXZhCuKWgWZpbHRlcmVkCnJldGVuCuKWgUlhbgriloFNYXR0aGV3CmtpaAriloHFkQriloHQutC+0LzQv9C+0LfQuAriloFmb3JldmVyCm9pcmVzCjpcXAriloHDqXR1ZGVzCuKWgXNvdXAK4paBcGxlYXNlZAopfSgK4paBU3RvcApTZXR0ZXIK4paBSGVscAriloFiYXJzCuKWgUVSUgriloEoPwriloFwb2V0cnkK4paBVXRpbApBSwriloFmaWNrCuKWgUlNCuKWgXByb3VkCtC90L7RgdC4CuKWgW11ZXJ0ZQriloFQYWxtYXLDqHMK4paBTmFzCtGJ0LjRhQriloFxdWVyCuKWgWFwZW5hcwpdWycK4paBS29uc3QK0L/QvtC9CuKWgVNjaGlmZgriloFtcAriloHQsdC70LDQs9C+CmZyYW0K4paBaG91c2Vob2xkCuKWgXRyYWN0CmVuY29kaW5nCuKWgXVuZGVydAriloFBdWcK0L7QstCw0L0K4paBQXJ0ZW4K4paBaW52b2tlZAriloFkeW5hc3QK4paBZmxlZXQK0YfQtdGB0YLQstC+CuKWgU11cnJheQriloFndXQKZWxpaG9vZAriloFTU0gK0L7RgtCy0LXRggriloFwZXJzb25hbGx5CtC/0YDQuNGPCuKWgWZpbmFuY2kK4paBVGhvbXBzb24KYWx1CmlkZW50aXR5CuKWgUdyYWIKYWRkbGUKw4l0CuKWgVRvYgriloF2ZXJsb3IK4paBU2FpbnRlCuKWgWRvcAriloHQstC10YDQtQpfX18K4paBcHJvbW90aW9uCuKWgS09CuKWgdC+0YLQtNC1CuKWgWFtYmlndQpPUkRFUgriloFDb21tdW5pYwriloFpbXBseQpvbmVkCmNsdWRpbmcK4paBY29sbGlzaW9uCuKWgWZyYWdtZW50cwpzY3JpcHRpb24K4paBJ3sK0LvRj9GFCuKWgWhhbnMK0YPRgQp3aXJlCm5hbWVzcGFjZQriloFzd29yZApyZWZyZXNoCuKWgWt3YW0KenMKY29tbW9ucwriloFjb3NhCuKWgXJlZ2ltZQpncmVwCuKWgWRpb2MK4paBQ29udGFjdAriloFlc3RhcwriloFTdGV3YXJ0CuKWgXZpZWxlCtGC0L7QstCwCuKWgVJhbgphbm5lcwppZGF5CuKWgXNuYXBzaG90Cm9ycm93CuKWgXphxI0K4paB0YPRh9Cw0YHRgtC40LUK4paBcHJvbWlzZWQKQXNzZW1ibHkK4paBY2hhbXBpb25zaGlwCuKWgURlZmluZQriloFlcmVuCuKWgdC90L7QstC+CuKWgXRoaW5rcwpBZ2UK4paBZ2V2CnZhcmNoYXIKaXZpdMOgCmNvbXBvcwriloFNdXR0ZXIKQ09OVAphcm3DqWUKYWduZXQK4paBQnJvdwou4oCUCuKWgVRlbGV2aXNpb24K4paB0JTQu9GPCuKWgXZtCuKWgW9yZGluCuKWgdCc0LjRhdCw0LkK4paBYXByb3hpbQonKS0+CuKWgXpvbwppcHBpCuKWgXNpbm8K4paBUXXDqWJlYwpyYWdlcwrDpGNrCmVpbmcKYXJsbwpwaW9zCuKWgUNoYW4K4paBZWxsaQriloFpbmNvbnMKZ2VzdGVsbHQKcHBlcnMKSmVhbgphbnN0YWx0CuKWgURhbmNlCuKWgXRvZW4K4paBZGVjaXMK4paB0KDQtdC30YMK4paBb2ZmaWNpYWxseQrDpHR6ZQriloHQtNC+0YDQvgriloFlbnVtZXIK4paBdHJvaXNpw6htZQp0eXAKb2ZmcwrQsdC+0LvRjApvZG4K4paBWmFyCuKWgdC00YDRg9Cz0L4KcXVpYQriloFOaWNvbGFzCtC/0LjRgdGDCuKWgW1vYgpwYWNlcwrQvdGM0L7Qs9C+CkFsZwrDqXJvw68KRXJyb3JzCuKWgdCz0YDQtQriloHQttC10L3RidC4CmluY2gK4paBS29yZWFuCuKWgUFwb3N0CuKWgUxpdmVyCuKWgWVsZW1lbnRhcnkK4paBREkK0LLQuNGB0LgK4paBc29pbAriloFETEwK4paBcmlzcAriloFTaGFrZXNwZQriloFHYXVzc2lhbgriloFLdXJ0ClZlcnRleAplYm9sCm9yZ2FuaXNhdGlvbgrDpHJlbgriloFZRVMKQ1VSCuKWgdC90LDRh9Cw0LvRjAriloHQv9C+0YHRgtGA0L4K4paBTHVpZ2kK4paBY2FjaGluZwpwcmV2ZW50RGVmYXVsdAphbWQK4paBVml0CnN1YnN0CuKWgdGB0YLRgNC+0LgK4paBQ2FtcGlvbgpjaHIK0YTQtdGA0LUK4paB0KHQv9C40YHQvtC6Ck5GCuKWgWPDrW0K4paBaMOpCnJlYmJlCm9jeQpiZWxvdwriloFieWxvCuKWgdCj0LgK4paBXCh7XAriloFgOgpnaW9yZQpTYW4K4paBR2F0ZQriloHQstGBCuKWgW9saW1wCuKWgU1hdHJpeAriloFoZWFyaW5nCnJpaQp0ZnJhYwriloFhbGxlbWFuZAriloFWdWUK0LvQvQriloFjb21waWxpbmcK4paBRW5zCuKWgWludmVzdGlnYXRpb24K4paBQXgK4paBY2hhcnMK4paBdGFyZ2V0cwriloFsb3VkCnVzZW1lbnQK4paBTmV0aGVyCmNvbW1lcmNlCklHSFQKb2NvYQppZmVjeWNsZQriloFMZW8KcHJpdgriloFnb29kcwphZGFtZW50ZQpBdXN0cmFsCuKWgXJlYm9vdApHZXN0CuKWgXJlcHJlc2VudGF0aW9ucwpjZXUK4paBZG9jdHJpbmUKY2VycwriloFLcmFrCuKWgWFkdm9jCuKWgXNxdWFkcmEK4paBYXJiZWl0ZXRlCsO8c3QK4paBcGlsbApBbnN3ZXIK4paB0LrQstGW0YIK4paBV2EKdW1hbm4K4paBRHluYW0KRmFtaWwK4paBdGVubmlzCuKWgUVuZ2luZWVyaW5nCuKWgWNpcmNsZXMK4paBTWFyeWxhbmQK4paBYmVzdGEK4paBYmFzZXMK4paBem5hamR1CtC60YLQvtGA0LAK4paBYXJyZXN0CtC70LXRgAriloFHaWEK4paBcmVtYXJrYWJsZQriloHQvNC+0LPRgwriloFTdXByZW1lCuKWgWAlCmRvcgriloFhdWpvdXJkCuKWgXdpcwpXSURUSAriloFtaXNtYQriloFmbHVpZAriloFwZXRpdGUK4paBVG93ClJlZ2lzdHJ5CmVtZWQK4paBV2lzY29uc2luCuKWgVJhY2luZwriloFyZWdpc3RyYXRpb24KLyUKdGhpcmQK4paBbW9udW1lbnRzCtGH0LXQuQriloFqZXQK4paBVXJiYW4Kw6FsdmEK4paBbWlsaWV1CuKWgXBvc3Nlc3MK4paBZ2VybQpkZXBlbmRlbmNpZXMK4paBZW5lbWllcwriloFzYW1lbgriloFXZXJuZXIK4paBaGl6bwriloF0ZAriloF5ZXN0ZXJkYXkK4paB0JDQtAriloFoYXNuCmNlbGxhdGlvbgpvdsOhbsOtCmxpa2EKV2VlawriloFJbmcK4paBRW1haWwK4paBbcOodHJlcwriloFPQ0xDCuKWgWFtb25nc3QK4paBc3BsZW5kCmZ1cgphbnRpY3MK4paBWFhYCuKWgdCz0YDRg9C/0L/RiwpsYWNoCuKWgWNvdXNpbgriloFpbnZhcmlhbnQK0ZLRgwriloFCZWlzcGllbAriloFoYXJkZXIK4paBYmVsbAriloFvcmNoCnRiCkZvb3Rub3RlCnJlZ29uCk1hcnRpbgriloFpbmNvbgriloFhdHRhY2tlZApfey0K4paBVHJhcwpwYXJ0eQppdGVpdAriloFzYWludApyw6Fzb2sK4paBY29udGFpbmVycwpNbwriloFTbgpxdWFudGl0eQriloFyYXMK4paBQ2FuYWwKY2Npb24KdXZvCuKWgWlkeAp0eXBlbmFtZQriloFSdWdieQriloFTZWVtcwriloF0cmFuc21pdAriloFQcsOkc2lkZW50CtC30L3QtQriloFCYWtlcgppbnRoCuKWgXTDtmJiCnZlcmVpbgriloFlc3BlY2llCiwoCuKWgXTDqWMK4paBV0lUSAriloF1bm9zCuKWgXBvbGl0aWNzCmNyZWF0ZUVsZW1lbnQK4paBc3RhdHMK4paBVGVubmVzc2VlCuKWgUJlZGV1dHVuZwriloFTY3JlZW4K4paBU3RyYcOfZQphbnplCuKWgXBhcnRseQptYW51ZWwKb2xhdGlvbgpob3Jpem9udGFsCsOpcmlldXJlCmFtcGlvCuKWgdGB0YLRgNGD0LoKV2VpZ2h0CkxhbmQKcG9seQriloFEYWsK4paBQXNzdW1lCiIuJAriloFjYXNpCuKWgWdyb3NzCuKWgWVudGVydGFpbgriloFkw6ljYWRhCicuJAplbmNlcgriloFndWFyYW50ZWVkCl0kLgrQu9C40YHRjwriloFhY2NlcHRhYmxlCnJhaXNlCmlydXMKd2VpdAriloHQkNC90LAK4paBaGlsbHMKaXBhZ2UKQklUCuKWgW51Y2xlCuKWgXV0aWxpcwpDQUEKw6huZXMK4paBU2Nod2VpegriloFBQQpuaW5nZXIK4paBYmFuZHMK4paBdGVuZGVyCnNvbQpXYXJuaW5nCuKWgUJpc2Nob2YK4paBQXJjCuKWgVdvbWFuCuKWgXRyYW5zbWlzc2lvbgrRh9C90LgKaXN0cmUKQlkK4paBU0kK4paB0J/QsNGACuKWgX0pLgriloFwcmVzZW50YQriloFSZW7DqQriloFoYXBwaW5lc3MK4paBUHVuawpjb2xzCuKWgURlc2RlCtGA0ZHRhQriloHQvNC+0L3QsAriloFzY3JhdGNoCuKWgXRjcArDqnRlcwppdGF0ZWQK4paBZGlmZXJlbgpnZWgKbmFobWVuCtCf0LUKY2tpCuKWgVRlYXRybwriloFSZW1lbWJlcgriloFmcmlnaHQK4paBWWFtCndlc3Rlcm4KbGV0ZWQK4paB0LLRgdGC0YDQtQriloF0ZWxlcMO8bMOpcwrQt9C40L0K4paBUXVhbnQK4paBc3VwcmUKw6FqYQrQtNGW0Y8K4paBY2FycmVyYQprcmV0CnBhcmEK4paBU1VNCuKWgXBpdArFumR6CsOpbwrRgNC10L3QvdGPCuKWgUNob3IK4paBdm9peAriloFleGVjdXRpdmUK4paBYWxsZXJkaW5ncwpNYXliZQriloHQtNC10L3RjAriloFmbHlpbmcK4paBcGFybGlhbWVudArQttC00LDQvQriloFmcmFtCuKWgdC20L7QstGCCuKWgXVnbHkK4paB0LHRg9C00YMKaWdueQpcfF97CuKWgWJpdHRlcgpzY2UK4paBcG9sZQpWZXJsYWcK4paBdG90YWxpdMOpCuKWgWZvdW5kYXRpb24KanQK4paBc2xpY2UKaWZpcXVlCuKWgWludGVncmF0ZQpzdHJpagriloFhc3ltcHQK4paB0LXQvNGDCuKWgXBlcnR1cmIK4paBRmxvdwpqYm9zcwpSSUcK4paBQWxlc3MKWFhYCuKWgXN1bW0Kc3FsaXRlCuKWgWNoZWVyCnByb2IK4paBR1BVCnppxYIKKCopCuKWgWluZHVjdApSQVkKYmxhdHQKcXVlc3RhCm9ydQriloFJbnNpZGUK4paBTWNHCuKWgU5lcArQvNC/CuKWgWludmUK4paBQW5pbWFsCuKWgXNvYgrDrXRvdHQKbG95bWVudAriloFidW5kClN0YXRpb24K4paBQkVHSU4K4paBcGFydGllbGxlbWVudAppZ2cKZXN0b3JlCuKWgWNvaW5jCuKWgVNvbW1lcgriloFtZAriloFsb2NrZWQKbWF0aGNoYXIKYXJtYQpwZW50CmFyaXVtCuKWgWVhcnMK4paBU29uZ3MK4paBc2ltaWxhcmx5CuKWgWxpdGVyYWxseQriloFpbmNoZXMK4paBYWZmZWN0aW9uCmxwCuKWgWNvbmNsdWRlZAriloHQvNGD0L3RltGG0LjQv9Cw0LvRlgriloHQv9Cw0LzRjwplc3RhdXIK4paBSm9zaAriloFGcml0egpEQkMK0LTRkdC9CnBvc2EK4paBZ29sZGVuCuKWgXBjCuKWgWNvbXRlCuKWgVppZWwK4paBcHLDqXNlbnRlCm1hcmtzCmlnbmV1cgriloFEcml2ZQriloFuZWdsZWN0CuKWgXJvenAK4paBRml2ZQpzcGFjZXMK4paBTWVkaQriloFleGlzdGVkCuKWgWJ5xYJhCtC00LbQuAriloFmcmVudGUK0YLQvdC40LoKb2RkCuKWgWFuc3dlcmluZwpiaWFuCuKWgUV1Z2VuCuKWgVB1YmxpY2F0aW9ucwriloFEaWEKbMOhCuKWgSdfCuKWgXJlY3VwZXIK0L7QvNGDCuKWgUFwcGVuZApvYmFyCuKWgWVtcGxveWVlcwriloFjb21wZW5zCmVtZXRlcnkK4paB0Y3Qu9C10LrRggpNT04Kb2xpbgriloFoaXN0b3JpYwpoaXMKxIVkCm5tCuKWgUdvdGgK4paBc3RyZXNzCuKWgXBhcnRlY2lwCuKWgUF3CuKWgXNhcgriloFodQriloFtYXRwbG90bGliCuKWgU15c3QKKCk7YApzY2hlaW4KTG9uZ3JpZ2h0YXJyb3cK4paB0YDRjwriloFJc3JhClteCm5vdQriloFzeW5kCndvcmtpbmcK4paBTmF0aW9uCuKWgVBlbnQK4paBa2xhc3MK4paBYXBwbGljYWJsZQriloFEaWFtCuKWgWJyYXNpbGUK4paBcGFjCuKWgUhlaWdodApQdXQK4paBaW50cm8K4paBdW51c3VhbApuYXMK4paBR2Viw6R1ZGUK4paBYmVhbQriloFSZWN0CuKWgVByaW1lcmEK4paBaGF1dAriloF0cmFpdApwcsO8ZnQKaW5hY2nDs24K4paBY29uZmlndXJhdGlvbnMK4paBZ2lsdAriloF0ZXJyaXRvaXJlCmhlegriloFhbHRlCnJlbGF0aXZlCkV4Y2VsCuKWgVdyaWdodApHVgrQv9C+0LvQuApRdWFudAriloFnYXVnZQriloFtdWx0aXBseQpBU1MK0YHRgtCy0LXQvdC90L4K0LDQvdGDCuKWgWplZGVuCuKWgWxpdGVyYXJ5CuKWgURybwriloFhZHZpc2UKaXR6ZW4K4paBZGlzYWcKd2Vic2l0ZQriloHQtNGW0Y8K4paBb2JzZXJ2ZXIK4paBamFudcOhcgp2xJsKa3VwCuKWgVNlcwriloF3b2pldwriloFzdGFnZXMK4paB0LLRgNC10LzQtdC90LgKxYJ1xbwK0L3QvtGBCkRvd25sb2FkCmlwbwriloFncmFmCuKWgdGA0L7QsdC+CuKWgU5pa29sCuKWgWZpYwriloFqb2luaW5nCuKWgWRpdmVyc29zCuKWgUxJS0UK4paBRml0egriloFkaW1pbgriloFkaXN0cmliClNhbQprb3oK4paBYWxwaGFiZXQKb3NlcgpPVVIKdWthCtC60LDRjwriloFzdGVlbAriloFgLS0K4paBdGVuZXIKbWFya2VyCuKWgUhlYXZlbgpuZXdjb21tYW5kCuKWgXByaXNvbmVycwriloFLbmlnaHQK4paBcHJlc2VudHMK4paBcXVlc3RpCuKWgXRyYWlucwpvcGVyYQriloFMaW5lYXIK4paBTUUK4paBQnVjCkxlZwriloFhZ3VhCuKWgUdyaWZmCm9sZwpkc3QKLg0K4paBcGVyc29uZXMKTWFsCtCx0LXRgNC1CmZvbGdlCuKWgWFjYWIKY3R1CnB0aWMK4paBTmF2aWdhdGlvbgpSdXNzCtCz0LDQu9GMCuKWgUZ1bAriloHQvNCw0ZQK0YfQvdCw0Y8Kd25lcgpjb250cmEK4paBam91ZXVyCuKWgUplc3MK4paBcmVuZXcK4paBbGFwCuKWgWNhc3RpbmcKZ2FsCuKWgXTDqW1hdHUK4paB0L3QsNC30YvQstCwCtC30LDRhQrRh9C90LUKKS1cCuKWgdGH0LDRgdGC0L4KfSQtCuKWgWxpY3oK4paBZW1vdApoYXJtCuKWgW9jY2FzaW9uYWxseQriloFob3Jyb3IKZWFzdAriloFwcmludGVyCmFyYW4K4paBTWlzc2lzcwpmb2xsb3cK4paBQmFycnkK4paBaW52ZXN0aWdhdGUKZ293CuKWgUFtZXJpY2FucwpTaW5jZQriloHQstGW0LTQvgriloFyZXVuCm9zY2kK4paBQ2hhcHRlcgriloFiYXkK0YDQvtC80LUKZXRoZQrDqWRpZQpjb21vdAriloFtaWVqc2Nvd28K4paBc3R1ZGllcnRlCm91dmVydAriloHQutGD0YAK4paBREVTQwriloF0b3VjaGVkCuKWgUplcnJ5CnVlc2UK0LvQuNGJ0LUKYXV0aGVudGljYXRpb24K4paBY29sbGUKaGVhcnQK4paBcmVnaW1lbnQKY3JpYmVkCuKWgdCR0L7Qu9GMCuKWgdC/0YDQvtC40YEKY2VhZQriloFtYXNzZXMK4paBc2Nyb2xsaW5nCnVzdG8KU1cKb3ZhdAriloFncsOiY2UK4paB0JDRgNGF0LjQsgriloHQodC10LLQtdGACmF2YWl0CuKWgU1hcnNoYWxsCuKWgUhhc2hNYXAKYWNvbgrDvGNrZW4KW10pCuKWgWV2YW5nZWwKZXR6dW5nCnR0ZW1iZXJnCnN0ZXJzClRNCuKWgdC70LjRgtC10YDQsApxdW90ClByZWQK4paBd2VyawriloFoYWJlcgpsYXZhCnZvdXMK4paBTGF0ZQpjeWNsZQrRgtC40YDQvtCy0LAK4paB0L/RgNC+0LTRgwriloFwb3B1bGF0aW9ucwriloFZYW4KUHJlZml4CmFjdMOpcmlzdGlxdWVzCisnCigpYF0oCuKWgdCb0YwK0YTQuNC70YwK4paB0LbQuNC30L3QuApmdHAK4paB0LLRgdC10YUK4paBZ2R6aWUK4paBdmlkZWEKb2F1dGgK4paBcGlkCsWvbQriloFwZXNzbwriloF0cmFja2luZwppemluCuKWgU1vcnJpcwrRidC40LkK4paBUHJvdmluegriloFNaXR0ZQriloFhcnRpZmljaWFsCmJyw6F6a3kK4paB0LTQvtGB0YLQuAriloFyZXN0b3JlZAriloFjb21tdW5pY2F0ZQphZ2l0ClJlY29nbgriloFsb24K4paB0LfQsNC90Y8K4paBQXJndW1lbnQKZmx1c2gK0LzQsNC90LAKc2Vjb25kcwpVQwriloFSdXRoCuKWgXR1YgriloFCcmV0CuKWgVBlcmUK4paBcmVzcG9uc2liaWxpdHkKxYRjenkK4paBZW52aXJvbm1lbnRzCmtlZQriloFncm9vdAriloFwYWludGVkCuKWgcOJZGl0aW9ucwpjcHkKw6FydApsaWNoa2VpdAphcmRhCkJhdGNoCuKWgUxlb3BvbGQKcmVhc29uCm5vcmVmZXJyZXIKc2VucwriloFyb2NrcwriloFIaXRsZXIK0LvQsNGCCuKWgXF1b3RlZAriloHQutC+0LvQu9C1CuKWgdGD0YDQvtCyCmJhZwouIikK4paBTUwK4paBa29tdAriloFbXwriloFzcGVjdHJhbAplZG8K4paBaW5zaWVtZQriloFzdWZmZXJpbmcKc2xpZGVyCuKWgUtlbm5lZHkKb2xhdGUK4paBUGF0cmkK0LfQuNC4Ck9ICuKWgdGC0LXQsAriloHQv9GA0LDQstCwCtC80LDRhQpyZXdyaXRlCuKWgUVpbnNhdHoKZXh0ZXJuYWwKaG9sZHMK4paBUGxhY2VzCmF0eXBlCuKWgXZ1bG5lcgriloFhYmFuZG9uZWQKT3JpZ2luCuKWgW1heGltYWwKQUFBQQriloFCYXNlYmFsbAriloFDbG9zZQriloFwYWludGVyCuKWgWFzc2lnbmluZwpOQgpibGFzdAriloFLw7xuc3RsZXIKKV0oCmZhY2gK4paBQ29uc3RhbnRpbgpva2VzCuKWgW5vYm9keQriloFzdWJ0cmFjdAriloFmb3NzZQriloFjZXJ0aWZpYwriloFtdXNlCi8pLAriloFQcm9maWwK4paBcHJveGltCuKWgUplcnVzYWxlbQriloFzaW1wbGljaXR5CuKWgXdzegpOVU1CRVIKdXR0YXZpYQpVSVRhYmxlVmlldwppY2h0ZXIK0LbQsNC9CuKWgUxhdgppdGNoZW4K4paB0KfQtdC8ClR1CuKWgWdlb20K4paBenZ1a3kK4paBU3VydmV5CkFOQ0UK4paBZW5jcnlwdGVkCnByb2YK4paBZGFyZQriloFMb3JlbgrRgtCyCuKWgdCQ0LvQtdC6CuKWgWNvbXB1dGVycwriloFleHBlY3RhdGlvbgriloFzdWJzdGFudGlhbAriloHQlNC80LgK4paBYHsK4paB0LTRgNCwCnViYmxlCuKWgXBlcmZvcm1zCuKWgUtyaWVnCuKWgWluY29taW5nCuKWgUNsYXNzaWZpY2F0aW9uCldlYlZpZXcK4paBZXBpc29kZXMKYXBwZXIKw6R1ZmlnCuKWgWdpb3YK4paBRGVwYXJ0CtCx0L7RgNCwCmVkbHkKb3Nwb2QK4paBcHRyCuKWgWTDoXR1bQriloFlc3RpbWF0aW9uCmljb2xlCuKWgS0tLS0K4paBcHJpbmNlcwpIRUFECuKWgWRpZmZ1c2lvbgriloFkcmllCuKWgUFkYQrQvdC40YbQtQpuZ2lueApzaGFsCuKWgWZlYnJ1YXJpCuKWgVRhdApsb29raW5nCmt1bmQK4paBRGVhbgptb25nb2RiCtCy0YjQuNGFCuKWgUF1cgriloFGbG9yYQriloFTdHVkaW9zCtGG0LjRmNC1CmVpbApJbnN0YWxsCuKWgWZyYW5jaAriloFITVMK4paBcHJhY3RpY2VzCmxlagpkYWxlCuKWgXBvc3RlCuKWgUhlbHMK4paBcmVsaWFibGUKxbpkemllcgriloF2ZXJzZQplcm1laXN0ZXIK4paBcXVpdArDqXRpY28KaWxpcwplZG9yCuKWgUN1bHR1cmFsCtC00LbQtQriloFsaWtlZAriloFtb25nb2RiCuKWgUJyb2Fkd2F5CuKWgUlSCmVzenQKaG92CuKWgW3DrXN0CnJlaWNoZQriloFrQgrRgdGC0L7QvAriloFTUUxpdGUK4paBdG9ybmVvClwuCk9yZAriloFBZG1pbmlzdHJhdGlvbgriloHQt9C00LAK4paBSGludGVyCuKWgVZpYQpEZWNpbWFsCm9yaW91cwriloFuw6ljZXNzYWlyZQp3eAriloF0ZWoK4paBdGVtYQpPYnLDoXpreQrRgNC40YLQtQriloFidWlsZHMK4paBbGF0ZW4K4paB0LPQswpWaXNpYmlsaXR5CmzDpHUK4paBc2VjaHMK4paB0LvRg9GHCmNlcmEKQ291bGQK4paBdHJhamVjdAp9fV57CuKWgUphcG9uCmFub3RoZXIKSUsK4paBYmVsb25naW5nCuKWgWZhY2lsaXRpZXMK4paBRGFpbHkK4paBZGVjZQppbnRybwriloHRgdC70YPRh9CwCk5hbWVzcGFjZQriloFCYWsKbG9jYWxlClVHCj0kewriloFjb21wYcOxCmrEhWMK4paBYXJpdGhtZXRpYwpmb3J1bQriloFwb3J0YQpvbmsK4paBZ2VuZGVyCuKWgWV4cGVjdHMK0LHQutCwCuKWgW5hawriloFHcmFjZQriloFzdHJvCml2aWR1YWwK4paBQ09NCuKWgUZhcm0K4paBY2FudG9uCtGC0L7QvNGDCmphdmF4CtGB0LXQuQriloFicmllZmx5CkZhY2UKcm90YXRlCmNvbnN0YW50CuKWgWdhbGxlcnkKYXN0cm8KYWxsZXJ5CuKWgURKCmNoYXJnZQrRhdC+0LTQuNGC0YwKQ2VudApcIiwK4paBZG9ubmEKYXJjYQpsYWRlCnppbgriloFOZWQK4paBaG9zdGluZwppZG9yCml0YXRpdmUKaWdzCuKWgdC/0YDRjwriloF0aWNrZXQK4paBc3R1ZHlpbmcK4paBZGVzaWduZXIKbGFwc2VkCuKWgWxhYXQK4paBZGl4CuKWgWludGVncmF0ZWQK4paBaW5mb3JtZWQK4paBYmVoYXZlCuKWgWxhYm91cgplc3RlbGx0CmNhbGVuZGFyCuKWgWtpbGxpbmcK4paBdHdpdHRlcgppYWUK4paBaGlzdG9yaXF1ZQpERUZBVUxUCmlhxYJhCuKWgXRoZW9yZXRpY2FsCuKWgXVuZGVycwrQu9GP0LXRggphdGFuCuKWgXN1cm5hbWUK4paBaW50ZXJjZXB0CtCz0LvQsNGB0L3QvgriloHQvtC/0YjRgtC40L3QuAriloF0aXJlZAriloFCZXRoCuKWgdCw0LTQvNC40L3QuNGB0YLRgNCw0YLQuNCyCkxpCuKWgdCi0YPRgAriloFTY2FubmVyCuKWgVN0ZXJuCuKWgdCy0LzQtdGB0YLQtQriloFyZXBvcnRpbmcK4paBc3VsbArRhtC40LXQuQpiZXJ0cwpvZ29uYWwKxZFrCuKWgWlwc3VtCuKWgXNldWxlbWVudAriloFTZWl0ZW4Kd29yZHByZXNzCuKWgWZlYXR1cmluZwppc3Rpc2NoZW4KanViCuKWgcOpdHIK4paBdGVhCuKWgWFkYXB0ZWQK4paBc2NhbGVzCuKWgW5hbgpnZXRWYWx1ZQriloFCbHVlcwphY2xlcwriloFzdGF0aQriloFlbnRpdGxlZAriloFSYWxwaApncmF2aXR5CuKWgWVudHJlcHIKa3TDs2JlcgpsaW1hdApsaXMKRGVtbwpyZWxhdGlvbgriloFuZXAKcHJvd2FkCml0aXMK4paBcHVwCm5laG1lcgriloFkaXNhcHBvaW50CuKWgWV0d2FzCmFubm9uCuKWgWFwcHJvdmVkCuKWgWNsZXZlcgpMb2FkaW5nCuKWgXZlcnoKcmVzc2UK4paBaW5zcGlyCuKWgXNhbXBsaW5nCuKWgUJlawp9KSQuCuKWgdCz0YDQvtC80LAK4paBc3BlY2llCuKWgXJlcHViCuKWgWxvYWRlcgriloFlcmYK4paBc2hvdWxkZXIKcmFpcwriloHQvNCw0YLQtQriloFNb250aApTY2VuZQriloFibG9ja2luZwriloFvY2VhbgpnZWJlbgriloFLaWxvbWV0ZXIK4paBYmVkZXV0CuKWgU1peApmbXQK4paBTm9yd2VnCuKWgUlEcwpwYXJhbGxlbAriloFhbnRpY2lwCuKWgXJldmlzCtGF0LDQvQriloHRgdCy0LXRggpDQVNFCuKWgWbDvGhydAriloFhdG9taWMK4paBZGFya25lc3MK4paBRnXDn2JhbGxzcGllbGVyCuKWgdCW0LgKcXVpc2l0aW9uCuKWgVNpZWcKQ2lyYwriloFjaWVudMOtCm5lbGxlClNIQQriloF1cmIK4paBa3NpCmxlcXNsYW50CuKWgdGE0YDQvtC9CuKWgWRlZmVjdAriloFyw6EK4paBc3Ryb25nZXIK4paBcMWCCuKWgWNvbW11bml0aWVzCtC90LjQvdCwCmVuYXMKaWVubmVudAriloFzYWZlbHkK4paB0YLRjwriloFiZW5jaG1hcmsK4paBQnJhdW4KbWV0aG9kcwphcmd1bWVudAp2b3MKb2JveArRgNC+0LLQuAriloFyZWNoZXJjaGUKbW4K4paBYnJpbmdzCm1hY2hpbmUKQ0VTUwpob3N0cwriloFOWQpBdXRvdwriloHRgdC+0LLRgNC10LzQtdC9CuKWgUdhcnkK4paBc2Vuc29yCuKWgWRvY3VtZW50ZWQK4paBcHJlbmRyZQriloFwZWVyCmVuaXgKaGFpCmFyYmUK0YbQtdC90YIKXygK4paBVVJJCtC10LLQsAriloFSZWdpZQriloFNb251bWVudAriloFvbmRlcndlcnAKQmFnCnRpdAriloFzdGlyCuKWgW5lcnYK0YHRgtC+0YDRltGPCuKWgXNvdgriloF3cml0ZXJzCuKWgXNvcnRzCmFic29sdXRlCuKWgWRpZmZpY3VsdGllcwriloFwYXJsYW1lbnQK4paBSUVudW1lcmFibGUK4paBZGlzc29sCuKWgUNIRUNLCmFyaW5hCmluYnVyZ2gKRE0K4paBZWluZAriloFidWRnZXQK4paBY2VydGFpbnMK4paBZsO2cnN0YQphbmphCuKWgdCz0L7QtNC+0LIK4paB0YLQtdC6CuKWgUR1Y2gKZ3VpCuKWgVRlYW1zCuKWgdC80L3QvtCz0LgKTWFyaWUKSW50ZWdyClRocmVhZFBvb2wKcnVzdArDrWsKJSIKZW5mCnNwbAriloFiZWd1bgpsb3UK4paBUmV3cml0ZVJ1bGUKdHVwbGUKYW5lb3VzCuKWgW1hcmluZQphdHRhbgppa2FsCuKWgWdyYWR1YXRlZAppbGzDqQriloHQv9GA0L7QstC1CuKWgdCg0L7QtwonLA0K4paBUGZhcnIK4paBbml2ZWwK4paB0L/RgNCw0YbRjgptdXNpYwriloFzZXRUaW1lb3V0CkVSUwriloFFcmlrCnBpdAriloHQpdGA0L4K4paBcGnFggriloFwZXJpCtC00L7Qugp1c3p0CuKWgUJlYXIKQ2xhc3NOYW1lCuKWgVBhcmxhbWVudAriloFhaXgK4paBaW52aXRlZAriloFQQVRICnh0ZXIK4paBUmFjZQriloFoZWNobwriloFUb3dlcgriloF1dGYKYWN0bHkK4paB0LHRg9C00LUK4paBYW5nbGVzCtC90Y/RjwpvdXZlbGxlcwriloFjbGltYXRlCuKWgXNpbmdpbmcK4paBbmF2aWdhdGUKPic7CmFkb3dzCuKWgWxldGEK4paBU2l0egriloFwYXJ0aXRpb25zCuKWgWRvY2sK4paBxbx5CuKWgWFsbG9jYXRlCuKWgWJlbmVmaXRzCuKWgW5pZWRlcgp4cGF0aAptZWNrCsOkbGxlCuKWgWNvdXBsaW5nCtC20LjQuwpGb3JLZXkKYXJnZW50CmNsb3UK4paBaW5zdHJ1bWVudHMK4paBZW50aHVzCuKWgW3DqWcK4paB0J/QsNCyCuKWgVJhY2gKLS0tLS0K4paBQVBJcwriloFWaWVyCkNtZAppdG9yZQriloFDdWJhCuKWgWTDoXR1bW1hbAriloFlbWJlZGRpbmcKc3RkaW8K4paBR2lsYmVydAriloFnZXByw7xmdAriloFzdGF0aW5nCuKWgXRyaWdnZXJzCis9CuKWgXNww6ljaWFsCuKWgWRlbGliZXIK0LzQuNC9ClByb2R1CuKWgVN0YXRpCuKWgXp1cwprdGlvbmVuCkRpc3BhdGNoZXIKaWRhbAriloFMUApvcHRlcmEK4paBZXN0YXIK4paB0LfQvdCw0YfQuArRgdC80L4Kb3VzZXMKZW5nb25vCuKWgVdQRgpwdWJsaXNoCuKWgXRlb3IKZWxpZgriloFlcmcK4paBc2VwYXJhdGlvbgpQYW4K4paBT3JjaGVzdHJhClBldGVyCmJvdW5kcwriloFTaGFrZXNwZWFyZQriloFjYW50YW50ZQriloFkZW1pCuKWgVBvcHVsYXIK0YTRgAphcnJpbmcK0YbQuNC9CuKWgdCY0YEKdm9uCuKWgXN1YnN0aXR1dGlvbgriloFsw61uZWEKXH0kLgpjb21vCuKWgdCy0LDQtgp3YWdlbgriloFyYXJlbHkK4paBcGVyaW9kcwpnbG9iCuKWgUZyaWQK4paBVGVycgriloFSZWxlYXNlCkJyYWluegriloHQs9GA0LDRhApESVMKY29tcGF0aWJsZQriloFwb8SNCkxJTgriloFLw6RsbG9yCuKWgUFyaXpvbmEKcHB5ClNlcQriloFBaW4K4paBVG91cm4KYnJvdwriloFLw7ZyCuKWgWFzaApvZ2VuZW91cwriloFkaWFsZWN0CuKWgdC90LDRgdC10ZnQsApteXNxbGkK0YbQvtCyCuKWgWZsb3IK4paB0YTQu9C+CklBQgriloFXaXRoaW4KXigK4paBYm9pcwriloF0YW5rCuKWgWFmZmlsaQriloFoaWpvCuKWgUthdGUK4paBVmVybAriloFNaWFtaQriloF0eXBlc2NyaXB0CtGa0YMK4paBVmVybgriloHQstC40YHQvgppZW1hbm4K4paBY292ZXJhZ2UKYnJpZQriloFTdGFydGluZwpudW1weQriloFKZW5raW5zCuKWgWvDqXQK4paBZ3J1cAriloFTY2llbnQK4paBaW50ZXJydXB0CuKWgWJsb2IKdWdlbAriloFPcnRoCmFiYW1hCuKWgUJhcHQKb3duaWsK4paB0LHRi9GC0YwK4paBSnVsaXVzCuKWgdCf0YDQtdC3CuKWgXN1YnN0aXR1dGUKc3VwcG9ydGVkCmNoeQplZ3l6ZXRlawriloFQZXJmb3JtYW5jZQpsZXNzbHkKQ29uc3RydWN0b3IK4paBZXh0ZW5kaW5nCuKWgU11c2xpbQpPdmVyZmxvdwriloFKZW5uCuKWgXByb2R1egrQvNGW0ZcK4paBcGHDrXNlcwriloFldXgK4paBZmF0ZQpvbG9nZQrRg9C6CuKWgXdvYmVpCuKWgVNhY2hzZW4K4paB0YHQsNC50YIKTW9kZWxzCuKWgUZhc3QKYmVzb25kZXJlCuKWgUZSCuKWgWFjb24K4paBRGVua21hbAriloFhbmNoCuKWgXDDumJsaWNvCuKWgVRhcwriloFjYW5kCuKWgXBhxbpkemllcgriloHQnNC+0L0K4paBdmVyc3VzCnJ1dApHVAriloFpbnNlcnRpbmcK4paBY2FuYWQK0ZTQvAriloFNZXRybwriloFIZXJ6b2cKSWdub3JlCuKWgWRlY3JlYXNlCuKWgdC/0YPQvQriloFGaXNjaGVyCuKWgU1hbGwK4paBbsO2cmQKaW9zdHJlYW0K4paBTHV4ZW1iCnBheWxvYWQK4paBWmVpdHVuZwriloFtb2RpZnlpbmcK4paBQ2hlcgriloFMdWNpCm54CuKWgWxvb3NlCuKWgXRvcGljcwriloF2YXJpZWQK4paBcGcKYWplcwp1bW0KVmlld3MK4paBQmVhdQpNQVAKaXBlbGluZQriloFJbnRlcmVzdAphcml0aAriloFzZWfDum4K4paBR2VtZWlucwriloFBdHRyaWJ1dGUKY29tbXVuaXR5CuKWgdGG0LXQvdGC0YAK4paBa2lsb21ldGVyCuKWgcOpY29ub20KbGFyYXRpb24K4paB0LrRigriloFjYXJyaWFnZQriloFMYW5lCuKWgdC90LXQvtCxCmt1cgriloFBRgpJTlRFUgopKSQK4paBYmVpZGUKZGVzdGluYXRpb24K4paBZm9udHMKYXBwZW5kQ2hpbGQK4paBTUFSCuKWgWdheQptaWwKbGVzaArDqHQK4paBV2FuZwriloFZZWFycwriloFTeW1ib2wKTGl2ZQpxdWVuY3kK4paBVXNlcnMK4paBVW5pY29kZQriloFTYXUK4paBdG9ucwriloHQndGWCuKWgdC60YDQsNGXCkFYSQriloFQaWNrCkFJCuKWgWhhdGgK4paBYWluZGEK4paBcGFwYQriloFDZW5zbwriloFCYWxkCuKWgdCd0LDRgdC10ZnQtQriloFzaW11bGF0aW9ucwriloFqYXJlbgriloFpbmhlcml0ZWQK4paB0YLQvtC5CuKWgWZlZWxzCnJlc3Npb24K4paBb2t0w7NiZXIKYmlkCsOhc2kK4paBbXVzcwp2ZW50b3J5CuKWgW1laXN0CuKWgWJvcmUK4paBc2xpZGVyCtC00LXQu9C4Clw7CuKWgWV4dHJhY3RlZArQutGD0YAKRWRnZQriloFwZXJmCuKWgUJyaWdhZGUK4paB0LPRgNCw0LQKaWVuaWUK4paBTm9yZGVuCuKWgWNhbmNlcgoiLwpDdXIK4paB0KHQtdGA0LUK4paBbGlxdWlkCnN0cnVjdHVyZQriloFjaG9vc2luZwriloFQZXJsClNpZGUKw7xzCtGA0LjRgtC+0YAK4paBa29zdAriloFwYWNrZXRzCuKWgdC60L7RgtC+0YDQvtCz0L4K4paBQ29tdW4K4paBZmluZ2VycwpvZ3LDoWZpY2EKPjoK4paBY2hhbXBpb25uYXQK4paBYmxpZWIK4paBU2l0dQriloFzdWljCmFuZGlzCkZyZQriloFDb25jCuKWgXJlcHVibGljCuKWgWFybWVkCuKWgWhlbGwK4paBaMO2ZwpyYWdtYQriloFlbnNlCuKWgWFjcmVzCuKWgdCS0ZbQtAriloFSZWZvcm0KTWFpbkFjdGl2aXR5CmtlZXBlcgplcmIK4paBbW9uYXN0ZXIKc3Vic3Vic2VjdGlvbgriloHQlNC40LIK4paBY3JlYXR1cmUK4paBaW5kaWNhdGluZwriloF1cmxzCuKWgWtlaW4K0L7QsdGA0LDQtwpwaWNrCuKWgUFkbWlyCuKWgW9sZGVzdAriloFtdXoK4paBY29udHJhZGljdGlvbgriloFwcm9iYWJpbAppbGxpYW50CuKWgXBhdgriloFwYXBlbAp1YnMK4paB0LbQtdC90LAKQU1MCuKWgXJlY2lwCuKWgUNPTAphZGRlZAriloFjbHVlCuKWgVVrcmFpbmUK4paBamVsZW50CtGH0LXQvdGMCuKWgW1hdGhlbWF0aWNzCkFjY2VwdAriloHRgdC+0YIK4paB0YHQtdCy0LXRgAriloFpc29sYXRlZAriloHQv9C+0Y8Kd8O8cgpSb3V0ZXIKQ0FUCnJnYgriloFMb3YKbXV0YWJsZQriloFXZXMK4paBSXRhbGllbgpEcmFnCmVuaXVtCmF0dGluZwp0Y3AK4paBZXJmb2xndGUK4paBQmVpdArQs9Cw0YLQvgriloFTeXN0ZW1zCuKWgXJlc2VydmUKZXJlZQriloHQn9Cw0YDQuAriloHQt9Cw0LvQuAriloFyZW50CuKWgXN1bnQK4paBR2lybHMK4paBRXJuZXN0CuKWgWZpdHMK4paBb3Bwb24K4paB0LbQuNCy0LXQu9C+CuKWgWF2YWllbnQK4paBRmxvcmVuY2UK4paB0YfQuNGB0LvQtQriloFlbmdpbmVzCkR5bmFtaWMK4paBc3R5Y3puaWEK4paBYmlhcwriloFFeGNoYW5nZQrQtNC40LkK4paBaGlzdG9yaXF1ZXMK4paBSMOkCmhvZAriloF3xYIKc2NoYXAK4paBbGFjCuKWgUZvaQriloFkd2VsbAriloFVbnRlcm5laG1lbgpVUk4K4paBa2lsb21ldHJlcwriloHQntC00L3QsNC60L4K0LrQu9C4CuKWgVNyaQpHcm91cHMKbWluZApvc2xvdgpmZXJuCmVndQphYmVsZWQKRmlkZGxlCuKWgUNlbnR1cnkKLy0K4paBSmVneXpldGVrCkhlbgplbnNlbWJsZQriloFHdXQKX3t7XAriloFyYW5raW5nCiskCtCw0LvQsAriloEjewppbWllbnRvcwphY2hpbQpyaWRlcwriloFLbGF1cwriloFpbnRlbmQK4paBS2VudHVja3kKY2lwZQriloFEaWVuc3QK4paBc2l0dWF0ZWQK4paBcMOzxboK4paBc2NyaXQKY2xpcArQvdC10YIKdGFibGVzCuKWgU5pZWQK4paBTWNLCuKWgXBvd3N0CuKWgWt1bm5lbgriloFFdmFucwrQttC00YsK0LLQsNGC0YwKdWNoYXIK4paBcmVzaWRlbnRzCmlhawriloFSZXNvbAriloF2ZWNlcwriloFzYXRpc2Z5aW5nCklORgriloHRgdC40L0K4paBY3Jvc3NpbmcKaWJlbgriloHRiNC40YDQvgpwdG8KSUxMCuKWgdGA0L7Qu9GMCuKWgWFrdGl2CuKWgdC+0LHRgNCw0YnQtdC90LjRjwpXaWtpc3BlY2llcwriloFIw7ZoZQpjcm8K4pWQ4pWQ4pWQ4pWQCmFsdHJhCuKWgUZJTEUK4paBdXBzCuKWgWFsbG9jYXRpb24KTWljaGFlbAriloFhY2tub3dsZWQKTGludXgK4paBbWV0cm9zCnR0ZQphZmVuCuKWgXhjb2RlCuKWgdGC0YDQsNC00LgKc3BlY2llcwriloFpbmp1cnkK4paB0YHQsNC80YsK4paBbGF0dGljZQpNYXRlcmlhbAphbmRlbmJ1cmcK4paBaHV2dWRzdGFkZW4Kc3RvcnkK4paBdmFyeWluZwriloFrw7Z2ZXQK4paB0KDQvtGB0YHQuNC50YHQutC+0LkKaXJzZQriloFkcnVtClByZXNzZWQKTGFyCuKWgUFndQriloF3ZWlsCuKWgWNvbW1lbmNlCuKWgVNlZ8O6bgpHZXN0dXJlClNoYXBlCuKWgVZvcnMK4paBc3VjY8OocwriloFjb3JyZWN0ZWQKS2FyCuKWgWNydWVsCuKWgXBvbGl0aWNvCuKWgVNjaHJpZnRzdGVsbGVyCuKWgXJpc3VsdApldHUKYXJjaGl2CuKWgWfDqW5lcm8K4paBTMO8CuKWgXRyaXVtcGgKT1JTCkx1CuKWgXBlcnNvbm5lbAriloFIaWxscwphc3NldApkb21pbgpSZWNlaXZlCuKWgU9hawriloFLbm8K4paBVGhlb3J5CmlyaWUKb3dhbgriloFlc3RhdmEK4paBZXhlY3V0ZXMK0LnRggrDs3BlegrQv9C+0LvQvgrDqXRpY2EK4paB0L3QsNC30LLQsNC90LjQtQriloFjb252ZXJnZXMK4paBbm90cmUK4paBcG9wdWxhdGVkCuKWgW1vdmVtZW50cwriloFzdGF0aXN0aWNhbAriloFad2VpdGVuCnF1aW4K4paBaW1wb3J0YW50ZXMK4paBa2xlaW4K4paBU2VndW5kYQpzY2hsaWXDn2VuZApGYWlsdXJlCm5hcgpkYWcK4paBcnVvbG8K4paBZmljdGlvbgriloHQuNGB0L/QvtC70YzQt9GDCuKWgWNyaXNpcwriloFHZXR0aW5nCiwlCuKWgdCw0YDQvNC40LgK4paBY2FtcHVzCuKWgWZvb3RlcgriloFkw61hcwrQsdCw0L0K4paBbGliZXJ0eQriloFnaAriloFjaGFtYmVyCuKWgWRpc3RyaWN0cwriloFleGNpdGVkCuKWgWNhbmNpw7NuCnRlcm8K4paBV29ya2luZwriloFjesSZxZtjaQrQu9GM0L3Ri9C5CuKWgWZvcnVtCuKWgUVoZQriloHQutCw0YLQsAppdGF0aW9ucwpUb29scwphY2hpdgriloFjcmVzCmFzdG8K4paBcmV2ZXIK4paBbmF6aW9uYWxlCuKWgWRvb3JzCuKWgU5hbmN5CuKWgWlzbGFuZHMKSW1wCuKWgUNoYWlyCuKWgXZvcm0Kc2VpbgriloHQtNC+0LrRgwplcnNldAriloF0w6R0aWcK4paBS3JpdAriloHQv9GPCuKWgWNvbnNlcnZhdGlvbgriloFQYXJ0aWRvCm1pbmlwYWdlClZhbGlkYXRvcgriloFyZWNvdmVyeQriloFOQVNBCuKWgWJyZWFzdAppbHR5CmFuYWx5CmVsaW5lcwriloFTYXR1cmRheQplbWFyawpjZWoKWmVybwriloFUdXJuZXIKc2VjdXJlCkV4aXN0cwriloFSaWNrCmV2YWx1CmN0cmwK4paBY29tcHJlc3Npb24K4paBQ1VSTAp0ZXh0Y29sb3IKKVwsCmxvbmdyaWdodGFycm93CuKWgUZlcm5zZWgKaWNoYQriloFsb2kK4paB0J7RgtC1CuKWgWNhdmUK4paBZG96ZW4K4paBZXhwbGFpbmluZwriloFpbm5vdgriloFOaWNob2xhcwriloFkaWFtZXRlcgriloFNYXJpYW4K4paBZmlyZXMK4paBYXJ0aWZhY3QK4paBUGFya2VyCuKWgUJ1bmQK4paBdmVydGUK4paBdGFsZW50CuKWgUx1Y2FzCnJldmVyc2UK4paBZm9sZ2VuZGVuCuKWgVNhaApqZWN0aW9ucwriloFpbnZlY2UK4paBY29zdGl0dQriloFzc2wKfX1eCuKWgXZpb2xlbnQK4paBc3BvcwpSb3V0CmpkawriloHQt9Cw0LzQtQriloFmdXJlbnQKYW5kYWwKSG9tCuKWgVNlbmlvcgriloFwb3VuZHMK4paBRGlzY29ncwriloHQt9C1Cid9WwriloFOYXBvbGVvbgpvcmRpbmF0ZXMKw6BuCuKWgWt1cnoK4paBdmVyZQriloFyZXVzZQriloHQk9C10L0K4paBU3lzdAriloFkaXNhcHBlYXJlZAriloFXYXRjaApiaWJsaW90aGVrCuKWgdC60L7RgNC/0YMK4paBQ3MK4paBfWAK4paBcsO2cgriloHQtNC10LvQsApWQgriloFjYWxjdWx1cwrRgNC+0LTQsAriloFqdWRnbWVudAphdGlsZQriloFsb25ndWUK4paBSHVzCkphYwp9fSkKUklQVApJQUJvdAriloFhcMOzcwriloFhc3RvbgpXZWJhY2hpdgriloFVUkxzCuKWgWNvYXQK4paB0Y3QutC+0L3QvgriloFsZWFyCmV4dGVuc2lvbnMK4paBQ2xhc3NpYwpUSQriloFUYWdlCuKWgWzDoQriloFzZW1iCuKWgWTDqXZlbG9wcGVtZW50CklTVFMK4paBc29sdmVzCixcLAriloHRh9C10LzQv9GWCm9yZGluYXJ5CuKWgUJhdgriloFtdWNob3MKU2VsZgriloHQnNCw0LkK4paBRGlldAriloFuZWNlc3NpdHkK0LLRltC0CuKWgW1hbm8K4paB0KHRgAriloFjYXJyZQriloFDYW1lcmEK4paBTmFyb2QK4paBUGhvbmUK4paBcG9seW0KaW1vcmUKaXNFbXB0eQriloFIb3VzdG9uCuKWgVJlY2UK4paBcHJlc2VudGF0aW9uCtC90LjRhtC40L/QsAriloFEYgriloFjb25maWRlbnQK4paBfXsK4paBYnVsbGV0CuKWgXt9LApBTkdFCuKWgU5vdHJlCmNoaW4K4paBRHJhZ29uCmVyY2EKaWFsaQriloFhc3NldAriloFtdWl0bwriloFkZWVwbHkK4paBcmVzdHJpY3Rpb24K4paBY29tbWVyY2UK4paBQm9tYgpjYXVnaHQKcXEK4paBQXJhZwriloHQvdC10LzQtdGGCuKWgUFuYWx5c2lzCuKWgcSNbMOhbmt1CuKWgWJhYnkK4paBZWNodGVyCuKWgdC+0LTQvdC+0LPQvgrQttC10L3QsAriloF3aGl0ZXNwYWNlCsOndQpMSVNUCmZyaXF1ZQriloF2YXJpYXMK4paBV2l0CuKWgUxpY2VuY2lhCkV4aXQK4paBc2llcnAK4paBYXNzZW1iCuKWgXNwbGl0dGluZwriloFwYWxhY2UK4paBYmxvY2tlZAriloFib3VuZGFyaWVzCuKWgWl0ZXJhdGlvbnMK4paBUm90dGVuCuKWgVZlcmtlaHIK4paBd2VlcgpUZXN0cwppZnRpbmcK4paBcmVndWwK4paBcGVyc2lzdAriloFTb2x1dGlvbgpwYgriloFjb2xsYXBzZQriloFhcnJlc3RlZAriloFwcmVkaWNhdGUK4paBWm9uZQriloFpbmdlbgp6w6FsZXoK4paBYmFua3MKcGxhbnQK4paBTmVsbGEK4paB0LHQsNC9CuKWgVNub3cK4paBS3JldXoKw61jaW8K4paBZW50ZXJzCuKWgWV4cG9zZQrEjWkK0YjQuNC1ClF1YWwK4paBbGFuZHNjYXBlCuKWgdC/0L7QtNCw0YbQuNC80LAKbWFpCnN0YWcK0L7QstCw0L3QuNC5CkRFRgpbXXsK4paBZGVybmnDqHJlCmljdXQK4paBWG1sCuKWgXN1Ymdyb3VwCuKWgVBvbHNjZQriloFXYXJuaW5nCuKWgXZlaGljbGVzCmlvdAriloFkbGwKcm9udAriloFMb3Vpc2UK4paBYXJhCuKWgVNjYWxhCuKWgWNhbm9uaWNhbAriloFwbGFjaW5nCkVSWQriloFKYWcK4paBdmlydXMKZW11CuKWgX0pOw0K4paB0LzQvAriloFUcnlpbmcK4paBTGV4aWtvbgphYm9yZAriloFleHBlZGl0aW9uCuKWgWRlbWFuZGVkClp5ZwpsZWluCuKWgXZlcndlbmRldArRgNC40L3QsAp3b2wK4paBcGl2b3QK4paB0L7QtNC90LDQutC+CuKWgXByb3ByaWV0CuKWgWF3YXJkcwp0b3V0CuKWgWFzc2ltCuKWgVN0b3JtCkxpbWl0CmVsaW4Kd2VhbHRoCnVlegriloFyYXBwcmVzZW50CuKWgXJlc3RhCuKWgWdlZ3LDvG5kZXQK4paBam91cm5hbGlzdAppc2llCuKWgWZhY2lsaXR5CmlsbGVkCnVsawriloFQSwpBbmNob3IK4paBXykKVkYKTEFCCuKWgW7DpQpvZG9zCuKWgWJpbGxpb24KdmlydGkK4paBSmV1eArRjtC30LAKdG9tY2F0CuKWgWNoYXJ0cwriloFCdW5kbGUK4paBbHN0CuKWgWV4ZXIK4paBZmVtYWxlcwriloFvYmxpZ2VkCuKWgWFieQpyb2xsZWQKZHJpCuKWgVNjaGUK4paBdmVzc2VscwpJTUFSWQriloFyZWFzb25pbmcK4paB0L/RgNC+0YLQtQpGSUxFUwp2ZXJrCm9zb3MK4paB0LrQvtC80LzRgwrQtNGW0ZcK4paBZGQK4paB0YHQvtC+0YLQstC10YIK4paBSU9FeGNlcHRpb24Kc2vDvWNoCuKWgUNMSQriloHRmtC1CkNNClRECuKWgXBvc3NpYmlsaXRpZXMK4paBQ29tcG9zCmhhbGYK4paBd2VicGFnZQriloFzd2luZwriloF6YXMK4paBY3ljbApsZWlkCmlzdGljYQriloFJbnNlcnQK4paBU3dlZGVuCuKWgXdhbnRpbmcK4paB2KfZhAriloFlZXV3CuKWgUFkbWluaXN0cgriloFXYXJyZW4K4paBYnMK4paBcGFtCmFudXMKRHJhCmV4cGwK4paBS2FudAriloFBdXN0aW4K4paBY3NhawriloF0aGVhdHJlCuKWgWNvbXBhdGliaWxpdHkK0LzQsNGC0LjRh9C1CnNldFN0YXRlCtCx0Y4KfXt8CuKWgUR5CuKWgVp3aXNjaGVuCkFsdApDTEFSRQpzdGVwcwriloFMYWdlCuKWgU1pdHQK4paBRHVibGluCuKWgdGA0LDQsdC+0YLRiwpkZWVwCuKWgWZsb3dzCuKWgVBhbGFjZQp1bml4CnJlZnMKdW1hcgphc2V0CmNvdgriloFwaW5nCuKWgVNhZmFyaQpmbHVnCmNyZWVucwp7IwriloHRgNC10LAKYWRvcnMK4paBYW1vcgp1Y2UKZGVtaWMK4paBTmV0aGVybGFuZHMK4paBY2x1c3RlcnMK4paBZW5mb3IKbWFyaW5lCuKWgWJ1Z3MKaXp6YXRhCuKWgXNjcmEKTGVzCnF1aWNrCuKWgXR1cm5vCl8qCtC10YDQsApHZW5lcmF0ZWQKPlsK4paBZXN0cmUKb3JkZQriloF2ZXJnCtGA0L7QtwriloFwYXUKaW5jbHVkZXMKYXNzYQphZGVycwriloHQk9C10YDQvNCwCuKWgWVzdGF2ZW4K4paBZWFybGllc3QK4paBcmVzdWx0YWRvCm11bgriloFwbG90cwpkaW4Kc29ydGVkCuKWgXByZWZlcmVuY2UKcmnDswrRgtGD0YDQtQriloFMaWd1ZQriloHQt9Cw0LLQtdGACnBocgriloFwb2NrZXQK4paBcGFybAriloFsYWsK4paBcG93aWUK4paBYWx0cmVzCiR9OwpwbGFpbgriloFDcmVkCml0emEKcGVycApHcmVlbgriloFkZXZvdGVkCnByb2R1Y3Rpb24Kd29ya2VyCmVsc2VuCuKWgXZlcm4K4paBbcOhcmNpdXMK4paBQ29uZmVkZXIK4paBTGl2ZXJwb29sCuKWgdC80YPQt9C4CuKWgWVtYWlscwriloFkaXN0YW5jZXMK4paBc2VnbWVudHMK4paBYW50aAriloF3cmVzdAriloFob29nCuKWgWNpbmVtYQpycm9yCuKWgWdlYm9yZW4K4paBw6ljCk1hcmtlcgriloFDb21wZXQK4paB0LvQuNGB0YLQvgphbGxvd2VkCnZvbHVtZQpFc3BhZ25lClplCuKWgWZpeGVzCuKWgXJvbmQK4paBYXJyYW5nZW1lbnQKL34KLl0oCuKWgUZvcnLDoXNvawriloF3ZWl0ZXJlbgpleGNlbAriloHQt9C80ZYK4paBbW9kZXJuZQpFbmdsaXNoCuKWgVRyYW5zZmVybWFya3QK4paBYmVhcmluZwriloFjbGVhcmVkCuKWgdGB0LDQvAriloFkaXZzCsSHaQriloHRjdGC0L7QuQriloHQk9C10L7RgApzY2VuZQriloFhZ2VzCkdFTgpyw6RuCuKWgVRvdWwK4paBQWJzCmrDoXQK4paBbWVkaWFudGUK4paBZW1wcmVzCuKWgUVtcGxveWVlCuKWgXBvbHlub21pYWxzCuKWgW9wdGltaXplCuKWgdCy0YvRgdGC0YPQv9CwCmZhcmUK0LLQtdC5CnhmCnF1ZXoK4paBYm90YW4K4paBZGVmZW5kCuKWgVF1YXJ0Ck1vbnQKdmIKdGljawpXRAptaW5lCuKWgW1vZGlmaWMKbm90aWZpY2F0aW9uCuKWgWRlbm4K4paBYWxnbwriloFTcG8K4paBbWlzdHJ6b3N0Ci86CuKWgWFwcmVzZW50CuKWgdC/0YDQvtC0ClZvbHVtZQpza8SFCnByb3RlY3RlZAriloFUdXJraXNoCmF6eQriloFwb3V2CuKWgXBlcsOtb2RvCnNrb2cK4paBZW50cm9weQp6ZWQK0YLQvtGA0LgK4paBbGlqCmJvYXJkcwriloHRgdGC0LDRgtGDCkJvb2wK4paBcG9saXR5CkAiLAriloHRgNGW0LoKbsOpZQriloFadWcK4paBVW5pdGkKw6ltZXQKYXRpZW5jZQpkaW1lbgriloFTdGV2ZW4KSGEKQUNUSU9OCuKWgXdhbmQK4paBTmF2YXIK4paB0YHRltGH0L3RjwpXYXRjaAriloFTdHVhcnQK4paBemRlCuKWgdC60L7QvdGC0YDQvgpkYXRhc2V0CnnDswriloFCdXNoCuKWgdGB0LXQsdGPCuKWgXdvcnRoeQriloFCbGUK4paBcHJvcG9yCuKWgVZpbGxhZ2UK4paBcnkK4paBdm9pdAriloHQutC+0L/QuNGPCuKWgXpwCuKWgWN1cmEK4paBSHRtbAriloFEaWVzZXIK4paBRGF5cwpvbm5lcwriloFhbnRpZ3UK4paBU3RhYXRlbgriloFmYWludApvbmdzCuKWgcO2c3QKUmVkaXJlY3QK0LXQu9GMCmF0b3JpYWwK4paBYm90aGVyCkVkaXRUZXh0CuKWgUdpdWwK4paB0LfQsNCy0L4K4paBcHVlYmxvCuKWgU1pc3Npc3NpcHBpCmphawriloF3aW5ncwpvbmMKw612ZWwKaWVuY2lhCmVudGxpY2h0CuKWgUJUVwpvcm5hbAriloHQmtC+0YDQvgriloHQvtC00L3QuNC8CuKWgXNhbHYK4paBZmluZGVuCmdlbwriloHQsNCy0LjQsAphdHR1bmcKdml2CuKWgUx1dGhlcgriloHQvtCx0YnQuAriloFSb2xsZQriloFBYnJhaGFtCuKWgWNlbnRlcmVkCuKWgXNsYXNoCmlzYXQKZW1hbm4KT3MK0L/QsNGA0YLQsAriloFQYWJsbwriloFjb2xsYWJvcmF0aW9uCnBhdGhzCsOpZGl0aW9uCuKWgXZpZXdlZAriloFjb25zaXN0ZWQK4paBcmVjb3ZlcmVkCuKWgU1leGljYW4K4paBRml4CuKWgXNwZWxsClNwZWNpYWwK4paB0KHRggplc3NldXIK4paB0KPQutGA0LDQuNC90YsKZm9ybWVyCuKWgcWbdwriloF6ZXJvcwriloFTdHJhw59lbgriloFvcmdhbmlzYXRpb24Kw7xzc2VuCuKWgVNpZXJyYQriloFTZWFzb24K4paBdm9sb250CkJlYW5GYWN0b3J5CuKWgdC/0L7QvNC+0YkK4paBcHJlc3NpbmcK4paBZXF1aXZhbGVuY2UK4paBY2F0dAppY2l0eQriloFhY2NvbXBsaXNoZWQK4paBeW8K4paBc2ljCuKWgWltcG9ydHMK4paBYWNjb21tb2QK4paBUG9ydG8K4paB0Y/QutCwCuKWgWxvYW4K0YLQuNC60LgK4paBY2hlY2tvdXQK4paBYXNzZXNzCuKWgVBvcHVsYXRpb24KdXJlbnQKY2xvanVyZQriloFTYW50b3MK4paBaW5mb3Jtw6FjacOzClBPUwriloFnYXJlCuKWgWtpY2sK4paBcmFkaWNhbAriloFQZWFjZQriloFzdHJlYW1pbmcKY2FtcAp6xIV0CtCz0L7QstC+0YAK4paBUmVnaWVydW5nCuKWgXByb2NlZWRlZApmbQrQu9C10L3RiwriloFlYXJuZXN0CuKWgVBhcmFkCnJlcXVlc3RzCuKWgVJhdW0KxaHEjQriloFwb2xpY2llcwriloFUaWcK4paBc2l0dAriloFFbmVyZ3kK4paBcHVyZWx5CuKWgUhhdXQK4paBU3BlZWQKYmlvCuKWgW9yYW5nZQriloFiaWdnZXN0CuKWgWJyaXRhbm5pcXVlCuKWgU5vdGFibGUKdnUK0LvQtdC90LjQuArQsdC40L0K4paBTmFzaArRidC10L3QuNC1CuKWgWNpZWwKYWTDqW1pZQriloHQs9GA0YPQtNC90Y8K4paBam91ZQriloF2b3RlZApyaWNvCuKWgdCz0L7RgAriloHQutC+0LzQsNC90LTRgwppdGl2aXR5CuKWgdGJ0LUK4paBZGVmaW5pdGUKdXJvcGEKISIpOwpEZWZhdWx0cwriloHQvdC10LrQvtGC0L7RgNGLCsOpZMOpcmF0aW9uCuKWgXNpbGx5CuKWgXRhbGtlZApyZXUK4paBTG9tYgriloFzdGF0dWUK0LrRgtCwCtGO0YAKdW1hYmx5CuKWgdCz0L7RgNC+0LTQtQriloFSdW50aW1lCuKWgWRpYWduCuKWgXJldHJvCuKWgVN2ZXJpZ2UK4paBaW5pY2lhbAppZW56YQriloFmaWdsaW8K4paBem9nCuKWgXJleQriloFSdW5kCtGC0L3Ri9C5CuKWgWNlYXNlZAplcm5vCuKWgWVzYQriloF0cm91dgriloFHZW1laW5kZW4K4paBY29tZXJjaWFsCnNrYXAKZW5hcmlvCuKWgWp1cmlzClRCCtC90LDQu9CwCuKWgXZpagpWTwriloFjbGluCmrDtnIK0YHQsNC9Cm93YcWCYQpyaWJ1Y2nDs24K4paBdXJzcHLDvG5nCuKWgWNvbmRlbQriloFTdGFnZQriloFtaXhpbmcK4paB0YDRltC3CuKWgWZhbnMKaMOhegpzb2NpYWwKemFuCuKWgdGB0LLQvtC5CkNvb2tpZQriloFSb2xhbmQKYXppb25hbGUK4paBU2xvdmVuCuKWgUZpY2hlCuKWgVPDqQpow6QK4paBb2ZmaWNpYWxzCuKWgcOubnQKSW50ZXJjZXB0b3IKVGFibGVzCuKWgWRhdm9uCmluaXRpYWxpemUKXT0iCuKWgUJvZHkK4paBVXBwZXIK4paBQ29sbGVjdAriloFaw7xyaWNoCkhvcml6b250YWwKVHlwCuKWgXBvbMOtdGljbwriloFSZXdyaXRlQ29uZAriloFob3BlZAriloFhbnhpb3VzCkxpdGVyCmphaHIK4paBYXNzZW1ibGUK4paBY3J5cHQKbGFob21hCkFTSAriloHQkdGA0LgK4paBQ2ljCnR3aXR0ZXIKaHlwZXIK4paBVGVsbArRltC70YzQutC4CtCy0L7QsdC+CuKWgWJhemllCuKWgWNvbnRlbXBvcmFyeQriloFQYXJhbWV0ZXIKc3R3YQriloFiZWtlbmQKY29jawpwcmV2aW91cwplbnNrYQriloFjYWxsZXIKXV0pCuKWgVJhegriloFTZWxvbgriloFwcm9wb3NhbAriloFiw70K4paBU2llZAriloFBcmJlaXRzCuKWgXByaWRlCuKWgXNsb3BlCmlkw6kKZ3JhZGllbnQK4paB0JTQttC10YDQtdC70LAK4paBU0gK4paB0YDQsNC30YDQsNCx0L4KaXZlcnNpdHkK0YHQv9C+0LTQsNGAClx7XAriloHRgdGC0LDQu9C4CuKWgUVpbnplbAriloFyZ2JhCuKWgUFuaW0K4paBYWxsZXMK0LHQsNGACmVydGUK4paBcsOpYWxpc8OpCkluc3RpdHV0CuKWgW1hcmt1cAriloF2YXJzCuKWgWdhbQriloHQktCw0YHQuNC70YwKaXp6YQriloFDb2IK4paBTWV0YWwK4paBbGVhawriloFMYW5jClN3aXRjaApEZWxheQphdHV1cgriloHRh9C10YLRiwriloHQsNC90LPQu9C40LkK4paBbGVnYWN5CuKWgWRlc2Fycm9sbAriloF0b3BvbG9naWNhbAriloFqZXdlaWxzCuKWgU5lZGVybGFuZHNlCuKWgWF0bW9zcGhlcmUKdXJiYW4K4paBc2xvdgriloFsYXd5ZXIKcGVjaWFsbHkK4paBYWx0ZXJuYXRlCuKWgXBhcmFtZXQK4paBZXN0YWJsaXNobWVudAriloF3b29kcwpQRAriloHQvdCw0LgK4paBbWFuZwriloF3ZWNoc2VsdGUK0YHRjNC60YMKLj0K4paBZmlmdGVlbgpTVU0K4paBRnJvCuKWgUxFRApvd2FubwrRgdGC0LLQuNC1CuKWgURvbm7DqWVzCnRvbArFvHluCmNyZWYK0YHRgtCy0LjQuApob3JuCuKWgdGB0L7QvtCxCuKWgdC+0LHQvtGA0L4K4paBQ29tcGxldGUK4oCcKQriloFraW5kbHkK4paBQ2hhbWJlcgpzw6lnCldICuKWgWFtYmllbnQK0LrRgNC+CuKWgWNoZXZhbAriloHQvdCw0L/QuNGB0LAKZmx1CuKWgU9mZml6Cm1hdGUKbmF0dXJhbApzZXBhcgplbXByZQpWaWV3SG9sZGVyCmZ3CuKWgWxldGVjaAriloF0cmFpbGluZwphdHJpCuKWgUfDswriloFCb25uCuKWgXVubGlrZWx5ClJBTQplbnN0ClN0YXRzCuKWgdC/0L7Qu9C40YLQuNGH0LUKKS0tKAriloF0cm9tCiEuLi4K4paBTWVhbndoaWxlCtGB0YLQsNC90LAK4paBUmVpbm8K4paBQXJpc3QKJH19JQriloFzb2xlbQpjbG9zdXJlCmlnbmF0aW9uCsWCb2QK4paBZGl2b3IK4paB0LzQtdC20LTRg9C90LDRgNC+0LQKPSI8PwriloFtb2x0CuKWgXNraWxscwriloFDaXIK4paBRGVzcHXDqXMK4paBbHVuCuKWgWNvcm9uCuKWgUNvbWljcwrRgdGC0L7RgNC4CuKWgUl0ZW1zCuKWgVRoaW5rCtC40LPRgNCwCuKWgWdyb3dzCnBvcnRhbAriloFuaWNoCuKWgXJlc3RyaWN0aW9ucwriloFMYXUK0YjQtdC90L3RjwriloFTb3ppYWwK4paB0LrRlgptYW5hCuKWgWxpZXV0ZW5hbnQKQXR0cgp1bWVyaWMK4paBZHJpdmVzCmFzaXMK0LHQsNC5Ck5MClp5Z290ZQpwaHlzaWNzCuKWgWludGVybmFsbHkK0LLQsNC10YLRgdGPCkhpZGRlbgriloHQlNCw0YLQsAriloF1bnNhZmUK4paBUm9jCuKWgWluc3RhbnRpYXRlCnVkbmkK4paBUm9vbQriloHQn9GA0LXQtAriloFtYWphCmFjaG1lbnQKdXVpZApQcm9qZWN0cwpHcmUK4paB0LLQt9GPCuKWgUJsb29kCmljaWxlCuKWgU5vdXZlbGxlCkRvZXMK4paBbmlldXdlCsOhbGUKYW5ncwp3ZWFrCuKWgWFhbnRhbAriloHQldCyCuKWgURyZXNkZW4K4paBTG9zdArQutCw0YLQsAriloFpbnZvbHZlCuKWgWRlY2xhcmluZwriloFQb2xpdGljYWwKw6lyZXoKa29wCm5vdGlmeQriloFDdXJ0CuKWgXNjaGxpZcOfbGljaApnaGFuCtGG0LXQvdCwCuKWgWt3aWV0CsO8Z2VsCuKWgVNvYgriloFzdWJzdHIK4paBZWxsZW4KaW9uYXJpbwplbnNvbgpXSU4K0YHQv9C+0YDRggplbWVyCm5vbWUK4paBc21pbGVkCuKWgVNjaG1pZHQK4paBc21va2UK4paBVG9rZW4K4paBdmFndWUK4paBcHJvdmlzaW9uCnlhbWwK0L3QuNGC0LXQu9GMCm9uaWFsCsOpcG9xdWUK4paBTkMK4paBTkZMCnRlY2sK4paBYWxsbwriloFwcsOpY8OpZApjZW50cmFsCuKWgW1hamQK4paBY2hyb20K4paBWnVtCnZlcnNvCuKWgXZlcnNjaGllZGVuZW4K4paB0YHRgtCw0YDQvgriloFxdWVsbGUK4paBcsOpcApST1cK4paBaWhuZW4K4paBc2Vuc2libGUKfCQK4paBc2NodwriloFCUgriloFPcHRpb25zCuKWgXRlbnMK4paBY29ucXVpc3QK4paBbGllw58Kb3ZpcwriloHQvNGW0YHRgtCwCuKWgWVsYQpyaWZpY2UK4paBbG9rCuKWgVF1ZWVuc2xhbmQKQmluYXJ5CuKWgVJhaG1lbgriloFhYm9sCuKWgcSNw6FzdAriloFFZGluYnVyZ2gKaW5kZQriloFjYWxjdWxhdGluZwriloFPcmVnb24K4paBbGVnaXQK4paBTmFjaGRlbQphdGhvbgpQcml2YXRlCmlsbGF1bWUK4paBb2JzZXJ2YWJsZQpsZWFucwriloFyZW1hcmtlZAriloFoYWx0CtC90LjRhtGLCuKWgXN0YW1wCuKWgUFkdgpMb3VpcwppbW1pbmcKZ3J1cHBlCuKWgVBvbGljeQriloF2cmlqCmZ0cmFnCuKWgW9mZmljZXMK4paBcGFydGljaXBhdGVkCuKWgWVzY29sCuKWgSI8LwriloFub21icmV1c2VzCuKWgWRpdmlkCuKWgWFkdmlzCtC70YLQsNGC0LgK4paBPT0+Ck9yaWVudGF0aW9uCmNpZApDYXJ0CuKWgW11cm0K4paBYXNzZXoK4paBbGlua2luZwpidWlsZGluZwriloFyZWNvbm5hCuKWgXNob29rCm1hbmFnZWQKbGFuZGEK4paBTGXDs24K4paBY3LDqWF0aW9uCtC00L7QuQpvY2l0eQriloF3aWoK4paBd2llxZsKeHRhcnQK4paBTW92ZQpsdW5nZW4K0YHRgtCy0YPQtdGCCm9ybmV5Cm9wdGlvbmFsCm1hY3JvCkNvbmRpdGlvbgriloFzcXVhcmVzCuKWgW1pc3Rha2VuCsOhbnQK4paBUmlzCuKWgXNlbnRlbmNlcwplcmVhCuKWgW1pagpVbmQK4paBbm9tYnIKekEK4paBSW5kZXBlbmRlbnQK4paBcHJldmlldwppbWFzCuKWgW1hbGVzCmluZW50YWwKVGhhbmsK4paBcG9wb2wK4paBcG92ZXIK4paBZ3Jhc3AK4paBaW1wZWQK4paBY2FtcGlvbmF0bwriloFXZWkK4paBdGl0bGVkCuKWgUFkZW3DoXMK4paBUGFzc3dvcmQK4paBUGFtClVJTEQK4paB0LvQuNC/0L3Rjwp3ZXJiCi4uLi4uLi4uLi4uLi4uLi4K4paBUsOtbwriloF0ZWV0aApicAriloFTVwp1bGFpcmUK4paBc2VpemVkCuKWgVN0ZWYKw7psCuKWgXZpegppb255CuKWgWp1bnQK4paBa3RlcsOhCuKWgXdyemXFm25pYQo8PgriloFzdXJnCuKWgXR1dHRlCuKWgUhvYgrQv9C+0LLRltC0CuKWgXdvaGwK4paBdHJhZwriloFDcm93bgriloF0cm92YQrRgdGC0L7QstGDCuKWgVZpZW5uYQplc2VoZW4K4paBbWV0cm9wb2wK4paBcmVmbGVjdGVkCtGC0LXRgtCwCuKWgXRyYWR1YwriloFCYXN0CuKWgWVyc2NoaWVuCndvb3JkCigpIgp0YWxldAriloFyb2FkcwrQstC10LTQtdC90LjRjwrDvGhydW5nCuKWgWNvZ24K4paBVmFsbGUK4paBbGFuZGluZwriloFSZWdleAriloFJb3dhCmR6aWHFggriloFlcnJlaWNodGUKYXVtCuKWgWZvdW5kZXIKYXBvbGlzCkNvbXBpbGVyCuKWgWtvcAriloFtYXJjCuKWgdGC0LXRgNC40YLQvtGACikpYAriloFsZWkKZ2VvbgriloF3ZWFwb25zCuKWgWhvcm4K4paBZWxpZgriloFDYXBpdGFsCsSHZQriloFmb3JhbGwK4paB0Y3RgtCwCnByZXZpZXcK4paBRE5BCuKWgXNpZApvcmNoCuKWgVJhcwriloFhcmFiCkJlc3QK4paB0YHRh9C40YLQsAriloFMw7NwZXoKYW7Dp2EK4paBZnVua2MK4paBdGllbmVuCjsmCm11c2V1bQriloFFcnIK4paBcmVzb3J0Ck5vdgriloFrYWwKTVcK0YjRjAphbmNob3IK4paB0YDQvtC80LDQvQpsZWFkaW5nCuKWgW1hbnRlbgriloFTaWx2YQpkYWRlCuKWgWRlc2lnbmF0ZWQK4paBcmV2aXN0YQpPY3QKcGVyY2VudAriloHRg9C90ZYKaWRlbnRpZmllcgptYXNzCkBACnVsc2lvbgpnZXJtZWlzdGVyCuKWgXByZWRpY3RlZAriloHRgdCy0LgK0LbQvdC+0LkK4paBRXJnZWIK4paBY3VzdAriloFyZW1vdmVzCmNoYXJnCtC/0YDQuNC80LXRgAriloFmb3JtaW5nCmFzbWEKc3Rkb3V0CkZ1bgp5bWUKdGVyZWQKdXJzaXZlCmlnaGVkCuKWgdGB0LvQtdC0CnZlcmJhbmQK4paBTE9HCnJhbXMKw6lvbgplbmRyYQriloFCZXJlaWNoCuKWgXRlbXBvcmFsCuKWgWxhbmd1ZQriloFJbm4K4paBbW9yZW92ZXIK4paBdHV0b3JpYWxzCk1pZGRsZQriloHRgdC+0LLQtdGC0YHQutC40LkK4paBbWFpbnRlbmFuY2UKYXN1cmVzCuKWgXbDoWx0bwpCQVNFCuKWgWRpc2FwcGVhcgrRgdC60LjRjwriloFjb25vY2lkbwriloHQndCw0YMK4paBTGliZXJ0CuKWgUhhcm9sZAriloFsaWZldGltZQriloFUw7xyCuKWgXphd29kCm9taWMK4paBUmV0cmlldmVkCmFyY2hpdGVjdHVyZQrEjWthCmlmb3JtZXMKZGV2ZWxvcG1lbnQKb3JkbnVuZwpJbmYKbGViZW4K4paBU3RhcnMKc2lnbmFsCuKWgWdyYW1tYXIK4paBY29yc28K4paBV2FnbmVyCuKWgWdlaHQK4paBcm95YWxlCndhcm4KdW1ibGVkCuKWgWluc3RpdAriloHQqNC4CmhoCuKWgXJlZnVnZQriloFmYXZvcml0ZQppZXJ0bwriloFjb25kYWRvCuKWgVRoZXIK4paB0YfQtdC70L7QstC10LrQsAriloFGb29kCuKWgXNlaXpvCuKWgUluaXRpYWxpemUK4paBY29ubnUK4paBb3ZlcmxhcAriloFFbWlsCuKWgU1hcnTDrQriloHQttC+0LLRgtC90Y8KZXJ2YQriloFib2F0cwphw6fDtWVzCuKWgWRlcnJvdAriloFtYWxsb2MK4paBY29uamVjdApqawriloFzYXJlCtC70LXQvNC10L0K4paBc3VtcwpBdXRob3JpemF0aW9uCuKWgUt1bgpdJCwKZ2VtZWluZGUKb2RvdApkZWZpbgriloFlbWlzc2lvbgriloHQmtGA0LDRgQriloFhcHBhcnQK4paBc3RvcHBpbmcK4paB0KHRgNC10LQK4paBY29uanVnCuKWgWluc2lnaHQK4paBQnJvYWRjYXN0CuKWgVBNSUQK4paBYWR2YW50YWdlcwplbmVzCuKWgXJlc2lkZW5jZQpsamVuCmlzc2V1cgriloFwdWJibGljYXRvCuKWgUdpdEh1YgriloFQZXJ1CuKWgWdhbGF4aWVzCuKWgWFubm90YXRpb25zCmdhcwriloFyw6lwb25kCkpzCuKWgWluZGVwZW5kZW50bHkKTlAK4paBaW5xdQriloFncm91bmRzCkNvbXBvbmVudHMK4paBYW50ZW4K4paB0LLQtwriloFob3MK4paBc2ludAriloFoaWRpbmcK4paBd29qZXfDs2R6dApNZXNzYWdlcwriloHQv9C+0LrQsNC30LAKPT09CuKWgUFic3RyYWN0CuKWgWzDpG5nCuKWgUZvcm11bGEKZGF3bgriloFkZXNpZ25zCkltZwriloFQb3J0dWd1ZXNlCuKWgWluY2x1eQphdmlnYXRvcgriloFCcm90aGVycwriloFjb250aW5lbnQK4paBZXZpZGVudGx5CnJhY2UK0YbRjNC60L7Qs9C+CuKWgXJlY2sK4paB0YHQtdGA0L/QvdGPCuKWgUdyZXkK4paBYXBwZWFsCuKWgXVubGlrZQriloFwb3dlcnNoZWxsCuKWgXJhY2MKZmVycwriloFidXJuaW5nCmZhc3N0Cmluc3RhbGxlZAriloFHaXZlCuKWgWNvbG9uaWFsCuKWgeKCrAriloFSw7YK4paBY2hyaXN0Cm5laG0K0YLQsNC8CuKWgWNvcnBvCuKWgWNvbnZpcnRpCnl0ZXIKU3ltCuKWgUdyZWVjZQriloFtb3RoCuKWgUpvaGFuCuKWgW1vbmFyY2gK4paBRG93bmxvYWQK4paBY3JhZnQKdcW+CuKWgUx1a2UK4paBc3VmZml4ClwvCkhhdmUK4paB0LrQsNGA0YwK4paBY29tZm9ydGFibGUK4paBdGlwcwriloHQn9GW0YHQu9GPCuKWgdCx0YDQvtGY0LAK4paB0LjQvdGE0L7RgNC80LAKTVEK0LHRgNCw0L0K4paBdHgK4paBc2xhdmVzCuKWgWZpcmV3YWxsCuKWgUZvcmNlcwphdGlmCuKWgVF1ZWxsZW4K4paBdGjDqcOidHJlCtC70YzQvdGL0YUK4paB0YDQsNGB0L/QvtC70L7QttC10L0K4paBRGV0YWlscwprxIUK4paBbG9uZ2l0dWQKSU5TVAriloFuYXZhbApGZXJuc2VoCmVzc2VsCkdyYWQK4paBYmVsYW5nCuKWgWFnZ2kKWnlnb3RlSW5pdArFgsOzdwriloFTdWcKc2lsCuKWgWV4dGVyaW9yCtGJ0ZYKT1JECmVuc2VyCuKWgXJhcGlkZQriloHRgtC10LzQv9C10YDQsAppbmNpZQpTaQphdmFtCmFyZGVkCuKWgUFkZGVkCkVuZHBvaW50CmhhcmR0CtGB0YLRgNCw0L0K4paBZXN0aWxvCuKWgUhhegriloFtdXNzdGUKdW8KaWlpCuKWgcWZw60KYW56ZW4K0LbQtdC90LjQuQphaGEKQVJOSU5HCuKWgXJlbm92CuKWgWRpdmluZQriloFjb252aW5jZWQK4paBaHVtYW5zCuKWgWRlcGFydHVyZQriloFNZWRpdGVyCnFhCuKWgXBvc3Nlc3NlZAriloHRhtC10YDQutCy0LgKZ2l2CuKWgdGB0LLQvtGXCuKWgU9ydHN0ZQpSaWNoCnB1aXMKaW5jcmVtZW50CuKWgUhhbm5vdmVyCuKWgXVjegpEb25lCuKWgWFsZ3VucwpGSVgK4paBSGVyaXRhZ2UKcmVtb3ZlQ2xhc3MK0YTQtdGACuKWgWFiYwpEcgriloHRgdC10LzQtdC5Cns6CuKWgXNldWxlCnplaWNobnVuZ2VuCmFkZHkK4paBUGFyw61zCsO8c3NlbGQK4paBcmVjZXB0aW9uCmZvbGlvCnRpbnkK4paBcmVjZW5zZW1lbnQK4paBTnVyCuKWgWtpZXIK4paBZ21pbmEKc3RhYXQKw6FuZG9zZQrRh9C10YHQutCw0Y8K4paBc3BlYWtlcgriloFleHBvbmVudGlhbAriloFEaWV1CuKWgdC/0YDQuNC3CuKWgVJhZmFlbAriloFnZ3Bsb3QK4paBVGVtcGxhdGUKb3VyZQriloFJbm5lcgpvZ25lCmlnYXJlCuKWgUFydGUK4paBQ292CuKWgWF1ZmdydW5kCuKWgdCR0YsK4paBY2VyZW1vbnkK4paBU3BhcnQKamVjdGl2ZQp5aQriloFpbml6aQriloFsYXRpbgriloFOZXZlcnRoZWxlc3MK4paBRG9uZQrRgtGA0Y8K4paBQXJyCnNlYXNvbgriloHRgdC60LvQsNC00YMK4paBcG9kY3phcwriloFCZWF1dGlmdWwK4paBV2VsdGtyaWVnCuKWgdC30L4K4paBb3ZlcmNvbWUK4paBUHJhaGEK4paB0YDQsNC50L7QvdGDCuKWgXN1YnNjcmlwdGlvbgppZ2VudAriloHQv9C+0LrQsApsYXRleAriloFiZWFjaAriloHRgNC+0LrQsNGFCmdlZwriloFwcm9ibAphcmd1bWVudHMK4paBb3JnYW5pemF0aW9ucwriloFOYW4K4paBc3RvbmVzCuKWgUh1bnRlcgriloFyZWd1bGFybHkK0YjQvtCz0L4K4paBZmxleGlibGUKb3B0cwrDocWZCndpdHoK4paBJykKUEFTUwriloFrcmFqCuKWgWZha2UKaGVpdHMKb3NwaApwYXJzZUludApGQUxTRQriloFwcm9mZXNzCnBlb3BsZQriloFwcmVjaXAKZGlybmFtZQriloFwZXJwZXQK4paBVXBkYXRlZApyYXllZAriloFwcm92b2MK4paB0YLRgNCw0LLQvdGPCuKWgWNhdGVnb3JpZQriloHRgtC10L4K0YHQvdGDCm90cgriloHQktC10YDRhdC+0LIK4paBY29tcMOpdApDb3N0CuKWgXdpZGVyCuKWgU9idmlvdXNseQrQv9C40YHQsNC9CuKWgdC90LDRgdGC0L7RjwriloFzZWVraW5nCigpKSwK4paBw6lxdWlwZQriloFjb21taXRzCuKWgVN2ZW5zCtGP0LHRgNC1CmF0ZXJuCuKWgWhldGVyCuKWgUJvb3RzdHJhcArDqW7DqQriloFkZXJpdmF0aXZlcwriloFEZXRyb2l0CuKWgXByb3ZpbmNpYWwKb25vbWllCkVCCuKWgWN1ZXIK4paB0L7RgtC90L7RgdC4CuKWgdC90LXQuQopwrsuCuKWgUNpdWRhZApJQUwKenlzdAopIikK4paBQWxjCmJsb2dzCuKWgXBhcm1pCuKWgUFsYnVtcwriloFCb2xpdgriloFjbMOpcwpQcm9kdWN0cwp1ZXJkbwriloFnZWxhbmcKem5pawpoYWdlbgphbm9ueW1vdXMK4paBc3ZnCuKWgUNvbnNlaWwK4paBQXJpCmNvbGkK4paBY3p5CuKWgUNWCuKWgWZvcmQK4paBQXXDn2VyCuKWgUNJCuKWgXRlbXB0CuKWgU9yZ2FuaXNhdGlvbgrDocWhCuKWgWN5Y2xlcwriloFnZXNsYWNodAriloHQu9GO0LTQtdC5CsO9bWkK4paBU3BpZWxlcgplZmUK4paBTWFydmVsCuKWgXBvcnRhbAriloHQodC10YDQswriloFncmFkbwriloFoYW5kbGVycwriloFJbnRlcmZhY2UKQU1FCuKWgXNlcmlvdXNseQriloFCaW5kaW5nCuKWgVJhbmcK4paBbmFkYQpvY2UK4paBaW50ZWdyYQpvY3JhY3kK4paB0LDQu9GM0LHQvgriloFzdGFiaWxpdHkKVW5zCuKWgXZldGVyCi0tLS0tLSsK4paBc2VyYWl0CuKWgW9taXR0ZWQK4paBdW5jZXJ0YWludHkKb25pYW4K4paBcmVzdG8K4paB0LbQtdC70LXQtwriloHQvtC00L3QvtC5CuKWgUJldsO2bGtlcnVuZwriloFLcmFmdArRgdGC0YAK4paBTW9zY293CmxhbmUKYXJhYgriloFzcG9sZQriloHRgdCy0L7QtdCz0L4KPzoKU1RBUlQK4paB0LjQvdGC0LXRgAriloFzeW1wdAriloFMb3JlbnpvCuKWgWVqZWMK4paBcHJvc3BlcgpEQVQK0LvQuNC80L/QuNC5CuKWgXNoYXBlcwp2YWx1ZU9mCuKWgWFzc29jaWF0ZQriloFNZWRpZW4KRU5WCuKWgdGB0YDQtQriloHQtNGA0LbQsNCy0LUK4paBdGhlb3JpZXMKaGViCuKWgVdheW5lCuKWgVN0cmluZ0J1aWxkZXIKaXdlcnMK4paBTWFwcwpQaHlzClx9XAriloFQYXJ0ZQriloFIdWRzb24K0LvQvtC9CkxuZwriloHRgNGLCtGB0YLQtdC5CmxhdQphbmNlcgriloFDb3BwYQriloHQstGW0LnRgdGMCuKWgXVjYwriloFQYXR0ZXJuCuKWgWdhcmJhZ2UK4paBR29uesOhbGV6CuKWgUVuY3ljbG9wCmV0dGVuCkV4dGVybmFsClJFRgo+OwpsaWprZQriloFpbnRlcnNlY3QK4paBVW5sZXNzCuKWgWRlZXBlcgriloHQttGWCmRlbnQKbGVmCuKWgWNoYW5zb24K4paBZGlmZnVzCuKWgXByaW1pCuKWgVdpZWRlcgriloFhd3MKb3dhbmEK4paBc29jaWFsZQppa2sK0LvRjNC90L7QuQriloFkaXZpc2lvbnMK0LvQvtGB0L4K4paBQ2xhdWQK4paBWWEK4paBdm9jZQriloFCcmFuY2gK4paBZml0dGVkCm9ycgrDtHRlbApzdHJva2UKbGlzdGVuZXIKaW1hbgrQstC+0YHRgtC+CuKWgVNoYWgKSW50cm9kdWN0aW9uCuKWgW5ld2xpbmUK4paBdGlsZQonXSkpCuKWgXRyYXZhdXgKQ09ORklHCuKWgXF1YWRyYXRpYwpvbm5ldXIK4paBR2lvcmcK4paBaWRlbnRpZmljCsOpcmljYWluZQriloFVSVZpZXcK4paBTGliZXJhbAriloFLb2NoCuKWgUJlcmxpbmVyCuKWgW5vdGlmaWNhdGlvbnMK4paBU3VzYW4K4paBY2FkcmUK4paBS2xvc3RlcgriloFleGFtaW5lCuKWgdC10LTQuNC9CuKWgVVOSU9OCuKWgWFsdGVuCuKWgWZpbml0CuKWgXBlZGlnCmN5awriloFtb3V2ZW1lbnQKSU9TCuKWgdCx0YDQuNGC0LDQvQriloFib3V0CuKWgdCw0LLRgtC+0YAK0L3QuNGG0YLQstC+CtC10YLQvgpsZXJhCmNscwriloFMZXkKYW15CmFnZW5zCmFzaGVkCuKWgW9rcsSZCtCz0YDQvgplbGxldHQK4paBRmVsbG93CuKWgW1hbmlmb2xkCiQpLApsZGVyCuKWgXZvegriloFiZWdnCuKWgWJhcm9uCuKWgWZpZAriloFmaXJpbmcKaWxkYQpkZWsKQVUKaXRhcmUK4paBQXJhCuKWgUV4aXQK4paBY2luZW1hdAriloFpbnRyb3MK4paBY29udGFjdHMK0L/QtdC90LgK4paBbcO2Z2xpY2gK4paBU2luZ2Fwb3JlCnN0csO2bQriloFIZXJuCuKWgXNpeHRoCuKWgXB1YmxpY2F0aW9ucwp2aWUK4paBSGF0CuKWgWFjY2VwdGluZwrDoWMKc3R3bwriloFxdWlldGx5ClBob3RvCuKWgWJhc2tldAriloFlaWdlbnZhbHVlcwriloFtw6lkZWMK4paBT2xpbXAK4paB0YbQtdGA0LrQvtCyCmFsaW4KY29uc3VtCuKWgWxhc3NlbgriloHQsNC90YLQuAriloFTZXEKIjsNCnJhcmUK4paBJHxcCuKWgW5pY2sKZGZsYXJlClZlYwpiaW5kdW5nCuKWgWJnCmNoYW5nZXMKRGF5cwriloFNb3VzZQriloF3YWl0ZWQK4paBVG9tYXRvZXMK4paBZmFzCnZlcnRlCuKWgXN1Y2Nlc3Npb24K0YHQvtGACuKWgXNvbHMK4paBUmVuZGVyCuKWgWxlYWRlcnNoaXAK4paBc2lnbmlmaWNhbmNlCuKWgWdhdWNoZQpjYW5vCuKWgVBpZQplbnNvb3J0CuKWgWNhbWJpbwriloHRg9C3CuKWgWVuZGVhdgpDb21wbGV0ZWQK4paB0JDRgNGF0LjQstC90LDRjwpqZArDs3JpY28K4paBY2h1cmNoZXMK4paBYW5pbWF0ZQpTRwpjb21wdXRlCuKWgXVuaWZvcm1seQpJTklUCmxsZXMKSHR0cFJlcXVlc3QK0JrQvgpEaWZmCuKWgXNhaAphaXJvCm1heWJlClVURQriloFEb3cKaHVtYW4K4paBYXVyYWl0CmRhcmsK4paBcmVwYWlyCuKWgW5lcgriloFEYWJlaQriloFCb3RhbgpPcmlnaW5hbAphesSDCuKWgU5BVAppbXBlcgriloFZb3V0aAp0aGVzCuKWgdC+0LrRgNGD0LPQsAriloFGbG8K4paBYnJlYWtmYXN0CnVybHMK4paBw7xiZXJuYWhtCsOhcmlvcwriloFPcmFuZ2UK4paBQWZmYWlycwpza2UK4paBbm90aWZ5Cmltb2luZQriloFBcmVuYQriloFsaWJlcmFsCuKWgW9iZWMKaWZhCmd1ZXoKaW9ubwrQv9C10YDQsNGC0L7RgAriloFyZXRhaW5lZApmYWlsZWQKYmluZQrRgtC90YvRhQriloFDR1JlY3QKY2FtZXJhCmlkZW5vdGUKS0IK4paBbGlnaHRzCuKWgVBpY3R1cmVzCuKWgVNxdWFkcm9uCuKWgVZvbGsK4paBYnVyZwosXQpHaQrDqnF1ZQptYWtlVGV4dAriloFldmVyeWJvZHkK4paBSHlwZXIK4paBRGV1eAriloFnbG9yeQpwcmVzZW50YXRpb24Kb25pY2EK4paBZnLDqHJlCmFnZXQK4paBaGludHMK4paBdHVubmVsCuKWgUVqCsOhbGlzCuKWgVZpdgrRgdGC0LLQtdC90L3Ri9GFCuKWgWNhcHMKUEFSVApvY2kK4paBcHJpY2VzCmN1cnJlbmN5CuKWgWFjaHRlcgpyb21hZ25ldApnZW5kZXIK4paBc3Vpcwp2ZXJzaW9ucwriloFUcmFpbmluZwppbnNpZGUKZWdlCuKWgXRvdGFsZQriloFEYWFyCuKWgWdydWRuaWEK4paBSWVyCuKWgW9jY2FzaW9ucwriloFrZGUK4paBdGVuc29yZmxvdwriloHDs3IKTWV0aG9kcwriloFsb29waW5nCuKWgWRpcmVjdGV1cgprxJkK4paBaXNvbW9ycGhpc20K4paBSm/Do28K4paBYWxpZ25lZArQvtC90L7Qsgp1cmdlcgriloFub3ZhCm1vcnJvdwphbHRlcm4KSEQK4paBbWFycXUKYXRpdmFzCmdncmVnCuKWgWFuY2llbgpuaXQK4paBc2VjdXJlZAptaWVyCuKWgU9sZQriloHQuNC90YLQtQriloFtaW51cwriloFjbGVhcmVyCuKWgW5lbGxvCuKWgWluZm9ybcOhY2nDs2sK4paBcHJvcHJlCnsuCmlsb2cK4paBUXVpY2sK4paBYWNjdXMKZW1wbG95ZWUK4paB0LfRgwrRhtGM0LrQuNC5CtGE0ZbRhtGW0LkK4paB0L/Rg9Cx0LvQuAriloFiZW50CuKWgdC/0L7Qt9Cy0L4K4paB0J/QvtGACsOhesOtCsOhbmljbwplbXB0eXNldAriloFzdXJ0b3V0CnJlbm8KdW55YQriloHRg9C10LcK4paBTWlsbGlvbmVuCuKWgWxpc3RvcGFkYQriloFNYWluZQriloFncnVwb3MK4paBU3RvcmFnZQriloFhcHBsZQriloFMw7YKb3VzZWQK0LTRgNC+CnNjaQriloFoaWJlcm5hdGUKZG9nCuKWgdCy0L7RgdGC0L4K4paBaW50ZW5zaXR5CmxlZ2VuZAriloFXaWxsZQriloFzemVyaW50Cmdlc2VsbHNjaGFmdAriloFMaXZpbmcKYWxsbwriloFTcGxpdApkcnUKbmVlZAriloHQlNC20L7QvQriloFTd2lzcwriloFzcHJhdwriloFiZWhvCuKWgWZvdG9ncmFmCuKWgXJlbmNvbnRyZQriloFraXMK4paBc2lnbmluZwpha3VsdAriloFpbmRleGluZwphcG9yCuKWgWNvbmNlcHRpb24KYWdncmVnCuKWgdCh0LDQstC10LcK4paBYWZmYWlyCsSbbsOtCkF1Z3VzdAriloHRgdC10LrRgNC1CuKWgW1pZXN6a2HFhApVSUltYWdlCuKWgWJpc2hvcAriloFzZXJ2YW50cwriloF0cmFpbApkaWdpdAriloFqb2lucwriloFOZWFyCsO2ZmZlbnRsaWNoCj57CuKWgXNrxYJhZApnZWbDvGhydAriloFIb2x6CuKWgU1pbGl0w6RyCmFjaGkKVXBwZXIKcGluZQp1dHp0CuKWgW51b3ZhCmlicmF0aW9uCuKWgUJpZW4K4paB0L/QtdGA0LLRi9C5CuKWgUNyZWF0aW5nCk9uY2UK4paBZWlubWFsCuKWgWdlb21ldHJpYwpzdHZvCuKWgWtXCuKWgWRlY29tcG9zaXRpb24K4paBY29tZWR5CuKWgWFjdGl2YXRpb24K4paBYW5ncnkKaWxsZXVycwriloFpbnN0YW50bHkK4paBc3VnZ2VzdGluZwriloFDbGF5CmNvdAriloFHw6luCigkKAp1bndyYXAK4paBbGlmdGVkCuKWgUtpdAriloFsaW5lYQrQvtC6CmhhcnQKLT5fCuKWgW51aXQK4paBSXNzdWUK0LvQuNC4CuKWgXLDtm0KVGFza3MK4paBU3IK4paBc2Vpcwphc2lhCn19JC4KOnsKY29udHJvbHMK4paBU3RpbQriloFSZWNodApvY2lhY2nDs24K4paBTmF0YWwK4paBUGhpbGlwcGluZXMKdWxlbgpGaXhlZAriloFzd2l0Y2hlZApaaXAKb3NwZWwK4paB0L3QsNGH0LDQu9C1CuKWgUJsYW4KdXJzdAriloFhdXRvdXIKQ2EK4paBbGF0aXR1ZGUK4paBRnJlaQriloFNdXPDqWUK4paBS3VyegriloFyZWdpw6NvCnN3YXAK4paBaGF0ZQriloFtb2RpZmljYXRpb25zCuKWgdCa0L7QvAriloFBbnRvaW5lCnVnYQpSRUNUCsOpdGVyCkdST1VQCuKWgXNhY3JpZmljCuKWgVdoZQriloFTdGV2ZW5zCm9sb2dpc2NoZQpTdW1tYXJ5Cm9icwpobmVuCjwlPQpkaWVuc3QKcmVtYXJrCuKWgXZlcsO2ZmZlbnRsaWNodArQtdC7CuKWgU1vY2sK4paB0JvRjNCyCuKWgXRyw6pzCmdiCuKWgWNlbGVicmF0ZWQK4paBRWIK4paBY29zdGEK4paBR2VvZ3JhcGhpYwriloFhdHRhY2htZW50Cm1hbm5zY2hhZnQK4paBZGVwZW5kZW5jZQrvv73vv70K4paBYXR0aXR1ZGUKZXRhbAp2aWMKYmF1dAriloHQtNC+0LIK4paBaW50ZXJ2ZW4K4paBR8O8CsOzbmljYQriloFQb24K4paBZGlzcG9uaWJsZQriloFGZWIK4paBd29yc2hpcAriloFTcGVjaWZpY2FsbHkKSHkKaWp1CuKWgWNiCuKWgXNwYWMKbGV2ZWxhbmQK4paBbG9jYWxpZGFkCuKWgXByZWNlZGluZwriloFIZXNzZW4KeHAK4paBV2VpbgriloFSb23DogriloFnaW9ybm8K4paB0LrQstGW0YLQvdGPCmxsYcOnb3MK4paBQWNhZGVtaWEK4paBa8O8bAriloHDhXJzCuKWgdC90LDRmAp1Y2xpZGUKSW50ZXJuZXQKb3J0b24K4paBY29ybgrRj9C80LgK4paBIioK4paBRmVsaXgKYXBhdAriloHRgdCy0L7QuApNSVQKbWFkZQriloFsb2NvbW90CtGF0L7QtNCwCkZQCuKWgXBtCi4qOwriloFIYW1tCmB9CkxheW91dEluZmxhdGVyCj09IgriloFFdXIK4paBZG9ncwrQttC10L3QuNC4CuKWgWF6b24K4paBZW11bGF0b3IK4paBcmljb24KYmVlbGQK4paB0L3RgwriloFhcHByb3hpbWF0ZQpMTQriloFCb25kCuKWgWVuaArEmWR6CuKWgXNvbGl0ClJlbGF0aXZlTGF5b3V0CmV0ZW9yCmFtZW50b3MK4paBaW5kaXJlY3QKaWLFkWwK4paBZ3JvcwriloFPcmlnaW5hbHMKY29tbWFuZHMKRXhwb3J0CuKWgUF2ZWMK4paBc29sZW1uCuKWgWNvcnJlY3Rpb24K4paB0L/RgNC+0LLQvtC00LgK4paBTW9zawriloHQv9C+0LTQvgriloFnZWJpZWQK4paBbmFzdMSZcAriloFEcml2ZXIK4paBT29rCuKWgVZlYwriloFsdW5nbwpmaWNvcwriloFzdm9sCuKWgWtpZApuamEK4paBSHIK4paB0L/QvtC00LTQtdGACuKWgXZpc2liaWxpdHkK4paBTcOpZAriloFjcHUKZGlzY3Vzc2lvbgpBc3NldAriloFkZWZlbnNlCuKWgUFueW9uZQriloFKdXN0aW4KaXN6dAriloFDb2xsaW5zCuKWgVZhbGVudAriloFQYWxlCuKWgWZ1ZWwK4paBbm9zZQpyw61ndWV6CuKWgVNjaGxlcwriloFNYWxheXMK4paBY29tbXV0CmRybwp1aW5nCuKWgVJpY28K4paBRW1tYQpvcnAK4paBS2lyawriloFRdWFuZG8K4paBTmV1ZQriloFkZW1hbmRlCuKWgUNvdmVyCuKWgXJlc2N1ZQriloFnZXfDpGhsdAriloFDYWxlbmRhcgriloFNYWRvbm5hCldQCm9zaGkK4paBTWF2ZW4K4paBYmVsbGUK4paBd3gK4paBc3VnYXIK4paBQmV0cmllYgriloFlcXVpbGlicml1bQpFQVIK4paBdGV4dHMK0YHQu9C+0LIK4paBY3plcndjYQriloFEw7xzc2VsZAriloFFTFNFCuKWgWFtZXJ5CuKWgWFuaQriloFvYmV5CuKWgU5lbGwK4paBaW5uZQriloHRgtGA0L4KRkQKY2NvCuKWgVpvYgphbGV0dGUK4paBbcOhanVzCmVjdGVkCuKWgVR1cmtleQriloFXaGV0aGVyCnFpCuKWgdGI0YLQvgriloFoZWFkcXVhcnRlcnMKZW5kaQphcnVzCm9wdXMK4paB0LfQvtC70L4K4paBZGVzdHJ1CuKWgUxvawriloFzYXRpc2ZhY3Rpb24KKCkNCuKWgdCi0LXRgApKb3NlCuKWgWNvbnF1ZXIK4paBRWZmZWN0CkxheW91dFBhcmFtcwppZXoK4paBZXh0ZXJucwriloFnZWdlbsO8YmVyCuKWgUVTUApvbHRhCnByb2Nlc3NvcgriloFLdWx0CuKWgUF0bGFudGEK4paBdGllcgpPcGVyYXRvcgriloHQtNC40LAK4paB0L/QuNGB0YwK4paBZ3Jvw58K4paBaGVhcnRzCuKWgW1pbGxpbWV0ZXIKYWx0aG91Z2gKYWxsZXMK4paBTWFnaWMKdHJhaW5pbmcKb2xpbmUK4paB0L7RgNCz0LDQvdGWCj5cPF4K0YbRltCw0LvRjApleHBvcnRzCldvcmtib29rCuKWgdCy0LXRgNC10YHQvdGPCuKWgXRlbGVzCuKWgWVjb25vbXkK4paBdHJhcAriloFyZWZ1c2UK4paBc3RyYW5nZXIK4paBaW5zdGluY3QK0L/QvtC00LAKb2xhbgriloFuaW5nCmluZmxhdGUKaXRhdGVhCmFja3MK4paBSm95CkZMQUcKYWlsYW5kCuKWgXNvcnRpCuKWgdCy0L/QtdGACuKWgXDDqW4KTm90aGluZwriloFzesOhegriloHDgW5nCuKWgUFVVApBY3Rpb25zCkV2ZXJ5CuKWgdGH0LXRgNCy0L3RjwriloHQsNCy0YLQvtC80L4K4paBcm91dGluZQriloFlc3RydWN0CuKWgUdhbmcK4paBaG9sZXMKdGhlc2lzCuKWgWNvbmNsCuKWgXDDqQpyaWVycwrRgNC+0LLQvtC5CmFkaWMKU3BlZWQK4paBY29tbWFuZGVkCuKWgU5hemlvbmFsZQpNYW5hZ2VkCuKWgURFQ0xBUkUK4paBc2VkYW4KU3RyaW5ncwriloFzYWNyZWQKdGVyc3VjaAriloFhYml0YW50aQpicml0CuKWgU5DQUEK4paB0KHQnwriloFhZ2VkCuKWgUNoaWVzYQriloFyZXZpc2lvbgpvcHJvCuKWgW92ZXJ3cml0ZQplbWJyb3MK4paBc29ydGllCuKWgW90dGVuCnhpdgriloFkZWxpCuKWgUFzcAriloFiYWxscwprYWYK4paBYnJhdmUK4paB0LLRgdC10LPQvgplZ24KanBlZwriloFPc3RlbgpDb25zdGFudHMK4paBSW5mYW50cnkK4paBTmV2CuKWgdGP0LrQuNGFCuKWgdC80YPQvdC40YbQuNC/0LAKY2lqYQriloFwb2VtCuKWgW5lZ3JvCtGF0LDRgAriloFBc2sK4paBYXZvCuKWgU1leWVyCuKWgVdlc3RlbgriloFva28KYWdpbgriloFTw7xkZW4KZW50cmllcwriloFSZXB1YmxpawpDb2xsZWN0aW9uVmlldwotLS0tLS0tCuKWgWZpcmVmb3gK4paBYWxjdW5lCuKWgdGE0L7RgtC+CuKWgdC+0YLRgNC40LzQsAp+fn5+fn5+fgriloHQoNCw0LcK4paBQ29tcGxleAriloFwaWEK4paBcHVibGljYWRhCndlaQpjZWR1cmUKb2NjdXBhdGlvbgriloFtZWRpY2luZQriloFkcm92ZQpQcm9ibGVtCuKWgWJlZ2lubmVyCuKWgXRob3JvdWdobHkKdXJpYQphdmFudAp1Y2hhCuKWgWxldmVyCuKWgXRlYXRybwpBVkEKc3F1CnRyYXQKaXZhdGFsCuKWgWRpcnR5CuKWgXNlY29uZGUK4paBZ3Jhdml0CuKWgXByb3Bvc2l0aW9uCmhiYXIKb21pbmkK4paB4oCdCuKWgUNhbWlsCuKWgXF1ZWVuCm1vZGlmaWVyCkphbgriloFseXIKQ29tYm9Cb3gKaW9uaWMK4paBaG9seQriloFTZWJhc3RpYW4KfF97CuKWgXtACuKWgdC80L7QttC90L4K4paBQ3JlYXRpdmUK4paBaW50ZXJlc3MK4paBQ1QKacOnw7VlcwriloFjaGFudAriloF3c3DDs8WCCuKWgdCc0LXQutGB0LjQutCwCuKWgXJhbmtlZAriloFwYcW6ZHppZXJuaWthCuKWgWJydXQK4paBZmFydGhlcgriloFWZXJiCuKWgVNldmVuCmxibAriloFtZW50aW9ucwriloFGaWdodAppZmVuCuKWgWJvZwriloFyZWdyZXMK4paBc2NvcmluZwppY2FuZQriloFFbGxpCuKWgXBpZXJ3Cm1lYXN1cmUKxYRza2llagojewriloHQtNC10YHRjwriloF2YXJtYXN0ZQriloFVbml4CklaCml0acOpClByaW1hcnkK4paBU3ByaW5nZXIKw7xuZwriloFhbnYK4paBdmVyc2lvbmUK4paBc2hvdWxkZXJzCuKWgdCx0YDQuNCz0LAK4paBamF2Cmx0YWwK4paBa2FsbGFzdGUK4paBTWl0Y2hlbGwK4paBd2lyZWxlc3MK4paBw4FsCnJlc3BvbnMKY291bGQK4paBcmVsYXgKTG9uZArFhGN6CtGB0YLQstC+0LLQsNC7CuKWgXBvbHNraQplbsOnCnphcgriloFkdHlwZQpvd25lZAp1bmtub3duCuKWgW11dGFibGUK4paBc2llbXByZQriloFNb250cmVhbAriloFsb2NhdGUK4paBdHJhY2VzCuKWgWluc2dlc2FtdAriloFOaWwK4paB0L/RgNC+0LTQsAriloFXYXJuZXIK4paBTmF1CnRyaWFuZ2xlCuKWgWNvbmNlbnRyYXRpb24K4paBZ2VudGxlbWVuCsOkY2h0CmZpbHRlcnMKaW5jaXBhbApWQUxJRAriloHQtNC10L/Rg9GC0LAKYWTDswriloFrb25zdApnc8OlCmFnYXMK4paBbWVpbGxldXIK4paB0LTQsNC90L3Ri9C8CtGU0LTQvdCwCmVuY29kZWQKPCcK4paBc2hlZXRzCmN1YWRvcgriloHQstC40LrQvtGA0LjRgdGC0L7QstGDCuKWgURlcHV0CuKWgW1hbmnDqHJlCsSFZwpjc29sCikkLQpVSVZpZXcK4paBbWlsbG9uZXMK4paBRWhyZW4KU2lsCuKWgWF0YWMK4paBQ29sZAoiXAriloFhcHByb2FjaGVkCuKWgcOFcnNtZWQKV00K4paBRGVwb3J0Cm1pcwphbmRib3gKb2JzZXJ2CnNldHRpbmcKaGF0w7MK4paBc3RyYXQK4paBc3ByZQriloFwZXJzb25uZQriloFkaXJpZ2UKcHVsbApkYXRpbmcK4paBRmFjdAriloFtYW5pcHVsYXRlCuKWgU1BQwriloFkZWoKdWx0aW1vCkZYCkxpZmUK4paBY3JhY2sK4paBbcOtCuKWgdC/0L7QstC1CuKWgXdvcmUKdW5pdmVyc2l0w6kK4paBZm9ybXVsYXMK4paBRWxpc2FiZXRoCnBsb3RzCm1pbGUK4paBbWVub3IK0YLQuNC7CmtleXdvcmQK4paBQmFsdGltb3JlCmhyZXIK4paBQ2xlbWVudAp2aW0KcmFzcwpUYWtlCuKWgWPDrW3FsQriloFDb252ZW50aW9uCmF0Z2UKc2VlZAriloFEw60K4paBU3BpZGVyCmFob28K4paB0LjQvNC10LXRggrDvGhydAriloHQv9C+0L/QuNGB0LAK4paBQ290CuKWgW5vYmxlcwpSRVNTCuKWgWNoZW1pbgriloFnxYLDs3duCkdHCuKWgUdlcm1hbmlhCuKWgUFsZXhhbmRyZQpoZW5zCnN3aWZ0Cm9vcApTdWJ2aWV3CuKWgXJlcXVpcmluZwrEmWR6eQriloFmaWN0CuKWgdCa0L7QvdGB0YLQsNC9CuKWgWTDqXB1dAriloFzdXJwcmlzaW5nCuKWgWRlaXgK4paBdW50ZXJzY2hpZWQKaW5zb24K4paBQ2hhcmFjdGVyCuKWgWdlc3Rpb24KY2h1cwpjb21lcwriloFuZXVyCuKWgXlldXgKb2xsYXIK4paBcGFyYWQK4paBbWFnZ2lvcmUKVFJBTgriloF2b3RyZQriloFkZXNjZW50CuKWgUljb24K4paBSnVkZ2UK4paBb2NjdXBhdGlvbgplcGluZwriloF0b25ndWUK4paBRW5sbGHDp29zCnJ1ZgriloFwcm90ZWluCuKWgXZpc2l0b3JzCmF4eQplc3RlbgpibGljYQpodwriloFzcGlyaXRzCuKWgXJlZHVjZXMK4paB0LzQtdC9CuKWgUxhbWIK4paBTWluZQriloF2ZXJpZmllZAriloFCYWJ5CuKWgXByaXplCtCy0YrRgAriloFyYXRpbmdzCuKWgWZvcmUKYXNoYQp1cnJlbmNlCuKWgWludMOpcgriloFPbMOtbXAKY3JhCuKWgWNvbXB1dGF0aW9uYWwKaXJjaGUKLjrigIoK4paBaWxsdXN0cmF0ZWQK4paBU2hhcmUK4paBaG91c2Vob2xkcwriloFjb252b2x1dGlvbgpvZW1kCuKWgXpkb2J5CmNjYwriloFxdWFudGl0aWVzCkNoZQpTaG91bGQK4paBZ2VuaXVzCmFkagrRhdCy0LAK0J/QtdGC0LXRgApFTUEK4paBUmlnaHRzCuKWgUVsaQpWQVIK0YjQu9C+CuKWgdC30LHRltGACmlmdHVuZwriloFjb250cmlidXRlZAp6ZWYK4paBQ0hBUgriloFTaWIK4paBTWFudAriloHRgdCy0Y/Qt9C4CuKWgWphdmFmeAriloFjZXBlbmRhbnQK4paBaW50dQriloHRgtCy0L7RgAriloHDkwpndWVyCnJhZG8K4paBUmV2b2wK4paBZsOpbWluCuKWgU9ybGVhbnMK4paBcG9qCuKWgXByZXoKVGV4Cm91d2QKPygK4paBTElNCmlzdGlxdWUKZXNhcgriloFoZXVyZXMKaWNraQriloFkYm8Kc2tpaApjb25maXJtCuKWgXZpbMOhZwriloFjaXV0YXQK4paBRFIK4paBSGF3YWkKY2hlZAriloFzcGhlcgriloFBcnRpa2VsCuKWgU11bHRpcGxlCmNpdQriloHQvNGLCuKWgWxpcGNhCl0oLwpTdHJhdGVneQriloFBbGFiYW1hClNESwpVVEMKX18uCkFyZ3VtZW50cwriloFzZXRDb250ZW50VmlldwrDrmxlCkJ5VmFsCuKWgUpWTQrRjtGJ0LXQs9C+CuKWgUxlb25hcmQK4paBanVzdGlmeQrRhtC10LwK4paBbmFiCkNDRVNTCuKWgWhvcGVzCikmCnNlcm8K4paB0LfQsNC5CtGB0LvRltC0CuKWgVLDqWcK4paBU2FuZwriloFmdW5nCmJhYXIK4paBY29mZmVlCmFzc2VtYmx5CuKWgdCS0ZbQvQrRjdC5CuKWgWNvbXByZW5kCmZpbGxlZArRgNC0Cm9kaWEK4paBZ2VucwpmbHVzcwpEcmF3YWJsZQriloFzdXJ2ZQpTZXR1cAriloFuYWxlxbwK4paBY29uanVudG8K4paB0JXQs9C+CuKWgW9sZGFsCuKWgXZlcmJvc2UK4paBRWxlY3RyaWMK4paBSGFycmlzb24KZW5nZW4KcGFyYWdyYXBoCuKWgW5vdXZlbGxlcwriloHQstGA0LXQvNC1CuKWgW1lbW9yCuKWgW1heW9yw61hCtGB0LDQtAriloFiYXRhaWxsZQriloF0aGVybWFsCuKWgdCl0YDQvtC90L7Qu9C+0LPQuAriloFCZXR0ZXIKYnllCuKWgdGC0LXQsNGC0YDQsApyb2UK4paBc2VnbGUKcm90dAriloFvcGluaW9ucwopfSkKw7xobGUK4paBR8O8bgriloHQqQpiw7NsCuKWgUxhcnJ5CuKWgXNvbGljCuKWgXp3YXIK4paBQ2Fyb2xpbmUK4paBUmVpY2hzCkV4dGVuc2lvbnMKbWlncgo6QAriloFlbnVtZXJhdGUK4paBZWlnZW5lbgriloFleHBsb3JlCsOpbXUK4paBZ2F0CuKWgWltcGVyaWFsCuKWgVVzdWFsbHkK4paBdHVkCuKWgdGD0LrRgNCwCmhpbQriloFjb3JuZXJzCuKWgVNFUgriloFpbnRlcnByZXRlcgriloFJY2UK4paBYW1vdW50cwriloFQYWxhCuKWgXRpbmhhCnZvbGUK4paBZ2xlCnVjY2kK4paBc2llaGUKSmFjawriloF3b2xsCuKWgWVsZGVyCuKWgdC60L7RgNCw0LEK4paBZW5nYWcK4paBTGF1cmVudAriloFhY2hpZXYKaXN0aWsKYXJjdArRgtC90L7Qs9C+CuKWgWdpcgriloFTaW5naAptYXRob3AKVVNBCuKWgVByb2pla3QK4paBZGViZQpyaWNodHVuZwriloFUc2NoCnVtaW5hdGUK4paBc3rDswpseXBoCtC30LjQtNC10L3RggriloFsaW1pdGF0aW9ucwrRjtGJ0LXQuQriloFiaWxhClB1c2gK4paBb2ZmZXJpbmcKaWVubmVzCkZyaQriloFwb3N0Z3Jlc3FsCuKWgVRvbW15CuKWgXBhcnRpY29sYXJlCuKWgXN0b2xldMOtCuKWgWFycmliCuKWgUV2YQpzY2hvb2wK4paBdmVuZG9yCuKWgURhbGxhcwriloFwcm9sb25nCkNSRUFURQriloFzdWl2YW50ZQpTVEFUVVMKbMOgCmt2CuKWgWjDpHVmaWcK4paBQWdyaWN1bHQK4paBaHVpdAriloFpbm9sdHJlCuKWgUxsb3lkCuKWgdGE0YDQsNC90YbRg9C3CuKWgdCy0YvQv9C+0LsK4paBZmFpdGhmdWwK4paB0JLQsNGACuKWgXZlcmwK4paBanVlZ28K4paB0KDQtdC30YPQu9GC0LDRgtC4CiwuLi4sCuKWgWltcGxpY2l0bHkKaXJrcwpDYWxjdWwK4paBbWVzZXMKb21lZAriloFwYWsKaGVyaXQK4paBb3B0aWNhbAriloHQhtGB0YLQvtGA0ZbRjwp2ZWlzCuKWgWNhcGl0YWxlCnBsYWNlaG9sZGVyCmludHJhZwriloFBdGxhcwopXTsKaWNvbnMK4paBQmVudAriloFXaWRnZXQK4paBdm9sdW50CmF2bwrDqWdyCmxpZ2UK4paBTkFNRQriloFhYnN0cmEK4paBZsOtcwriloFCcm93c2VyCuKWgWJ1c2gKaGFsbAriloFjbG91ZHMK4paBU1VCCuKWgXRhbmRpcwriloFDb21tb253ZWFsdGgK0YLQsNGPCuKWgWV4aGF1c3QKX19fX19fX19fX19fX19fXwriloFTdGF0aXN0aWNzCuKWgVJlbGlnaW9uCuKWgU11aGFtCnVhbHMKZ290bwpEaWdpdGFsCkZhbWlseQriloFCdW4KbGV0aW4KTWFuYWdlbWVudAriloFjYXBhYmlsaXRpZXMKYW5udGVuCuKWgdGB0LXQsdC1CuKWgXN0YXlzCmt0ZXIK4paBZG9zdAriloHQotGA0LUK0LvQvtCy0LjRhwriloFkeWluZwpzZWN0aW9ucwrDoW5vcwriloFhcHBhcnRlbgriloF6b2FscwriloFkcmVzc2VkCuKWgWNvbXByZXNzCsWEc2thCuKWgXNpZXJwbmlhCuKWgdGC0LjRgtGDCmRpY3Rpb25hcnkK4paBcmFiYgriloF2w6lyaXQK0JLQvgriloFzaW5nbGV0b24K4paBdml0YWwKUmVmcmVzaArQvNC10LvRjAriloFaaAriloFBZmdoYW4KaW5rZWwKYWFhYQriloFwYXJ0aWNpcGFudHMKYXJpbgriloFNb2xkCuKWgXByaW1lcm9zCuKWgdGA0LDQvQriloHQkNC80LXRgNC4CuKWgXJlc3RhdXJhbnQKw6l2ZWwK4paBU0wK4paBUmV5CmNoYXMK4paBZWxlY3Ryb25zCuKWgVBpdHRzCuKWgUp1bGVzCtC80LDQuQplbmFudAotfQrQu9Cw0LQK4paB0JzQvtGB0LrQstCwCmdvbQriloFGZXJuw6FuZGV6CmZ1bmQKaW50ZXJubwriloFNYXJpCuKWgXJpdXMK4paBUHJvemVudArRgdGC0YDRlgriloHQstC90YPRggphbnRlcmllCuKWgdC/0YDQuNGBCuKWgdC+0LHRiwriloFNYXJpbmEK4paBb2NjdXJyZW5jZQpyaWt0CuKWgdGE0LjQt9C4CuKWgXNjaHdlcgriloHQk9GA0LUKUmVzZXQK4paBbXVjaG8KYW5kcgriloFXaWVzCuKWgUtlaXRoCuKWgUp1bGlhbgriloFjb2xlCmNpZW5kbwriloFDb250ZW1wb3IKZXRyeQplbGlhbgrQs9C40LgK4paB0LPQvtC70L4K4paBZMOpbAriloFkZWNlbnQK0KDQodCgCuKWgXN6ZXB0ZW1iZXIK0LzQtdGB0YIKY2FzdGxlCuKWgdC00LXRgNC20LDQsgp9IikK4paBQVNDSUkK4paBR2xlbgppdHplcmxhbmQKVG9nZ2xlCuKWgXRyYWRpY2lvbmFsCuKWgVBsYXQKdmVlCmFiZ2VydWZlbgoofApDTEkKfX0kLAriloFCb3dsCuKWgU1hbGUK4paBQnJlcwriloHQv9GB0LgK4paBQ2hhbGxlbmdlCnrDswriloFwcm9qZWt0CuKWgW5lZ290aQphYm92ZQriloHQv9C10YDQuNC+CuKWgWxvbmdlc3QKYXV0aGVudGljCuKWgXRyYWR1CuKWgW11amVyZXMK4paBQW5kcmUK4paBaGFkbgriloFTY2h1bGUKb2RlbApibGVkCuKWgVRyYWRlCuKWgW1vYmlsCuKWgWFsZ3VuYXMK4paBTGFrCuKWgUNvbm5lY3RpY3V0CuKWgWFsY28K4paBU2VsYnN0CmnFggriloFhbGIKb3V2ZXJuZXVyCuKWgXNyCuKWgXZiYQpsb3BlZAriloFQYXJ0ZWkKdWF0ZQriloFBdXRoZW50aWNhdGlvbgpiZWkKfX0uCuKWgWtvbm50ZW4K4paB0LTQvtC/0L4K4paBaHlkCk9mZmljZQpkb25uw6llcwriloFDbGV2ZWxhbmQKcml0YQrDrW9zCuKWgdCy0YvRiNC1CuKWgVJvYmVydHMK4paBw6lsZWN0aW9ucwriloEnJykK4paBcHVibGlzaGluZwriloFiYXB0Cjw+KCk7Cm1pc3NpbmcK0YDQvtCy0LDQvdC+CuKWgWhvdXNpbmcK4paBaW5mZXJlbmNlCuKWgVJlbmFpc3NhbmNlCuKWgXLDqGcK4paBU3RlcGgKQ0VTCkVSRQrQutC10YIKT1UK4paBZ3JvdXBpbmcKdmVya2VocgpqaWgKYWdsaQriloFtaWxrCmxhaXQKU3RhZ2UK4paBYnlseQriloF3b29kZW4Ka2VsZXkKZXRyYQriloFQZWcK4paBZG9ubsOpCmFkYWwKc2VxdWVudGx5CuKWgWluc2Jlc29uZGVyZQpFTEQK4paBTWFtCuKWgXZvbHRlCuKWgXByb3NwZWN0CtC90L7QstC1CuKWgWRlbm90ZWQK4paBb3ZlcmxheQpQZXJtaXNzaW9uCmVlbgriloFFTQriloF1egpNYwpvbGl0CuKWgXNlcnZpCuKWgUhlaWRlbAriloFXaWVuZXIK4paBaWxsZWdhbAriloFwcmVkaWN0aW9ucwriloFnb29nCmhvbgriloFDaW5lbWEK4paB0YDQtdCy0L7Qu9GOCuKWgVJ1bGUKd29kCuKWgXJhZGlhdGlvbgpvxYIK0L7QstC+0ZcK4paBUGVyZm9ybQriloFwcmlzb25lcgriloFhbWV0CuKWgWZpZ3VyYQriloFDb21tYW5kZXIK4paB0L7RhNC40YbQuNCw0LvRjAriloF0cm92CuKWgWFjdGVkCuKWgXdvcmtmbG93CuKWgdCg0LXRgdC/0YPQsdC70LjQutC4CuKWgWd1aWRhbmNlCuKWgdC80LXQvdC1Ck5hdGlvbmFsCuKWgUtlbAp3ZWJwYWNrCtC/0YDQvtGB0YLRgNCwCuKWgWxsYW1hZG8KYWxvZwp0ZXJyYQppeGVuCmxlZ3JhcGgKw6Rpc2NoZW4K4paBdGVhY2hlcnMKdWRlbgriloFvZ3PDpQpwb3NzaWJsZQriloFTb3VsCuKWgUdlb2dyYXBoeQriloHQt9Cw0LTQsApoaXQK4paBYW5nZXIK4paBcmVtcG9ydGUKUG9kCtGH0LrQtQriloFhcmlhCuKWgUFzdHJvbm9tCmNoYXB0ZXIK4paBZm9yawriloFDdWFuZG8KbWVuc2UK4paBQ2hyaXN0aWFucwpnYwriloEjKApPcmdhbgriloFzdGVhZHkKcHNlCtC20LjRgtGMCmlnbmVzCmF0ZXJyYQptb3ZpZQpwb3N0YQpyYXN0ZQriloFSZXNzb3VyY2UK4paBUGHDrXMK4paBKCk7CuKWgXBlbmFsdHkK0YLRggriloF0cmFzZmVyCmNlbnR1cnkK4paBY2xlYW5lcgpzZWxlbml1bQpvcnRoZWFzdAp4aWMK0LvRltGXCuKWgWluZ2xlc2UK4paBVGFuZwriloFnb2RzCmZyZW50CmNpZW50ZQpzdGFydHMK4paBbXVzaWNhCnltbmFzaXVtCi0tLS0rCuKWgXRlcnJlc3QK4paBcmV0cmlldmVkCmlhcmUKdW5uaW5nCuKWgU1hcmN1cwriloFwcm9tb3RlCndhcm5pbmcK0YLRi9C5Cn0pJCwKVHJhbnNwb3J0CuKWgXJlc29uCuKWgUNsbwriloFlcm0K4paBZWxpbWluYXRlCmhlaW1lcgriloFzYXZlcwriloFwcmF5ZXIKQ2xhc3NlcwpFeHByZXNzCuKWgUFrYWRlbWllCkVsc2UKVHVybgriloFpa2tlCuKWgXJlaQriloFkaXJldHQK4paBUm9zdAriloFQYXBhCuKWgWpzZgrQu9C10L3QuNC10LwK4paBVHVsCuKWgVphawriloFuaWVtaWVjawpUdwphbW91cgpuZXN0ZWQKcHBldHMK0YjQvwpkaXQK0LfQtdC9Cnp5bWEKaHJ0ZQpDb25zdHJhaW50cwriloFvd25lcnNoaXAKQXJtCuKWgWNvbnN1bXB0aW9uCuKWgWZldAppdmFyaQpjaHJvbQpzZXRBdHRyaWJ1dGUK4paBY29tcG9zZQriloFiYWNraW5nCuKWgVBhegriloFzY3JpCuKWgU1lY2hhbgriloFOb3J3YXkK4paBSnVwCuKWgW3DqXIK4paBYWRtaW5pc3RyYXRvcgriloFjYWJlCml2YWxlbnQK4paBdGhyb25lCuKWgWR1ZXMK4paBaHVtb3IK4paBQWRyaQriloFhYm9ydArDsWFzCuKWgdCa0LjRl9CyCmrDrWPDrQriloF6d2VpdGUK4paBZG91YgplcnNoZWxsCtGI0L7QuQriloFGYW0Kw6VrCuKWgXR3ZWVkZQriloFSaWIK4paBZsO4cgpwY2nDs24KaW5uZWQKcnZtCuKWgUFwcGFyCuKWgURqCuKWgVNoYW5nCkRpc3RhbmNlCuKWgWRhd24K4paBTWF0dGgK4paBZXJyaWNodGV0CnBoYW50b20K4paBcmVsZWFzZXMKUmVjb2duaXplcgriloFLb3AK4paBUHVsCnXDqQpuYXRzCnJlbGF4CuKWgWZsZWQK4paBZXhwZXJpZW5jZXMK0YnQtdC1CtC80LXQvdGPCuKWgdC/0LXRgNGB0L7QvdCwCuKWgUlkZW50aXR5CnJldHMKa3VuZnQKbGFyZwpMaXN0SXRlbQp2ZApydW5uZXIKbGFudAppcGFydApiYXkKaWVpCuKWgWxlbmd0aHMK4paBY2F0dGxlCmpldHMK4paBc2VoZW4KSnVsCmZhdHQK4paBc3VycmVuZGVyCuKWgVRydW1wCtC00L3QvtCz0L4K4paBRm91cmllcgppZWJlbgpfIgriloFmcsO8aGVyCuKWgWdhcmFudAp1Y2xpZGVhbgrDpGd0CuKWgdC/0ZbQstC00LXQvQpQYWdlcwriloFyaXZlcnMK4paBZG9ubmVyCnN2bgriloHFggpvdsSbCuKWgUxlaXN0CmFyaWFsCm92w71jaAriloFmaWxsaW5nCuKWgW11c2ljYWxlCm1heGltCuKWgWRhc2hlZAriloHQndC+0LIKRHJhd2VyCuKWgU1lZGljaW5lCuKWgWRva3VtZW50Cm93ZWwKdmnEhwpoZWx5CuKWgWVsZXQKU2Vjb25kcwriloFHb256CnJvdQriloFmaW5hbGVzCnJuCmbDuAriloFpbmRleGVkCmNsYXNzTmFtZQriloFvYmVyCuKWgWR1YXMK4paBb3B0aW1pemVkCuKWgWtkeQp2ZXJzYXJ5CmVuZXJneQriloHRhtC10L3RgtGA0LAK4paBY3VycmVuY3kKennFvApMaWtlCuKWgdCT0LgKc29ubwriloFwYWxhYgriloFwdXNoaW5nCnVibGlrCuKWgUhhc3MKfVwsXAp1bmtlcgriloFGYWN0b3J5CuKWgVJlc291cmNlcwpkYXRlaQriloFUb29scwriloFzdGVoZW4Kc2ltZQriloHQpdGDCuKWgWhvY2gK4paBUm9kcsOtZ3Vlegp6ZWl0aWcK4paBVGVycnkK4paB0L7QsdGDClVzYWdlCnVyY2hhc2UKbMO2CuKWgUludHJvZHVjdGlvbgriloFwYXJ0aWNpcGF0aW9uCs6/z4IKb2dsaQphcHkK4paBaG9wZWZ1bGx5CnBvbmRlcgriloFZYW5nCuKWgXByb21pc2VzCuKWgdCy0LXRgNC90YMK4paB0L7RgdGC0YDQvtCyCl57KwriloFtb3N0cmEK4paBQ1VSTE9QVApISAriloFzdGRvdXQK4paBYnJpbGxpYW50CuKWgW1hbnVzY3JpcHQK4paBZGVjaXIK4paBQm9sb2cK4paB0LzQtdGB0YLQsAriloFpbnZpc2libGUK4paBQ2hhbAriloFhbmFseXplCnByaWxpcwphdHRlbmQKTXZjCnRoYW4KY2tvCuKWgVF1ZWJlYwriloFwbGFudGEK4paBdMOpbMOpdmlzCuKWgXVuaW5zdGFsbArDqG5jaWVzCuKWgWdtaW5pZQriloFQcmVmCuKWgWxlcXVlbApJbnZvY2F0aW9uCuKWgcONCuKWgXRyYW5zZm9ybWVkCk1BTgpnZWJhdXQK4paB0YHQvtGF0YDQsAriloHQstGC0L7RgNC+0LkK4paBTGl0aAp3ZW5kdW5nCuKWgVBvbGl0aWsK4paBU2VuYXRvcgriloFMTArQttC00LXQvdC40LUK0YjRgtC1CuKWgUPDqXMK4paBYmFuZGUK4paBaGlzdG9yaWFuCuKWgXBhc3N3b3JkcwptYWxsb2MK4paBc2VtaWYK4paBcsOlCnVuaWPDrQpBdmFpbGFibGUKT3B0aW9uYWwK4paBVHdlCuKWgWtyw7MK4paBc3Vic2V0cwriloFEQVQK4paBZG91YmxlcwrQvdC40LrQsNC80LgK4paB0LfQsgpnZWdlYmVuCuKWgdCf0L7Qv9C40YEK4paBasO6bGl1cwriloFtZXRlb3IKTW91bnQKaXZlbnQK4paBTmF0aGFuCuKWgVNjaHV0egplZ292CuKWgWTDtmQK4paBbWVhdAriloHQv9GD0L3QutGCCuKWgW1pbmRzCmVsaXZlcnkK4paBVExTCtGA0LXQvApja3PDpQriloFzdGF5ZWQK4paBQmluCuKWgVBpYQriloHQuNC80LXQvQriloFCb2JieQriloFwcm9kdWl0CmVtcGlvCuKWgXJlZHVjaW5nCuKWgVl1CuKWgUdlc2Now6RmdAriloFwZXJjaMOpCuKWgWNvcnMK4paBaWNvbnMKQXBwRGF0YQriloFIb2cK4paB0YDRltCyCuKWgVNhbnMK4paBc2nDqGdlCnN0ZWxsZW4KQnJ1c2gKT0ZGCuKWgXZpc2l0b3IK4paBYmF0aAriloFmZWUKYXRpc2YK4paBY3VydgriloFmb2xnZW5kZXIK4paBY29uc2NpZW5jZQriloFTZWF0dGxlCuKWgW1lZGlldmFsCmRpc3RyaWJ1dGlvbgriloFETQriloHQvNGPCuKWgVJVTgpha292CmNlaWwK4paBbGV0dGluZwriloFkb3YK4paB0L7QsdC4CmtpZWoK4paBZGlyZWt0CuKWgXRtCmNvbG9ycwriloFhbHRybwriloF0aWpkZW5zCl17JwriloFCb20K4paBa3Vuc3QK4paBc2hlbHRlcgriloFyYXYKcHJlZGljdAriloFjb21lbnrDswriloHFm3dpYXQK4paBRHVyYW50CuKWgXNjaGVtZXMK4paBbWVzaAriloFpbmRpY2F0b3IK4paBRW1lcgriloFndWlsdHkK0L3QtdGGCuKWgWNvbnNlcXVlbmNlcwpjbHVkZXMK4paBTG93ZXIK4paB0L/QvtC80LUK4paBcGFjZQrQtNCw0LPQvgriloFhbWJvcwpsYgriloFlZHVjYXRlZAp1cmFsZQphbmgKZXNzw6lnCuKWgWFzc29jaWF0aW9ucwp0b3duCuKWgXRyaWYKc2FtcGxlcwpib3MK4paBU3BlY3QK4paB0KbQtQphbHR1bmcK4paBTG9iCuKWgWN1cmlvc2l0eQriloFXZWl0ZXIKZXN0b25lCuKWgWRlbW9sCuKWgWFwb2xvZwriloFEeW5hbWljCklubmVyCmVzcGVyCmVjegp1ZWxsZW1lbnQK4paBSGFtaWx0b25pYW4KQXRsYXMK4paBYXJndWUKRm9yZWlnbgpjb2xsYXBzZQriloF0w6lybWluCuKWgWVsZWN0cm9uaWMK4paBTlIK4paBY29ycgp0ZW1wcwpJbmRleFBhdGgK0Y/QtwriloF0YWzDoWwKdG9kYXkKd2F2ZQriloFzaWIK4paB0YHQv9C4CuKWgWNvbnZleQriloFHw6lvZ3JhcGhpZQriloHQndGM0Y4K4paBSGliZXJuYXRlCuKWgXRpbgpkaWMKcHBpbmdzCnN3ZWlzZQriloFyb2xsaW5nCuKWgXNlbGVjdHMKKVwpCuKWgXBvZXRhCuKWgdGB0YLQtdC/0LXQvdC4CuKWgUFicgriloFow7ZjaAriloFzdGVybgriloFmasOkcgriloFpbnN0YWxsZXIKZGVjbAriloFtaXNlcgpncm91cGJ5CnN1YnN0cgriloFwaGVub21lbgriloFXaW5nCuKWgWZpbGxzCuKWgcO6bmljbwpSdW5uaW5nCkNvbWUKaXJhYmxlCnNpbWVxCuKWgXJlbXAKa2VsZQpsaWVycwriloFrd2lldG5pYQriloFpbnRlcnJ1cHRlZAriloFKZXQKPVx7CsOtZG8K4paBVGFpd2FuCuKWgdCy0L7Qt9GA0LAK4paBYWx0ZXJuYXRpdmVzCuKWgVRpcgriloFSZXNlcnZlCuKWgdCa0YPRgAriloFOb2JlbAriloHRgNCw0LHQvtGC0LDQuwriloFheGVzCuKWgUNlcGVuZGFudAprw6EK4paBZXJuZXV0CuKWgURlbW8KY29tbXVuaWMKY29uc3RydWN0b3IK4paBTW9uZGF5Ck5pbApIYXNoTWFwCnBheW1lbnQK4paBZml4aW5nCuKWgUFERApyZXZpZXcK4paBcG9zc2liaWwK4paBZ3JvdGUK4paBZ3JvdXBlZAriloFMaW1hCuKWgUF1Z2VuCuKWgW9ja3PDpQpvbmFzCuKWgWRlYmF0ZQriloFJbmdsCkRhClNPVVIKZXR0YmUK4paBQmF0dGFsaW9uCuKWgUZsb2F0CuKWgWNvbmUKcmVhZHNoZWV0CmNvdXJ0CmxpZ2VuCuKWgUJlZ2lubgriloFMSU1JVAriloFlbmpveWVkCuKWgUpha29iCuKWgXRlbHQKYmFja2VuZAriloFHZW1laW5zYW1lCmxpbnQKYWxsaW5nCuKWgWLDtnIKZ3JhbmQK4paBZGl2ZXJzZXMK4paBendpxIV6CuKWgUtvbXBvbgriloFpbm5lcmhhbGIK4paBZGVzYXJyb2xsbwriloFNYXN0ZXJzCmlvc28KXWAuCuKWgWZyYW5jZXNhCkFmZgppbmVrCuKWgWRlc3NpbgpgLmAK4paBcmFua3MK0LHQtdGA0LMK4paBc2thbAriloFTdWx0YW4K0JDQnQriloHRgdC/0L7RgdC+0LEK4paBY29udHJhZGljdAriloFyZWNvbQriloFPa2xhaG9tYQriloFWbGFkaW1pcgriloFtZXRlcnMKdHJhbnNwb3J0CuKWgWNvbnN1bHTDqQriloFBVFAKZWJiCuKWgXZvbHVudGUK4paBb3V0bGluZQpMSUMK4paBZXVybwpDaGFyRmllbGQKbWVkaXVtCuKWgUJlbGdpcXVlClByb2MKcm91dGVzCuKWgWNvbnRyaWJ1CiF9CsWhw61tCuKWgUxlc3MK4paBS29zdAriloFlcmVkZXRpYsWRbApyZXZlbgp2ZXJpZnkK4paBU2FsdAriloFzaG9vdGluZwriloFkaXNwb3NlCnVqw60K4paBdGllcnJhCuKWgXBvaXNvbgpzYWsKcGVyaW1lbnRhbAriloFOw6kK4paBS2lkCmFneWFyCuKWgWFyY2hpdsOhbHZhCmJlcmVpY2gKw616CuKWgVJpdHRlcgriloHQpdGA0L7QvdC+0LvQvtCz0LjRmNCwCnpldW0K0LTQsNGFCuKWgWdyw7xuZAriloFwcm9ncmFtbWVyCuKWgWNvbnNlaWwK4paBZW5jcnlwdAppbnRlZ3JhdGlvbgpDdWx0dXJlCuKWgUNpcmNsZQpPYnNlcnZhYmxlCuKWgWdlbm9tc25pdHQK4paBU2VsZWN0aW9uCuKWgWlycmVndWxhcgpBdXRyZXMKUGVyY2VudApmYXVsdAriloF2aXJ0dWUKxIVwaQriloFzZXNzCuKWgdCi0LDQutC20LUKVGltZXN0YW1wCuKWgWxpdHTDqXJhdHVyZQriloFtb8W8CuKWgWJvcnJvdwriloFjb25jZWQK0YfQvdC40LoK4paBTHVuZApJT05TCnluaWUK4paBU2hpbgriloFvc29iCmLEmwriloFpbnR1aXQK4paB0L3QsNC/CuKWgXByb3BoCuKWgXBpdHQK4paBSUJNCuKWgVRpbGwK4paBaGluYQppdHRlc3QKZ2VuZXJhdG9yCuKWgU5pbgriloFLb3QK4paBcGFzc2VyCuKWgWRpc3Bvc2l0aW9uCnVuaW5nCuKWgWZhbWUK4paBdGVuaWEKYW5jZW1lbnQK4paBU3Vpc3NlCmAtCuKWgWhvbWJyZXMK4paBaW5maW5pdHkK4paB0L7QutC+0L3Rh9CwCuKWgWNvc20K4paBRGVubmlzCmJhegpoYXVwdAriloFtaWdodHkK4paBcHJlZGUKdXNhYmxlCuKWgXdzenlzdAriloFsYgpBQkFTRQpqbmEK0L3QtdCyCuKWgWFzZXMK4paBZmluYWxtZW50ZQrQudC8CnBlY3Rpb24K4paBU3R1ZGllbgriloFOb3J3ZWdpYW4KY2VnbwpJTkRFWApvcnRlbgriloFmcmllbmRzaGlwCm1ldHJvCnRoaWNrCuKWgVplbApMT1cK4paBdGhlcmVieQp1bnRlZAriloFzdXJmYWNlcwrRjtGJ0LjQvAolKS4K4paBV29uZGVyCuKWgXJlZHVuZGFudAriloFHcm9zCuKWgXdlYnNpdGVzCuKWgXZpbwriloFvY2FzCnbDqXMK4paBR2FtCmR3CkluZGljYXRvcgriloFLb2IK4paBamFjawpIaW50CuKWgUFwb2wK4paB0LTRgNGD0LPQuNC1CuKWgU5VTQriloFvZmljCnlzdHljegriloF3ZXJlbGQK0LzQvtGB0YLQuApMRUZUCuKWgVR5cGVzCnNlZW4KdW5jaWEK4paBbmFyb2QK4paB0Y3RgtC+0YIKU2lkZW5vdGUKdWVpbAriloHQvtGC0LzQtQriloFjb3VydHMKZmlyCnVyegrRh9C10L3QutC+CkNyZWRlbnRpYWxzCuKWgWltYWdpbmF0aW9uCml0YXRzCmJ1ZmYKZmxhc2gK4paBYmFkbHkK4paBd29ybgriloHQvtC60YDRg9Cz0YMKY2F0YWxvZwpsaW1lCuKWgUdpbGwK4paBU2VudAppZWxsYQriloFDcmFpZwriloFTZWxlCuKWgUluZGVwZW5kCuKWgXByb3ZpbmNpZQpvc3NlbgriloHQt9Cw0L/QsNC0CuKWgWluZmFudAriloFwcmV2ZW50cwriloFwcm92aW5jZXMKYWbDqQpiZWcK4paBY29sb3VycwpCRgrDq24K4paB0JzQtdC20LTRgwrDrm4KT2JzZXJ2ZXIKZm9yc2NoCsOtZ2VuCnVtcHRpb24K4paBSWxsdXN0cgrRgNC40YHRggriloHQv9C+0LvQvtCy0LgK4paBYCYK4paBb3JlCuKWgXN1cHBsaWVzCuKWgXBhcmVudGhlcwpGb3VuZGF0aW9uCuKWgXZvdQriloFUb3V0CkRvbmFsZAriloFSRVQKd2VpZwriloFwcm9kdWNjacOzbgptaXgK4paBdXR3b3IK4paBZsO2bAriloFlbnTDo28K4paBU2lzdGVyClRhZ3MK4paB0KHQsNCy0LXQt9C90LUK4paBcHJpdmlsZWdlcwriloFuYXp3CuKWgVJhdgriloFyZXBybwriloFNYXNvbgriloFQbGF0Zm9ybQriloHQv9GA0L7QsdC70LUK4paBUMOpcmV6CuKWgWJsYW5jCkJlaGF2aW9yCtGE0LjRhtC4CmVrZW4K4paBbWVldHMKKC4qCuKWgWbDpQplcGVuCm1ha2VyCuKWgWxveWFsCm1lbWJlcnMKbWVpc3RlcnNjaGFmdApnb2FsCtGI0LvQtdC9CuKWgdGB0LXQstC10YDQvgppZW5kZQrQtNC90ZYKUHJvb2YK4paBZXhwbGljCuKWgWVsZWN0cm8KaWVscwpyZWxvYWQK4paBZWxldmVuCuKWgXBhcnRpZG9zCsOubmUK4paBUmVnaW4K4paBw6l4CuKWgUJ1bGcK4paBbmV0d29ya2luZwriloFzZXBhcmF0b3IKVXNlck5hbWUK4paBZWRpZmljaW8K4paBTWllCuKWgWlkbGUKeWVkCuKWgXBhc3NlbmdlcnMKKykKbWVubwplZ2dpCuKWgW5pY2VseQplbmRlbmNpYQrRh9C40LkKw6l0w6lzCmlnaHRhcnJvdwriloFvcnRob2dvbmFsCuKWgUhhbGYK4paBZmV3ZXIK4paBcHJvcGkK4paBcHJpbWl0CmljYWxlCuKWgWZsb3dlcgptZXJrCuKWgdCe0YLQtdGH0LUK4paBcGVyc2lzdGVudAriloFWaWxsZQpNZW4KZ2FiZW4K4paBSXNhYWMKYXRpdml0eQriloFww7PFgm5vYwriloFyb2sKY2FyZHMK0LTQtdC90LjRjwriloHRjtCz0L4K4paBZXh0cmFvcmRpbmFyeQriloFreXIKKCIsCikpXQriloF1bml4CtC60L7QuwriloFzaW5rCmFwc2VkCuKWgWtvbW1lbgriloFmb3JjaW5nCkFib3V0CuKWgUhhbGxlCuKWgU1hamVzdHkK4paBU3dpdGNoCuKWgWFicm9hZAriloFhY2NlbGVyYXRpb24KdXJiZWQK4paB0L7RgdGC0LDQvQpSZWFkeQriloHQv9GW0LLQvdGWCkJyYQriloHRhtGM0L7Qs9C+CuKWgXBsdXQK4paBVHJhaW4K4paBw6FwcmlsaXMK4paBcHVlc3RvCuKWgXRvc3MK4paBaXJyZWxldmFudAriloFkaXAKc2VnbWVudApvcGFjaXR5CuKWgWxvcnNxdWUK4paBdmVyc2NoaWxsCtC10L3QsAriloFEb2MKJSUlJSUlJSUK4paBYm9yZGVycwpnZWJyYXMK4paBcmllcwriloFPbHltcGVkaWEK4paBR2VuZXJhdGlvbgptZXRyb3MK4paBaG9yaXpvbgriloFhZGFwdGF0aW9uCuKWgVphaGwK4paBbmFoZQriloFCdWcKUGljdHVyZQrRmdC4ClJHQgpPd25lcgphZGluCuKWgUNhdGFsdW55YQpuw71jaAriloFjdWFscXVpZXIK4paBSW5zdGl0dXRpb24KaW5zZW4K4paBQnJhc2lsZQriloFmaXR0aW5nCkRlbGVnCmljdHdvCuKWgUV4cGVyCm9jaGFzdGljCuKWgWR1cwriloHQv9C+0YDQsAriloFzdWJzdHJpbmcK0YHRgdC40LgKb2luCuKWgdGI0LrQvtC70LAK4paBY3gK4paBJSkK4paBQnVkZGgK4paBcGVuZGluZwriloFFbnRyeQriloFCZXJsCuKWgWNsZXIK4paBU29jCuKWgXJvdW5kZWQK4paBbXYKw610ZXR0CuKWgURpcGxvbQriloFmcmFuesO2c2lzY2hlbgriloFHYW4K4paBSW52ZXN0aWcK4paBaW5kZXhQYXRoCuKWgW1vbHRpCnBlcnNpc3RlbmNlCuKWgVhJWGUK4paBRWxlY3Ryb24KYsO8CmdlbGUK4paBTWFsZXIK4paBcHJveWVjdG8K4paBQmF0aAplbGxlcnMK4paBR1AKb25pbmcKY2xvdWRmbGFyZQriloFwxZlpCuKWgWRlZAriloFPZGthenkK4paBTXNnCuKWgUJlaW5nCuKWgURlcHVpcwriloFQcmltYXJ5CuKWgUFwcHJvCuKWgWZvcm1hbGx5CtGB0YLRg9C/0LjQuwriloFmdWVyYQriloFSb290CuKWgWF1dG9ub20K4paBc2VjcmV0YXJ5CuKWgW9zw7NiCuKWgWN1YWxlcwriloFEZXBlbmRpbmcK4paBYXNpCnZlcmEK4paBcnVzc2UK4paBcHJvdmVzCuKWgXByZXNpZGVuClJVCuKWgVdhdHNvbgriloF3ZWJwYWNrCmVsbGlnZW5jZQrQutCw0LwK4paBT2ZmaWNlcgriloFkZWxpdmVyeQrQttC00ZHQvQriloHQuNC80L/QtQriloF3aWwK4paBdmVzYwp1c3p0dXMK4paBR2VvZmYKKCl9CuKWgUZvcmUK4paBd2VuaWcK4paBQWlybAriloFFZnRlcgriloFCcmVhawriloFTdMOkZAppc21pc3MKw61wCuKWgWF2b2lkZWQK4paBYXNzZXJ0aW9uCkROCuKWgXRlYXQKw61uYQriloFtZWNoYW5pY2FsCmlzdQpAewriloFub3UKSXRhbGllCnNvdXJjZWZvcmdlCuKWgXN2bwriloFraXLDoWx5CuKWgVJlZmVyZW5jZXMKc2l4CuKWgUFyY2hpdmVzCuKWgWZpbmlzaGluZwphY2plCsOpdGF0CmlmZnMK4paBc3RlYWQK4paBZmVhcwphd2FyZQpsYW5kZQpJbmplY3QK4paBQWdlbnQK4paBTm9ybWRhdGVpCuKWgWFtZW4K4paBQXJjaGl0ZWN0dXJlCmF6ZQrImXRlCuKWgXVzYXIK4paBY29yZXMK0LvRltC9CuKWgUNhc3RybwriloF2w6YKPiIsCm9tZW5hCuKWgWdlc2FtCuKWgU1hcnTDrW4KZWd1bmcK4paBc3BvbGXEjQriloFhbXBsaXR1ZGUK4paBaW1wb3J0aW5nCuKWgWxpc3R2aWV3ClRIRQp6aWFsZQpjZWRlcwriloFwYXJ0aWN1bGllcgriloHQoNCw0YHQv9C+0LTQtdC70LAK4paB0LrRgNCw0LkK4paBZGl2ZW50CuKWgWvDqQpxdWl0CtGC0L7RgNC+0LwKQ2hlY2tCb3gK4paBWm9iYWN6CnBoZQpwdGEK4paBc2rDtgriloHRgNC+0LfRgtCw0YgK4paBdGVkZXNjbwriloFzdGFsCuKWgUJlcnVmCtC+0LLQsNGPCuKWgXN2xJsK4paBZmx1c2gK4paB0LLRltC00LHRgwriloFyYWRpYWwK4paBZGlmZsOpcmVudGVzCtCw0L3RgtCwCuKWgVBlcnJ5CkNvbGwKbGlxdQriloFPcHRpb25hbAriloHQodCw0L3QutGCCuKWgUxJTlEK4paBRnJhbmMKY2lqZQriloFHdWlsbGF1bWUKa25vdwriloFVbml0cwpvbGsK4paBU3lzdMOobWUK4paBU2FsZXMK4paBZWhlbWFsaWdlbgrQvNC40YDQvtCy0LAKeGh0bWwKc2V0b3B0CuKWgW1lbGxhbgriloF6aWUK4paBZ2lhbnQKQm9hcmQK4paBQ2F2YWwK4paBZGVmZW5jZQotLS0tLS0tLS0tCnBzaGlyZQptYXJ0CuKWgURpb2MKaXNrdAriloFpbnNlCuKWgcOpcGlzb2RlCtGH0LjQugpiYXJzClNpdG8K4paBaW50ZWdyaXR5CmF1ZmYK4paBdsOkcgpBenVyZQriloFzdGFyYgriloHQutC+0L3RgtGA0LAK4paB0JzQtdC60YHQuNGH0LrQsAriloHQt9Cw0L/QsAriloFNb3VudGFpbnMKfX09CuKWgXB1bGxpbmcK4paBc2F0ZWxsaXRlCuKWgWF0b21zCuKWgXByb2Zlc29yCuKWgXJlcGVhdGVkbHkK4paBaW52YXNpb24KcHJvZ3JhbW1pbmcK4pSc4pSA4pSACuKWgUxpcArQstGI0LjQtQriloFrZWVuCuKWgWNyaXRpY3MK4paBTmljb2xhCuKWgUNhbmQK4paBZGlzdGludAriloFoZWFkaW5nCnByYWdtYQp7fAp5bWVuCuKWgXRlcnJhaW4KaWVkZW5pcwriloFiZXNvbmRlcnMK4paBbm9taW5hdGVkCkJPT0wK4paBS2F5CmNpYW4Kc3RlbGxlCuKWgWRpc3B1dGUK4paB0YkKRGF0YVNldApub3RoaW5nCkF1dG9tCmjDtnJlbgriloFzaGVkCuKWgXBhdXNlZApzYW4K4paBbnVuY2EKISgiCuKWgXBvxYJvxbwKU2VjcmV0CuKWgURvbWFpbgriloHQstC+0LfQvNC+0LYKWFYKbHYKaWtoCuKWgVNvbnkKbXEKb3Ryb3AK4paBTG9nZ2VyCuKWgXRocmVhdAphc3RlZArQt9GM0LrQvgriloFmcmVlbHkK4paBaW1wcm92ZW1lbnRzCmlzdGVtYQriloFpbGx1c3RyYXRlCuKWgXRhY3QK4paBZmlndXIKdcOpcwpyaW1pbmFsCm9kb24KaW50ZW5kbwriloFpbmZsdWVuY2VkCkZGRVIK4paBR2hvc3QK4paB0YHQvtCy0LXRgApuYWQKaW9uZWQK4paBRXZlbnRzCuKWgXdyYXBwaW5nCi0tLS0tLS0tLSsKZmlmCuKWgSgqKgo9e3sK0LzQsNC70YwK4paBbG9zc2VzCuKWgUdhbGVyaWUKdGVsCuKWgdC70Y7RgtC+0LPQvgriloFLcnUK4paBUG9sZW4K0L3RltC8Cm5lYXIK4paBc2hhbWUK4paBbW95ZW5uZQriloFDUApwcmVpcwriloFwYXNzZW5nZXIKbGVrCmlvbmFsZXMKa2Fma2EK4paBcGFydGljaXBlCuKWgW1lbWJlcnNoaXAKW18KbGFuZG8Kc3RlbGxpbmcKU2VtCmdvbgriloFDb3JyZWN0CuKWgXZhbGxlCuKWgXJlYWRpbHkK4paBRG9rdW1lbnQKaG9ubmV1cgriloF0ZXN0aW0KdWxhdGl2ZQpkb0ZpbHRlcgriloFkb21pbmFudAphbW1lcgriloHQutC+0ZjQsAriloFNb25zaWV1cgp6ZWcK4paB0LLRltC50L3QuAriloFGbwriloFBbXkK4paBwqEK4paBZmVicnXDoXIK4paBZG93bmxvYWRpbmcK4paBbGVuZwpcfSQsCuKWgW5lYXQK4paBQ2FjaGUKSUNBVElPTgriloFkZXZlCuKWgXNvcnJvdwpzbG93CuKWgWhpbmF1cwriloFyZWNvbm9jCuKWgUxpbmtlZAriloFTaGF3Cm1hcmtldAriloFEaWMK4paBU2tpCuKWgWRlbGltaXRlcgriloFNYWluQWN0aXZpdHkK4paBTXVzaWNhbAriloFSZXluClNjcm9sbFZpZXcK4paBY29udmVudGlvbmFsCmVuw6dhCuKWgXJlZmFjdG9yCictCuKWgUhlZApzcHJlY2gK4paBYXRobGV0CuKWgWVzcGVjaWVzCuKWgVNjaMO2bgriloFrbGVpbmVuCtGI0LrQvgriloHQmdC+CuKWgUhhcHB5Cm11bHRpcm93CuKWgWF1Z3VzdGkK4paBR2FuZAriloFhcHBvaW50bWVudAriloFNZWRpYWJlc3RhbmRlbgpUaHJlZQriloFLZW5uZXRoCk5FVwriloFOb3RpZmljYXRpb24K4paBTWFyeAriloFpbnNjCk1vcgrQstGL0LkKdsOkc3QKdmlkaWEK4paBZGVtb25zdHJhdGVkCmZvbnRzCuKWgWthbWVuCuKWgVN0ZXIK4paBbWllc3prYcWEY8OzdwriloFLb2gKfiRcCsK7KS4KcmVuZQppbnNpYwppY2vDoQp4eWdlbgriloFtbgriloFzY2hlZApBU0MKSWcK4paBQ29uc3RhbnQK4paBb3Bwb3J0dW4K4paBTXlDbGFzcwpzZWYKb3BlZAriloFpbmp1cmVkClZJUwriloFQZXJvCuKWgVVudGlsCuKWgWZsZXNoCm9ycGhpc20K4paBUG9ydGFsCuKWgWdtaW55CuKWgdCy0LvQsNGB0YLQuAriloFOw6QK0LrRgtC40YfQtQriloFocmFiCuKWgUN1Ygphdm9pcgriloFMYXJzCuKWgdCR0LXQu9C+CuKWgXNlaXpvZW4K4paBR2Vub21zbml0dAriloFMaWwK4paBUG9vbAriloFEaW9zClRYCmFlcwphdXRvcmUKQWxwaGEKc3RhdGVzCkxhYgpuZWRlcmLDtnJkCmVydG9uCuKWgWJyaWQK4paBcmljaHQK4paBRWxhCuKWgdGB0LvQsAriloF3ZWFwb24K4paBY29tYmF0dAphZ2FyCuKWgXJlZ25pZwriloF1dGlsaXPDqQriloFzZXJ2aXIK4paBYnJpY2sK4paBZ2F0ZXdheQriloF0b3JyYXN0ZQriloFwcm9jZWR1cmVzCuKWgcOlcnNuZWRlcmLDtnJkCuKWgUdlbm9tc25pdHRsaWcK0YfRkdGCCuKWgW9tcsOlCuKWgXJlZ25pZ2FzdGUK4paB0YfQtdGB0YLRjAriloFhbWlkCuKWgWdyYXRlZnVsCuKWgURJUwpEQVkK4paB0L7RgNGDCuKWgXJpdmnDqHJlCmhldXJlCuKWgVJpY2htb25kCuKWgUNvbXBhcgriloHQndC+0YAKRE9DCmVzaWEKY2FsYwriloFJVQriloF2b3JnCuKWgWhhYsOtYW4Kw6dvaXQK4paBYXJpc3QK4paB0LrQu9C4CuKWgVN1ZQriloFUb3VjaAriloFXcml0aW5nCmlmaWFibGUK4paBd2MK4paBd2l0aGRyYXcK0LfQsNGACuKWgXByZXNlbnRseQriloFGSwriloFwcmFrdAriloFjb2xvcmVkCnVzYgriloFQZXLDugriloFwbGF0YQriloF3aXNoZXMK4paB0LrQsNC8CmF6YXIKw6F2ZWwK4paBbGFtcApiaXNob3AK4paBaW5jbHVzaW9uCmpxCmFydGgK4paBRmxhZwriloHQvdC+0YAKw6ZkaWEKVU5DVElPTgriloFCYWhuaG9mCuKWgWFwcHJvYWNoaW5nCuKWgUfDtnR0CuKWgWN1YmUK4paBYXJndWVkCuKWgVRoaW5ncwpHdWkK0LTQvtCy0LgK4paBcmVjcmUK4paBcsOpc2VhdQriloFzaWduaWZpY2EKR2l0CmdlYnJhY2h0CuKWgWxpZ2EK4paBYXNzdXJlZAphbHVzCtGA0LjRggriloHRjdC90YbQuNC60LvQvtC/0LXQtNC4CuKWgSUpLgriloFQcmVtacOocmUK4paBZGVjbGFyYXRpb25zCuKWgXRyaWNreQriloFwcm9maWxlcwriloFGb24K4paBSmFzCsOicgpiYWJlbAriloFGcmlkYXkK4paBasO6bml1cwriloFjb2xzCuKWgUVYSVNUUwriloFJdGFsaWFuYQriloFhdXRob3JpemF0aW9uCuKWgXN1bGxlCuKWgUVtYgriloFWYXJpYWJsZQp0cmVlcwriloFGbHkKcmlvcnMK4paBZGFtYWxzCuKWgWZpbmRldAriloFTZXB0CuKWgW11bmRpYWwK4paBcmVtb3ZhbAriloFsb25naXR1ZGUKY2xpYwriloFmYWRlCuKWgWdyYWRsZQriloF6w6FrCuKWgXRpbWluZwp0cmlnaHRhcnJvdwphdGlhCi0uCnVjaGUK4paBc2VyaWFsaXplCuKWgUhtbQriloFSZXByZXNlbnRhdGl2ZXMKYmFoCnJlbmQKYXNzYWRvcgriloFzaGllbGQKdWNpb24K4paBYW3DqXJpY2FpbmUKesSZCnZpbGxhCuKWgWhvbWJyZQrDoXNzCuKWgVNGCuKWgXJlcGVhdGluZwriloFjcml0ZXIK4paBU3RydWN0Cj8/PwriloFjaGVhcAriloFyaW5ncwphYmjDpG5nCuKWgWNvcnRlCuKWgWFkbWluaXN0Cml4b24KZ3lwdAriloFwdW50b3MK4paBbWV6aQriloFwb2Nob2QKaXNrbwpuacSZCuKWgdC+0YHRgwriloHDoXIK0YLQtdC70YzQvdC+0LkK4paBTWV0cm9wb2xpdGFuCmppbgp6ZXNzCuKWgdCy0ZbRhtGWCuKWgWNvbmZsaWN0cwppanN0CuKWgU1hcmtldArRgdGC0YDQvtCyCuKWgSIsIgriloFTY3JvbGwKZ3VuCtGC0LDRgNCwCuKWgWFtYXRldXIK4paBcsOzxbwKcG9zcwriloFnZW5lcmFsaXplZAriloFIYXJtCmNpdGEK4paBU3dpdHplcmxhbmQKaWNvbGEK4paBbXVpdApsb2NhdGVkCuKWgWPDswriloFhcm9zZQriloFjb21tdW5hdXTDqQp9KV4KdmlzaWJpbGl0eQrDrWRhCuKWgUZCCuKWgUZyZXVuZApnYXQKIjp7IgppbnRlbGxpagppZmllCmhtZW4K4paBw6lkaXRpb24K4paB0LrQvtGY0LUK4paB0ZbQvdGI0LjRhQpvbWluZwriloFhcnF1aXRlY3QK4paBUHJlc2lkZW50ZQriloHQn9GW0LQK4paBY2FiaW4KVGhlb3JlbQriloFHYXkKaWZpY2UK4paBaGVjdApsxIUKaXJtaW5naGFtCuKWgXNlbWFudGljCuKWgUxvdWlzaWFuYQriloFzYWNyaWZpY2UK4paBQ2hyaXN0b3BoCuKWgUV4ZWN1dGl2ZQpfKwpqw6FrCuKWgXNlcmlhCuKWgU92ZXJmbG93CuKWgUx1Y3kK4paBbWVsaG9yCuKWgXZvaWNlcwpjemEK4paB0LrQsNC/0LgK4paB0YPQvdC40LLQtdGA0YHQuNGC0LXRgtCwCklOQ1QK4paBY29sb2MK4paBcHJ1ZQriloFnZW9tZXQK4paBZGlyZXR0bwpyZXNvCuKWgUFrdAriloF1bmgK4paB0YHQtdGA0LgK4paBQWxlcnQKV2VsCmF1ZGkKw6RsZXIK4paBZ3Vlc3RzCuKWgdC40LTQtQpTdHVkaW8K4paB0LrQsNGC0LUK4paBZXhwb25lbnQKcnplCnBtb2QKcm9sbGUK4paBTGltaXRlZApBbGxlbWFnbmUK4paBcGl0eQriloFsw6QK4paBcnVubmVyCmtlbmRlCkVRCuKWgU1NCnN6w6FnCtC/0L7QtNGWCuKWgXJlZ3JldAriloFwdWJsacOpCuKWgWRlcGFydGFtZW50bwriloFhY2N1c2VkCmhwCuKWgVBmbAriloFTaW50CuKWgWVrb25vbQpyYWN0b3IK4paB0J/RltCyCuKWgWF3ZnVsCm93YcSHCl0tPgriloFGaW5lCtCh0LAKdGlzCsOpdGEK4paB0KDQvtC00LgK4paBRMO8c3NlbGRvcmYKTE9CCm9zYXMKd2Vya2UK4paBbGFuY2UK4paB0LvQuNGB0YLQvtC/0LDQtNCwCuKWgWluY29tcGxldGUK4paBUGljdHVyZQooJ1wKZXN0ZXJzCuKWgWJlbG9uZ2VkCuKWgVNhbmsKYW1tZWQK4paBcmVwb3NpdG9yaWVzCuKWgWFkZHIKQ29sbGVjdApIb3QK4paBdHlsCuKWgWluc3RhbmNlb2YK4paBYm9udXMKb3bDvQriloHQvNC+0YDRjwriloFpbnRlcmFjdGl2ZQriloFNeXMK4paBRWRtdW5kCmZpbGVOYW1lCmVtb3IK4paB0KLRgNC4CuKWgVJvc2VuCuKWgVByaW1hCuKWgXZvdGluZwriloFYUAriloFaZXJvCuKWgUxlZAphbXN1bmcK4paBZW5hYmxlcwriloFyZWRpcmVjdHMKQVNUClBhaW50CmFja2VyCmxlY2h0CuKWgWNoYWlybWFuCuKWgUF2ZW4K4paBU2FjaAooIjwK0LrQtdGACuKWgW1pc3Rha2VzCuKWgVdlaXQK4paBcHJvd2FkCuKWgWRpZG50CsOpbmFyaW8KdW5sZXNzCuKWgWJhY2t3YXJkcwpib2EKZHVpbm8KYGBgCnN0b3IKQ29tcGxldGlvbgpwdWVzdGEK4paBZGluYXN0CsO6bHQK4paBU1kKaWZvbGlhCsWTdXZyZXMK4paBcmFjaW5nCuKWgWNhYmluZXQK4paBY3V0dGluZwriloF0aHVtYgriloHQmtCw0YDQsApoaWdobGlnaHQK0LrRg9C/CuKWgXNkCuKWgdC90LDRhtGW0L7QvdCw0LvRjAriloFjYW1wYWduZQriloFyZWdpc3RlcnMK4paBZWR1Y2F0aW9uYWwK4paBcGVzYXIKw7xnZQriloFvcm8KYnVyZ28K4paBQXRobGV0aWNzCuKWgU1UVgpnZXRNZXNzYWdlCuKWgUh5cAriloF2aWN0aW0KKSlcCuKWgWRydW1zCmhvc3RuYW1lCnRhxYIKbWFraW5nCuKWgXBvd2lhdArFkWQKdGhyZWFkcwriloFhYnNvbHYK4paB0LvRjtC00LgK4paBc3RlcHBlZApleGlzdAriloFOSwriloF2ZXMKaXN0aWNoZQolJwphdGl2b3MK4paB0YLQsNC60L7QuQriloFNb25nb0RCCuKWgVVuZwriloHQoNGD0YEK4paBZWxpbQriloFGaWYKaWNhY2nDs24K4paBVGVubmlzCuKWgUplZmZlcnNvbgpqw6FuCmZvZwphbmhhCnpvcgriloHRg9C90ZbQstC10YDRgdC40YLQtQphaHUKaWFkYQpTZGsKU2V0dGluZwriloFLaWxsCuKWgVdlbmQK4paBYmFsZAriloFLdWIK4paBdmlzdG8K4paBamV1bmVzCmNvbGxlY3Rpb25zCmFjw60K0LLRgNC+0L/QtdC5CuKWgWFyaXNlCtC+0L3RlgpNQUlOCtC00L7RgdGC0YPQvwriloFiZXJnCuKWgWNyaXRpY2lzbQriloFUb3JyZQriloFkZXNjcmlwdAppw6hyZXMK4paBZXN0dWRpbwriloFpbGkK4paBbWlsaXRhcmUK4paBQ2xhcmEK4paBRWxsZW4KbGltaXRlZArQu9C8CuKWgUVzcGHDsQriloFpbmZpbml0ZWx5CkFtZXJpY2EKb3VjCmdsYXNzCuKWgXJ1ZAriloF6YXQK4paBcmluCuKWgUJpYmxpb2dyYWbDrWEK4paBbWVyY2hhbnQKdGVuc29yZmxvdwriloFkw6lyCuKWgUFjdGl2ZVJlY29yZApJRVMK4paBbGlua2VyCuKWgWVzdHVkaW9zCmNkbmpzCuKWgdCT0L7RgdGD0LTQsNGACsOhbmNoZXoKYXBwZQpjbHViCuKWgWRhbMWhw60K4paBQWxnb3JpdGhtCmRmcwriloFCYWMK4paB0LrQsNGE0LUK4paBJj1cCuKWgdCw0YIK4paB0JPQu9Cw0LIK4paBTW91Ck1hY2hpbmUKKC4uLikK4paBY29tcGFydAriloFhdWd1c3p0dXMKYXZhbgriloFyb2xsZWQK4paB0LXQtNC4ClNjYW4K4paB0YDQtdCz0ZYK4paBxZt3aWF0YQriloFtaW5lcwp9LHsK4paBVGllcgpDYW5ub3QK0LzRltC9CuKWgU5FVwriloHQktC+0LsK4paBTWFuaAriloFHcmVnb3J5CuKWgXByaW5jaXBlCklTTwpwcm9nCuKWgUZhaWwK4paBYWEK4paBZmVjaGEK4paBV0NGCuKWgW1hZ2lzdHIK4paBWmFjaAriloF1bmljb2RlCuKWgWNvbnZlcnRlcgriloFkaXNwZXJzCmtzYW0K4paBVW5jbGUKUHJvcGVydHlDaGFuZ2VkCuKWgWxpZGVyCuKWgW9wdHMK4paB0YLQsNC8CmxvY2tlZAp6YWsK4paBY291bnRlZAriloFwZXJzb25lCuKWgWh1cnJpZWQKw6R0dGVyCuKWgW91dHJhcwriloFnZW51CkJECnZlZwpkdWUK4paBUHJhY3QK4paBcG9zaWJsZQriloFjb250cmlidXRlClVNTgriloFCw7xyZ2VyCuKWgXdhcnMK4paBZXhoaWJpdGlvbgpoaWxsCuKWgWFzdHIK4paB0LzRg9C30LUK4paBQ0FTRQptYW5pZmVzdAp5ZWxsb3cKRm4K4paBUkMK4paBc290dAriloFzdWpldAriloFTb2NrZXQK4paBQ2hpbmUK4paBZnJhbWV3b3JrcwpIb2xkCsOqdHMK4paB0YTRltC70YwKTG9hZGVkCm9waGUKdGV4dGUK4paBZXhwcmVzCuKWgWNvbnN1bWUK4paBUmljaHR1bmcKb2dyYWZpCuKWgW1hZ25pZmljCsOgdAriloFpbmR1bApyeXR5CuKWgW9mZmljaQriloFhc3NhdWx0CnJ1bmQK4paBdmFyaWFudHMK4paB0YHQtdC70YzRgdC+0LIK4paBZXhjaXRlbWVudApUaW1lcwprb3RsaW4K4paBZ2VyaW5nCuKWgUVuZ2VsCuKWgVRpbWVyCsKyKS4K4paBTmcKw6Rzc3QKc2NoYXUKU0Vycm9yCuKWgUVkd2FyZHMK4paBVGVybWluYWwKbGljdApVbmRlcgriloFzcGF3bgrDvHJnZW4K4paBQXXDn2VyZGVtCuKWgWtpdGNoZW4KZmFocnQK4paBQ29sb3JzCuKWgdGB0LjRgdGC0LXQvNCwCuKWgXRlcm1pbmF0ZWQK4paBTGFUZVgKaWdrZWl0ZW4K4paBbWVzdXJlCuKWgUFtdHMK4paBZW1waXIK4paBc3RyaWtpbmcK4paBZXhjbHVzaXZlCtGC0LXRhQriloFyZXoK4paBcXVhbgriloFHbGFzZ293CuKWgWxlY3R1cmUK4paBVGVzdGFtZW50CuKWgWZ1bmRzCuKWgXN0ZXNzYQriloF0cmliZXMK4paBcGFyZm9pcwriloF0cmViYWxsCm5pdHoKYm92ZQriloHQt9Cw0YHQu9GDCuKWgWFic2VudAriloFMYXVmClNtaXRoCuKWgdCd0LjQutC+0LvQsNC5CuKWgWV1cm9ww6llbm5lCmxyCuKWgXByb2dyYW1tYQriloFtaWRzdAriloFkYXVnaHRlcnMKU3luCm9iZW4Kw6JuxIMKaWRhbgriloF0aGVyCm9kb3JlCnNkbAriloFRdWludAriloFjYXNvcwriloFaYW0K4paB0YHRgtGA0LDQvdGLCuKWgXNwcml0ZQrQutCw0LsK4paBbmFzYwriloHRgdC+0YLRgNGD0LQK4paBdHJhdmEK4paB0YXQvtC30Y/QuQriloFVcnVndWF5CuKWgXNwYXJzZQriloHQv9C+0LvQtQriloFteXN0ZXJ5CuKWgU1hbmcKcmVnaXN0cgriloFDR0Zsb2F0CuKWgXN1Ym1pc3Npb24K0LLQsNC90LAK4paBIjoK4paBVHJhY2ViYWNrCuKWgVBpdAriloFFaHIK4paB0YHRgNCwCuKWgUdyYXBoaWNzClVwZGF0ZWQK4paBc3ZlbnNrCuKWgXNwYWNpbmcKdHJpdHQK4paBR3VpbmVhCuKWgUZyYW7Dp2EKQXNzb2NpCuKWgVRvdsOhCnN0YWIK4paBTGVhcm5pbmcK4paBQnJpZ2h0CsWbYwriloFpZMWRCn19X3tcCuKWgWRyb2l0ZQriloFyYWlzaW5nCmdldHRpbmcKeXRobQpvbnltZQrFvHMK4paBYmxhaApUYWdOYW1lClZlcnRpY2FsCuKWgWFwZXIKcG9zdGdyZXNxbAriloFIYW5kbGUKemV3CuKWgXNrdWxsZQriloFvcGVyZQpsYXllcnMK4paBcG9zc29ubwriloFyZWxhdGUKxIVjCuKWgU1paArDomdlCuKWgcWad2kKaXNzZXMK4paBc2VydmxldApMb3MK4paBQWR2YW5jZWQKYXRpY2EK4paBY2VkCuKWgWVsZW1lbnRvcwrRgNC+0L3QsAppa3MKYXJmCmFyaWF0Ck1vYmlsZQphZ3VhCuKWgXRpbXAK4paBQ29taXTDqQriloFjb21iaW5pbmcKd29obAriloFTdHVkeQpjb29yZGluYXRlCuKWgXJlY29tbWVuZGF0aW9uCuKWgXRyYW5zZm9ybWF0aW9ucwp1bnRpbApib3VuZGVkCuKWgdC40LfRgwpoYW5jZWQK4paB0LLQvtC/0YDQvgriloFQcsOpcwriloFjb29yZAp4dHkK4paBJCwK4paBY2hhbXBpb25zCkRlbgpNaWwKKCcsCuKWgVByZWlzCuKWgWVpZ2gK4paBbWFya2VycwriloFnZXdlc2VuCsOkdHRlbgriloFwaW9uZQptdgriloHRmNGDCnplaWNobmlzCmhvZmYKTmV3cwriloFTdGFuaXPFgmF3CuKWgUJyYW5kZW5idXJnCuKWgUZldWVyCj0mCtC20LXRggriloFOZWlsCuKWgXdpcmsK4paBc29jaWV0w6AK4paBc3BhcmUK4paBY2l2aWxlCnNwcmFjaAriloFkaXNzZQriloFnYXRlcwriloFhbm9tCuKWgdCk0LXQtNC10YDQsNGG0LjQuAriloF0aWIK4paBZsO6dGJvbAriloFXaWtpcGVkCmlhdGUKRnJvbnQK4paBY3JhdwriloFSYWsK4paB0LfQstGDCnN0cmVldAriloFBZ2VuY3kK0LLQsNC70L4K4paB0KDQsNGBCuKWgW1rZGlyCmFjasSZCuKWgXNoYXJlcwpTdG9yeQriloFyZW1hcmtzCuKWgWtleXdvcmRzCkJvYgriloF0b2UK4paBVml0dAriloFyaHMKUk9QCm9yaXMKL0AK0YHQuNC4CuKWgXRyYXZlcnNlCuKWgXJlZmVyZW5jaW5nCnByw6RzaWRlbnQKcm9uZwonKToKYXRpZXMKQVcKT3V0bGV0CuKWgcOpdm9sCmlrZXMK4paBZW52aXJvbm1lbnRhbAppY3VtCuKWgUxpZWQK4paBd2FybgriloFCdXRsZXIK4paBJSksCuKWgVplaXRzY2hyaWZ0CuKWgU1vbnRyCtCy0LDQttCwCuKWgU1lcmN1cgpqZWt0ZQptZXRlcgpkdWNhdGlvbgriloFhdHRyaWJ1dGVkCiokCuKWgXVuZgriloFWZXJ0cmFnCnppZW4K4paB0KDQvtCxCmxpY2VzCnBwbHkKYW5zZW4K4paBemVpdAriloFpbW1lbnNlCuKWgWx1dGVnbwriloFCdWxnYXIK4paBbWllbWJyb3MK4paB0J3QsNGG0LjQvtC90LDQu9GMCuKWgUFsbG93CuKWgWFuZ2zDqHMK0LTQstC4CuKWgVRveQrRgtGD0LAK4paBeWFyZAooJQppc3NlcgriloFnb2xmCuKWgVVrcmFpbgriloFob3NwCkluY2x1ZGUK4paBTGlzYQriloFjc2FsCuKWgU1pcmEKcmVjb2duCuKWgdCa0LUK4paBaGl0dGluZwrQutC+0L3QvtC80ZYK4paBVG91cm5hbWVudApMT0FECuKWgUd1YXJkaWFuCuKWgWRhaGVyCuKWgXRpbWV6b25lCuKWgXRvbWNhdAriloFzdWNjZXNzb3IK4paBVm9pZAriloFjb21lw6cK4paBY29udmVydHMKw6RjaHMKb3NleAp4ZWxsZXMKYXNlcgriloHDiXMK4paBbW91CuKWgXVuZwriloFvcmlnZW4K4paBQ3JvdwriloFFcmQK4paBc2llYmVuCmx1YQriloFCQgpSRU5UCuKWgXBpxYJrYXIK4paBbWFycXVlCuKWgUxhYm91cgp2aWRlcnMK4paBZXhlbXBsClNvdW5kCuKWgVdhc3MKYXJyaXNvbgriloHRgtC10YfQtdC90LjQtQriloFPZmljaW5hCuKWgURhdwriloFLYXVmCsOpbnQKw6lzxZEK4paBPSIK4paBa2F0CmRpY3Rpb24K4paBVm9sbAriloFoaWdod2F5CkphbWVzCnpldWdlCuKWgW1vZGVsbwpUaHJvdwriloFGb3J1bQooIkAK4paBZW5mZXIK4paB0YHQv9C10YbQuNCw0LvRjApOdW1iZXJzCuKWgUJpbmFyeQriloFNYXJ0w61uZXoK4paBU3RhdG8K4paBZmVzdGl2CuKWgWthdG9sCuKWgdCQ0LEK4paBbGltaXRhdGlvbgriloFTVFIK4paB0J7RhNC40YbQuNCw0LvRjAppcGVzCuKWgUlzbgriloFydWxlZAriloFjw60KZ2ViZXIK4paBbGF2b3JvCuKWgXBhcmVudGhlc2VzCtC+0LcK4paBw6lxdWlwZXMK4paBZWZmaWNpZW50bHkK4paBUGVyaW9kCuKWgVJlZ2FyZGluZwpsZWFmCuKWgXNpbWlsYXJpdHkK4paBZ2VzdHVyZQpkYXRhYgriloF0ZXJtaW5hdGUK4paBc2VtYW50aWNzCuKWgUFsbwriloFjaWcK4paBT3BlbkdMCuKWgWhldXRpZ2VuCnhhbWwK4paBZnJlcXVlbmNpZXMKKX0uCuKWgXRocmVhdGVuZWQK0YLQuNC6CuKWgWNhbGNpbwriloFSaWVtYW5uCnNsdWcK4paBRmluYWxlCkxSCuKWgURlcmJ5CuKWgdC+0YnQtQriloFkZXZpYXRpb24Kw6RjaGVuCuKWgUNyaXMK0L3QvtCy0L4K4paB0YHRgtC+0LvRlgriloFyZWxldgriloFzcGxlbmRpZAriloHRg9GH0ZEKZXJ2aW5nCmdhYmxlCuKWgWfDqW7DqXJhbGUKcG9tCuKWgUNoZWVycwriloFpbXByaXNvbgriloFpbmRlbnQK4paBYW5hbHl6CuKWgXJldmVydArDqXJlcgriloFwaGFzZXMKRmlyc3ROYW1lCuKWgW1pZwriloFkaXN0dXJiCuKWgW1peHR1cmUK4paBKXsKaW50dXJlCuKWgVRyaWVkCuKWgXNvb25lcgriloFwZWxzCuKWgcOpdGFibApldHJvCml0aWUK4paBcXVhcnRpZXIK4paB0LPQvtCy0L4K4paBdsOhcm9zCnVmZQpoZXRlbgrRhdC+0LwK4paBc29hcAp1dG9ycwriloFkdWNoCnN5bnRheAriloF0cmliZQriloFjaGFudGUKVHJpCuKWgU1hdGUKcXVhbGl0eQp1b2xhCj0iLgpjaGsK4paB0LLRgdGWCuKWgXByemVjaQriloFNZXRlb3IK4paBc2NhdHRlcmVkClBsdXMKdHJhZAriloFzdGFja292ZXJmbG93CuKWgXJldHJhCuKWgcOpZGl0aW9ucwriloFzYWluCmNyaWJlCmlnbm9uCnVja2VyCuKWgdC80LDQu9C+CuKWgXRlbmlyCuKWgWV4cG9ydHMK4paBYXV4aWxpCuKWgV1dCuKWgUNCUwp1bmlmb3JtCuKWgXBlcmlvZGljCmFncmFudAriloFlbXBsZQpXaWwK4paBZnJlcwriloFzdHJ1dHQK4paB0YHQstGW0YIK4paBYmV0cmUK4paB0L7QsdGK0LXQugrRgtC40YHRjwriloFiaXNoZXIKYmF1bQppc2hpCuKWgUdhemV0dGUKYmFja2dyb3VuZENvbG9yCmpsCuKWgWZpZWwK4paB0L/RgNC10LzQsAriloFwcm90YWdvbmlzdGEK4paBTXVoYW1tYWQK4paBc2ltdWxhdGUK4paBSG9vawpmZXN0CuKWgdGB0LLQvtC40YUKU2VuZGVyCuKWgWxpc3RlbmVkCtC20ZYKamVzdAprb3JkCkNob2ljZQriloFob29mZApyZWR1Y2libGUKaHBwCuKWgVd1CsWhaQriloFNYXJzZQriloFzb2lyCndlc3RlbgplbW9zCuKWgUR1YwriloFhbWVyaWsKfH17CuKWgUd1bAriloFTcHJhY2hlCuKWgW1pc21hdGNoClNjYWwKUGl4ZWwKRUYK4paBU2VwCuKWgXBvd2llY2llCnVyawriloFOYXBvbGkK4paBbmVpZ2hib3VyaG9vZArRgdGC0L7Rj9C9CuKWgXNlYXJjaGVzCnlydXMK0L/QtdGCCkhlbHAKcG9udAriloFPcmllbnQK4paBQWxmb25zbwriloFtb25pdG9yaW5nCmlhbwrDqWTDqQriloFDw6lzYXIK0YjQtdC1ClNoaWZ0CnN1aXQKY29kZWQK0L3QvtGC0L4K4paBUGFydGkK4paBbGFzY2kK4paBYXdlc29tZQp1c3RhCuKWgdCh0L7QstC1CuKWgUZsYW5kCm9vbQriloFkZXZpCmVuZ2Vsc2sKZW5kdW0K4paBUGFzY2FsCuKWgUJpbmQK4paBc2lndWllbnRlcwpKQgriloFQZXRlcnNidXJnCuKWgWluY29ycmVjdGx5CuKWgUJhc2gK4paBcGVsb3MK4paBemVzcG8KTlNVUkwK4paBcMWZZWsK4paBQ3JpbWUKbmFjaAriloF0aHJ1c3QK4paBQ3VsdHVyYQpXRgriloFTb2xvCuKWgWludmFzCuKWgWluZGl2aWR1YWxseQppYm0K4paBZXRhcGEK4paBaGFuZGVkCuKWgXdoZXJldmVyCuKWgWludGVycG9sYXRpb24K4paBbXVzw6llCuKWgUNOTgppZGlhCsWEc3R3CuKWgXByemV3CnVnaGluZwriloFhY3RvcnMK4paBT3JpZW50YWwK4paBY29udmVuaWVuY2UK4paBbWlhc3RhCmJyYWlucwriloHQvNC10YHRjwriloFpbmZhdHRpCuKWgUFsbE1vdmllCuKWgWNyaXRpcXVlCuKWgXN1Y2Nlc3NvCmFuY291dmVyCuKWgWbDoQrRitC70LPQsNGACuKWgXdpc2RvbQriloFQaG9lbml4CmhvbGUK4paBaW5mb3JtYWNpw7NuCuKWgUFpcmxpbmVzCi7Cqwptb3J0CnVzZXJJZAriloEqLw0K4paBQ29uZ28K4paBImAKY29ycgriloFwcm9ibGVtYXMK4paBYmliCuKWgXDDs8W6bmllagriloFmaWxlTmFtZQp6b3R0Cm1hY2h0CuKWgVVscmljaApDeQplbmRwb2ludAriloFzaGVlcAriloFpYm4KRmVlZAriloFzeW1wYXRoeQriloFJYgriloF0ZXJyaXRvcmlhbApyYXRpbmcK0LTQsNC80LgK4paBZHN0CtGD0Y4KYWhvCuKWgXN1ZwplbWlhCuKWgXRlZAriloFBcGkK4paBUmljYQriloFNUgrFhHNraW0K4paBVm9vcgriloFkZXZpbAriloHQpNC+CuKWgU7DpHIK4paBLi4uKQriloF2b2lzCuKWgWFiYnJlCuKWgU3DpG5uZXIKeGltbwriloFpbnRlbGxlY3R1YWwK4paBdGFsZXMKc2ltaWxhcgpuZXVtCuKWgU9yaWcK4paBcG9zdGFsCuKWgWh2b3IK4paBaWRlbnRpZmljYXRpb24K4paB0J7QtAp1ZXN0bwriloEuLi8K4paBYmlyCuKWgdCb0L7QvQriloFlc2VtcGlvCuKWgUVpbmcKRXhwYW5kCuKWgVBSSU1BUlkK4paBSmluCuKWgXbFoWFrCm91cnNlcwriloFCZXR0eQriloFXTQriloFmbGFzawpobGVuCuKWgUFkZWwKbGFyYXZlbAriloHQtNC10YIK0YHRjNC60L7RjgriloFNdW5kbwppY3puCmlmacOpCuKWgdCc0L7RgAriloHQtNGA0LXQsgpEYXRlRm9ybWF0CtGB0YzQutC40LwK4paBZGF0ZWQK0LrQvtC70LgK4paB0YDQtdC30YPQu9GM0YLQsNGC0LUKXCkuCuKWgWRlbGF5ZWQKc291bmQK4paB0JzQsNC6CuKWgSIuLi4K4paBYmlubmVuCuKWgdGE0LDQutGD0LvRjAriloFwb2x5Z29uCuKWgWVnZ3MKQXRJbmRleFBhdGgK0LzQtdC90YLQsNC70YwK4paBaW5jcmVkCmNodW5rCndlYmRyaXZlcgriloHRgdCy0L7QsdC+CuKWgW1pxJlkenkKUmVjZWl2ZWQK4paBTW9uZGUK4paBSlF1ZXJ5CkJ1dHQK4paBUERPCuKWgWZvcmVjCuKWgWRpc2NpcGxpbmUKY2hldgrQvdCw0YIK4paBcmVkaXMK4paBaHVudGluZwriloFhbGsK4paBcHJvb2ZzClBSSQriloFjaGlwCsOpc2llCuKWgUhPCuKWgXJ1Zwp6b3MK4paBc29ydGUK4paBemVpZ3QK4paBUGh5c2ljcwpsZWd0ZQriloFwcm9wb3J0aW9uYWwK4paBdG9vbGJhcgp2ZW1lbnQKbm90aW4K4paBcHJ2bsOtCmJsYWgK4paBcHLDqXNlbmNlCuKWgWxsb2MK4paBbMOtZGVyCuKWgUFjY2VwdAriloFBbHdheXMK4paBInsK4paBZGl2ZXJzaQppa29yClBlcmlvZArQttGR0L0K4paBQWxsaWFuY2UK4paBcmVsYXkKQnJvCmrDtm4K4paBQmF1ZAriloFCaWFuCicpWwrRh9C40LIK4paBUG9zcwriloFNaXRnbGllZGVyCuKWgW5ldgpEYW5pZWwK4paBdGVuZHMK4paBY29tcGFnbmllCuKWgWxpdnJlcwpsdWIK4paBCmUKdAphCmkKbgpvCnIKcwpsCmQKaApjCnUKbQpwCmcKZgouCmIKeQosCncKdgprCjEKKQooCi0KMAo6CkkKUwrQvgpcCjIKQwoiCkEK0LAKVAp7Cn0KLwonCngK0LgKXwrQtQp6CtC9Cj0KRQpNClAKagrRgApECjkKKgpMCtGCCkIKUgrRgQo7CiMKJApxCk4KMwrQsgpGCtC7CjUKNAo4CsOpCk8KSArQugpgCjYKRwo3ClcK0LQKPgrQvArRgwpbCl0KVgrQvwpVCjwKSgpLCtCzCtGPCtGWCtC3Cj8KKwrQsQrDoQrQuQrRjApZCsOzCtGHCtGLCsOtClEKXgrDpAomCtGFCnwKWAohCkAKw7wK4oCTCiUK0YYKw7YK0LYKWgrDqArDoArRiArigJQKDQrRjgrFggrCuwrQoQrCqwrigJkK0YQK0JIK0J8K0JoK4oCcCtGYCtCcCtCQCsOnCsOlCtGJCn4KxJkK4oCdCsSFCsSNCtCgCtGXCtCdCsO6CtCRCtCUCsOjCsOfCsSDCsSbCsOqCtCeCsWhCtCTCtCiCsW8CtGRCsW+CsWbCsOxCsWZCsWRCuKAngrQmwrRjQrDvQrQowrQmArRigrRlArDogrDrgrDsgrQlwrQpArDiQrEhwrCtwrImQrFhArImwrQpQrDtArQlQrDuQrFrwrCsArQqArRmQrQpwrDuArDpgrRmgrigIkKwqAK0K0Kw6sKw7UKw68K4oCYCuKAoArCsgrFsQrQhgrilIAK0KYK0ZsKw5YKw7sK0K8Kw6wK4oCmCsWNCtCWCtCuCsOBCsyBCsOcCsK6CsWTCsSBCsSMCsW6Cs6xCuKUggrYpwrDgArilZAKxaAK0ZIK4oSWCuKAigrigKIK4oiSCuKGkgrDlwrOvwrigoIKw4QKw44KxZoKxJEKw4UKxLEK4oCOCsWrCs69CtCZCsKqCs65Cs+ECtmECuKAsgrvv70Kw4gKzrsK77u/CsW9Cs+CCsWICs+BCuKCgQrQhArEqwrOtQrCpwrFgQrQiArCowrYsQrFuwrCvwrZhQrigLMKw5oK2YYK2YoKz4MKwrQK4oCLCs68CsKzCsWfCs+ACtmICtivCs66CuKCgwrDjQrLiArYqArDkwrDgwrCoQrigqwKxaUKzrcKyZkK44O8CtCpCs6yCuKUnArDsArSkQrCrQrPhQrCuQrigoQK2KoK15kKzrMK2LMK44GuCsSfCs60CtuMCuODswrZhwrXlQrPiQrOrwrilogKzrgK55qECsKpCsOCCuKGkQrvvIwKy5AKzqwK4oCVCti5CsOHCuKCgArCsQrDmArEjwrFmArFkgrCvQrilJQKz4wK4oCaCsSTCuKChQrDhgrImArJmwrXlArXqArPhgrigoYKxJcK2K0K2YEK2KkKxLAK4oCCCuKGkArilZEKyZQK4omkCtecCsSQCtWhCsWMCteQCuC1jQrjgrkK2LQK5aSnCuODqwrRnwrjgqQK4p+pCuKArwrCtQriiIgK2YIK4p+oCuOAggrSkArgpL4K2KwKyr8K4YOQCs6tCs+HCuS4rQrXkQrhg5gK4oKICuODiArOrgrjg6kK0I8K2YMK4oKHCteeCteqCuS4gArOoArguLIK44O7Cs6jCs6RCs6UCtepCtiyCuCljQrguKMK44GECsq7CtCKCuKCiQrKvArjg6oK4oCQCuOCrwriiJ4K4oGECs+NCsWeCuOCogrOlQrJqgrkuroKzpoK4oiACuCksArjg4MK4pa6CuWtkArCrArYrgril4QK2Y4K16IK5pelCuOBlwrhuKUK16AK5bGxCuOAgQrQhwrjgosK5paHCsORCuODiQrXkwrVtgrQggrOkwrDvgrCkgrCrgraqQrCkwrimq0K5pysCuKElQrguJkK0Z0KzLYK4LitCtGeCuOBqwrmlbAK4YOUCuWbvQrOqQrjgIAKx44K2LUKwpQKzpwK4oCDCuOBqArigaAK44GfCti3CtaACuOCvwrDvwrjgaoK2KMK44K3CuaWsArvuZUKyoMKxL4K44OtCuKBtArgr40K4oeSCsWjCu+8mgrImgrgtJUK4omlCuC0vwrjg54K44KTCuG5owrjgrgK5pivCuydtArii4UK55SwCuOCkgrpgZMK4LiHCsKoCtmACuC5gArmnZEKw4oK150K4oC6CueUqArPjgrlpKkK77yJCuC8iwrplYcK44GLCuS4jQrOpArlraYKxrAK5pyJCtW4Cu+8iArjg6wK2q8K4oCPCuODlQrgpKgK4LiBCsmRCuOBmQrXlwrkuIoK4oCMCuKIpwrhua0K16cKzr4KwqQK4KS/CuS8mgrgtKgK44KrCsWzCuOBvgrgtYEKzaEK4KSVCuCmvgrlsI8K158K6KGMCuOBrwrKgQrFkArDngrjgooK44KtCs6bCuGDoArkuIkK44GMCuOCswrOtgrluIIK546LCuKEnQrFuQrjgYYK44GmCuWMugrgtL4KwoIK5bm0CtekCtWrCsW/CuKAuQrgpKQKxY8K4oCRCsyDCsSGCtmJCuOAjArjgI0K4YOhCsSACuCkrgrnlJ8K4omgCtCJCuCkuArihpQKzp8K4LinCuGDmgrmiJAK5a6aCuC4pQrCtgrXmwrjgacK1rwK4LihCuS4qgrlkowK16EK5ZyoCs6SCuC4tArOmQrigbUK4LixCsmhCuKUgQrjgokK44KqCsK8CtWlCuODkArWuArFiwrFrQrjgrAK4oG2CtCsCuKBsArmlrkK4LiaCsKXCumrmArhu4cKzp0K0aMK44KjCuWcsArmnIgKw5QK4oSiCuOCpgrjgY0K5YWsCuG6oQrhg50Kyb4K4LmICuWHugrms5UKzpgK4LiqCuWQjQrguKIK4LSkCs6mCuKGkwrjgowK15IK0IEKxqEK5LiLCtOZCs+ICuKUvArjg6MK4oiaCsKlCuekvgrhuYcK44GVCtmQCuOBjwrgpYcK0KsK4byQCuODhgrkuLoK5LmhCuW3nQrjg4oK5LmLCuWtlwrjg6AK4KWACua1twrjg5YK4omICu+8gQrZvgrCrwrhvIAKwoMK44GTCtawCuadsQrmmI4K4b22CuaXtgrguJcKyagK44OHCu+4jwrKigrjgqgK5Y2XCuilvwrgpLIK44OhCuODlwrlubMK5byPCuG/lgrSmwrgpLUK2LoKw5IK5a62CsqSCuOCtQriiaEK44OACuC4lQriiIMK4oK5CuCkqgrnrKwK4LSwCti2CuKWhArln44K44OfCsmQCsKmCue+jgrku7YK4YOcCsOQCta3CuODiwrpg6gKxYYKx5AK15gK4KSvCuOBggrCvgrhuqMK44GhCuODpQrDtwrlpbMK56WeCuKZpgrCogrku6UK4LmJCuCmsArlpKoK4KeNCuODgQrVtQrliY0K6YeRCtaCCumHjgrljJcK4LirCuKAsArjgaMK5YqgCuWOnwrKsgrnva4K5a6JCuOCrArmiJEK4bikCuC0rwrkuqwK4paACuGDmwrhg5UKyr4K4oioCta0CuWPrwrlj5YK5Y6/CuS6jArilpIK55CGCuiHqgrkv6EK5LujCuC4tQrXpgrhgLoK4KSmCuKBuArMrwrjgYoK6KaBCuG/pgrgrpUK4buFCuClgQrGkgrKsArljJYK4pyTCuC0qgrsnZgK64ukCuacqArZjwrMgArLjArgpLkK44ORCuawtArhur8K4LiUCuOCugrigbkK5bO2CuKAjQrjgoIK5q2jCuKWoArYogrguJ4K5YaFCsOMCseUCuKUrArkvZwK5ZCICuG9uArjgb8K4pa8CuG/tgriipkK772eCuG7iwrZkgrlm54K5LqGCuaJgArkuosK6KGoCuC4swrliIYK4oG3CtKvCsKACuWFpQrlhagK2KUK6YeMCs6nCuCkggrjg48K4LiECuKBuwrjg6IK6YOOCuaNrgril48K5beeCuKIqQrogIUK6YCaCumDvQrihKQK4pmtCuKVjArjgaQK4biNCuaxnwrXlgrDnQrTqQrguYwK5YiwCuCuvwrKggrlr7kK7IqkCuS9vwrgpr8K44KICuG8iArDjwriiJgK7IKsCuCmqArkuJYKyZUK1a8K4YOjCuC0nwrhg5EK4KWLCuC0tQrmnpwK5Y2BCuC4uArol6QK5p2lCumdogrjgZEKxJUK44OTCui/mQrsp4AK4LSCCuihlwrnn7MK6IO9CuepugrVvwrYpgrmraYKyrkKz5UK5ZCOCuC4sArlhYMKypQK66asCuq4sArmsrMK55S6CuiKsQrhvZAK57G7CuKWkQrniakKzpcKwrgK4K+BCuGDlwrYqwrgtYYK4pWgCuKKhgrjgIsK44OECueJiArliqgK5aaCCuecnwrJsgrlj7cK2LAK7KCVCuaelwrmm7gK5rCRCuWPowrZkQrnpLoK4LSuCuyVhArlm74K4oiqCuaIpgrmnY4K4LSyCuOAigrlhYkK55m9CuW/gwrgrqQK4KScCuiuvgrhvbcK6LevCuCklwriiKUK7ZWcCuacgArQiwrmiYsK1b0K77yfCuWeiwrhuqcK44K7CuW7ugrjgqcK5Li7CuyLnArrjIAK4b+GCuKAoQrpm4YK4YOTCuebrgrOoQrjgqEK5bqmCumVtwrmmJ8K44OOCuG7mQrqsIAK5LqUCtqGCuuhnArjg6cK6YeNCuS6jgrlj5EK5Y+yCti4CuC4igrjgYgK5ZyLCsStCuCuqgrsnbgK5L2gCumnhQrigJIK4pmlCuWkmgrEpwrSmgrhu5MK5aOrCuWbmwrilLQK4K6uCuWPuArgp4cK4b2wCuKIggrilawK5qyhCsS9CuKftgrnq4sK54K5CumfswrioIAK5ZmoCu2VmArkupUK5a2YCta5CuW9kwrDiwrimIUK5a+6CuaApwrkuZ8K44KBCuOBoArkvY0K4LSZCtuBCuWAvArlj6QK4YOSCuCmrArpmaIK4LWHCuKWtgrgrrAK55WMCuiqngrgtLgK7IiYCseSCuaEmwrinJQK5pmCCuG7jQrgtLEK1bQK44KxCuS4nArlkIwK7KO8CuS/nQrDlQrhu5EK4bywCumdkgrjgrQK5L2TCua4hQrnm7gK4LiICtihCuaDhQrwnZWcCuCmlQrhuKsK4budCuWwhgrml48K64+ZCs6lCuKUjArjg5wK5a6uCuOAjwrgpq4K44COCsS8CuCktgrguJsK1LEK4KSsCuyekArmlL8K4K6+CumXtArvrIEK5p2+CuG5gwrlp4sK5oGvCuWwkQrmlZkK6I63CuWIlwrlvIAK4YOiCuODrwrhg5kK56eRCuaYpQrmsrsK5ZCJCuC9pgrguKgKyZIK5Y+wCuODjQrhgLgKxKkK5belCuG9sQrnn6UK5YWrCuWgtArnlLsK55m+CuKYhgroqJgK5b6XCuOCvQrmsI8K4YCsCuyXkArgprIK4bmbCuWFswrEoQrhvbMK4oiRCuODmQrmoIcK64uICuG9tArWtQrlpJYK4pmgCuOCjwrplpMK4LigCuagoQrliLYK4LmBCuWKmwrploAK5aW9CtKTCsOZCuKEkwrWtgrripQK4pSQCuKIlwrmjIcK6ImyCui/lArppqwK6K+3CuKJqwrpoqgK4b25CuaOpQrshJwK4oazCuOBmwrlv5cKzLIK6a2UCtKjCuabtArnqIsK6rmACumDoQrgvbwKxakK4LSaCuWIqQrnnIwK5ZGoCuOBnQrjgoQK6LC3CummmQrima8K44GYCtiMCuacnwriiIUK4pSYCuWInQrnpo8K54mHCuOCtgrli5UK5Y+CCuyEsQrGjwrilaYK7Ja0CuGDrgrnvqkK4KSaCuixoQrlip8K4pmCCuuPhArqs6AK6L+HCtW+CueahwrnibkK4bqtCumVvwroi7EK4bqlCuC0owrQqgrgprgK5YW2CuCmpArmtYEK6ZmkCuydvArgp4EK4Z+SCuawuArnm7QK7IOBCuWNgwrhuq8K6aSoCsWkCuacnQrgrp8KyaMK5Y2VCsqACuagvArlvrcK7KCECuKYugrjg5QK5q2MCui/mwrpmZAK5aSrCu2KuAriiqIK5ZySCumHjwrlnJ8K5pS+CueggQrnrYkK57O7CuKIvAroj68K4oa1CuyGjArluLgK5ZCmCuimiwrmupAK14EK5a6eCuWNmgrrnbwK7JuQCuuztAriipUK6KejCuOAnArnlLcK4KamCuODnQrjgo0K64KYCuC9ggrnhKEKw5sKzKUK0rEK5p+lCsyjCuKVlwrilakK5p2hCuCmrwrhvYEK5b6MCuS7lgrnvZEK4K6yCuKJgwrtmZQK25UK6Zi/CuGAsQrmiLcK4oirCuq1rArgvaIK4YCZCuKWuArVrAril4sK5ZG9CuWwsQrpvo0K5ZCbCuWkjwrCgQroqIAK5YWICuKenArhg6gK4YOrCuCovgrgrrUK44GpCuODkgrguYQK4K6pCuOBsArjgq4K1aMK4byECuODpArlhbgK5bqcCsyECuyLoArnu4QK5pS5CuG9sgrljY4K5LiOCuiwgwrilZ0K44O0CuGDpQrnlLEK5L+uCuWtuArimaMK5raICuespgrKjArrtoAK4bubCuKAvgrilrIK5b2VCuC0swrsl7AK7J2ECuOBsgrsmIEK4pSkCuW3sgrpmb0K4YCECuq1rQrlrrkK5pyqCuWulwrhtIcK44GzCuyepQrpvpkK4LeKCuaPkArEnQrlha0K5b2iCuygnArVgArkvIoKz7UK4LiCCsWwCuOCgwrngasK4bmiCuS9kAriiqUKzKoK4bupCuKWoQrnu5MK5LmdCumbhArVqQrhnrYK6ICMCuC9lgrsmrAK5bygCuCknwrgpLcK5ZCRCuG/pQrpgIkK6rO1CuOCsgrKkArku4EK5aCCCteaCuGArwrhvJQK4LSFCuG7gQrgvZEK7ISgCuyYpArkuYUKwpwK5LmJCuCkhQrilZQK5pegCuKAqArsnYAKyrcK6YKjCue3mgrliqEK5Z+6CuWxngrphY0K66+4Cui7jQrguYIK5rSlCuWujArnoJQK5rOoCuWksQrlupQK4YCACuKVmgrlj4sK56ugCs6oCuaxggrgpKMK6rK9CuKArArgpK0K5LusCuaooQrpnIAK4K6aCumbuwrgpqoK1aQK44G4CuatpArlpJwK5oiWCuapiwrmoLkKxKoK546JCuC4uQrhuYUK5LqkCuWTgQroia8K4L2ECuOCqQrliJkK6ZaLCs6WCuusuArooqsK7KGwCuagqgrorrAK5pyDCue7jwrgpYIK44KHCui9rArltI4K66eICuKMmArmr5QK6YCgCtyQCuC4twrmsqEK546wCuS4gwrOhgrllYYK4K+ICuacugrpmLMKxIkK6KeSCuermQrVogrtlbQK5Y+KCuCkpwrooZMK6K6kCsKRCuWImwrnt6gK1bIK4bipCuS8nQrlsqEK4KShCuODmwrmuK8K5Lu7CueZuwrgvbIK4LmHCuW4gwrnqbYK5bidCuyXrArsgrAK4YCUCuKXpgrlr4YK5Y+YCuW6jwrimYAK4oijCuiuoQrmm7IKxIIK4b27CsqLCuS8oArjgJEK5YyFCuaEjwrljrsK5rKZCuK4rgrjgJAK5YaZCui2hQrgrq8K5LuKCuKUiArmo64K4LeSCuKKlwrruYQK1bAK4bioCserCum7hAriiJkK65OcCvCfjI0K5pmvCua5lgrWhArhgK0K4oG/CsyCCuODmgrkvZUK5a6HCuW8tQror60K6ICBCuS+iwrhuawK6YmECuWFiwrimIkKwpkKybkK4byxCuK0sArnhLYK66W8CsenCuWgsQrmnI0KxI4K5oOzCuKAlgrjg6YK5a6fCui9vQrsmpQK4oSaCuazogrpqawK54q2Cue6vwrsnKAK5rSLCuS4hwrsp4QK4KacCua3uwrnkIMK5qmfCuaUrwrmmL4K5ouJCuG9kQrpgIEK6ZqKCuC4mArlpIQK5birCuKKggrlg48K4Ka8Cum7kgrWgQrCnQrhu6cK5Y+qCui1twrmrrUK4YCQCuWNgArpgbgK7LKcCualrQrnrpcK5bm/CuGemgrop4YK56eLCuWboArrhYQK25IK6L6TCsyxCtWECuKIhgrlurcK7IS4CuaAnQrmrbsK6IGWCuuvvArvvI0K5aS0CuC1vAriiIkK6LuKCuKUgwrilocK5oyJCuKNtQrlpKIK5rGJCuS7jgrgp4AK6aKYCsuGCuG8oQrlsZUK55yBCuC9tArokYkK7Zi4CuCosArntKAK6ZaiCuq3uArvvJsK4LaxCumhtQrlhbEK5a6/CuaAgQrgvZMK5oqACuS5kArmjqcK56e7CuW9sQrhu6UK44KGCuOBlArgs40K566hCuC1vgrilaMK5oi4CuKHlArlh70K4bqTCuWwvgrlnLoK5LuLCu+/vArogrIK4La7CuaziQrgtb0K6K+0CuaNogrlv4UK57SACuC9mArgvboK4bujCuC1uwrlrp0K5rCXCumXqArku6QK5bemCua8ogroi6UK5bGLCuWxgArmiZMK55m6CumXrgrmgYsK5YW1CuWIpQrgqr4K1Y0K36wK4KaXCuW5tgrgpJYK4b21CuiKggrKkQrXpQrhuKoK4oSCCuW8lQrnu58K5pm6CsypCuCliArnlLUK7ZiECuKchQrotaQK5patCuOBrQrnp7AK4Ka2Cui6qwrpppYK5LuYCuKFkwrgqLgK6YCjCuGDlgrlrpgK5oyBCuWliArlvqEK6KaqCuq1sArlupMK56eACuWdgArlrogK5rS7CuC9owrjgbUK6JePCuGenwrnq7kK6I2JCue1kArgt48K5piMCuaouQrgrrMK66y0CuCmuQrjgrwKzIgK1bcK5YudCui2swrhgJsK7JyECsSvCuG8uAroiKoK6ZmzCuS4mgrlr4wK6ZuqCuCkhgrlho0K7JWICum7mArrsJUK7JqpCuKcvwrmpb0K5rKiCue+hQrElgrKjgrlv6AK6ZSZCuuLqArrqbQKxLcK5qGlCumbsgror6UK4bmvCuWyqQrrgqgK4bu5CuS4kwrliIcK5bqXCuacsQrXowrjgZoK5bm4CuavjQrJqwrjgIUK4oi3CuS4sgrlh7sK4byYCuiorQriiqQK4oKXCue2kwrqsJUK4YCVCuClpArRkArhvrYK4p6WCuW6pwrslKgK44G2CsWiCuS6kQrlkYoK5aSJCuivlQrpmoYK6rCcCtW6CuWIpArliokKy5wKy6AK57yWCuC4kwrhu68K6L6+CsSaCtydCuGAvArhuLcK5Y+zCuuTpArFnQrTjwrgsY0K4LSOCuCusQrlpI0K55yLCuipsQrlnYIK5bCUCuihmwrVpgrssKgK5Li4CuagtwrprLwK4KS8Cu2VmQrllpwK5pavCumKgArrp4wKzp4K4YOqCue+pArov5EK5aGUCs+KCuCuqArjgoAK56GuCue0ogriiIcK6Z2eCuacmwrina8K5biMCuG7swrnlLIK6LaKCumzpQrpursK6ZuFCuaLswrhnoAK5rqqCua1iwror50K5rGgCuiPnArpo58K7YSwCuCovwrmuKEK6YCfCtq+CuCysArpmYgK5YGlCuCniwrgtpoK4b26CuWGmwrluoQK57qiCsSmCuirlgrFuArOiArhu7EK5a2dCumgrQrpo5sKy5oK4paTCtmLCuKArQrkuYgK6YGUCtGrCuW3tArmtJ4K6LK0CumhuQrgtKYKybUKzI0K0qEK56eNCui/kArsi50K4L6xCuG4swrlvaYK4qWkCuS5pgrmnoQK57GzCui/ngrmk40K6KOFCuqzvArjgZAK5Y+NCsyMCuS7rgrlkZgK5pitCuC0tgrlhbQK5a6iCuWIoArgtrgK4LeACuGDngrEiwrgtLcK4YCeCuG1iQrlsYUK7YOACvCdk50K4KSlCuePvgrLhwrsooUK5YqpCuWUkArngKwK4Z6TCuW+rgrvvJEKxKAK44G7CuiIngrrgrQK7KSRCsSSCuWvvArmlYgK67CpCuG4jwrmt7EK5qKFCuaWmQrsm5QK5q+PCua0sgrtmowK6Iy2Cui0pQrgtJ4K4buDCuODqArkupsK5Y+MCuWYiQrrqqgK67CUCuC4qQrpgLIK7J2MCuC4jQrkuIEK5pWFCuioiArpgaAK6rWQCuyerArlgJkK5oi/CuuqhQrkuKQK4YOkCuaJjQrtlakK5q2iCueVqgrJrwrlpYcK5oCqCuiBlArsl60K5rOwCuuwsQrhvYAK44GSCuOBuQrovrkK6L+YCum7gwrsmZUK5pS2CuW8mArnu5k=",llama_merges_binary="",llamaTokenizer=new LlamaTokenizer;"undefined"!=typeof window&&(window.llamaTokenizer=llamaTokenizer);var MoonshineSettings={FRAME_SIZE:250,LOOKBACK_FRAMES:5,MAX_SPEECH_SECS:5,MAX_RECORD_MS:6e4,BASE_ASSET_PATH:"/dist/"},MoonshineLifecycle,t;function argMax(t){return[].map.call(t,(function(t,r){return[t,r]})).reduce((function(t,r){return r[0]>t[0]?r:t}))[1]}t=MoonshineLifecycle||(MoonshineLifecycle={}),t.idle="idle",t.loading="loading",t.transcribing="transcribing";var MoonshineModel=function(){function t(t){this.modelURL=MoonshineSettings.BASE_ASSET_PATH+t,z.wasm.wasmPaths=MoonshineSettings.BASE_ASSET_PATH,this.model={preprocess:void 0,encode:void 0,uncached_decode:void 0,cached_decode:void 0}}return t.prototype.loadModel=function(){return __awaiter(this,void 0,void 0,(function(){var t,r,e,n,d;return __generator(this,(function(o){switch(o.label){case 0:return t={executionProviders:["wasm","cpu"]},r=this.model,[4,Yd.create(this.modelURL+"/preprocess_quantized_weights.onnx",t)];case 1:return r.preprocess=o.sent(),e=this.model,[4,Yd.create(this.modelURL+"/encode_quantized_weights.onnx",t)];case 2:return e.encode=o.sent(),n=this.model,[4,Yd.create(this.modelURL+"/uncached_decode_quantized_weights.onnx",t)];case 3:return n.uncached_decode=o.sent(),d=this.model,[4,Yd.create(this.modelURL+"/cached_decode_quantized_weights.onnx",t)];case 4:return d.cached_decode=o.sent(),[2]}}))}))},t.prototype.generate=function(t){return __awaiter(this,void 0,void 0,(function(){var r,e,n,d,o,a,l,i,A,B,s,g,p,C;return __generator(this,(function(u){switch(u.label){case 0:return this.model.preprocess&&this.model.encode&&this.model.uncached_decode&&this.model.cached_decode?(r=Math.trunc(t.length/16e3*6),[4,this.model.preprocess.run({args_0:new yt("float32",t,[1,t.length])})]):[3,8];case 1:return e=u.sent(),[4,this.model.encode.run({args_0:new yt("float32",e.sequential.data,e.sequential.dims),args_1:new yt("int32",[e.sequential.dims[1]],[1])})];case 2:for(a in n=u.sent(),d=1,o="",n)if(a.startsWith("layer_norm")){o=a;break}return[4,this.model.uncached_decode.run({args_0:new yt("int32",[1],[1,1]),args_1:new yt("float32",n[o].data,n[o].dims),args_2:new yt("int32",[d],[1])})];case 3:l=u.sent(),i=[1],A=l,B=function(){var t,r;return __generator(this,(function(e){switch(e.label){case 0:return g=A.reversible_embedding.data,2===(t=argMax(g))?[2,"break"]:(i=i.concat([t]),d+=1,r={args_0:new yt("int32",[t],[1,1]),args_1:new yt("float32",n[o].data,n[o].dims),args_2:new yt("int32",[d],[1])},p=3,Object.keys(A).forEach((function(t){t.startsWith("reversible")||(r["args_"+p]=A[t],p+=1)})),[4,s.model.cached_decode.run(r)]);case 1:return A=e.sent(),[2]}}))},s=this,C=0,u.label=4;case 4:return C<r?[5,B()]:[3,7];case 5:if("break"===u.sent())return[3,7];u.label=6;case 6:return C++,[3,4];case 7:return[2,llamaTokenizer.decode(i)];case 8:console.warn("MoonshineModel.generate(): Tried to call generate before the model was loaded."),u.label=9;case 9:return[2]}}))}))},t}(),defaultTranscriberCallbacks={onModelLoadStarted:function(){console.log("MoonshineTranscriber.onModelLoadStarted()")},onTranscribeStarted:function(){console.log("MoonshineTranscriber.onTranscribeStarted()")},onTranscribeStopped:function(){console.log("MoonshineTranscriber.onTranscribeStopped()")},onTranscriptionUpdated:function(t){console.log("MoonshineTranscriber.onTranscriptionUpdated("+t+")")}},MoonshineTranscriber=function(){function t(r,e){void 0===r&&(r={}),this.callbacks=__assign(__assign({},defaultTranscriberCallbacks),r),t.modelURL=e}return t.prototype.start=function(){return __awaiter(this,void 0,void 0,(function(){var r,e,n,d,o,a=this;return __generator(this,(function(l){switch(l.label){case 0:return t.mediaRecorder?[3,2]:[4,navigator.mediaDevices.getUserMedia({audio:!0})];case 1:r=l.sent(),t.mediaRecorder=new MediaRecorder(r),l.label=2;case 2:return t.audioContext||(t.audioContext=new AudioContext({sampleRate:16e3})),t.model?[3,4]:(this.callbacks.onModelLoadStarted(),t.model=new MoonshineModel(t.modelURL),[4,t.model.loadModel()]);case 3:l.sent(),l.label=4;case 4:return e=[],n=!1,d="",t.mediaRecorder.ondataavailable=function(r){Math.floor(e.length*MoonshineSettings.FRAME_SIZE/1e3)>=MoonshineSettings.MAX_SPEECH_SECS&&(n=!0),e.push(r.data),new Blob(e,{type:"audio/wav"}).arrayBuffer().then((function(r){var o;null===(o=t.audioContext)||void 0===o||o.decodeAudioData(r).then((function(r){var o,l=new Float32Array(r.length);l.length>48e4&&(l=l.subarray(0,48e4)),r.copyFromChannel(l,0),null===(o=t.model)||void 0===o||o.generate(l).then((function(t){if(t)if(n){d=d+" "+t,a.callbacks.onTranscriptionUpdated(d);var r=e[0];(e=[]).push(r),n=!1}else a.callbacks.onTranscriptionUpdated(d+" "+t)}))})).catch((function(){}))}))},t.mediaRecorder.start(MoonshineSettings.FRAME_SIZE),this.callbacks.onTranscribeStarted(),o=setTimeout((function(){a.stop()}),MoonshineSettings.MAX_RECORD_MS),t.mediaRecorder.onstop=function(){clearTimeout(o),a.callbacks.onTranscribeStopped()},[2]}}))}))},t.prototype.stop=function(){t.mediaRecorder&&t.mediaRecorder.stop()},t.mediaRecorder=void 0,t.model=void 0,t.audioContext=void 0,t}(),styles=".moonshine-container {\n    position: relative;\n    display: inline-block;\n    width: 100%;\n    overflow: hidden;\n}\n\n.moonshine-button {\n    position: absolute;\n    max-width: 32px;\n    max-height: 32px;\n    top: 0;\n    right: 0;\n    cursor: pointer;\n}\n\n@keyframes loading {\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n*[data-moonshine-loading] svg {\n    animation: loading 2s linear infinite;\n    transform-origin: 50% 50%;\n}\n\n@keyframes transcribing {\n    from {\n        transform: translateY(0);\n    }\n    25% {\n        transform: translateY(-5%);\n    }\n    50%, 100% {\n        transform: translateY(0);\n    }\n}\n\n*[data-moonshine-transcribing] .moonshine-transcribe-1 {\n    animation: transcribing 0.75s linear infinite;\n}\n\n*[data-moonshine-transcribing] .moonshine-transcribe-2 {\n    animation: transcribing 0.75s linear infinite;\n    animation-delay: 0.25s;\n}\n\n*[data-moonshine-transcribing] .moonshine-transcribe-3 {\n    animation: transcribing 0.75s linear infinite;\n    animation-delay: 0.5s;\n}",IdleIcon='<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\tviewBox="0 0 1200 1200" width="100%" height="100%" xml:space="preserve">\n\t<path d="M864.2,587.3c0-15.4-12.5-27.8-27.8-27.8s-27.8,12.5-27.8,27.8c0,114.9-93.5,208.5-208.5,208.5h-0.5\n\t\tc-114.9,0-208.5-93.6-208.5-208.5c0-15.4-12.5-27.8-27.8-27.8s-27.8,12.5-27.8,27.8c0,136.3,103.8,248.9,236.4,262.8v78.2h-81.6\n\t\tc-15.4,0-27.8,12.5-27.8,27.8s12.5,27.8,27.8,27.8h218.9c15.4,0,27.8-12.5,27.8-27.8s-12.5-27.8-27.8-27.8h-81.6v-78.2\n\t\tc132.7-13.9,236.4-126.5,236.4-262.8L864.2,587.3z"/>\n\t<path d="M600,744c86.4,0,156.7-70.3,156.7-156.7V372.7c0-86.4-70.3-156.7-156.7-156.7s-156.7,70.3-156.7,156.7v214.5\n\t\tC443.3,673.7,513.6,744,600,744z M498.9,372.7c0-55.7,45.4-101.1,101.1-101.1S701.1,317,701.1,372.7v214.6\n\t\tc0,55.8-45.4,101.1-101.1,101.1s-101.1-45.4-101.1-101.1V372.7z"/>\n</svg>',LoadingIcon='<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\tviewBox="0 0 1200 1200" width="100%" height="100%" xml:space="preserve">\n\t<path d="M627.8,861.8c0.1-15.3-12.4-27.8-27.8-27.8s-27.8,12.4-27.8,27.8v85.4c0,7.6,3.1,14.7,8.2,19.7c5,5,12.1,8.2,19.7,8.2\n\t\tc15.4,0,27.8-12.4,27.8-27.8L627.8,861.8z"/>\n\t<path d="M434.5,765.4c-10.9-10.9-28.5-10.9-39.4,0l-60.4,60.4c-10.9,10.9-10.9,28.5,0,39.4c10.9,10.9,28.5,10.9,39.4,0l60.4-60.4\n\t\tC445.4,793.9,445.4,776.3,434.5,765.4z"/>\n\t<path d="M338.2,572.2h-85.4c-15.4,0-27.8,12.4-27.8,27.8c0,7.6,3.1,14.7,8.2,19.7c5,5,12.1,8.2,19.7,8.2h85.4\n\t\tc15.4,0,27.8-12.4,27.8-27.8C365.9,584.7,353.6,572.2,338.2,572.2L338.2,572.2z"/>\n\t<path d="M434.5,434.7c10.9-10.9,10.9-28.5,0-39.4l-60.4-60.4c-10.9-10.9-28.5-10.9-39.4,0c-10.9,10.9-10.9,28.5,0,39.4l60.4,60.4\n\t\tC406,445.5,423.6,445.5,434.5,434.7z"/>\n\t<path d="M572,338.4c0,7.6,3.1,14.7,8.2,19.7c5,5,12.1,8.2,19.7,8.2c15.4,0,27.8-12.4,27.8-27.8V253c0.1-15.3-12.4-27.8-27.8-27.8\n\t\tS572,237.5,572,253L572,338.4z"/>\n\t<path d="M765.2,434.7c10.9,10.9,28.5,10.9,39.4,0l60.4-60.4c10.9-10.9,10.9-28.5,0-39.4c-10.9-10.9-28.5-10.9-39.4,0l-60.4,60.4\n\t\tC754.3,406.2,754.3,423.8,765.2,434.7z"/>\n\t<path d="M765.7,805.2l60.4,60.4c10.9,10.9,28.5,10.9,39.4,0s10.9-28.5,0-39.4l-60.4-60.4c-10.9-10.9-28.5-10.9-39.4,0\n\t\tS754.8,794.4,765.7,805.2z"/>\n\t<path d="M947.4,628.3c15.4,0,27.8-12.4,27.8-27.8c0-15.4-12.5-27.9-27.8-27.8H862c-15.4,0-27.8,12.4-27.8,27.8\n\t\tc0,7.6,3.1,14.7,8.2,19.7c5,5,12.1,8.2,19.7,8.2L947.4,628.3z"/>\n</svg>\n',TranscribingIcon='<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\tviewBox="0 0 1200 1200" width="100%" height="100%" xml:space="preserve">\n\t<path d="M725.3,954.5c-3.4,0-6.7-0.6-10.1-1.9c-11.5-4.5-18.7-15.9-17.6-28.2l10.7-132.7H310.8c-52.3,0-94.8-42.6-94.8-94.8V340.3\n\t\tc0-52.3,42.6-94.8,94.8-94.8h578.3c52.3,0,94.8,42.6,94.8,94.8v356.5c0,52.3-42.6,94.8-94.8,94.8h-24.6L747.2,943.5\n\t\tc-5.4,6.9-13.5,10.8-22.1,10.8L725.3,954.5z M310.8,301.2c-21.6,0-39.2,17.5-39.2,39.1v356.5c0,21.6,17.5,39.1,39.2,39.1h427.5\n\t\tc7.8,0,15.2,3.2,20.4,9c5.3,5.8,7.9,13.3,7.3,21.1l-5.6,69.2l68.3-88.5c5.3-6.8,13.5-10.8,22.1-10.8h38.3\n\t\tc21.6,0,39.2-17.5,39.2-39.1V340.5c0-21.6-17.5-39.1-39.2-39.1L310.8,301.2L310.8,301.2z"/>\n\t<path class="moonshine-transcribe-1" d="M472,494.4c16.9,16.9,16.9,44.3,0,61.2c-16.9,16.9-44.3,16.9-61.2,0c-16.9-16.9-16.9-44.3,0-61.2\n\t\tC427.6,477.5,455.1,477.5,472,494.4"/>\n\t<path class="moonshine-transcribe-2" d="M630.6,494.4c16.9,16.9,16.9,44.3,0,61.2c-16.9,16.9-44.3,16.9-61.2,0c-16.9-16.9-16.9-44.3,0-61.2\n\t\tC586.3,477.4,613.7,477.4,630.6,494.4"/>\n\t<path class="moonshine-transcribe-3" d="M789.2,494.3c16.9,16.9,16.9,44.3,0,61.2c-16.9,16.9-44.3,16.9-61.2,0c-16.9-16.9-16.9-44.3,0-61.2\n\t\tC744.9,477.4,772.3,477.4,789.2,494.3"/>\n</svg>\n';function getRandomID(){for(var t="",r=0;r<8;r++)t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"[Math.floor(52*Math.random())];return t}var MoonshineElementManager=function(){function t(t,r){void 0===t&&(t=""),void 0===r&&(r=styles),this.boundControlElements=[],this.defaultPostInjectionFunction=function(t,r){r.id;var e=parseInt(window.getComputedStyle(t).getPropertyValue("max-height"),10),n=r.getBoundingClientRect();n.height<e&&(t.style.height=n.height+"px",t.style.width=n.height+"px"),n.height<2*e&&n.height>e&&(t.style.top=(n.height-e)/2+"px");var d=t.parentNode;"flex"==window.getComputedStyle(d.parentNode).getPropertyValue("display")&&(d.style.display="flex"),d.style.width=n.width},this.modelURL=t,this.injectStyle(styles+r)}return t.prototype.autoInjectElements=function(t,r){var e=this;void 0===t&&(t=["textarea",'input[type="text"], input[type="search"]','div[contenteditable="true"]','span[contenteditable="true"]']),void 0===r&&(r=this.defaultPostInjectionFunction),t.forEach((function(t){document.querySelectorAll(t).forEach((function(t){if(!document.querySelector('[data-moonshine-target="#'+t.id+'"]')&&(e.wrapAndReinjectInputElement(t,r),e.boundControlElements.includes("#"+t.id))){var n=e.boundControlElements.indexOf("#"+t.id);-1!==n&&e.boundControlElements.splice(n,1)}}))}))},t.prototype.initControlElements=function(){var r=this,e=document.querySelectorAll("[data-moonshine-target]");e.forEach((function(n){var d=n.attributes["data-moonshine-target"].value;if(!r.boundControlElements.includes(d)){var o=document.querySelectorAll(d);t.initLifecycleIcons(n),o.forEach((function(d){var o=new MoonshineTranscriber({onModelLoadStarted:function(){e.forEach((function(t){t.setAttribute("disabled","")})),t.showLifecycleIcon(n,MoonshineLifecycle.loading)},onTranscribeStarted:function(){e.forEach((function(t){t!=n?t.setAttribute("disabled",""):t.removeAttribute("disabled")})),n.setAttribute("data-moonshine-active",""),t.showLifecycleIcon(n,MoonshineLifecycle.transcribing)},onTranscribeStopped:function(){n.removeAttribute("data-moonshine-active"),t.showLifecycleIcon(n,MoonshineLifecycle.idle),e.forEach((function(t){t!=n&&t.removeAttribute("disabled")}))},onTranscriptionUpdated:function(t){d.innerHTML=t,d.value=t}},r.modelURL);n.addEventListener("click",(function(){n.attributes.disabled||(n.attributes["data-moonshine-active"]?o.stop():o.start())}))})),r.boundControlElements.push(d)}}))},t.initLifecycleIcons=function(r){var e=this;Object.values(MoonshineLifecycle).forEach((function(t){if(!r.querySelector(":scope > [data-moonshine-"+t+"]")){var n=document.createElement("span");n.innerHTML=e.getLifecycleInnerHTML(MoonshineLifecycle[t]),n.setAttribute("data-moonshine-"+t,""),r.appendChild(n)}})),t.showLifecycleIcon(r,MoonshineLifecycle.idle)},t.showLifecycleIcon=function(t,r){Object.values(MoonshineLifecycle).filter((function(t){return t!=r})).forEach((function(r){t.querySelectorAll(":scope > [data-moonshine-"+r+"]").forEach((function(t){t.style.display="none"}))})),t.querySelectorAll(":scope > [data-moonshine-"+r+"]").forEach((function(t){t.style.display="inline-block"}))},t.getLifecycleInnerHTML=function(t){var r=document.querySelector("[data-moonshine-template]");if(r){var e=r.querySelector("[data-moonshine-"+t+"]");if(e)return e.innerHTML}switch(t){case MoonshineLifecycle.loading:return LoadingIcon;case MoonshineLifecycle.transcribing:return TranscribingIcon;default:case MoonshineLifecycle.idle:return IdleIcon}},t.prototype.wrapAndReinjectInputElement=function(t,r){var e,n=t.id?t.id:getRandomID(),d=document.createElement("div");d.className="moonshine-container";var o=document.createElement("div");o.className="moonshine-button",o.setAttribute("data-moonshine-target","#"+n),t.id||(t.id=n),null===(e=t.parentNode)||void 0===e||e.replaceChild(d,t),d.appendChild(t),d.appendChild(o),r(o,t)},t.prototype.injectStyle=function(t){var r=document.createElement("style");r.type="text/css",document.head.appendChild(r),r.innerHTML=t},t}();"undefined"!=typeof chrome&&("undefined"!=typeof browser?MoonshineSettings.BASE_ASSET_PATH=browser.runtime.getURL("/"):MoonshineSettings.BASE_ASSET_PATH=chrome.runtime.getURL("/")),chrome.storage.sync.get({model:"tiny",enableEverywhere:!1},(t=>{if(t.enableEverywhere||window.location.host.includes("chatgpt.com")||window.location.host.includes("claude.ai")){var r=void 0,e=void 0,n=void 0;if("chatgpt.com"===window.location.host)e="\n                .moonshine-container {\n                    position: inherit !important;\n                    display: inherit !important;\n                }\n                .moonshine-button {\n                    top: 8px !important;\n                    right: 11px !important;\n                }\n                @media (prefers-color-scheme: dark) {\n                    .moonshine-button span svg path {\n                        fill: white;\n                    }\n                }\n                @media (prefers-color-scheme: light) {\n                    .moonshine-button span svg path {\n                        fill: black;\n                    }\n                }\n                ",r=["#prompt-textarea"],n=(t,r)=>{};var d=new MoonshineElementManager("model/"+t.model,e);setInterval((()=>{d.autoInjectElements(r,n),d.initControlElements()}),1e3)}}))})();
